ARM GAS  /tmp/ccrazgw6.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 456D6572 		.ascii	"EmergencyStopTa\000"
  29      67656E63 
  29      7953746F 
  29      70546100 
  30              		.align	2
  31              	.LC12:
  32 004c 4D6F746F 		.ascii	"MotorControlTas\000"
  32      72436F6E 
  32      74726F6C 
  32      54617300 
  33              		.align	2
  34              	.LC14:
  35 005c 4C434450 		.ascii	"LCDPrintTask\000"
  35      72696E74 
  35      5461736B 
  35      00
  36              		.text
  37              	.Ltext0:
ARM GAS  /tmp/ccrazgw6.s 			page 2


  38              		.cfi_sections	.debug_frame
  39              		.section	.text.MX_GPIO_Init,"ax",%progbits
  40              		.align	1
  41              		.arch armv7e-m
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	MX_GPIO_Init:
  48              	.LFB251:
  49              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint32_t PotMin;
  40:Core/Src/main.c **** 	uint32_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
ARM GAS  /tmp/ccrazgw6.s 			page 3


  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  60:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  61:Core/Src/main.c **** 	uint32_t WristPotValue;
  62:Core/Src/main.c **** 	uint8_t  GripperValue;
  63:Core/Src/main.c **** } MiniBot_Qdata;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  66:Core/Src/main.c **** uint32_t PotRawValue[4];
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /*
  70:Core/Src/main.c ****  * MegaBot Structures
  71:Core/Src/main.c ****  */
  72:Core/Src/main.c **** typedef struct{
  73:Core/Src/main.c **** 	uint8_t  ServoNum;
  74:Core/Src/main.c **** 	uint16_t ServoMin;
  75:Core/Src/main.c **** 	uint16_t ServoMax;
  76:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  77:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** typedef struct{
  80:Core/Src/main.c **** 	uint8_t  ServoNum;
  81:Core/Src/main.c **** 	uint16_t ServoMin;
  82:Core/Src/main.c **** 	uint16_t ServoMax;
  83:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  84:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** typedef struct{
  87:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  88:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
  89:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  90:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
  91:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
  92:Core/Src/main.c **** } MegaBot_Config_t;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** enum State{
  96:Core/Src/main.c ****   Init,
  97:Core/Src/main.c ****   Ready,
  98:Core/Src/main.c ****   Running,
  99:Core/Src/main.c ****   EmergencyStop
 100:Core/Src/main.c **** };
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** volatile enum State state = Init;
 103:Core/Src/main.c **** volatile MiniBot_Qdata minibot_data;
ARM GAS  /tmp/ccrazgw6.s 			page 4


 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PTD */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 108:Core/Src/main.c **** /* USER CODE BEGIN PD */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* USER CODE END PD */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 113:Core/Src/main.c **** /* USER CODE BEGIN PM */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /* USER CODE END PM */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 118:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 119:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 122:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** UART_HandleTypeDef huart2;
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** osThreadId defaultTaskHandle;
 127:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 128:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 129:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 130:Core/Src/main.c **** osThreadId EmergencyStopTaHandle;
 131:Core/Src/main.c **** osThreadId MotorControlTasHandle;
 132:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 133:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 134:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 135:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 136:Core/Src/main.c **** osMutexId StateMutexHandle;
 137:Core/Src/main.c **** /* USER CODE BEGIN PV */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** /* USER CODE END PV */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 142:Core/Src/main.c **** void SystemClock_Config(void);
 143:Core/Src/main.c **** static void MX_GPIO_Init(void);
 144:Core/Src/main.c **** static void MX_DMA_Init(void);
 145:Core/Src/main.c **** static void MX_ADC1_Init(void);
 146:Core/Src/main.c **** static void MX_I2C1_Init(void);
 147:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 148:Core/Src/main.c **** static void MX_I2C2_Init(void);
 149:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 150:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 151:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
 152:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 153:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument);
 154:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 155:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 160:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot);
ARM GAS  /tmp/ccrazgw6.s 			page 5


 161:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot);
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** /* USER CODE END PFP */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 168:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** /* USER CODE END 0 */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c **** /**
 174:Core/Src/main.c ****   * @brief  The application entry point.
 175:Core/Src/main.c ****   * @retval int
 176:Core/Src/main.c ****   */
 177:Core/Src/main.c **** int main(void)
 178:Core/Src/main.c **** {
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE END 1 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 187:Core/Src/main.c ****   HAL_Init();
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END Init */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Configure the system clock */
 194:Core/Src/main.c ****   SystemClock_Config();
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE END SysInit */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* Initialize all configured peripherals */
 201:Core/Src/main.c ****   MX_GPIO_Init();
 202:Core/Src/main.c ****   MX_DMA_Init();
 203:Core/Src/main.c ****   MX_ADC1_Init();
 204:Core/Src/main.c ****   MX_I2C1_Init();
 205:Core/Src/main.c ****   MX_USART2_UART_Init();
 206:Core/Src/main.c ****   MX_I2C2_Init();
 207:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE END 2 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* Create the mutex(es) */
 212:Core/Src/main.c ****   /* definition and creation of StateMutex */
 213:Core/Src/main.c ****   osMutexDef(StateMutex);
 214:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 217:Core/Src/main.c ****   /* add mutexes, ... */
ARM GAS  /tmp/ccrazgw6.s 			page 6


 218:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 221:Core/Src/main.c ****   /* add semaphores, ... */
 222:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 225:Core/Src/main.c ****   /* start timers, add new ones, ... */
 226:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* Create the queue(s) */
 229:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 230:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 231:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 234:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, uint16_t);
 235:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 238:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, uint16_t);
 239:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 242:Core/Src/main.c ****   /* add queues, ... */
 243:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* Create the thread(s) */
 246:Core/Src/main.c ****   /* definition and creation of defaultTask */
 247:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 248:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 251:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityLow, 0, 128);
 252:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 255:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 128);
 256:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 259:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityNormal, 0, 128);
 260:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* definition and creation of EmergencyStopTa */
 263:Core/Src/main.c ****   osThreadDef(EmergencyStopTa, EmergencyStopTaskEntry, osPriorityHigh, 0, 128);
 264:Core/Src/main.c ****   EmergencyStopTaHandle = osThreadCreate(osThread(EmergencyStopTa), NULL);
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* definition and creation of MotorControlTas */
 267:Core/Src/main.c ****   osThreadDef(MotorControlTas, MotorControlTaskEntry, osPriorityNormal, 0, 128);
 268:Core/Src/main.c ****   MotorControlTasHandle = osThreadCreate(osThread(MotorControlTas), NULL);
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 271:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 272:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
ARM GAS  /tmp/ccrazgw6.s 			page 7


 275:Core/Src/main.c ****   /* add threads, ... */
 276:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* Start scheduler */
 279:Core/Src/main.c ****   osKernelStart();
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* Infinite loop */
 284:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 285:Core/Src/main.c ****   while (1)
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     /* USER CODE END WHILE */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c ****   /* USER CODE END 3 */
 292:Core/Src/main.c **** }
 293:Core/Src/main.c **** 
 294:Core/Src/main.c **** /**
 295:Core/Src/main.c ****   * @brief System Clock Configuration
 296:Core/Src/main.c ****   * @retval None
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c **** void SystemClock_Config(void)
 299:Core/Src/main.c **** {
 300:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 301:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 304:Core/Src/main.c ****   */
 305:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 306:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 309:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 310:Core/Src/main.c ****   */
 311:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 312:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 313:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 321:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 322:Core/Src/main.c ****   {
 323:Core/Src/main.c ****     Error_Handler();
 324:Core/Src/main.c ****   }
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 327:Core/Src/main.c ****   */
 328:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 329:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 330:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 331:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccrazgw6.s 			page 8


 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 333:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c **** }
 340:Core/Src/main.c **** 
 341:Core/Src/main.c **** /**
 342:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 343:Core/Src/main.c ****   * @param None
 344:Core/Src/main.c ****   * @retval None
 345:Core/Src/main.c ****   */
 346:Core/Src/main.c **** static void MX_ADC1_Init(void)
 347:Core/Src/main.c **** {
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 360:Core/Src/main.c ****   */
 361:Core/Src/main.c ****   hadc1.Instance = ADC1;
 362:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 363:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 364:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 365:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 366:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 367:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 368:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 369:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 370:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 371:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 372:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 373:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 374:Core/Src/main.c ****   {
 375:Core/Src/main.c ****     Error_Handler();
 376:Core/Src/main.c ****   }
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 379:Core/Src/main.c ****   */
 380:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 381:Core/Src/main.c ****   sConfig.Rank = 1;
 382:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 383:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 384:Core/Src/main.c ****   {
 385:Core/Src/main.c ****     Error_Handler();
 386:Core/Src/main.c ****   }
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
ARM GAS  /tmp/ccrazgw6.s 			page 9


 389:Core/Src/main.c ****   */
 390:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 391:Core/Src/main.c ****   sConfig.Rank = 2;
 392:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 393:Core/Src/main.c ****   {
 394:Core/Src/main.c ****     Error_Handler();
 395:Core/Src/main.c ****   }
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 398:Core/Src/main.c ****   */
 399:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 400:Core/Src/main.c ****   sConfig.Rank = 3;
 401:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****     Error_Handler();
 404:Core/Src/main.c ****   }
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 407:Core/Src/main.c ****   */
 408:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 409:Core/Src/main.c ****   sConfig.Rank = 4;
 410:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 415:Core/Src/main.c **** 
 416:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c **** }
 419:Core/Src/main.c **** 
 420:Core/Src/main.c **** /**
 421:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 422:Core/Src/main.c ****   * @param None
 423:Core/Src/main.c ****   * @retval None
 424:Core/Src/main.c ****   */
 425:Core/Src/main.c **** static void MX_I2C1_Init(void)
 426:Core/Src/main.c **** {
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 435:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 436:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 437:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 438:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 439:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 440:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 441:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 442:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 443:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 444:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 445:Core/Src/main.c ****   {
ARM GAS  /tmp/ccrazgw6.s 			page 10


 446:Core/Src/main.c ****     Error_Handler();
 447:Core/Src/main.c ****   }
 448:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** }
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** /**
 455:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 456:Core/Src/main.c ****   * @param None
 457:Core/Src/main.c ****   * @retval None
 458:Core/Src/main.c ****   */
 459:Core/Src/main.c **** static void MX_I2C2_Init(void)
 460:Core/Src/main.c **** {
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 469:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 470:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 471:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 472:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 473:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 474:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 475:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 476:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 477:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 478:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 479:Core/Src/main.c ****   {
 480:Core/Src/main.c ****     Error_Handler();
 481:Core/Src/main.c ****   }
 482:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 485:Core/Src/main.c **** 
 486:Core/Src/main.c **** }
 487:Core/Src/main.c **** 
 488:Core/Src/main.c **** /**
 489:Core/Src/main.c ****   * @brief USART2 Initialization Function
 490:Core/Src/main.c ****   * @param None
 491:Core/Src/main.c ****   * @retval None
 492:Core/Src/main.c ****   */
 493:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 494:Core/Src/main.c **** {
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 499:Core/Src/main.c **** 
 500:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
ARM GAS  /tmp/ccrazgw6.s 			page 11


 503:Core/Src/main.c ****   huart2.Instance = USART2;
 504:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 505:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 506:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 507:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 508:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 509:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 510:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 511:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 512:Core/Src/main.c ****   {
 513:Core/Src/main.c ****     Error_Handler();
 514:Core/Src/main.c ****   }
 515:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** }
 520:Core/Src/main.c **** 
 521:Core/Src/main.c **** /**
 522:Core/Src/main.c ****   * Enable DMA controller clock
 523:Core/Src/main.c ****   */
 524:Core/Src/main.c **** static void MX_DMA_Init(void)
 525:Core/Src/main.c **** {
 526:Core/Src/main.c **** 
 527:Core/Src/main.c ****   /* DMA controller clock enable */
 528:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 529:Core/Src/main.c **** 
 530:Core/Src/main.c ****   /* DMA interrupt init */
 531:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 532:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 533:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 534:Core/Src/main.c **** 
 535:Core/Src/main.c **** }
 536:Core/Src/main.c **** 
 537:Core/Src/main.c **** /**
 538:Core/Src/main.c ****   * @brief GPIO Initialization Function
 539:Core/Src/main.c ****   * @param None
 540:Core/Src/main.c ****   * @retval None
 541:Core/Src/main.c ****   */
 542:Core/Src/main.c **** static void MX_GPIO_Init(void)
 543:Core/Src/main.c **** {
  50              		.loc 1 543 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 40
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  55              		.cfi_def_cfa_offset 24
  56              		.cfi_offset 4, -24
  57              		.cfi_offset 5, -20
  58              		.cfi_offset 6, -16
  59              		.cfi_offset 7, -12
  60              		.cfi_offset 8, -8
  61              		.cfi_offset 14, -4
  62 0004 8AB0     		sub	sp, sp, #40
  63              		.cfi_def_cfa_offset 64
 544:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  64              		.loc 1 544 3 view .LVU1
ARM GAS  /tmp/ccrazgw6.s 			page 12


  65              		.loc 1 544 20 is_stmt 0 view .LVU2
  66 0006 0024     		movs	r4, #0
  67 0008 0594     		str	r4, [sp, #20]
  68 000a 0694     		str	r4, [sp, #24]
  69 000c 0794     		str	r4, [sp, #28]
  70 000e 0894     		str	r4, [sp, #32]
  71 0010 0994     		str	r4, [sp, #36]
 545:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 546:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 549:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  72              		.loc 1 549 3 is_stmt 1 view .LVU3
  73              	.LBB4:
  74              		.loc 1 549 3 view .LVU4
  75 0012 0194     		str	r4, [sp, #4]
  76              		.loc 1 549 3 view .LVU5
  77 0014 304B     		ldr	r3, .L3
  78 0016 1A6B     		ldr	r2, [r3, #48]
  79 0018 42F00402 		orr	r2, r2, #4
  80 001c 1A63     		str	r2, [r3, #48]
  81              		.loc 1 549 3 view .LVU6
  82 001e 1A6B     		ldr	r2, [r3, #48]
  83 0020 02F00402 		and	r2, r2, #4
  84 0024 0192     		str	r2, [sp, #4]
  85              		.loc 1 549 3 view .LVU7
  86 0026 019A     		ldr	r2, [sp, #4]
  87              	.LBE4:
  88              		.loc 1 549 3 view .LVU8
 550:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  89              		.loc 1 550 3 view .LVU9
  90              	.LBB5:
  91              		.loc 1 550 3 view .LVU10
  92 0028 0294     		str	r4, [sp, #8]
  93              		.loc 1 550 3 view .LVU11
  94 002a 1A6B     		ldr	r2, [r3, #48]
  95 002c 42F08002 		orr	r2, r2, #128
  96 0030 1A63     		str	r2, [r3, #48]
  97              		.loc 1 550 3 view .LVU12
  98 0032 1A6B     		ldr	r2, [r3, #48]
  99 0034 02F08002 		and	r2, r2, #128
 100 0038 0292     		str	r2, [sp, #8]
 101              		.loc 1 550 3 view .LVU13
 102 003a 029A     		ldr	r2, [sp, #8]
 103              	.LBE5:
 104              		.loc 1 550 3 view .LVU14
 551:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 105              		.loc 1 551 3 view .LVU15
 106              	.LBB6:
 107              		.loc 1 551 3 view .LVU16
 108 003c 0394     		str	r4, [sp, #12]
 109              		.loc 1 551 3 view .LVU17
 110 003e 1A6B     		ldr	r2, [r3, #48]
 111 0040 42F00102 		orr	r2, r2, #1
 112 0044 1A63     		str	r2, [r3, #48]
 113              		.loc 1 551 3 view .LVU18
 114 0046 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccrazgw6.s 			page 13


 115 0048 02F00102 		and	r2, r2, #1
 116 004c 0392     		str	r2, [sp, #12]
 117              		.loc 1 551 3 view .LVU19
 118 004e 039A     		ldr	r2, [sp, #12]
 119              	.LBE6:
 120              		.loc 1 551 3 view .LVU20
 552:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 121              		.loc 1 552 3 view .LVU21
 122              	.LBB7:
 123              		.loc 1 552 3 view .LVU22
 124 0050 0494     		str	r4, [sp, #16]
 125              		.loc 1 552 3 view .LVU23
 126 0052 1A6B     		ldr	r2, [r3, #48]
 127 0054 42F00202 		orr	r2, r2, #2
 128 0058 1A63     		str	r2, [r3, #48]
 129              		.loc 1 552 3 view .LVU24
 130 005a 1B6B     		ldr	r3, [r3, #48]
 131 005c 03F00203 		and	r3, r3, #2
 132 0060 0493     		str	r3, [sp, #16]
 133              		.loc 1 552 3 view .LVU25
 134 0062 049B     		ldr	r3, [sp, #16]
 135              	.LBE7:
 136              		.loc 1 552 3 view .LVU26
 553:Core/Src/main.c **** 
 554:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 555:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 137              		.loc 1 555 3 view .LVU27
 138 0064 1D4E     		ldr	r6, .L3+4
 139 0066 2246     		mov	r2, r4
 140 0068 2021     		movs	r1, #32
 141 006a 3046     		mov	r0, r6
 142 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL0:
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 558:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 558 3 view .LVU28
 145              		.loc 1 558 23 is_stmt 0 view .LVU29
 146 0070 4FF40053 		mov	r3, #8192
 147 0074 0593     		str	r3, [sp, #20]
 559:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 148              		.loc 1 559 3 is_stmt 1 view .LVU30
 149              		.loc 1 559 24 is_stmt 0 view .LVU31
 150 0076 4FF40418 		mov	r8, #2162688
 151 007a CDF81880 		str	r8, [sp, #24]
 560:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 560 3 is_stmt 1 view .LVU32
 153              		.loc 1 560 24 is_stmt 0 view .LVU33
 154 007e 0794     		str	r4, [sp, #28]
 561:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 155              		.loc 1 561 3 is_stmt 1 view .LVU34
 156 0080 05A9     		add	r1, sp, #20
 157 0082 1748     		ldr	r0, .L3+8
 158 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL1:
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
ARM GAS  /tmp/ccrazgw6.s 			page 14


 564:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 160              		.loc 1 564 3 view .LVU35
 161              		.loc 1 564 23 is_stmt 0 view .LVU36
 162 0088 2027     		movs	r7, #32
 163 008a 0597     		str	r7, [sp, #20]
 565:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 164              		.loc 1 565 3 is_stmt 1 view .LVU37
 165              		.loc 1 565 24 is_stmt 0 view .LVU38
 166 008c 0125     		movs	r5, #1
 167 008e 0695     		str	r5, [sp, #24]
 566:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 168              		.loc 1 566 3 is_stmt 1 view .LVU39
 169              		.loc 1 566 24 is_stmt 0 view .LVU40
 170 0090 0794     		str	r4, [sp, #28]
 567:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 171              		.loc 1 567 3 is_stmt 1 view .LVU41
 172              		.loc 1 567 25 is_stmt 0 view .LVU42
 173 0092 0894     		str	r4, [sp, #32]
 568:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 174              		.loc 1 568 3 is_stmt 1 view .LVU43
 175 0094 05A9     		add	r1, sp, #20
 176 0096 3046     		mov	r0, r6
 177 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 178              	.LVL2:
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   /*Configure GPIO pin : EmergencyStopBtn_Pin */
 571:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin;
 179              		.loc 1 571 3 view .LVU44
 180              		.loc 1 571 23 is_stmt 0 view .LVU45
 181 009c 4FF48073 		mov	r3, #256
 182 00a0 0593     		str	r3, [sp, #20]
 572:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 183              		.loc 1 572 3 is_stmt 1 view .LVU46
 184              		.loc 1 572 24 is_stmt 0 view .LVU47
 185 00a2 CDF81880 		str	r8, [sp, #24]
 573:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 186              		.loc 1 573 3 is_stmt 1 view .LVU48
 187              		.loc 1 573 24 is_stmt 0 view .LVU49
 188 00a6 0795     		str	r5, [sp, #28]
 574:Core/Src/main.c ****   HAL_GPIO_Init(EmergencyStopBtn_GPIO_Port, &GPIO_InitStruct);
 189              		.loc 1 574 3 is_stmt 1 view .LVU50
 190 00a8 05A9     		add	r1, sp, #20
 191 00aa 3046     		mov	r0, r6
 192 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 193              	.LVL3:
 575:Core/Src/main.c **** 
 576:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 577:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 194              		.loc 1 577 3 view .LVU51
 195              		.loc 1 577 23 is_stmt 0 view .LVU52
 196 00b0 4FF40073 		mov	r3, #512
 197 00b4 0593     		str	r3, [sp, #20]
 578:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 198              		.loc 1 578 3 is_stmt 1 view .LVU53
 199              		.loc 1 578 24 is_stmt 0 view .LVU54
 200 00b6 0694     		str	r4, [sp, #24]
 579:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
ARM GAS  /tmp/ccrazgw6.s 			page 15


 201              		.loc 1 579 3 is_stmt 1 view .LVU55
 202              		.loc 1 579 24 is_stmt 0 view .LVU56
 203 00b8 0795     		str	r5, [sp, #28]
 580:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 204              		.loc 1 580 3 is_stmt 1 view .LVU57
 205 00ba 05A9     		add	r1, sp, #20
 206 00bc 3046     		mov	r0, r6
 207 00be FFF7FEFF 		bl	HAL_GPIO_Init
 208              	.LVL4:
 581:Core/Src/main.c **** 
 582:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 583:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 209              		.loc 1 583 3 view .LVU58
 210              		.loc 1 583 23 is_stmt 0 view .LVU59
 211 00c2 0597     		str	r7, [sp, #20]
 584:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 212              		.loc 1 584 3 is_stmt 1 view .LVU60
 213              		.loc 1 584 24 is_stmt 0 view .LVU61
 214 00c4 0694     		str	r4, [sp, #24]
 585:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 215              		.loc 1 585 3 is_stmt 1 view .LVU62
 216              		.loc 1 585 24 is_stmt 0 view .LVU63
 217 00c6 0795     		str	r5, [sp, #28]
 586:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 218              		.loc 1 586 3 is_stmt 1 view .LVU64
 219 00c8 05A9     		add	r1, sp, #20
 220 00ca 0648     		ldr	r0, .L3+12
 221 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 222              	.LVL5:
 587:Core/Src/main.c **** 
 588:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 589:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 590:Core/Src/main.c **** }
 223              		.loc 1 590 1 is_stmt 0 view .LVU65
 224 00d0 0AB0     		add	sp, sp, #40
 225              		.cfi_def_cfa_offset 24
 226              		@ sp needed
 227 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 228              	.L4:
 229 00d6 00BF     		.align	2
 230              	.L3:
 231 00d8 00380240 		.word	1073887232
 232 00dc 00000240 		.word	1073872896
 233 00e0 00080240 		.word	1073874944
 234 00e4 00040240 		.word	1073873920
 235              		.cfi_endproc
 236              	.LFE251:
 238              		.section	.text.MX_DMA_Init,"ax",%progbits
 239              		.align	1
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu fpv4-sp-d16
 245              	MX_DMA_Init:
 246              	.LFB250:
 525:Core/Src/main.c **** 
 247              		.loc 1 525 1 is_stmt 1 view -0
ARM GAS  /tmp/ccrazgw6.s 			page 16


 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 8
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251 0000 00B5     		push	{lr}
 252              		.cfi_def_cfa_offset 4
 253              		.cfi_offset 14, -4
 254 0002 83B0     		sub	sp, sp, #12
 255              		.cfi_def_cfa_offset 16
 528:Core/Src/main.c **** 
 256              		.loc 1 528 3 view .LVU67
 257              	.LBB8:
 528:Core/Src/main.c **** 
 258              		.loc 1 528 3 view .LVU68
 259 0004 0022     		movs	r2, #0
 260 0006 0192     		str	r2, [sp, #4]
 528:Core/Src/main.c **** 
 261              		.loc 1 528 3 view .LVU69
 262 0008 094B     		ldr	r3, .L7
 263 000a 196B     		ldr	r1, [r3, #48]
 264 000c 41F48001 		orr	r1, r1, #4194304
 265 0010 1963     		str	r1, [r3, #48]
 528:Core/Src/main.c **** 
 266              		.loc 1 528 3 view .LVU70
 267 0012 1B6B     		ldr	r3, [r3, #48]
 268 0014 03F48003 		and	r3, r3, #4194304
 269 0018 0193     		str	r3, [sp, #4]
 528:Core/Src/main.c **** 
 270              		.loc 1 528 3 view .LVU71
 271 001a 019B     		ldr	r3, [sp, #4]
 272              	.LBE8:
 528:Core/Src/main.c **** 
 273              		.loc 1 528 3 view .LVU72
 532:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 274              		.loc 1 532 3 view .LVU73
 275 001c 0521     		movs	r1, #5
 276 001e 3820     		movs	r0, #56
 277 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 278              	.LVL6:
 533:Core/Src/main.c **** 
 279              		.loc 1 533 3 view .LVU74
 280 0024 3820     		movs	r0, #56
 281 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 282              	.LVL7:
 535:Core/Src/main.c **** 
 283              		.loc 1 535 1 is_stmt 0 view .LVU75
 284 002a 03B0     		add	sp, sp, #12
 285              		.cfi_def_cfa_offset 4
 286              		@ sp needed
 287 002c 5DF804FB 		ldr	pc, [sp], #4
 288              	.L8:
 289              		.align	2
 290              	.L7:
 291 0030 00380240 		.word	1073887232
 292              		.cfi_endproc
 293              	.LFE250:
 295              		.section	.text.StartDefaultTask,"ax",%progbits
 296              		.align	1
ARM GAS  /tmp/ccrazgw6.s 			page 17


 297              		.global	StartDefaultTask
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv4-sp-d16
 303              	StartDefaultTask:
 304              	.LFB256:
 591:Core/Src/main.c **** 
 592:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 593:Core/Src/main.c **** 
 594:Core/Src/main.c **** 
 595:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 596:Core/Src/main.c **** 	// Configure Each of the joints
 597:Core/Src/main.c **** 
 598:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 599:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 600:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 601:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 602:Core/Src/main.c **** 
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 604:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 606:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 607:Core/Src/main.c **** 
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 609:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 611:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 612:Core/Src/main.c **** 
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 614:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 616:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 617:Core/Src/main.c **** 
 618:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 619:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 620:Core/Src/main.c **** }
 621:Core/Src/main.c **** 
 622:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot){
 623:Core/Src/main.c ****   // Configure Each of the joints
 624:Core/Src/main.c ****   MegaBot->Base.ServoNum = 0;
 625:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 626:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 627:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 628:Core/Src/main.c **** 
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoNum = 1;
 630:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 632:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 633:Core/Src/main.c **** 
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoNum = 2;
 635:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 637:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 638:Core/Src/main.c **** 
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoNum = 3;
 640:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
ARM GAS  /tmp/ccrazgw6.s 			page 18


 641:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 642:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 643:Core/Src/main.c **** 
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoNum = 4;
 645:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 647:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 648:Core/Src/main.c **** 
 649:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 650:Core/Src/main.c **** }
 651:Core/Src/main.c **** 
 652:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot){
 653:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 659:Core/Src/main.c **** }
 660:Core/Src/main.c **** 
 661:Core/Src/main.c **** 
 662:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 663:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 664:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 665:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 666:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 667:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 668:Core/Src/main.c ****     }else{
 669:Core/Src/main.c ****       *QPotData = PotRawValue;
 670:Core/Src/main.c ****     }
 671:Core/Src/main.c ****     if(Joint->PotInvertRange){
 672:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 673:Core/Src/main.c ****     }
 674:Core/Src/main.c ****   }
 675:Core/Src/main.c **** }
 676:Core/Src/main.c **** 
 677:Core/Src/main.c **** 
 678:Core/Src/main.c **** 
 679:Core/Src/main.c **** /* USER CODE END 4 */
 680:Core/Src/main.c **** 
 681:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 682:Core/Src/main.c **** /**
 683:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 684:Core/Src/main.c ****   * @param  argument: Not used
 685:Core/Src/main.c ****   * @retval None
 686:Core/Src/main.c ****   */
 687:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 688:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 689:Core/Src/main.c **** {
 305              		.loc 1 689 1 is_stmt 1 view -0
 306              		.cfi_startproc
 307              		@ Volatile: function does not return.
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              	.LVL8:
 311              		.loc 1 689 1 is_stmt 0 view .LVU77
 312 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccrazgw6.s 			page 19


 313              		.cfi_def_cfa_offset 8
 314              		.cfi_offset 3, -8
 315              		.cfi_offset 14, -4
 316              	.LVL9:
 317              	.L10:
 690:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 691:Core/Src/main.c ****   /* Infinite loop */
 692:Core/Src/main.c ****   for(;;)
 318              		.loc 1 692 3 is_stmt 1 discriminator 1 view .LVU78
 693:Core/Src/main.c ****   {
 694:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 319              		.loc 1 694 5 discriminator 1 view .LVU79
 320 0002 0022     		movs	r2, #0
 321 0004 2021     		movs	r1, #32
 322 0006 0448     		ldr	r0, .L12
 323 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 324              	.LVL10:
 695:Core/Src/main.c ****     osDelay(1000);
 325              		.loc 1 695 5 discriminator 1 view .LVU80
 326 000c 4FF47A70 		mov	r0, #1000
 327 0010 FFF7FEFF 		bl	osDelay
 328              	.LVL11:
 692:Core/Src/main.c ****   {
 329              		.loc 1 692 8 discriminator 1 view .LVU81
 330 0014 F5E7     		b	.L10
 331              	.L13:
 332 0016 00BF     		.align	2
 333              	.L12:
 334 0018 00000240 		.word	1073872896
 335              		.cfi_endproc
 336              	.LFE256:
 338              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 339              		.align	1
 340              		.global	BlinkLEDTaskEntry
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	BlinkLEDTaskEntry:
 347              	.LFB257:
 696:Core/Src/main.c ****   }
 697:Core/Src/main.c ****   /* USER CODE END 5 */
 698:Core/Src/main.c **** }
 699:Core/Src/main.c **** 
 700:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 701:Core/Src/main.c **** /**
 702:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 703:Core/Src/main.c **** * @param argument: Not used
 704:Core/Src/main.c **** * @retval None
 705:Core/Src/main.c **** */
 706:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 707:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 708:Core/Src/main.c **** {
 348              		.loc 1 708 1 view -0
 349              		.cfi_startproc
 350              		@ Volatile: function does not return.
 351              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrazgw6.s 			page 20


 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              	.LVL12:
 354              		.loc 1 708 1 is_stmt 0 view .LVU83
 355 0000 08B5     		push	{r3, lr}
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 3, -8
 358              		.cfi_offset 14, -4
 359              	.LVL13:
 360              	.L15:
 709:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 710:Core/Src/main.c ****   /* Infinite loop */
 711:Core/Src/main.c ****   for(;;)
 361              		.loc 1 711 3 is_stmt 1 discriminator 1 view .LVU84
 712:Core/Src/main.c ****   {
 713:Core/Src/main.c ****     
 714:Core/Src/main.c ****     osDelay(500);
 362              		.loc 1 714 5 discriminator 1 view .LVU85
 363 0002 4FF4FA70 		mov	r0, #500
 364 0006 FFF7FEFF 		bl	osDelay
 365              	.LVL14:
 715:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 366              		.loc 1 715 5 discriminator 1 view .LVU86
 367 000a 0122     		movs	r2, #1
 368 000c 2021     		movs	r1, #32
 369 000e 0448     		ldr	r0, .L17
 370 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 371              	.LVL15:
 716:Core/Src/main.c ****     osDelay(500);
 372              		.loc 1 716 5 discriminator 1 view .LVU87
 373 0014 4FF4FA70 		mov	r0, #500
 374 0018 FFF7FEFF 		bl	osDelay
 375              	.LVL16:
 711:Core/Src/main.c ****   {
 376              		.loc 1 711 8 discriminator 1 view .LVU88
 377 001c F1E7     		b	.L15
 378              	.L18:
 379 001e 00BF     		.align	2
 380              	.L17:
 381 0020 00000240 		.word	1073872896
 382              		.cfi_endproc
 383              	.LFE257:
 385              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 386              		.align	1
 387              		.global	LCDPrintTaskEntry
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu fpv4-sp-d16
 393              	LCDPrintTaskEntry:
 394              	.LFB262:
 717:Core/Src/main.c ****   }
 718:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 719:Core/Src/main.c **** }
 720:Core/Src/main.c **** 
 721:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 722:Core/Src/main.c **** /**
 723:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
ARM GAS  /tmp/ccrazgw6.s 			page 21


 724:Core/Src/main.c **** * @param argument: Not used
 725:Core/Src/main.c **** * @retval None
 726:Core/Src/main.c **** */
 727:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 728:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 729:Core/Src/main.c **** {
 730:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 731:Core/Src/main.c **** 
 732:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 733:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 734:Core/Src/main.c **** 
 735:Core/Src/main.c ****   
 736:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, PotRawValue, 4);
 737:Core/Src/main.c **** 
 738:Core/Src/main.c **** 	/* Infinite loop */
 739:Core/Src/main.c **** 	for(;;)
 740:Core/Src/main.c **** 	{
 741:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 742:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 743:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 744:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 745:Core/Src/main.c **** 
 746:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 747:Core/Src/main.c ****     
 748:Core/Src/main.c ****     xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, 10);
 749:Core/Src/main.c **** 
 750:Core/Src/main.c ****     osDelay(1);
 751:Core/Src/main.c **** 	}
 752:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 753:Core/Src/main.c **** }
 754:Core/Src/main.c **** 
 755:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 756:Core/Src/main.c **** /**
 757:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 758:Core/Src/main.c **** * @param argument: Not used
 759:Core/Src/main.c **** * @retval None
 760:Core/Src/main.c **** */
 761:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 762:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 763:Core/Src/main.c **** {
 764:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 765:Core/Src/main.c **** 
 766:Core/Src/main.c ****   // enum State state = Init;
 767:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   /* Infinite loop */
 770:Core/Src/main.c ****   for(;;)
 771:Core/Src/main.c ****   {
 772:Core/Src/main.c ****     if(state == Init){
 773:Core/Src/main.c ****       state = Ready;
 774:Core/Src/main.c **** 
 775:Core/Src/main.c ****     }else if(state == Ready){
 776:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 777:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 778:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 779:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 780:Core/Src/main.c ****           state++;
ARM GAS  /tmp/ccrazgw6.s 			page 22


 781:Core/Src/main.c ****         }
 782:Core/Src/main.c ****       }
 783:Core/Src/main.c **** 
 784:Core/Src/main.c ****     }else if(state == Running){
 785:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 786:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 787:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 788:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 789:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 790:Core/Src/main.c ****           state--;
 791:Core/Src/main.c ****         }
 792:Core/Src/main.c ****       }
 793:Core/Src/main.c **** 
 794:Core/Src/main.c ****     }
 795:Core/Src/main.c ****     
 796:Core/Src/main.c ****     if(state == EmergencyStop){
 797:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 798:Core/Src/main.c ****     }
 799:Core/Src/main.c **** 
 800:Core/Src/main.c **** 
 801:Core/Src/main.c **** 
 802:Core/Src/main.c ****     osDelay(1);
 803:Core/Src/main.c ****   }
 804:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 805:Core/Src/main.c **** }
 806:Core/Src/main.c **** 
 807:Core/Src/main.c **** /* USER CODE BEGIN Header_EmergencyStopTaskEntry */
 808:Core/Src/main.c **** /**
 809:Core/Src/main.c **** * @brief Function implementing the EmergencyStopTa thread.
 810:Core/Src/main.c **** * @param argument: Not used
 811:Core/Src/main.c **** * @retval None
 812:Core/Src/main.c **** */
 813:Core/Src/main.c **** /* USER CODE END Header_EmergencyStopTaskEntry */
 814:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument)
 815:Core/Src/main.c **** {
 816:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 817:Core/Src/main.c ****   /* Infinite loop */
 818:Core/Src/main.c ****   for(;;)
 819:Core/Src/main.c ****   {
 820:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 821:Core/Src/main.c ****       
 822:Core/Src/main.c ****     }
 823:Core/Src/main.c **** 
 824:Core/Src/main.c **** 
 825:Core/Src/main.c ****     osDelay(100);
 826:Core/Src/main.c ****   }
 827:Core/Src/main.c ****   /* USER CODE END EmergencyStopTaskEntry */
 828:Core/Src/main.c **** }
 829:Core/Src/main.c **** 
 830:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 831:Core/Src/main.c **** /**
 832:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 833:Core/Src/main.c **** * @param argument: Not used
 834:Core/Src/main.c **** * @retval None
 835:Core/Src/main.c **** */
 836:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 837:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
ARM GAS  /tmp/ccrazgw6.s 			page 23


 838:Core/Src/main.c **** {
 839:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 840:Core/Src/main.c **** 
 841:Core/Src/main.c ****   MegaBot_Config_t MegaBot;
 842:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 843:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 844:Core/Src/main.c **** 
 845:Core/Src/main.c **** 
 846:Core/Src/main.c ****   /* Infinite loop */
 847:Core/Src/main.c ****   for(;;)
 848:Core/Src/main.c ****   {
 849:Core/Src/main.c **** 
 850:Core/Src/main.c ****     
 851:Core/Src/main.c **** 
 852:Core/Src/main.c **** 
 853:Core/Src/main.c ****     osDelay(1);
 854:Core/Src/main.c ****   }
 855:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 856:Core/Src/main.c **** }
 857:Core/Src/main.c **** 
 858:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 859:Core/Src/main.c **** /**
 860:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 861:Core/Src/main.c **** * @param argument: Not used
 862:Core/Src/main.c **** * @retval None
 863:Core/Src/main.c **** */
 864:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 865:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 866:Core/Src/main.c **** {
 395              		.loc 1 866 1 view -0
 396              		.cfi_startproc
 397              		@ Volatile: function does not return.
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400              	.LVL17:
 401              		.loc 1 866 1 is_stmt 0 view .LVU90
 402 0000 08B5     		push	{r3, lr}
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 3, -8
 405              		.cfi_offset 14, -4
 406              	.LVL18:
 407              	.L20:
 867:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 868:Core/Src/main.c ****   /* Infinite loop */
 869:Core/Src/main.c ****   for(;;)
 408              		.loc 1 869 3 is_stmt 1 discriminator 1 view .LVU91
 870:Core/Src/main.c ****   {
 871:Core/Src/main.c ****     osDelay(1);
 409              		.loc 1 871 5 discriminator 1 view .LVU92
 410 0002 0120     		movs	r0, #1
 411 0004 FFF7FEFF 		bl	osDelay
 412              	.LVL19:
 869:Core/Src/main.c ****   {
 413              		.loc 1 869 8 discriminator 1 view .LVU93
 414 0008 FBE7     		b	.L20
 415              		.cfi_endproc
 416              	.LFE262:
ARM GAS  /tmp/ccrazgw6.s 			page 24


 418              		.section	.text.EmergencyStopTaskEntry,"ax",%progbits
 419              		.align	1
 420              		.global	EmergencyStopTaskEntry
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 424              		.fpu fpv4-sp-d16
 426              	EmergencyStopTaskEntry:
 427              	.LFB260:
 815:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 428              		.loc 1 815 1 view -0
 429              		.cfi_startproc
 430              		@ Volatile: function does not return.
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              	.LVL20:
 815:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 434              		.loc 1 815 1 is_stmt 0 view .LVU95
 435 0000 08B5     		push	{r3, lr}
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 3, -8
 438              		.cfi_offset 14, -4
 439              	.LVL21:
 440              	.L23:
 818:Core/Src/main.c ****   {
 441              		.loc 1 818 3 is_stmt 1 view .LVU96
 820:Core/Src/main.c ****       
 442              		.loc 1 820 5 view .LVU97
 820:Core/Src/main.c ****       
 443              		.loc 1 820 8 is_stmt 0 view .LVU98
 444 0002 4FF48071 		mov	r1, #256
 445 0006 0348     		ldr	r0, .L25
 446 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 447              	.LVL22:
 822:Core/Src/main.c **** 
 448              		.loc 1 822 5 is_stmt 1 view .LVU99
 825:Core/Src/main.c ****   }
 449              		.loc 1 825 5 view .LVU100
 450 000c 6420     		movs	r0, #100
 451 000e FFF7FEFF 		bl	osDelay
 452              	.LVL23:
 818:Core/Src/main.c ****   {
 453              		.loc 1 818 8 view .LVU101
 454 0012 F6E7     		b	.L23
 455              	.L26:
 456              		.align	2
 457              	.L25:
 458 0014 00000240 		.word	1073872896
 459              		.cfi_endproc
 460              	.LFE260:
 462              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 463              		.align	1
 464              		.global	ApplicationFSMEntry
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccrazgw6.s 			page 25


 470              	ApplicationFSMEntry:
 471              	.LFB259:
 763:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 472              		.loc 1 763 1 view -0
 473              		.cfi_startproc
 474              		@ Volatile: function does not return.
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              	.LVL24:
 763:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 478              		.loc 1 763 1 is_stmt 0 view .LVU103
 479 0000 08B5     		push	{r3, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 3, -8
 482              		.cfi_offset 14, -4
 483 0002 07E0     		b	.L31
 484              	.LVL25:
 485              	.L33:
 773:Core/Src/main.c **** 
 486              		.loc 1 773 7 is_stmt 1 view .LVU104
 773:Core/Src/main.c **** 
 487              		.loc 1 773 13 is_stmt 0 view .LVU105
 488 0004 244B     		ldr	r3, .L35
 489 0006 0122     		movs	r2, #1
 490 0008 1A70     		strb	r2, [r3]
 491              	.L29:
 796:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 492              		.loc 1 796 5 is_stmt 1 view .LVU106
 796:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 493              		.loc 1 796 14 is_stmt 0 view .LVU107
 494 000a 234B     		ldr	r3, .L35
 495 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 798:Core/Src/main.c **** 
 496              		.loc 1 798 5 is_stmt 1 view .LVU108
 802:Core/Src/main.c ****   }
 497              		.loc 1 802 5 view .LVU109
 498 000e 0120     		movs	r0, #1
 499 0010 FFF7FEFF 		bl	osDelay
 500              	.LVL26:
 770:Core/Src/main.c ****   {
 501              		.loc 1 770 8 view .LVU110
 502              	.L31:
 770:Core/Src/main.c ****   {
 503              		.loc 1 770 3 view .LVU111
 772:Core/Src/main.c ****       state = Ready;
 504              		.loc 1 772 5 view .LVU112
 772:Core/Src/main.c ****       state = Ready;
 505              		.loc 1 772 14 is_stmt 0 view .LVU113
 506 0014 204B     		ldr	r3, .L35
 507 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 772:Core/Src/main.c ****       state = Ready;
 508              		.loc 1 772 7 view .LVU114
 509 0018 002B     		cmp	r3, #0
 510 001a F3D0     		beq	.L33
 775:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 511              		.loc 1 775 11 is_stmt 1 view .LVU115
 775:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
ARM GAS  /tmp/ccrazgw6.s 			page 26


 512              		.loc 1 775 20 is_stmt 0 view .LVU116
 513 001c 1E4B     		ldr	r3, .L35
 514 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 515 0020 DBB2     		uxtb	r3, r3
 775:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 516              		.loc 1 775 13 view .LVU117
 517 0022 012B     		cmp	r3, #1
 518 0024 1ED0     		beq	.L34
 784:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 519              		.loc 1 784 11 is_stmt 1 view .LVU118
 784:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 520              		.loc 1 784 20 is_stmt 0 view .LVU119
 521 0026 1C4B     		ldr	r3, .L35
 522 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 523 002a DBB2     		uxtb	r3, r3
 784:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 524              		.loc 1 784 13 view .LVU120
 525 002c 022B     		cmp	r3, #2
 526 002e ECD1     		bne	.L29
 786:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 527              		.loc 1 786 7 is_stmt 1 view .LVU121
 528 0030 1A4C     		ldr	r4, .L35+4
 529 0032 0A22     		movs	r2, #10
 530 0034 2146     		mov	r1, r4
 531 0036 1A4B     		ldr	r3, .L35+8
 532 0038 1868     		ldr	r0, [r3]
 533 003a FFF7FEFF 		bl	xQueueReceive
 534              	.LVL27:
 787:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 535              		.loc 1 787 7 view .LVU122
 787:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 536              		.loc 1 787 22 is_stmt 0 view .LVU123
 537 003e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 787:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 538              		.loc 1 787 9 view .LVU124
 539 0040 002B     		cmp	r3, #0
 540 0042 E2D1     		bne	.L29
 788:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 541              		.loc 1 788 9 is_stmt 1 view .LVU125
 542 0044 0A22     		movs	r2, #10
 543 0046 2146     		mov	r1, r4
 544 0048 154B     		ldr	r3, .L35+8
 545 004a 1868     		ldr	r0, [r3]
 546 004c FFF7FEFF 		bl	xQueueReceive
 547              	.LVL28:
 789:Core/Src/main.c ****           state--;
 548              		.loc 1 789 9 view .LVU126
 789:Core/Src/main.c ****           state--;
 549              		.loc 1 789 24 is_stmt 0 view .LVU127
 550 0050 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 551 0052 DBB2     		uxtb	r3, r3
 789:Core/Src/main.c ****           state--;
 552              		.loc 1 789 11 view .LVU128
 553 0054 012B     		cmp	r3, #1
 554 0056 D8D1     		bne	.L29
 790:Core/Src/main.c ****         }
 555              		.loc 1 790 11 is_stmt 1 view .LVU129
ARM GAS  /tmp/ccrazgw6.s 			page 27


 790:Core/Src/main.c ****         }
 556              		.loc 1 790 16 is_stmt 0 view .LVU130
 557 0058 0F4A     		ldr	r2, .L35
 558 005a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 559 005c 013B     		subs	r3, r3, #1
 560 005e DBB2     		uxtb	r3, r3
 561 0060 1370     		strb	r3, [r2]
 562 0062 D2E7     		b	.L29
 563              	.L34:
 776:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 564              		.loc 1 776 7 is_stmt 1 view .LVU131
 565 0064 0D4C     		ldr	r4, .L35+4
 566 0066 0A22     		movs	r2, #10
 567 0068 2146     		mov	r1, r4
 568 006a 0D4B     		ldr	r3, .L35+8
 569 006c 1868     		ldr	r0, [r3]
 570 006e FFF7FEFF 		bl	xQueueReceive
 571              	.LVL29:
 777:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 572              		.loc 1 777 7 view .LVU132
 777:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 573              		.loc 1 777 22 is_stmt 0 view .LVU133
 574 0072 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 777:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 575              		.loc 1 777 9 view .LVU134
 576 0074 002B     		cmp	r3, #0
 577 0076 C8D1     		bne	.L29
 778:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 578              		.loc 1 778 9 is_stmt 1 view .LVU135
 579 0078 0A22     		movs	r2, #10
 580 007a 2146     		mov	r1, r4
 581 007c 084B     		ldr	r3, .L35+8
 582 007e 1868     		ldr	r0, [r3]
 583 0080 FFF7FEFF 		bl	xQueueReceive
 584              	.LVL30:
 779:Core/Src/main.c ****           state++;
 585              		.loc 1 779 9 view .LVU136
 779:Core/Src/main.c ****           state++;
 586              		.loc 1 779 24 is_stmt 0 view .LVU137
 587 0084 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 588 0086 DBB2     		uxtb	r3, r3
 779:Core/Src/main.c ****           state++;
 589              		.loc 1 779 11 view .LVU138
 590 0088 012B     		cmp	r3, #1
 591 008a BED1     		bne	.L29
 780:Core/Src/main.c ****         }
 592              		.loc 1 780 11 is_stmt 1 view .LVU139
 780:Core/Src/main.c ****         }
 593              		.loc 1 780 16 is_stmt 0 view .LVU140
 594 008c 024A     		ldr	r2, .L35
 595 008e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 596 0090 0133     		adds	r3, r3, #1
 597 0092 DBB2     		uxtb	r3, r3
 598 0094 1370     		strb	r3, [r2]
 599 0096 B8E7     		b	.L29
 600              	.L36:
 601              		.align	2
ARM GAS  /tmp/ccrazgw6.s 			page 28


 602              	.L35:
 603 0098 00000000 		.word	.LANCHOR0
 604 009c 00000000 		.word	.LANCHOR1
 605 00a0 00000000 		.word	.LANCHOR2
 606              		.cfi_endproc
 607              	.LFE259:
 609              		.section	.text.MiniBotInit,"ax",%progbits
 610              		.align	1
 611              		.global	MiniBotInit
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu fpv4-sp-d16
 617              	MiniBotInit:
 618              	.LVL31:
 619              	.LFB252:
 595:Core/Src/main.c **** 	// Configure Each of the joints
 620              		.loc 1 595 44 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 595:Core/Src/main.c **** 	// Configure Each of the joints
 624              		.loc 1 595 44 is_stmt 0 view .LVU142
 625 0000 00B5     		push	{lr}
 626              		.cfi_def_cfa_offset 4
 627              		.cfi_offset 14, -4
 598:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 628              		.loc 1 598 4 is_stmt 1 view .LVU143
 598:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 629              		.loc 1 598 25 is_stmt 0 view .LVU144
 630 0002 0023     		movs	r3, #0
 631 0004 0370     		strb	r3, [r0]
 599:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 632              		.loc 1 599 4 is_stmt 1 view .LVU145
 599:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 633              		.loc 1 599 25 is_stmt 0 view .LVU146
 634 0006 4FF44872 		mov	r2, #800
 635 000a 4260     		str	r2, [r0, #4]
 600:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 636              		.loc 1 600 4 is_stmt 1 view .LVU147
 600:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 637              		.loc 1 600 25 is_stmt 0 view .LVU148
 638 000c 40F64851 		movw	r1, #3400
 639 0010 8160     		str	r1, [r0, #8]
 601:Core/Src/main.c **** 
 640              		.loc 1 601 4 is_stmt 1 view .LVU149
 601:Core/Src/main.c **** 
 641              		.loc 1 601 33 is_stmt 0 view .LVU150
 642 0012 0373     		strb	r3, [r0, #12]
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 643              		.loc 1 603 4 is_stmt 1 view .LVU151
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 644              		.loc 1 603 29 is_stmt 0 view .LVU152
 645 0014 4FF0010C 		mov	ip, #1
 646 0018 80F810C0 		strb	ip, [r0, #16]
 604:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 647              		.loc 1 604 4 is_stmt 1 view .LVU153
ARM GAS  /tmp/ccrazgw6.s 			page 29


 604:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 648              		.loc 1 604 29 is_stmt 0 view .LVU154
 649 001c 4FF41672 		mov	r2, #600
 650 0020 4261     		str	r2, [r0, #20]
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 651              		.loc 1 605 4 is_stmt 1 view .LVU155
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 652              		.loc 1 605 29 is_stmt 0 view .LVU156
 653 0022 8161     		str	r1, [r0, #24]
 606:Core/Src/main.c **** 
 654              		.loc 1 606 4 is_stmt 1 view .LVU157
 606:Core/Src/main.c **** 
 655              		.loc 1 606 37 is_stmt 0 view .LVU158
 656 0024 0377     		strb	r3, [r0, #28]
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 657              		.loc 1 608 4 is_stmt 1 view .LVU159
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 658              		.loc 1 608 26 is_stmt 0 view .LVU160
 659 0026 4FF0020E 		mov	lr, #2
 660 002a 80F820E0 		strb	lr, [r0, #32]
 609:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 661              		.loc 1 609 4 is_stmt 1 view .LVU161
 609:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 662              		.loc 1 609 26 is_stmt 0 view .LVU162
 663 002e 4262     		str	r2, [r0, #36]
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 664              		.loc 1 610 4 is_stmt 1 view .LVU163
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 665              		.loc 1 610 26 is_stmt 0 view .LVU164
 666 0030 8162     		str	r1, [r0, #40]
 611:Core/Src/main.c **** 
 667              		.loc 1 611 4 is_stmt 1 view .LVU165
 611:Core/Src/main.c **** 
 668              		.loc 1 611 34 is_stmt 0 view .LVU166
 669 0032 80F82C30 		strb	r3, [r0, #44]
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 670              		.loc 1 613 4 is_stmt 1 view .LVU167
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 671              		.loc 1 613 26 is_stmt 0 view .LVU168
 672 0036 0323     		movs	r3, #3
 673 0038 80F83030 		strb	r3, [r0, #48]
 614:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 674              		.loc 1 614 4 is_stmt 1 view .LVU169
 614:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 675              		.loc 1 614 26 is_stmt 0 view .LVU170
 676 003c 4263     		str	r2, [r0, #52]
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 677              		.loc 1 615 4 is_stmt 1 view .LVU171
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 678              		.loc 1 615 26 is_stmt 0 view .LVU172
 679 003e 4FF44863 		mov	r3, #3200
 680 0042 8363     		str	r3, [r0, #56]
 616:Core/Src/main.c **** 
 681              		.loc 1 616 4 is_stmt 1 view .LVU173
 616:Core/Src/main.c **** 
 682              		.loc 1 616 34 is_stmt 0 view .LVU174
 683 0044 80F83CC0 		strb	ip, [r0, #60]
ARM GAS  /tmp/ccrazgw6.s 			page 30


 618:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 684              		.loc 1 618 4 is_stmt 1 view .LVU175
 618:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 685              		.loc 1 618 27 is_stmt 0 view .LVU176
 686 0048 034B     		ldr	r3, .L39
 687 004a 0364     		str	r3, [r0, #64]
 619:Core/Src/main.c **** }
 688              		.loc 1 619 4 is_stmt 1 view .LVU177
 619:Core/Src/main.c **** }
 689              		.loc 1 619 30 is_stmt 0 view .LVU178
 690 004c 4FF40073 		mov	r3, #512
 691 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 620:Core/Src/main.c **** 
 692              		.loc 1 620 1 view .LVU179
 693 0054 5DF804FB 		ldr	pc, [sp], #4
 694              	.L40:
 695              		.align	2
 696              	.L39:
 697 0058 00000240 		.word	1073872896
 698              		.cfi_endproc
 699              	.LFE252:
 701              		.section	.text.ServoDriverInit,"ax",%progbits
 702              		.align	1
 703              		.global	ServoDriverInit
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 707              		.fpu fpv4-sp-d16
 709              	ServoDriverInit:
 710              	.LVL32:
 711              	.LFB254:
 652:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 712              		.loc 1 652 48 is_stmt 1 view -0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 0
 715              		@ frame_needed = 0, uses_anonymous_args = 0
 652:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 716              		.loc 1 652 48 is_stmt 0 view .LVU181
 717 0000 10B5     		push	{r4, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 4, -8
 720              		.cfi_offset 14, -4
 721 0002 0446     		mov	r4, r0
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 722              		.loc 1 653 3 is_stmt 1 view .LVU182
 723 0004 1648     		ldr	r0, .L43
 724              	.LVL33:
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 725              		.loc 1 653 3 is_stmt 0 view .LVU183
 726 0006 FFF7FEFF 		bl	PCA9685_Init
 727              	.LVL34:
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 728              		.loc 1 654 3 is_stmt 1 view .LVU184
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 729              		.loc 1 654 62 is_stmt 0 view .LVU185
 730 000a E388     		ldrh	r3, [r4, #6]
 731 000c 00EE103A 		vmov	s0, r3	@ int
ARM GAS  /tmp/ccrazgw6.s 			page 31


 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 732              		.loc 1 654 3 view .LVU186
 733 0010 B8EE400A 		vcvt.f32.u32	s0, s0
 734 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 735 0016 FFF7FEFF 		bl	PCA9685_SetServoAngle
 736              	.LVL35:
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 737              		.loc 1 655 3 is_stmt 1 view .LVU187
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 738              		.loc 1 655 70 is_stmt 0 view .LVU188
 739 001a E389     		ldrh	r3, [r4, #14]
 740 001c 00EE103A 		vmov	s0, r3	@ int
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 741              		.loc 1 655 3 view .LVU189
 742 0020 B8EE400A 		vcvt.f32.u32	s0, s0
 743 0024 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 744 0026 FFF7FEFF 		bl	PCA9685_SetServoAngle
 745              	.LVL36:
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 746              		.loc 1 656 3 is_stmt 1 view .LVU190
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 747              		.loc 1 656 64 is_stmt 0 view .LVU191
 748 002a E38A     		ldrh	r3, [r4, #22]
 749 002c 00EE103A 		vmov	s0, r3	@ int
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 750              		.loc 1 656 3 view .LVU192
 751 0030 B8EE400A 		vcvt.f32.u32	s0, s0
 752 0034 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 753 0036 FFF7FEFF 		bl	PCA9685_SetServoAngle
 754              	.LVL37:
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 755              		.loc 1 657 3 is_stmt 1 view .LVU193
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 756              		.loc 1 657 64 is_stmt 0 view .LVU194
 757 003a E38B     		ldrh	r3, [r4, #30]
 758 003c 00EE103A 		vmov	s0, r3	@ int
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 759              		.loc 1 657 3 view .LVU195
 760 0040 B8EE400A 		vcvt.f32.u32	s0, s0
 761 0044 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 762 0046 FFF7FEFF 		bl	PCA9685_SetServoAngle
 763              	.LVL38:
 658:Core/Src/main.c **** }
 764              		.loc 1 658 3 is_stmt 1 view .LVU196
 658:Core/Src/main.c **** }
 765              		.loc 1 658 68 is_stmt 0 view .LVU197
 766 004a E38C     		ldrh	r3, [r4, #38]
 767 004c 00EE103A 		vmov	s0, r3	@ int
 658:Core/Src/main.c **** }
 768              		.loc 1 658 3 view .LVU198
 769 0050 B8EE400A 		vcvt.f32.u32	s0, s0
 770 0054 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 771 0058 FFF7FEFF 		bl	PCA9685_SetServoAngle
 772              	.LVL39:
 659:Core/Src/main.c **** 
 773              		.loc 1 659 1 view .LVU199
 774 005c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccrazgw6.s 			page 32


 775              	.LVL40:
 776              	.L44:
 659:Core/Src/main.c **** 
 777              		.loc 1 659 1 view .LVU200
 778 005e 00BF     		.align	2
 779              	.L43:
 780 0060 00000000 		.word	.LANCHOR3
 781              		.cfi_endproc
 782              	.LFE254:
 784              		.section	.text.MegaBotInit,"ax",%progbits
 785              		.align	1
 786              		.global	MegaBotInit
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv4-sp-d16
 792              	MegaBotInit:
 793              	.LVL41:
 794              	.LFB253:
 622:Core/Src/main.c ****   // Configure Each of the joints
 795              		.loc 1 622 44 is_stmt 1 view -0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 8
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 622:Core/Src/main.c ****   // Configure Each of the joints
 799              		.loc 1 622 44 is_stmt 0 view .LVU202
 800 0000 00B5     		push	{lr}
 801              		.cfi_def_cfa_offset 4
 802              		.cfi_offset 14, -4
 803 0002 83B0     		sub	sp, sp, #12
 804              		.cfi_def_cfa_offset 16
 805 0004 0190     		str	r0, [sp, #4]
 624:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 806              		.loc 1 624 3 is_stmt 1 view .LVU203
 624:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 807              		.loc 1 624 26 is_stmt 0 view .LVU204
 808 0006 0022     		movs	r2, #0
 809 0008 0270     		strb	r2, [r0]
 625:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 810              		.loc 1 625 3 is_stmt 1 view .LVU205
 625:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 811              		.loc 1 625 10 is_stmt 0 view .LVU206
 812 000a 019B     		ldr	r3, [sp, #4]
 625:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 813              		.loc 1 625 26 view .LVU207
 814 000c 5A80     		strh	r2, [r3, #2]	@ movhi
 626:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 815              		.loc 1 626 3 is_stmt 1 view .LVU208
 626:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 816              		.loc 1 626 10 is_stmt 0 view .LVU209
 817 000e 019B     		ldr	r3, [sp, #4]
 626:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 818              		.loc 1 626 26 view .LVU210
 819 0010 B421     		movs	r1, #180
 820 0012 9980     		strh	r1, [r3, #4]	@ movhi
 627:Core/Src/main.c **** 
 821              		.loc 1 627 3 is_stmt 1 view .LVU211
ARM GAS  /tmp/ccrazgw6.s 			page 33


 627:Core/Src/main.c **** 
 822              		.loc 1 627 32 is_stmt 0 view .LVU212
 823 0014 5A20     		movs	r0, #90
 824              	.LVL42:
 627:Core/Src/main.c **** 
 825              		.loc 1 627 32 view .LVU213
 826 0016 D880     		strh	r0, [r3, #6]	@ movhi
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 827              		.loc 1 629 3 is_stmt 1 view .LVU214
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 828              		.loc 1 629 30 is_stmt 0 view .LVU215
 829 0018 4FF0010C 		mov	ip, #1
 830 001c 83F808C0 		strb	ip, [r3, #8]
 630:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 831              		.loc 1 630 3 is_stmt 1 view .LVU216
 630:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 832              		.loc 1 630 30 is_stmt 0 view .LVU217
 833 0020 5A81     		strh	r2, [r3, #10]	@ movhi
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 834              		.loc 1 631 3 is_stmt 1 view .LVU218
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 835              		.loc 1 631 30 is_stmt 0 view .LVU219
 836 0022 9981     		strh	r1, [r3, #12]	@ movhi
 632:Core/Src/main.c **** 
 837              		.loc 1 632 3 is_stmt 1 view .LVU220
 632:Core/Src/main.c **** 
 838              		.loc 1 632 36 is_stmt 0 view .LVU221
 839 0024 DA81     		strh	r2, [r3, #14]	@ movhi
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 840              		.loc 1 634 3 is_stmt 1 view .LVU222
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 841              		.loc 1 634 27 is_stmt 0 view .LVU223
 842 0026 4FF0020C 		mov	ip, #2
 843 002a 83F810C0 		strb	ip, [r3, #16]
 635:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 844              		.loc 1 635 3 is_stmt 1 view .LVU224
 635:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 845              		.loc 1 635 27 is_stmt 0 view .LVU225
 846 002e 4FF0320C 		mov	ip, #50
 847 0032 A3F812C0 		strh	ip, [r3, #18]	@ movhi
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 848              		.loc 1 636 3 is_stmt 1 view .LVU226
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 849              		.loc 1 636 27 is_stmt 0 view .LVU227
 850 0036 9982     		strh	r1, [r3, #20]	@ movhi
 637:Core/Src/main.c **** 
 851              		.loc 1 637 3 is_stmt 1 view .LVU228
 637:Core/Src/main.c **** 
 852              		.loc 1 637 33 is_stmt 0 view .LVU229
 853 0038 D982     		strh	r1, [r3, #22]	@ movhi
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 854              		.loc 1 639 3 is_stmt 1 view .LVU230
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 855              		.loc 1 639 27 is_stmt 0 view .LVU231
 856 003a 4FF0030C 		mov	ip, #3
 857 003e 83F818C0 		strb	ip, [r3, #24]
 640:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
ARM GAS  /tmp/ccrazgw6.s 			page 34


 858              		.loc 1 640 3 is_stmt 1 view .LVU232
 640:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 859              		.loc 1 640 27 is_stmt 0 view .LVU233
 860 0042 5A83     		strh	r2, [r3, #26]	@ movhi
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 861              		.loc 1 641 3 is_stmt 1 view .LVU234
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 862              		.loc 1 641 27 is_stmt 0 view .LVU235
 863 0044 9983     		strh	r1, [r3, #28]	@ movhi
 642:Core/Src/main.c **** 
 864              		.loc 1 642 3 is_stmt 1 view .LVU236
 642:Core/Src/main.c **** 
 865              		.loc 1 642 33 is_stmt 0 view .LVU237
 866 0046 D883     		strh	r0, [r3, #30]	@ movhi
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 867              		.loc 1 644 3 is_stmt 1 view .LVU238
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 868              		.loc 1 644 29 is_stmt 0 view .LVU239
 869 0048 0421     		movs	r1, #4
 870 004a 83F82010 		strb	r1, [r3, #32]
 645:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 871              		.loc 1 645 3 is_stmt 1 view .LVU240
 645:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 872              		.loc 1 645 29 is_stmt 0 view .LVU241
 873 004e 5A84     		strh	r2, [r3, #34]	@ movhi
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 874              		.loc 1 646 3 is_stmt 1 view .LVU242
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 875              		.loc 1 646 29 is_stmt 0 view .LVU243
 876 0050 4621     		movs	r1, #70
 877 0052 9984     		strh	r1, [r3, #36]	@ movhi
 647:Core/Src/main.c **** 
 878              		.loc 1 647 3 is_stmt 1 view .LVU244
 647:Core/Src/main.c **** 
 879              		.loc 1 647 35 is_stmt 0 view .LVU245
 880 0054 DA84     		strh	r2, [r3, #38]	@ movhi
 649:Core/Src/main.c **** }
 881              		.loc 1 649 3 is_stmt 1 view .LVU246
 882 0056 01A8     		add	r0, sp, #4
 883 0058 FFF7FEFF 		bl	ServoDriverInit
 884              	.LVL43:
 650:Core/Src/main.c **** 
 885              		.loc 1 650 1 is_stmt 0 view .LVU247
 886 005c 03B0     		add	sp, sp, #12
 887              		.cfi_def_cfa_offset 4
 888              		@ sp needed
 889 005e 5DF804FB 		ldr	pc, [sp], #4
 890              		.cfi_endproc
 891              	.LFE253:
 893              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 894              		.align	1
 895              		.global	MotorControlTaskEntry
 896              		.syntax unified
 897              		.thumb
 898              		.thumb_func
 899              		.fpu fpv4-sp-d16
 901              	MotorControlTaskEntry:
ARM GAS  /tmp/ccrazgw6.s 			page 35


 902              	.LVL44:
 903              	.LFB261:
 838:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 904              		.loc 1 838 1 is_stmt 1 view -0
 905              		.cfi_startproc
 906              		@ Volatile: function does not return.
 907              		@ args = 0, pretend = 0, frame = 40
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 838:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 909              		.loc 1 838 1 is_stmt 0 view .LVU249
 910 0000 00B5     		push	{lr}
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 14, -4
 913 0002 8BB0     		sub	sp, sp, #44
 914              		.cfi_def_cfa_offset 48
 841:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 915              		.loc 1 841 3 is_stmt 1 view .LVU250
 842:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 916              		.loc 1 842 3 view .LVU251
 917 0004 6846     		mov	r0, sp
 918              	.LVL45:
 842:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 919              		.loc 1 842 3 is_stmt 0 view .LVU252
 920 0006 FFF7FEFF 		bl	MegaBotInit
 921              	.LVL46:
 843:Core/Src/main.c **** 
 922              		.loc 1 843 3 is_stmt 1 view .LVU253
 923 000a 6846     		mov	r0, sp
 924 000c FFF7FEFF 		bl	ServoDriverInit
 925              	.LVL47:
 926              	.L48:
 847:Core/Src/main.c ****   {
 927              		.loc 1 847 3 discriminator 1 view .LVU254
 853:Core/Src/main.c ****   }
 928              		.loc 1 853 5 discriminator 1 view .LVU255
 929 0010 0120     		movs	r0, #1
 930 0012 FFF7FEFF 		bl	osDelay
 931              	.LVL48:
 847:Core/Src/main.c ****   {
 932              		.loc 1 847 8 discriminator 1 view .LVU256
 933 0016 FBE7     		b	.L48
 934              		.cfi_endproc
 935              	.LFE261:
 937              		.section	.text.QPotDataUpdate,"ax",%progbits
 938              		.align	1
 939              		.global	QPotDataUpdate
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu fpv4-sp-d16
 945              	QPotDataUpdate:
 946              	.LVL49:
 947              	.LFB255:
 662:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 948              		.loc 1 662 111 view -0
 949              		.cfi_startproc
 950              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrazgw6.s 			page 36


 951              		@ frame_needed = 0, uses_anonymous_args = 0
 952              		@ link register save eliminated.
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 953              		.loc 1 663 3 view .LVU258
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 954              		.loc 1 663 20 is_stmt 0 view .LVU259
 955 0000 1368     		ldr	r3, [r2]
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 956              		.loc 1 663 30 view .LVU260
 957 0002 0A33     		adds	r3, r3, #10
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 958              		.loc 1 663 5 view .LVU261
 959 0004 8342     		cmp	r3, r0
 960 0006 03D3     		bcc	.L51
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 961              		.loc 1 663 52 discriminator 1 view .LVU262
 962 0008 1368     		ldr	r3, [r2]
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 963              		.loc 1 663 62 discriminator 1 view .LVU263
 964 000a 0A3B     		subs	r3, r3, #10
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 965              		.loc 1 663 35 discriminator 1 view .LVU264
 966 000c 8342     		cmp	r3, r0
 967 000e 0CD9     		bls	.L50
 968              	.L51:
 664:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 969              		.loc 1 664 5 is_stmt 1 view .LVU265
 664:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 970              		.loc 1 664 27 is_stmt 0 view .LVU266
 971 0010 8B68     		ldr	r3, [r1, #8]
 664:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 972              		.loc 1 664 7 view .LVU267
 973 0012 8342     		cmp	r3, r0
 974 0014 0AD2     		bcs	.L53
 665:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 975              		.loc 1 665 7 is_stmt 1 view .LVU268
 665:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 976              		.loc 1 665 24 is_stmt 0 view .LVU269
 977 0016 8B68     		ldr	r3, [r1, #8]
 665:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 978              		.loc 1 665 17 view .LVU270
 979 0018 1360     		str	r3, [r2]
 980              	.L54:
 671:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 981              		.loc 1 671 5 is_stmt 1 view .LVU271
 671:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 982              		.loc 1 671 13 is_stmt 0 view .LVU272
 983 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 671:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 984              		.loc 1 671 7 view .LVU273
 985 001c 2BB1     		cbz	r3, .L50
 672:Core/Src/main.c ****     }
 986              		.loc 1 672 7 is_stmt 1 view .LVU274
 672:Core/Src/main.c ****     }
 987              		.loc 1 672 24 is_stmt 0 view .LVU275
 988 001e 8B68     		ldr	r3, [r1, #8]
 672:Core/Src/main.c ****     }
ARM GAS  /tmp/ccrazgw6.s 			page 37


 989              		.loc 1 672 35 view .LVU276
 990 0020 1068     		ldr	r0, [r2]
 991              	.LVL50:
 672:Core/Src/main.c ****     }
 992              		.loc 1 672 33 view .LVU277
 993 0022 1B1A     		subs	r3, r3, r0
 672:Core/Src/main.c ****     }
 994              		.loc 1 672 52 view .LVU278
 995 0024 4968     		ldr	r1, [r1, #4]
 996              	.LVL51:
 672:Core/Src/main.c ****     }
 997              		.loc 1 672 45 view .LVU279
 998 0026 0B44     		add	r3, r3, r1
 672:Core/Src/main.c ****     }
 999              		.loc 1 672 17 view .LVU280
 1000 0028 1360     		str	r3, [r2]
 1001              	.L50:
 675:Core/Src/main.c **** 
 1002              		.loc 1 675 1 view .LVU281
 1003 002a 7047     		bx	lr
 1004              	.LVL52:
 1005              	.L53:
 666:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1006              		.loc 1 666 11 is_stmt 1 view .LVU282
 666:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1007              		.loc 1 666 33 is_stmt 0 view .LVU283
 1008 002c 4B68     		ldr	r3, [r1, #4]
 666:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1009              		.loc 1 666 13 view .LVU284
 1010 002e 8342     		cmp	r3, r0
 1011 0030 02D9     		bls	.L55
 667:Core/Src/main.c ****     }else{
 1012              		.loc 1 667 7 is_stmt 1 view .LVU285
 667:Core/Src/main.c ****     }else{
 1013              		.loc 1 667 24 is_stmt 0 view .LVU286
 1014 0032 4B68     		ldr	r3, [r1, #4]
 667:Core/Src/main.c ****     }else{
 1015              		.loc 1 667 17 view .LVU287
 1016 0034 1360     		str	r3, [r2]
 1017 0036 F0E7     		b	.L54
 1018              	.L55:
 669:Core/Src/main.c ****     }
 1019              		.loc 1 669 7 is_stmt 1 view .LVU288
 669:Core/Src/main.c ****     }
 1020              		.loc 1 669 17 is_stmt 0 view .LVU289
 1021 0038 1060     		str	r0, [r2]
 1022 003a EEE7     		b	.L54
 1023              		.cfi_endproc
 1024              	.LFE255:
 1026              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 1027              		.align	1
 1028              		.global	MiniBotInputsEntry
 1029              		.syntax unified
 1030              		.thumb
 1031              		.thumb_func
 1032              		.fpu fpv4-sp-d16
 1034              	MiniBotInputsEntry:
ARM GAS  /tmp/ccrazgw6.s 			page 38


 1035              	.LVL53:
 1036              	.LFB258:
 729:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1037              		.loc 1 729 1 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ Volatile: function does not return.
 1040              		@ args = 0, pretend = 0, frame = 72
 1041              		@ frame_needed = 0, uses_anonymous_args = 0
 729:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1042              		.loc 1 729 1 is_stmt 0 view .LVU291
 1043 0000 00B5     		push	{lr}
 1044              		.cfi_def_cfa_offset 4
 1045              		.cfi_offset 14, -4
 1046 0002 93B0     		sub	sp, sp, #76
 1047              		.cfi_def_cfa_offset 80
 732:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 1048              		.loc 1 732 2 is_stmt 1 view .LVU292
 733:Core/Src/main.c **** 
 1049              		.loc 1 733 2 view .LVU293
 1050 0004 6846     		mov	r0, sp
 1051              	.LVL54:
 733:Core/Src/main.c **** 
 1052              		.loc 1 733 2 is_stmt 0 view .LVU294
 1053 0006 FFF7FEFF 		bl	MiniBotInit
 1054              	.LVL55:
 736:Core/Src/main.c **** 
 1055              		.loc 1 736 3 is_stmt 1 view .LVU295
 1056 000a 0422     		movs	r2, #4
 1057 000c 1649     		ldr	r1, .L59
 1058 000e 1748     		ldr	r0, .L59+4
 1059 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1060              	.LVL56:
 1061              	.L57:
 739:Core/Src/main.c **** 	{
 1062              		.loc 1 739 2 discriminator 1 view .LVU296
 741:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1063              		.loc 1 741 5 discriminator 1 view .LVU297
 1064 0014 164C     		ldr	r4, .L59+8
 1065 0016 144D     		ldr	r5, .L59
 1066 0018 2246     		mov	r2, r4
 1067 001a 6946     		mov	r1, sp
 1068 001c 2868     		ldr	r0, [r5]
 1069 001e FFF7FEFF 		bl	QPotDataUpdate
 1070              	.LVL57:
 742:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 1071              		.loc 1 742 5 discriminator 1 view .LVU298
 1072 0022 221D     		adds	r2, r4, #4
 1073 0024 04A9     		add	r1, sp, #16
 1074 0026 6868     		ldr	r0, [r5, #4]
 1075 0028 FFF7FEFF 		bl	QPotDataUpdate
 1076              	.LVL58:
 743:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 1077              		.loc 1 743 5 discriminator 1 view .LVU299
 1078 002c 04F10802 		add	r2, r4, #8
 1079 0030 08A9     		add	r1, sp, #32
 1080 0032 A868     		ldr	r0, [r5, #8]
 1081 0034 FFF7FEFF 		bl	QPotDataUpdate
ARM GAS  /tmp/ccrazgw6.s 			page 39


 1082              	.LVL59:
 744:Core/Src/main.c **** 
 1083              		.loc 1 744 5 discriminator 1 view .LVU300
 1084 0038 04F10C02 		add	r2, r4, #12
 1085 003c 0CA9     		add	r1, sp, #48
 1086 003e E868     		ldr	r0, [r5, #12]
 1087 0040 FFF7FEFF 		bl	QPotDataUpdate
 1088              	.LVL60:
 746:Core/Src/main.c ****     
 1089              		.loc 1 746 5 discriminator 1 view .LVU301
 746:Core/Src/main.c ****     
 1090              		.loc 1 746 35 is_stmt 0 discriminator 1 view .LVU302
 1091 0044 4FF40071 		mov	r1, #512
 1092 0048 0A48     		ldr	r0, .L59+12
 1093 004a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1094              	.LVL61:
 746:Core/Src/main.c ****     
 1095              		.loc 1 746 24 discriminator 1 view .LVU303
 1096 004e 2074     		strb	r0, [r4, #16]
 748:Core/Src/main.c **** 
 1097              		.loc 1 748 5 is_stmt 1 discriminator 1 view .LVU304
 1098 0050 0023     		movs	r3, #0
 1099 0052 0A22     		movs	r2, #10
 1100 0054 2146     		mov	r1, r4
 1101 0056 0848     		ldr	r0, .L59+16
 1102 0058 0068     		ldr	r0, [r0]
 1103 005a FFF7FEFF 		bl	xQueueGenericSend
 1104              	.LVL62:
 750:Core/Src/main.c **** 	}
 1105              		.loc 1 750 5 discriminator 1 view .LVU305
 1106 005e 0120     		movs	r0, #1
 1107 0060 FFF7FEFF 		bl	osDelay
 1108              	.LVL63:
 739:Core/Src/main.c **** 	{
 1109              		.loc 1 739 7 discriminator 1 view .LVU306
 1110 0064 D6E7     		b	.L57
 1111              	.L60:
 1112 0066 00BF     		.align	2
 1113              	.L59:
 1114 0068 00000000 		.word	.LANCHOR4
 1115 006c 00000000 		.word	.LANCHOR5
 1116 0070 00000000 		.word	.LANCHOR6
 1117 0074 00000240 		.word	1073872896
 1118 0078 00000000 		.word	.LANCHOR2
 1119              		.cfi_endproc
 1120              	.LFE258:
 1122              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1123              		.align	1
 1124              		.global	HAL_TIM_PeriodElapsedCallback
 1125              		.syntax unified
 1126              		.thumb
 1127              		.thumb_func
 1128              		.fpu fpv4-sp-d16
 1130              	HAL_TIM_PeriodElapsedCallback:
 1131              	.LVL64:
 1132              	.LFB263:
 872:Core/Src/main.c ****   }
ARM GAS  /tmp/ccrazgw6.s 			page 40


 873:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 874:Core/Src/main.c **** }
 875:Core/Src/main.c **** 
 876:Core/Src/main.c **** /**
 877:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 878:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 879:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 880:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 881:Core/Src/main.c ****   * @param  htim : TIM handle
 882:Core/Src/main.c ****   * @retval None
 883:Core/Src/main.c ****   */
 884:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 885:Core/Src/main.c **** {
 1133              		.loc 1 885 1 view -0
 1134              		.cfi_startproc
 1135              		@ args = 0, pretend = 0, frame = 0
 1136              		@ frame_needed = 0, uses_anonymous_args = 0
 1137              		.loc 1 885 1 is_stmt 0 view .LVU308
 1138 0000 08B5     		push	{r3, lr}
 1139              		.cfi_def_cfa_offset 8
 1140              		.cfi_offset 3, -8
 1141              		.cfi_offset 14, -4
 886:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 887:Core/Src/main.c **** 
 888:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 889:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1142              		.loc 1 889 3 is_stmt 1 view .LVU309
 1143              		.loc 1 889 11 is_stmt 0 view .LVU310
 1144 0002 0268     		ldr	r2, [r0]
 1145              		.loc 1 889 6 view .LVU311
 1146 0004 034B     		ldr	r3, .L65
 1147 0006 9A42     		cmp	r2, r3
 1148 0008 00D0     		beq	.L64
 1149              	.LVL65:
 1150              	.L61:
 890:Core/Src/main.c ****     HAL_IncTick();
 891:Core/Src/main.c ****   }
 892:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 893:Core/Src/main.c **** 
 894:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 895:Core/Src/main.c **** }
 1151              		.loc 1 895 1 view .LVU312
 1152 000a 08BD     		pop	{r3, pc}
 1153              	.LVL66:
 1154              	.L64:
 890:Core/Src/main.c ****     HAL_IncTick();
 1155              		.loc 1 890 5 is_stmt 1 view .LVU313
 1156 000c FFF7FEFF 		bl	HAL_IncTick
 1157              	.LVL67:
 1158              		.loc 1 895 1 is_stmt 0 view .LVU314
 1159 0010 FBE7     		b	.L61
 1160              	.L66:
 1161 0012 00BF     		.align	2
 1162              	.L65:
 1163 0014 00100040 		.word	1073745920
 1164              		.cfi_endproc
 1165              	.LFE263:
ARM GAS  /tmp/ccrazgw6.s 			page 41


 1167              		.section	.text.Error_Handler,"ax",%progbits
 1168              		.align	1
 1169              		.global	Error_Handler
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1173              		.fpu fpv4-sp-d16
 1175              	Error_Handler:
 1176              	.LFB264:
 896:Core/Src/main.c **** 
 897:Core/Src/main.c **** /**
 898:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 899:Core/Src/main.c ****   * @retval None
 900:Core/Src/main.c ****   */
 901:Core/Src/main.c **** void Error_Handler(void)
 902:Core/Src/main.c **** {
 1177              		.loc 1 902 1 is_stmt 1 view -0
 1178              		.cfi_startproc
 1179              		@ Volatile: function does not return.
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182              		@ link register save eliminated.
 903:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 904:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 905:Core/Src/main.c ****   __disable_irq();
 1183              		.loc 1 905 3 view .LVU316
 1184              	.LBB9:
 1185              	.LBI9:
 1186              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/ccrazgw6.s 			page 42


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccrazgw6.s 			page 43


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
ARM GAS  /tmp/ccrazgw6.s 			page 44


 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
ARM GAS  /tmp/ccrazgw6.s 			page 45


 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /tmp/ccrazgw6.s 			page 46


 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccrazgw6.s 			page 47


 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/ccrazgw6.s 			page 48


 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
ARM GAS  /tmp/ccrazgw6.s 			page 49


 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccrazgw6.s 			page 50


 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccrazgw6.s 			page 51


 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccrazgw6.s 			page 52


 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccrazgw6.s 			page 53


 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
ARM GAS  /tmp/ccrazgw6.s 			page 54


 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccrazgw6.s 			page 55


 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
ARM GAS  /tmp/ccrazgw6.s 			page 56


 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
ARM GAS  /tmp/ccrazgw6.s 			page 57


 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  /tmp/ccrazgw6.s 			page 58


 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1187              		.loc 2 960 27 view .LVU317
 1188              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1189              		.loc 2 962 3 view .LVU318
 1190              		.syntax unified
 1191              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1192 0000 72B6     		cpsid i
 1193              	@ 0 "" 2
 1194              		.thumb
 1195              		.syntax unified
 1196              	.L68:
 1197              	.LBE10:
 1198              	.LBE9:
 906:Core/Src/main.c ****   while (1)
 1199              		.loc 1 906 3 discriminator 1 view .LVU319
 907:Core/Src/main.c ****   {
 908:Core/Src/main.c ****   }
 1200              		.loc 1 908 3 discriminator 1 view .LVU320
 906:Core/Src/main.c ****   while (1)
 1201              		.loc 1 906 9 discriminator 1 view .LVU321
 1202 0002 FEE7     		b	.L68
 1203              		.cfi_endproc
 1204              	.LFE264:
 1206              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1207              		.align	1
 1208              		.syntax unified
 1209              		.thumb
 1210              		.thumb_func
 1211              		.fpu fpv4-sp-d16
 1213              	MX_ADC1_Init:
 1214              	.LFB246:
 347:Core/Src/main.c **** 
 1215              		.loc 1 347 1 view -0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 16
 1218              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrazgw6.s 			page 59


 1219 0000 00B5     		push	{lr}
 1220              		.cfi_def_cfa_offset 4
 1221              		.cfi_offset 14, -4
 1222 0002 85B0     		sub	sp, sp, #20
 1223              		.cfi_def_cfa_offset 24
 353:Core/Src/main.c **** 
 1224              		.loc 1 353 3 view .LVU323
 353:Core/Src/main.c **** 
 1225              		.loc 1 353 26 is_stmt 0 view .LVU324
 1226 0004 0023     		movs	r3, #0
 1227 0006 0093     		str	r3, [sp]
 1228 0008 0193     		str	r3, [sp, #4]
 1229 000a 0293     		str	r3, [sp, #8]
 1230 000c 0393     		str	r3, [sp, #12]
 361:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1231              		.loc 1 361 3 is_stmt 1 view .LVU325
 361:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1232              		.loc 1 361 18 is_stmt 0 view .LVU326
 1233 000e 2548     		ldr	r0, .L81
 1234 0010 254A     		ldr	r2, .L81+4
 1235 0012 0260     		str	r2, [r0]
 362:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1236              		.loc 1 362 3 is_stmt 1 view .LVU327
 362:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1237              		.loc 1 362 29 is_stmt 0 view .LVU328
 1238 0014 4FF48032 		mov	r2, #65536
 1239 0018 4260     		str	r2, [r0, #4]
 363:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1240              		.loc 1 363 3 is_stmt 1 view .LVU329
 363:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1241              		.loc 1 363 25 is_stmt 0 view .LVU330
 1242 001a 8360     		str	r3, [r0, #8]
 364:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1243              		.loc 1 364 3 is_stmt 1 view .LVU331
 364:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1244              		.loc 1 364 27 is_stmt 0 view .LVU332
 1245 001c 0122     		movs	r2, #1
 1246 001e 0261     		str	r2, [r0, #16]
 365:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1247              		.loc 1 365 3 is_stmt 1 view .LVU333
 365:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1248              		.loc 1 365 33 is_stmt 0 view .LVU334
 1249 0020 0276     		strb	r2, [r0, #24]
 366:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1250              		.loc 1 366 3 is_stmt 1 view .LVU335
 366:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1251              		.loc 1 366 36 is_stmt 0 view .LVU336
 1252 0022 80F82030 		strb	r3, [r0, #32]
 367:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1253              		.loc 1 367 3 is_stmt 1 view .LVU337
 367:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1254              		.loc 1 367 35 is_stmt 0 view .LVU338
 1255 0026 C362     		str	r3, [r0, #44]
 368:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1256              		.loc 1 368 3 is_stmt 1 view .LVU339
 368:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1257              		.loc 1 368 31 is_stmt 0 view .LVU340
ARM GAS  /tmp/ccrazgw6.s 			page 60


 1258 0028 2049     		ldr	r1, .L81+8
 1259 002a 8162     		str	r1, [r0, #40]
 369:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1260              		.loc 1 369 3 is_stmt 1 view .LVU341
 369:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1261              		.loc 1 369 24 is_stmt 0 view .LVU342
 1262 002c C360     		str	r3, [r0, #12]
 370:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1263              		.loc 1 370 3 is_stmt 1 view .LVU343
 370:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1264              		.loc 1 370 30 is_stmt 0 view .LVU344
 1265 002e 0421     		movs	r1, #4
 1266 0030 C161     		str	r1, [r0, #28]
 371:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1267              		.loc 1 371 3 is_stmt 1 view .LVU345
 371:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1268              		.loc 1 371 36 is_stmt 0 view .LVU346
 1269 0032 80F83020 		strb	r2, [r0, #48]
 372:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1270              		.loc 1 372 3 is_stmt 1 view .LVU347
 372:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1271              		.loc 1 372 27 is_stmt 0 view .LVU348
 1272 0036 4361     		str	r3, [r0, #20]
 373:Core/Src/main.c ****   {
 1273              		.loc 1 373 3 is_stmt 1 view .LVU349
 373:Core/Src/main.c ****   {
 1274              		.loc 1 373 7 is_stmt 0 view .LVU350
 1275 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1276              	.LVL68:
 373:Core/Src/main.c ****   {
 1277              		.loc 1 373 6 view .LVU351
 1278 003c 38BB     		cbnz	r0, .L76
 380:Core/Src/main.c ****   sConfig.Rank = 1;
 1279              		.loc 1 380 3 is_stmt 1 view .LVU352
 380:Core/Src/main.c ****   sConfig.Rank = 1;
 1280              		.loc 1 380 19 is_stmt 0 view .LVU353
 1281 003e 0023     		movs	r3, #0
 1282 0040 0093     		str	r3, [sp]
 381:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1283              		.loc 1 381 3 is_stmt 1 view .LVU354
 381:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1284              		.loc 1 381 16 is_stmt 0 view .LVU355
 1285 0042 0122     		movs	r2, #1
 1286 0044 0192     		str	r2, [sp, #4]
 382:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1287              		.loc 1 382 3 is_stmt 1 view .LVU356
 382:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1288              		.loc 1 382 24 is_stmt 0 view .LVU357
 1289 0046 0293     		str	r3, [sp, #8]
 383:Core/Src/main.c ****   {
 1290              		.loc 1 383 3 is_stmt 1 view .LVU358
 383:Core/Src/main.c ****   {
 1291              		.loc 1 383 7 is_stmt 0 view .LVU359
 1292 0048 6946     		mov	r1, sp
 1293 004a 1648     		ldr	r0, .L81
 1294 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1295              	.LVL69:
ARM GAS  /tmp/ccrazgw6.s 			page 61


 383:Core/Src/main.c ****   {
 1296              		.loc 1 383 6 view .LVU360
 1297 0050 F8B9     		cbnz	r0, .L77
 390:Core/Src/main.c ****   sConfig.Rank = 2;
 1298              		.loc 1 390 3 is_stmt 1 view .LVU361
 390:Core/Src/main.c ****   sConfig.Rank = 2;
 1299              		.loc 1 390 19 is_stmt 0 view .LVU362
 1300 0052 0123     		movs	r3, #1
 1301 0054 0093     		str	r3, [sp]
 391:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1302              		.loc 1 391 3 is_stmt 1 view .LVU363
 391:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1303              		.loc 1 391 16 is_stmt 0 view .LVU364
 1304 0056 0223     		movs	r3, #2
 1305 0058 0193     		str	r3, [sp, #4]
 392:Core/Src/main.c ****   {
 1306              		.loc 1 392 3 is_stmt 1 view .LVU365
 392:Core/Src/main.c ****   {
 1307              		.loc 1 392 7 is_stmt 0 view .LVU366
 1308 005a 6946     		mov	r1, sp
 1309 005c 1148     		ldr	r0, .L81
 1310 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1311              	.LVL70:
 392:Core/Src/main.c ****   {
 1312              		.loc 1 392 6 view .LVU367
 1313 0062 C0B9     		cbnz	r0, .L78
 399:Core/Src/main.c ****   sConfig.Rank = 3;
 1314              		.loc 1 399 3 is_stmt 1 view .LVU368
 399:Core/Src/main.c ****   sConfig.Rank = 3;
 1315              		.loc 1 399 19 is_stmt 0 view .LVU369
 1316 0064 0423     		movs	r3, #4
 1317 0066 0093     		str	r3, [sp]
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1318              		.loc 1 400 3 is_stmt 1 view .LVU370
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1319              		.loc 1 400 16 is_stmt 0 view .LVU371
 1320 0068 0323     		movs	r3, #3
 1321 006a 0193     		str	r3, [sp, #4]
 401:Core/Src/main.c ****   {
 1322              		.loc 1 401 3 is_stmt 1 view .LVU372
 401:Core/Src/main.c ****   {
 1323              		.loc 1 401 7 is_stmt 0 view .LVU373
 1324 006c 6946     		mov	r1, sp
 1325 006e 0D48     		ldr	r0, .L81
 1326 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1327              	.LVL71:
 401:Core/Src/main.c ****   {
 1328              		.loc 1 401 6 view .LVU374
 1329 0074 88B9     		cbnz	r0, .L79
 408:Core/Src/main.c ****   sConfig.Rank = 4;
 1330              		.loc 1 408 3 is_stmt 1 view .LVU375
 408:Core/Src/main.c ****   sConfig.Rank = 4;
 1331              		.loc 1 408 19 is_stmt 0 view .LVU376
 1332 0076 0823     		movs	r3, #8
 1333 0078 0093     		str	r3, [sp]
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1334              		.loc 1 409 3 is_stmt 1 view .LVU377
ARM GAS  /tmp/ccrazgw6.s 			page 62


 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1335              		.loc 1 409 16 is_stmt 0 view .LVU378
 1336 007a 0423     		movs	r3, #4
 1337 007c 0193     		str	r3, [sp, #4]
 410:Core/Src/main.c ****   {
 1338              		.loc 1 410 3 is_stmt 1 view .LVU379
 410:Core/Src/main.c ****   {
 1339              		.loc 1 410 7 is_stmt 0 view .LVU380
 1340 007e 6946     		mov	r1, sp
 1341 0080 0848     		ldr	r0, .L81
 1342 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1343              	.LVL72:
 410:Core/Src/main.c ****   {
 1344              		.loc 1 410 6 view .LVU381
 1345 0086 50B9     		cbnz	r0, .L80
 418:Core/Src/main.c **** 
 1346              		.loc 1 418 1 view .LVU382
 1347 0088 05B0     		add	sp, sp, #20
 1348              		.cfi_remember_state
 1349              		.cfi_def_cfa_offset 4
 1350              		@ sp needed
 1351 008a 5DF804FB 		ldr	pc, [sp], #4
 1352              	.L76:
 1353              		.cfi_restore_state
 375:Core/Src/main.c ****   }
 1354              		.loc 1 375 5 is_stmt 1 view .LVU383
 1355 008e FFF7FEFF 		bl	Error_Handler
 1356              	.LVL73:
 1357              	.L77:
 385:Core/Src/main.c ****   }
 1358              		.loc 1 385 5 view .LVU384
 1359 0092 FFF7FEFF 		bl	Error_Handler
 1360              	.LVL74:
 1361              	.L78:
 394:Core/Src/main.c ****   }
 1362              		.loc 1 394 5 view .LVU385
 1363 0096 FFF7FEFF 		bl	Error_Handler
 1364              	.LVL75:
 1365              	.L79:
 403:Core/Src/main.c ****   }
 1366              		.loc 1 403 5 view .LVU386
 1367 009a FFF7FEFF 		bl	Error_Handler
 1368              	.LVL76:
 1369              	.L80:
 412:Core/Src/main.c ****   }
 1370              		.loc 1 412 5 view .LVU387
 1371 009e FFF7FEFF 		bl	Error_Handler
 1372              	.LVL77:
 1373              	.L82:
 1374 00a2 00BF     		.align	2
 1375              	.L81:
 1376 00a4 00000000 		.word	.LANCHOR5
 1377 00a8 00200140 		.word	1073815552
 1378 00ac 0100000F 		.word	251658241
 1379              		.cfi_endproc
 1380              	.LFE246:
 1382              		.section	.text.MX_I2C1_Init,"ax",%progbits
ARM GAS  /tmp/ccrazgw6.s 			page 63


 1383              		.align	1
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1387              		.fpu fpv4-sp-d16
 1389              	MX_I2C1_Init:
 1390              	.LFB247:
 426:Core/Src/main.c **** 
 1391              		.loc 1 426 1 view -0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 0
 1394              		@ frame_needed = 0, uses_anonymous_args = 0
 1395 0000 08B5     		push	{r3, lr}
 1396              		.cfi_def_cfa_offset 8
 1397              		.cfi_offset 3, -8
 1398              		.cfi_offset 14, -4
 435:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1399              		.loc 1 435 3 view .LVU389
 435:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1400              		.loc 1 435 18 is_stmt 0 view .LVU390
 1401 0002 0A48     		ldr	r0, .L87
 1402 0004 0A4B     		ldr	r3, .L87+4
 1403 0006 0360     		str	r3, [r0]
 436:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1404              		.loc 1 436 3 is_stmt 1 view .LVU391
 436:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1405              		.loc 1 436 25 is_stmt 0 view .LVU392
 1406 0008 0A4B     		ldr	r3, .L87+8
 1407 000a 4360     		str	r3, [r0, #4]
 437:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1408              		.loc 1 437 3 is_stmt 1 view .LVU393
 437:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1409              		.loc 1 437 24 is_stmt 0 view .LVU394
 1410 000c 0023     		movs	r3, #0
 1411 000e 8360     		str	r3, [r0, #8]
 438:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1412              		.loc 1 438 3 is_stmt 1 view .LVU395
 438:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1413              		.loc 1 438 26 is_stmt 0 view .LVU396
 1414 0010 C360     		str	r3, [r0, #12]
 439:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1415              		.loc 1 439 3 is_stmt 1 view .LVU397
 439:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1416              		.loc 1 439 29 is_stmt 0 view .LVU398
 1417 0012 4FF48042 		mov	r2, #16384
 1418 0016 0261     		str	r2, [r0, #16]
 440:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1419              		.loc 1 440 3 is_stmt 1 view .LVU399
 440:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1420              		.loc 1 440 30 is_stmt 0 view .LVU400
 1421 0018 4361     		str	r3, [r0, #20]
 441:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1422              		.loc 1 441 3 is_stmt 1 view .LVU401
 441:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1423              		.loc 1 441 26 is_stmt 0 view .LVU402
 1424 001a 8361     		str	r3, [r0, #24]
 442:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
ARM GAS  /tmp/ccrazgw6.s 			page 64


 1425              		.loc 1 442 3 is_stmt 1 view .LVU403
 442:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1426              		.loc 1 442 30 is_stmt 0 view .LVU404
 1427 001c C361     		str	r3, [r0, #28]
 443:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1428              		.loc 1 443 3 is_stmt 1 view .LVU405
 443:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1429              		.loc 1 443 28 is_stmt 0 view .LVU406
 1430 001e 0362     		str	r3, [r0, #32]
 444:Core/Src/main.c ****   {
 1431              		.loc 1 444 3 is_stmt 1 view .LVU407
 444:Core/Src/main.c ****   {
 1432              		.loc 1 444 7 is_stmt 0 view .LVU408
 1433 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1434              	.LVL78:
 444:Core/Src/main.c ****   {
 1435              		.loc 1 444 6 view .LVU409
 1436 0024 00B9     		cbnz	r0, .L86
 452:Core/Src/main.c **** 
 1437              		.loc 1 452 1 view .LVU410
 1438 0026 08BD     		pop	{r3, pc}
 1439              	.L86:
 446:Core/Src/main.c ****   }
 1440              		.loc 1 446 5 is_stmt 1 view .LVU411
 1441 0028 FFF7FEFF 		bl	Error_Handler
 1442              	.LVL79:
 1443              	.L88:
 1444              		.align	2
 1445              	.L87:
 1446 002c 00000000 		.word	.LANCHOR3
 1447 0030 00540040 		.word	1073763328
 1448 0034 A0860100 		.word	100000
 1449              		.cfi_endproc
 1450              	.LFE247:
 1452              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1453              		.align	1
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu fpv4-sp-d16
 1459              	MX_USART2_UART_Init:
 1460              	.LFB249:
 494:Core/Src/main.c **** 
 1461              		.loc 1 494 1 view -0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465 0000 08B5     		push	{r3, lr}
 1466              		.cfi_def_cfa_offset 8
 1467              		.cfi_offset 3, -8
 1468              		.cfi_offset 14, -4
 503:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1469              		.loc 1 503 3 view .LVU413
 503:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1470              		.loc 1 503 19 is_stmt 0 view .LVU414
 1471 0002 0A48     		ldr	r0, .L93
 1472 0004 0A4B     		ldr	r3, .L93+4
ARM GAS  /tmp/ccrazgw6.s 			page 65


 1473 0006 0360     		str	r3, [r0]
 504:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1474              		.loc 1 504 3 is_stmt 1 view .LVU415
 504:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1475              		.loc 1 504 24 is_stmt 0 view .LVU416
 1476 0008 4FF4E133 		mov	r3, #115200
 1477 000c 4360     		str	r3, [r0, #4]
 505:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1478              		.loc 1 505 3 is_stmt 1 view .LVU417
 505:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1479              		.loc 1 505 26 is_stmt 0 view .LVU418
 1480 000e 0023     		movs	r3, #0
 1481 0010 8360     		str	r3, [r0, #8]
 506:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1482              		.loc 1 506 3 is_stmt 1 view .LVU419
 506:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1483              		.loc 1 506 24 is_stmt 0 view .LVU420
 1484 0012 C360     		str	r3, [r0, #12]
 507:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1485              		.loc 1 507 3 is_stmt 1 view .LVU421
 507:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1486              		.loc 1 507 22 is_stmt 0 view .LVU422
 1487 0014 0361     		str	r3, [r0, #16]
 508:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1488              		.loc 1 508 3 is_stmt 1 view .LVU423
 508:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1489              		.loc 1 508 20 is_stmt 0 view .LVU424
 1490 0016 0C22     		movs	r2, #12
 1491 0018 4261     		str	r2, [r0, #20]
 509:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1492              		.loc 1 509 3 is_stmt 1 view .LVU425
 509:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1493              		.loc 1 509 25 is_stmt 0 view .LVU426
 1494 001a 8361     		str	r3, [r0, #24]
 510:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1495              		.loc 1 510 3 is_stmt 1 view .LVU427
 510:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1496              		.loc 1 510 28 is_stmt 0 view .LVU428
 1497 001c C361     		str	r3, [r0, #28]
 511:Core/Src/main.c ****   {
 1498              		.loc 1 511 3 is_stmt 1 view .LVU429
 511:Core/Src/main.c ****   {
 1499              		.loc 1 511 7 is_stmt 0 view .LVU430
 1500 001e FFF7FEFF 		bl	HAL_UART_Init
 1501              	.LVL80:
 511:Core/Src/main.c ****   {
 1502              		.loc 1 511 6 view .LVU431
 1503 0022 00B9     		cbnz	r0, .L92
 519:Core/Src/main.c **** 
 1504              		.loc 1 519 1 view .LVU432
 1505 0024 08BD     		pop	{r3, pc}
 1506              	.L92:
 513:Core/Src/main.c ****   }
 1507              		.loc 1 513 5 is_stmt 1 view .LVU433
 1508 0026 FFF7FEFF 		bl	Error_Handler
 1509              	.LVL81:
 1510              	.L94:
ARM GAS  /tmp/ccrazgw6.s 			page 66


 1511 002a 00BF     		.align	2
 1512              	.L93:
 1513 002c 00000000 		.word	.LANCHOR7
 1514 0030 00440040 		.word	1073759232
 1515              		.cfi_endproc
 1516              	.LFE249:
 1518              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1519              		.align	1
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1523              		.fpu fpv4-sp-d16
 1525              	MX_I2C2_Init:
 1526              	.LFB248:
 460:Core/Src/main.c **** 
 1527              		.loc 1 460 1 view -0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531 0000 08B5     		push	{r3, lr}
 1532              		.cfi_def_cfa_offset 8
 1533              		.cfi_offset 3, -8
 1534              		.cfi_offset 14, -4
 469:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1535              		.loc 1 469 3 view .LVU435
 469:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1536              		.loc 1 469 18 is_stmt 0 view .LVU436
 1537 0002 0A48     		ldr	r0, .L99
 1538 0004 0A4B     		ldr	r3, .L99+4
 1539 0006 0360     		str	r3, [r0]
 470:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1540              		.loc 1 470 3 is_stmt 1 view .LVU437
 470:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1541              		.loc 1 470 25 is_stmt 0 view .LVU438
 1542 0008 0A4B     		ldr	r3, .L99+8
 1543 000a 4360     		str	r3, [r0, #4]
 471:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1544              		.loc 1 471 3 is_stmt 1 view .LVU439
 471:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1545              		.loc 1 471 24 is_stmt 0 view .LVU440
 1546 000c 0023     		movs	r3, #0
 1547 000e 8360     		str	r3, [r0, #8]
 472:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1548              		.loc 1 472 3 is_stmt 1 view .LVU441
 472:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1549              		.loc 1 472 26 is_stmt 0 view .LVU442
 1550 0010 C360     		str	r3, [r0, #12]
 473:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1551              		.loc 1 473 3 is_stmt 1 view .LVU443
 473:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1552              		.loc 1 473 29 is_stmt 0 view .LVU444
 1553 0012 4FF48042 		mov	r2, #16384
 1554 0016 0261     		str	r2, [r0, #16]
 474:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1555              		.loc 1 474 3 is_stmt 1 view .LVU445
 474:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1556              		.loc 1 474 30 is_stmt 0 view .LVU446
ARM GAS  /tmp/ccrazgw6.s 			page 67


 1557 0018 4361     		str	r3, [r0, #20]
 475:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1558              		.loc 1 475 3 is_stmt 1 view .LVU447
 475:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1559              		.loc 1 475 26 is_stmt 0 view .LVU448
 1560 001a 8361     		str	r3, [r0, #24]
 476:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1561              		.loc 1 476 3 is_stmt 1 view .LVU449
 476:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1562              		.loc 1 476 30 is_stmt 0 view .LVU450
 1563 001c C361     		str	r3, [r0, #28]
 477:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1564              		.loc 1 477 3 is_stmt 1 view .LVU451
 477:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1565              		.loc 1 477 28 is_stmt 0 view .LVU452
 1566 001e 0362     		str	r3, [r0, #32]
 478:Core/Src/main.c ****   {
 1567              		.loc 1 478 3 is_stmt 1 view .LVU453
 478:Core/Src/main.c ****   {
 1568              		.loc 1 478 7 is_stmt 0 view .LVU454
 1569 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1570              	.LVL82:
 478:Core/Src/main.c ****   {
 1571              		.loc 1 478 6 view .LVU455
 1572 0024 00B9     		cbnz	r0, .L98
 486:Core/Src/main.c **** 
 1573              		.loc 1 486 1 view .LVU456
 1574 0026 08BD     		pop	{r3, pc}
 1575              	.L98:
 480:Core/Src/main.c ****   }
 1576              		.loc 1 480 5 is_stmt 1 view .LVU457
 1577 0028 FFF7FEFF 		bl	Error_Handler
 1578              	.LVL83:
 1579              	.L100:
 1580              		.align	2
 1581              	.L99:
 1582 002c 00000000 		.word	.LANCHOR8
 1583 0030 00580040 		.word	1073764352
 1584 0034 A0860100 		.word	100000
 1585              		.cfi_endproc
 1586              	.LFE248:
 1588              		.section	.text.SystemClock_Config,"ax",%progbits
 1589              		.align	1
 1590              		.global	SystemClock_Config
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1594              		.fpu fpv4-sp-d16
 1596              	SystemClock_Config:
 1597              	.LFB245:
 299:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1598              		.loc 1 299 1 view -0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 80
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
 1602 0000 00B5     		push	{lr}
 1603              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccrazgw6.s 			page 68


 1604              		.cfi_offset 14, -4
 1605 0002 95B0     		sub	sp, sp, #84
 1606              		.cfi_def_cfa_offset 88
 300:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1607              		.loc 1 300 3 view .LVU459
 300:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1608              		.loc 1 300 22 is_stmt 0 view .LVU460
 1609 0004 3422     		movs	r2, #52
 1610 0006 0021     		movs	r1, #0
 1611 0008 07A8     		add	r0, sp, #28
 1612 000a FFF7FEFF 		bl	memset
 1613              	.LVL84:
 301:Core/Src/main.c **** 
 1614              		.loc 1 301 3 is_stmt 1 view .LVU461
 301:Core/Src/main.c **** 
 1615              		.loc 1 301 22 is_stmt 0 view .LVU462
 1616 000e 0023     		movs	r3, #0
 1617 0010 0293     		str	r3, [sp, #8]
 1618 0012 0393     		str	r3, [sp, #12]
 1619 0014 0493     		str	r3, [sp, #16]
 1620 0016 0593     		str	r3, [sp, #20]
 1621 0018 0693     		str	r3, [sp, #24]
 305:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1622              		.loc 1 305 3 is_stmt 1 view .LVU463
 1623              	.LBB11:
 305:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1624              		.loc 1 305 3 view .LVU464
 1625 001a 0093     		str	r3, [sp]
 305:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1626              		.loc 1 305 3 view .LVU465
 1627 001c 1F4A     		ldr	r2, .L107
 1628 001e 116C     		ldr	r1, [r2, #64]
 1629 0020 41F08051 		orr	r1, r1, #268435456
 1630 0024 1164     		str	r1, [r2, #64]
 305:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1631              		.loc 1 305 3 view .LVU466
 1632 0026 126C     		ldr	r2, [r2, #64]
 1633 0028 02F08052 		and	r2, r2, #268435456
 1634 002c 0092     		str	r2, [sp]
 305:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1635              		.loc 1 305 3 view .LVU467
 1636 002e 009A     		ldr	r2, [sp]
 1637              	.LBE11:
 305:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1638              		.loc 1 305 3 view .LVU468
 306:Core/Src/main.c **** 
 1639              		.loc 1 306 3 view .LVU469
 1640              	.LBB12:
 306:Core/Src/main.c **** 
 1641              		.loc 1 306 3 view .LVU470
 1642 0030 0193     		str	r3, [sp, #4]
 306:Core/Src/main.c **** 
 1643              		.loc 1 306 3 view .LVU471
 1644 0032 1B49     		ldr	r1, .L107+4
 1645 0034 0A68     		ldr	r2, [r1]
 1646 0036 22F44042 		bic	r2, r2, #49152
 1647 003a 42F48042 		orr	r2, r2, #16384
ARM GAS  /tmp/ccrazgw6.s 			page 69


 1648 003e 0A60     		str	r2, [r1]
 306:Core/Src/main.c **** 
 1649              		.loc 1 306 3 view .LVU472
 1650 0040 0A68     		ldr	r2, [r1]
 1651 0042 02F44042 		and	r2, r2, #49152
 1652 0046 0192     		str	r2, [sp, #4]
 306:Core/Src/main.c **** 
 1653              		.loc 1 306 3 view .LVU473
 1654 0048 019A     		ldr	r2, [sp, #4]
 1655              	.LBE12:
 306:Core/Src/main.c **** 
 1656              		.loc 1 306 3 view .LVU474
 311:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1657              		.loc 1 311 3 view .LVU475
 311:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1658              		.loc 1 311 36 is_stmt 0 view .LVU476
 1659 004a 0222     		movs	r2, #2
 1660 004c 0792     		str	r2, [sp, #28]
 312:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1661              		.loc 1 312 3 is_stmt 1 view .LVU477
 312:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1662              		.loc 1 312 30 is_stmt 0 view .LVU478
 1663 004e 0121     		movs	r1, #1
 1664 0050 0A91     		str	r1, [sp, #40]
 313:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1665              		.loc 1 313 3 is_stmt 1 view .LVU479
 313:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1666              		.loc 1 313 41 is_stmt 0 view .LVU480
 1667 0052 1021     		movs	r1, #16
 1668 0054 0B91     		str	r1, [sp, #44]
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1669              		.loc 1 314 3 is_stmt 1 view .LVU481
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1670              		.loc 1 314 34 is_stmt 0 view .LVU482
 1671 0056 0D92     		str	r2, [sp, #52]
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1672              		.loc 1 315 3 is_stmt 1 view .LVU483
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1673              		.loc 1 315 35 is_stmt 0 view .LVU484
 1674 0058 0E93     		str	r3, [sp, #56]
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1675              		.loc 1 316 3 is_stmt 1 view .LVU485
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1676              		.loc 1 316 30 is_stmt 0 view .LVU486
 1677 005a 0F91     		str	r1, [sp, #60]
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1678              		.loc 1 317 3 is_stmt 1 view .LVU487
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1679              		.loc 1 317 30 is_stmt 0 view .LVU488
 1680 005c 4FF4A873 		mov	r3, #336
 1681 0060 1093     		str	r3, [sp, #64]
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1682              		.loc 1 318 3 is_stmt 1 view .LVU489
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1683              		.loc 1 318 30 is_stmt 0 view .LVU490
 1684 0062 0423     		movs	r3, #4
 1685 0064 1193     		str	r3, [sp, #68]
ARM GAS  /tmp/ccrazgw6.s 			page 70


 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1686              		.loc 1 319 3 is_stmt 1 view .LVU491
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1687              		.loc 1 319 30 is_stmt 0 view .LVU492
 1688 0066 1292     		str	r2, [sp, #72]
 320:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1689              		.loc 1 320 3 is_stmt 1 view .LVU493
 320:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1690              		.loc 1 320 30 is_stmt 0 view .LVU494
 1691 0068 1392     		str	r2, [sp, #76]
 321:Core/Src/main.c ****   {
 1692              		.loc 1 321 3 is_stmt 1 view .LVU495
 321:Core/Src/main.c ****   {
 1693              		.loc 1 321 7 is_stmt 0 view .LVU496
 1694 006a 07A8     		add	r0, sp, #28
 1695 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1696              	.LVL85:
 321:Core/Src/main.c ****   {
 1697              		.loc 1 321 6 view .LVU497
 1698 0070 80B9     		cbnz	r0, .L105
 328:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1699              		.loc 1 328 3 is_stmt 1 view .LVU498
 328:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1700              		.loc 1 328 31 is_stmt 0 view .LVU499
 1701 0072 0F23     		movs	r3, #15
 1702 0074 0293     		str	r3, [sp, #8]
 330:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1703              		.loc 1 330 3 is_stmt 1 view .LVU500
 330:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1704              		.loc 1 330 34 is_stmt 0 view .LVU501
 1705 0076 0221     		movs	r1, #2
 1706 0078 0391     		str	r1, [sp, #12]
 331:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1707              		.loc 1 331 3 is_stmt 1 view .LVU502
 331:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1708              		.loc 1 331 35 is_stmt 0 view .LVU503
 1709 007a 0023     		movs	r3, #0
 1710 007c 0493     		str	r3, [sp, #16]
 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1711              		.loc 1 332 3 is_stmt 1 view .LVU504
 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1712              		.loc 1 332 36 is_stmt 0 view .LVU505
 1713 007e 4FF48052 		mov	r2, #4096
 1714 0082 0592     		str	r2, [sp, #20]
 333:Core/Src/main.c **** 
 1715              		.loc 1 333 3 is_stmt 1 view .LVU506
 333:Core/Src/main.c **** 
 1716              		.loc 1 333 36 is_stmt 0 view .LVU507
 1717 0084 0693     		str	r3, [sp, #24]
 335:Core/Src/main.c ****   {
 1718              		.loc 1 335 3 is_stmt 1 view .LVU508
 335:Core/Src/main.c ****   {
 1719              		.loc 1 335 7 is_stmt 0 view .LVU509
 1720 0086 02A8     		add	r0, sp, #8
 1721 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1722              	.LVL86:
 335:Core/Src/main.c ****   {
ARM GAS  /tmp/ccrazgw6.s 			page 71


 1723              		.loc 1 335 6 view .LVU510
 1724 008c 20B9     		cbnz	r0, .L106
 339:Core/Src/main.c **** 
 1725              		.loc 1 339 1 view .LVU511
 1726 008e 15B0     		add	sp, sp, #84
 1727              		.cfi_remember_state
 1728              		.cfi_def_cfa_offset 4
 1729              		@ sp needed
 1730 0090 5DF804FB 		ldr	pc, [sp], #4
 1731              	.L105:
 1732              		.cfi_restore_state
 323:Core/Src/main.c ****   }
 1733              		.loc 1 323 5 is_stmt 1 view .LVU512
 1734 0094 FFF7FEFF 		bl	Error_Handler
 1735              	.LVL87:
 1736              	.L106:
 337:Core/Src/main.c ****   }
 1737              		.loc 1 337 5 view .LVU513
 1738 0098 FFF7FEFF 		bl	Error_Handler
 1739              	.LVL88:
 1740              	.L108:
 1741              		.align	2
 1742              	.L107:
 1743 009c 00380240 		.word	1073887232
 1744 00a0 00700040 		.word	1073770496
 1745              		.cfi_endproc
 1746              	.LFE245:
 1748              		.section	.text.main,"ax",%progbits
 1749              		.align	1
 1750              		.global	main
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1754              		.fpu fpv4-sp-d16
 1756              	main:
 1757              	.LFB244:
 178:Core/Src/main.c **** 
 1758              		.loc 1 178 1 view -0
 1759              		.cfi_startproc
 1760              		@ Volatile: function does not return.
 1761              		@ args = 0, pretend = 0, frame = 256
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763 0000 00B5     		push	{lr}
 1764              		.cfi_def_cfa_offset 4
 1765              		.cfi_offset 14, -4
 1766 0002 C1B0     		sub	sp, sp, #260
 1767              		.cfi_def_cfa_offset 264
 187:Core/Src/main.c **** 
 1768              		.loc 1 187 3 view .LVU515
 1769 0004 FFF7FEFF 		bl	HAL_Init
 1770              	.LVL89:
 194:Core/Src/main.c **** 
 1771              		.loc 1 194 3 view .LVU516
 1772 0008 FFF7FEFF 		bl	SystemClock_Config
 1773              	.LVL90:
 201:Core/Src/main.c ****   MX_DMA_Init();
 1774              		.loc 1 201 3 view .LVU517
ARM GAS  /tmp/ccrazgw6.s 			page 72


 1775 000c FFF7FEFF 		bl	MX_GPIO_Init
 1776              	.LVL91:
 202:Core/Src/main.c ****   MX_ADC1_Init();
 1777              		.loc 1 202 3 view .LVU518
 1778 0010 FFF7FEFF 		bl	MX_DMA_Init
 1779              	.LVL92:
 203:Core/Src/main.c ****   MX_I2C1_Init();
 1780              		.loc 1 203 3 view .LVU519
 1781 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1782              	.LVL93:
 204:Core/Src/main.c ****   MX_USART2_UART_Init();
 1783              		.loc 1 204 3 view .LVU520
 1784 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1785              	.LVL94:
 205:Core/Src/main.c ****   MX_I2C2_Init();
 1786              		.loc 1 205 3 view .LVU521
 1787 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1788              	.LVL95:
 206:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1789              		.loc 1 206 3 view .LVU522
 1790 0020 FFF7FEFF 		bl	MX_I2C2_Init
 1791              	.LVL96:
 213:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 1792              		.loc 1 213 3 view .LVU523
 1793 0024 0025     		movs	r5, #0
 1794 0026 3E95     		str	r5, [sp, #248]
 1795 0028 3F95     		str	r5, [sp, #252]
 214:Core/Src/main.c **** 
 1796              		.loc 1 214 3 view .LVU524
 214:Core/Src/main.c **** 
 1797              		.loc 1 214 22 is_stmt 0 view .LVU525
 1798 002a 3EA8     		add	r0, sp, #248
 1799 002c FFF7FEFF 		bl	osMutexCreate
 1800              	.LVL97:
 214:Core/Src/main.c **** 
 1801              		.loc 1 214 20 view .LVU526
 1802 0030 534B     		ldr	r3, .L112
 1803 0032 1860     		str	r0, [r3]
 230:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 1804              		.loc 1 230 3 is_stmt 1 view .LVU527
 1805 0034 534C     		ldr	r4, .L112+4
 1806 0036 3AAE     		add	r6, sp, #232
 1807 0038 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1808 003c 86E80F00 		stm	r6, {r0, r1, r2, r3}
 231:Core/Src/main.c **** 
 1809              		.loc 1 231 3 view .LVU528
 231:Core/Src/main.c **** 
 1810              		.loc 1 231 29 is_stmt 0 view .LVU529
 1811 0040 2946     		mov	r1, r5
 1812 0042 3046     		mov	r0, r6
 1813 0044 FFF7FEFF 		bl	osMessageCreate
 1814              	.LVL98:
 231:Core/Src/main.c **** 
 1815              		.loc 1 231 27 view .LVU530
 1816 0048 4F4B     		ldr	r3, .L112+8
 1817 004a 1860     		str	r0, [r3]
 234:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
ARM GAS  /tmp/ccrazgw6.s 			page 73


 1818              		.loc 1 234 3 is_stmt 1 view .LVU531
 1819 004c 0DF1D80C 		add	ip, sp, #216
 1820 0050 04F11006 		add	r6, r4, #16
 1821 0054 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1822 0058 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 235:Core/Src/main.c **** 
 1823              		.loc 1 235 3 view .LVU532
 235:Core/Src/main.c **** 
 1824              		.loc 1 235 29 is_stmt 0 view .LVU533
 1825 005c 2946     		mov	r1, r5
 1826 005e 6046     		mov	r0, ip
 1827 0060 FFF7FEFF 		bl	osMessageCreate
 1828              	.LVL99:
 235:Core/Src/main.c **** 
 1829              		.loc 1 235 27 view .LVU534
 1830 0064 494B     		ldr	r3, .L112+12
 1831 0066 1860     		str	r0, [r3]
 238:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 1832              		.loc 1 238 3 is_stmt 1 view .LVU535
 1833 0068 0DF1C80C 		add	ip, sp, #200
 1834 006c 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1835 0070 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 239:Core/Src/main.c **** 
 1836              		.loc 1 239 3 view .LVU536
 239:Core/Src/main.c **** 
 1837              		.loc 1 239 25 is_stmt 0 view .LVU537
 1838 0074 2946     		mov	r1, r5
 1839 0076 6046     		mov	r0, ip
 1840 0078 FFF7FEFF 		bl	osMessageCreate
 1841              	.LVL100:
 239:Core/Src/main.c **** 
 1842              		.loc 1 239 23 view .LVU538
 1843 007c 444B     		ldr	r3, .L112+16
 1844 007e 1860     		str	r0, [r3]
 247:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1845              		.loc 1 247 3 is_stmt 1 view .LVU539
 1846 0080 0DF1AC0C 		add	ip, sp, #172
 1847 0084 04F1200E 		add	lr, r4, #32
 1848 0088 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1849 008c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1850 0090 9EE80700 		ldm	lr, {r0, r1, r2}
 1851 0094 8CE80700 		stm	ip, {r0, r1, r2}
 248:Core/Src/main.c **** 
 1852              		.loc 1 248 3 view .LVU540
 248:Core/Src/main.c **** 
 1853              		.loc 1 248 23 is_stmt 0 view .LVU541
 1854 0098 2946     		mov	r1, r5
 1855 009a 2BA8     		add	r0, sp, #172
 1856 009c FFF7FEFF 		bl	osThreadCreate
 1857              	.LVL101:
 248:Core/Src/main.c **** 
 1858              		.loc 1 248 21 view .LVU542
 1859 00a0 3C4B     		ldr	r3, .L112+20
 1860 00a2 1860     		str	r0, [r3]
 251:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 1861              		.loc 1 251 3 is_stmt 1 view .LVU543
 1862 00a4 0DF1900C 		add	ip, sp, #144
ARM GAS  /tmp/ccrazgw6.s 			page 74


 1863 00a8 04F13C0E 		add	lr, r4, #60
 1864 00ac BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1865 00b0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1866 00b4 9EE80700 		ldm	lr, {r0, r1, r2}
 1867 00b8 8CE80700 		stm	ip, {r0, r1, r2}
 252:Core/Src/main.c **** 
 1868              		.loc 1 252 3 view .LVU544
 252:Core/Src/main.c **** 
 1869              		.loc 1 252 24 is_stmt 0 view .LVU545
 1870 00bc 2946     		mov	r1, r5
 1871 00be 24A8     		add	r0, sp, #144
 1872 00c0 FFF7FEFF 		bl	osThreadCreate
 1873              	.LVL102:
 252:Core/Src/main.c **** 
 1874              		.loc 1 252 22 view .LVU546
 1875 00c4 344B     		ldr	r3, .L112+24
 1876 00c6 1860     		str	r0, [r3]
 255:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 1877              		.loc 1 255 3 is_stmt 1 view .LVU547
 1878 00c8 0DF1740C 		add	ip, sp, #116
 1879 00cc 04F1580E 		add	lr, r4, #88
 1880 00d0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1881 00d4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1882 00d8 9EE80700 		ldm	lr, {r0, r1, r2}
 1883 00dc 8CE80700 		stm	ip, {r0, r1, r2}
 256:Core/Src/main.c **** 
 1884              		.loc 1 256 3 view .LVU548
 256:Core/Src/main.c **** 
 1885              		.loc 1 256 25 is_stmt 0 view .LVU549
 1886 00e0 2946     		mov	r1, r5
 1887 00e2 1DA8     		add	r0, sp, #116
 1888 00e4 FFF7FEFF 		bl	osThreadCreate
 1889              	.LVL103:
 256:Core/Src/main.c **** 
 1890              		.loc 1 256 23 view .LVU550
 1891 00e8 2C4B     		ldr	r3, .L112+28
 1892 00ea 1860     		str	r0, [r3]
 259:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 1893              		.loc 1 259 3 is_stmt 1 view .LVU551
 1894 00ec 0DF1580C 		add	ip, sp, #88
 1895 00f0 04F1740E 		add	lr, r4, #116
 1896 00f4 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1897 00f8 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1898 00fc 9EE80700 		ldm	lr, {r0, r1, r2}
 1899 0100 8CE80700 		stm	ip, {r0, r1, r2}
 260:Core/Src/main.c **** 
 1900              		.loc 1 260 3 view .LVU552
 260:Core/Src/main.c **** 
 1901              		.loc 1 260 26 is_stmt 0 view .LVU553
 1902 0104 2946     		mov	r1, r5
 1903 0106 16A8     		add	r0, sp, #88
 1904 0108 FFF7FEFF 		bl	osThreadCreate
 1905              	.LVL104:
 260:Core/Src/main.c **** 
 1906              		.loc 1 260 24 view .LVU554
 1907 010c 244B     		ldr	r3, .L112+32
 1908 010e 1860     		str	r0, [r3]
ARM GAS  /tmp/ccrazgw6.s 			page 75


 263:Core/Src/main.c ****   EmergencyStopTaHandle = osThreadCreate(osThread(EmergencyStopTa), NULL);
 1909              		.loc 1 263 3 is_stmt 1 view .LVU555
 1910 0110 0DF13C0C 		add	ip, sp, #60
 1911 0114 04F1900E 		add	lr, r4, #144
 1912 0118 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1913 011c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1914 0120 9EE80700 		ldm	lr, {r0, r1, r2}
 1915 0124 8CE80700 		stm	ip, {r0, r1, r2}
 264:Core/Src/main.c **** 
 1916              		.loc 1 264 3 view .LVU556
 264:Core/Src/main.c **** 
 1917              		.loc 1 264 27 is_stmt 0 view .LVU557
 1918 0128 2946     		mov	r1, r5
 1919 012a 0FA8     		add	r0, sp, #60
 1920 012c FFF7FEFF 		bl	osThreadCreate
 1921              	.LVL105:
 264:Core/Src/main.c **** 
 1922              		.loc 1 264 25 view .LVU558
 1923 0130 1C4B     		ldr	r3, .L112+36
 1924 0132 1860     		str	r0, [r3]
 267:Core/Src/main.c ****   MotorControlTasHandle = osThreadCreate(osThread(MotorControlTas), NULL);
 1925              		.loc 1 267 3 is_stmt 1 view .LVU559
 1926 0134 0DF1200C 		add	ip, sp, #32
 1927 0138 04F1AC0E 		add	lr, r4, #172
 1928 013c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1929 0140 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1930 0144 9EE80700 		ldm	lr, {r0, r1, r2}
 1931 0148 8CE80700 		stm	ip, {r0, r1, r2}
 268:Core/Src/main.c **** 
 1932              		.loc 1 268 3 view .LVU560
 268:Core/Src/main.c **** 
 1933              		.loc 1 268 27 is_stmt 0 view .LVU561
 1934 014c 2946     		mov	r1, r5
 1935 014e 08A8     		add	r0, sp, #32
 1936 0150 FFF7FEFF 		bl	osThreadCreate
 1937              	.LVL106:
 268:Core/Src/main.c **** 
 1938              		.loc 1 268 25 view .LVU562
 1939 0154 144B     		ldr	r3, .L112+40
 1940 0156 1860     		str	r0, [r3]
 271:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 1941              		.loc 1 271 3 is_stmt 1 view .LVU563
 1942 0158 0DF1040C 		add	ip, sp, #4
 1943 015c C834     		adds	r4, r4, #200
 1944 015e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1945 0160 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1946 0164 94E80700 		ldm	r4, {r0, r1, r2}
 1947 0168 8CE80700 		stm	ip, {r0, r1, r2}
 272:Core/Src/main.c **** 
 1948              		.loc 1 272 3 view .LVU564
 272:Core/Src/main.c **** 
 1949              		.loc 1 272 24 is_stmt 0 view .LVU565
 1950 016c 2946     		mov	r1, r5
 1951 016e 01A8     		add	r0, sp, #4
 1952 0170 FFF7FEFF 		bl	osThreadCreate
 1953              	.LVL107:
 272:Core/Src/main.c **** 
ARM GAS  /tmp/ccrazgw6.s 			page 76


 1954              		.loc 1 272 22 view .LVU566
 1955 0174 0D4B     		ldr	r3, .L112+44
 1956 0176 1860     		str	r0, [r3]
 279:Core/Src/main.c **** 
 1957              		.loc 1 279 3 is_stmt 1 view .LVU567
 1958 0178 FFF7FEFF 		bl	osKernelStart
 1959              	.LVL108:
 1960              	.L110:
 285:Core/Src/main.c ****   {
 1961              		.loc 1 285 3 discriminator 1 view .LVU568
 290:Core/Src/main.c ****   /* USER CODE END 3 */
 1962              		.loc 1 290 3 discriminator 1 view .LVU569
 285:Core/Src/main.c ****   {
 1963              		.loc 1 285 9 discriminator 1 view .LVU570
 1964 017c FEE7     		b	.L110
 1965              	.L113:
 1966 017e 00BF     		.align	2
 1967              	.L112:
 1968 0180 00000000 		.word	.LANCHOR9
 1969 0184 00000000 		.word	.LANCHOR10
 1970 0188 00000000 		.word	.LANCHOR2
 1971 018c 00000000 		.word	.LANCHOR11
 1972 0190 00000000 		.word	.LANCHOR12
 1973 0194 00000000 		.word	.LANCHOR13
 1974 0198 00000000 		.word	.LANCHOR14
 1975 019c 00000000 		.word	.LANCHOR15
 1976 01a0 00000000 		.word	.LANCHOR16
 1977 01a4 00000000 		.word	.LANCHOR17
 1978 01a8 00000000 		.word	.LANCHOR18
 1979 01ac 00000000 		.word	.LANCHOR19
 1980              		.cfi_endproc
 1981              	.LFE244:
 1983              		.global	StateMutexHandle
 1984              		.global	LCDPrintQueueHandle
 1985              		.global	MotorControlQueueHandle
 1986              		.global	MiniBotInputQueueHandle
 1987              		.global	LCDPrintTaskHandle
 1988              		.global	MotorControlTasHandle
 1989              		.global	EmergencyStopTaHandle
 1990              		.global	ApplicationFSMHandle
 1991              		.global	MiniBotInputsHandle
 1992              		.global	BlinkLEDTaskHandle
 1993              		.global	defaultTaskHandle
 1994              		.global	huart2
 1995              		.global	hi2c2
 1996              		.global	hi2c1
 1997              		.global	hdma_adc1
 1998              		.global	hadc1
 1999              		.global	minibot_data
 2000              		.global	state
 2001              		.global	PotRawValue
 2002              		.global	Qdata
 2003              		.section	.rodata
 2004              		.align	2
 2005              		.set	.LANCHOR10,. + 0
 2006              	.LC0:
 2007 0000 10000000 		.word	16
ARM GAS  /tmp/ccrazgw6.s 			page 77


 2008 0004 14000000 		.word	20
 2009 0008 00000000 		.word	0
 2010 000c 00000000 		.word	0
 2011              	.LC1:
 2012 0010 10000000 		.word	16
 2013 0014 02000000 		.word	2
 2014 0018 00000000 		.word	0
 2015 001c 00000000 		.word	0
 2016              	.LC16:
 2017 0020 00000000 		.word	.LC2
 2018 0024 00000000 		.word	StartDefaultTask
 2019 0028 0000     		.short	0
 2020 002a 0000     		.space	2
 2021 002c 00000000 		.word	0
 2022 0030 80000000 		.word	128
 2023 0034 00000000 		.word	0
 2024 0038 00000000 		.word	0
 2025              	.LC17:
 2026 003c 0C000000 		.word	.LC4
 2027 0040 00000000 		.word	BlinkLEDTaskEntry
 2028 0044 FEFF     		.short	-2
 2029 0046 0000     		.space	2
 2030 0048 00000000 		.word	0
 2031 004c 80000000 		.word	128
 2032 0050 00000000 		.word	0
 2033 0054 00000000 		.word	0
 2034              	.LC18:
 2035 0058 1C000000 		.word	.LC6
 2036 005c 00000000 		.word	MiniBotInputsEntry
 2037 0060 0000     		.short	0
 2038 0062 0000     		.space	2
 2039 0064 00000000 		.word	0
 2040 0068 80000000 		.word	128
 2041 006c 00000000 		.word	0
 2042 0070 00000000 		.word	0
 2043              	.LC19:
 2044 0074 2C000000 		.word	.LC8
 2045 0078 00000000 		.word	ApplicationFSMEntry
 2046 007c 0000     		.short	0
 2047 007e 0000     		.space	2
 2048 0080 00000000 		.word	0
 2049 0084 80000000 		.word	128
 2050 0088 00000000 		.word	0
 2051 008c 00000000 		.word	0
 2052              	.LC20:
 2053 0090 3C000000 		.word	.LC10
 2054 0094 00000000 		.word	EmergencyStopTaskEntry
 2055 0098 0200     		.short	2
 2056 009a 0000     		.space	2
 2057 009c 00000000 		.word	0
 2058 00a0 80000000 		.word	128
 2059 00a4 00000000 		.word	0
 2060 00a8 00000000 		.word	0
 2061              	.LC21:
 2062 00ac 4C000000 		.word	.LC12
 2063 00b0 00000000 		.word	MotorControlTaskEntry
 2064 00b4 0000     		.short	0
ARM GAS  /tmp/ccrazgw6.s 			page 78


 2065 00b6 0000     		.space	2
 2066 00b8 00000000 		.word	0
 2067 00bc 80000000 		.word	128
 2068 00c0 00000000 		.word	0
 2069 00c4 00000000 		.word	0
 2070              	.LC22:
 2071 00c8 5C000000 		.word	.LC14
 2072 00cc 00000000 		.word	LCDPrintTaskEntry
 2073 00d0 0000     		.short	0
 2074 00d2 0000     		.space	2
 2075 00d4 00000000 		.word	0
 2076 00d8 80000000 		.word	128
 2077 00dc 00000000 		.word	0
 2078 00e0 00000000 		.word	0
 2079              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 2080              		.align	2
 2081              		.set	.LANCHOR16,. + 0
 2084              	ApplicationFSMHandle:
 2085 0000 00000000 		.space	4
 2086              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 2087              		.align	2
 2088              		.set	.LANCHOR14,. + 0
 2091              	BlinkLEDTaskHandle:
 2092 0000 00000000 		.space	4
 2093              		.section	.bss.EmergencyStopTaHandle,"aw",%nobits
 2094              		.align	2
 2095              		.set	.LANCHOR17,. + 0
 2098              	EmergencyStopTaHandle:
 2099 0000 00000000 		.space	4
 2100              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 2101              		.align	2
 2102              		.set	.LANCHOR12,. + 0
 2105              	LCDPrintQueueHandle:
 2106 0000 00000000 		.space	4
 2107              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 2108              		.align	2
 2109              		.set	.LANCHOR19,. + 0
 2112              	LCDPrintTaskHandle:
 2113 0000 00000000 		.space	4
 2114              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 2115              		.align	2
 2116              		.set	.LANCHOR2,. + 0
 2119              	MiniBotInputQueueHandle:
 2120 0000 00000000 		.space	4
 2121              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 2122              		.align	2
 2123              		.set	.LANCHOR15,. + 0
 2126              	MiniBotInputsHandle:
 2127 0000 00000000 		.space	4
 2128              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
 2129              		.align	2
 2130              		.set	.LANCHOR11,. + 0
 2133              	MotorControlQueueHandle:
 2134 0000 00000000 		.space	4
 2135              		.section	.bss.MotorControlTasHandle,"aw",%nobits
 2136              		.align	2
 2137              		.set	.LANCHOR18,. + 0
ARM GAS  /tmp/ccrazgw6.s 			page 79


 2140              	MotorControlTasHandle:
 2141 0000 00000000 		.space	4
 2142              		.section	.bss.PotRawValue,"aw",%nobits
 2143              		.align	2
 2144              		.set	.LANCHOR4,. + 0
 2147              	PotRawValue:
 2148 0000 00000000 		.space	16
 2148      00000000 
 2148      00000000 
 2148      00000000 
 2149              		.section	.bss.Qdata,"aw",%nobits
 2150              		.align	2
 2151              		.set	.LANCHOR6,. + 0
 2154              	Qdata:
 2155 0000 00000000 		.space	20
 2155      00000000 
 2155      00000000 
 2155      00000000 
 2155      00000000 
 2156              		.section	.bss.StateMutexHandle,"aw",%nobits
 2157              		.align	2
 2158              		.set	.LANCHOR9,. + 0
 2161              	StateMutexHandle:
 2162 0000 00000000 		.space	4
 2163              		.section	.bss.defaultTaskHandle,"aw",%nobits
 2164              		.align	2
 2165              		.set	.LANCHOR13,. + 0
 2168              	defaultTaskHandle:
 2169 0000 00000000 		.space	4
 2170              		.section	.bss.hadc1,"aw",%nobits
 2171              		.align	2
 2172              		.set	.LANCHOR5,. + 0
 2175              	hadc1:
 2176 0000 00000000 		.space	72
 2176      00000000 
 2176      00000000 
 2176      00000000 
 2176      00000000 
 2177              		.section	.bss.hdma_adc1,"aw",%nobits
 2178              		.align	2
 2181              	hdma_adc1:
 2182 0000 00000000 		.space	96
 2182      00000000 
 2182      00000000 
 2182      00000000 
 2182      00000000 
 2183              		.section	.bss.hi2c1,"aw",%nobits
 2184              		.align	2
 2185              		.set	.LANCHOR3,. + 0
 2188              	hi2c1:
 2189 0000 00000000 		.space	84
 2189      00000000 
 2189      00000000 
 2189      00000000 
 2189      00000000 
 2190              		.section	.bss.hi2c2,"aw",%nobits
 2191              		.align	2
ARM GAS  /tmp/ccrazgw6.s 			page 80


 2192              		.set	.LANCHOR8,. + 0
 2195              	hi2c2:
 2196 0000 00000000 		.space	84
 2196      00000000 
 2196      00000000 
 2196      00000000 
 2196      00000000 
 2197              		.section	.bss.huart2,"aw",%nobits
 2198              		.align	2
 2199              		.set	.LANCHOR7,. + 0
 2202              	huart2:
 2203 0000 00000000 		.space	72
 2203      00000000 
 2203      00000000 
 2203      00000000 
 2203      00000000 
 2204              		.section	.bss.minibot_data,"aw",%nobits
 2205              		.align	2
 2206              		.set	.LANCHOR1,. + 0
 2209              	minibot_data:
 2210 0000 00000000 		.space	20
 2210      00000000 
 2210      00000000 
 2210      00000000 
 2210      00000000 
 2211              		.section	.bss.state,"aw",%nobits
 2212              		.set	.LANCHOR0,. + 0
 2215              	state:
 2216 0000 00       		.space	1
 2217              		.text
 2218              	.Letext0:
 2219              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2220              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2221              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2222              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2223              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2224              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2225              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2226              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2227              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2228              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2229              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2230              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2231              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2232              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2233              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2234              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2235              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2236              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2237              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2238              		.file 22 "Core/Inc/pca9685.h"
 2239              		.file 23 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2240              		.file 24 "<built-in>"
ARM GAS  /tmp/ccrazgw6.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccrazgw6.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccrazgw6.s:40     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccrazgw6.s:47     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccrazgw6.s:231    .text.MX_GPIO_Init:00000000000000d8 $d
     /tmp/ccrazgw6.s:239    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccrazgw6.s:245    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccrazgw6.s:291    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccrazgw6.s:296    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccrazgw6.s:303    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccrazgw6.s:334    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccrazgw6.s:339    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccrazgw6.s:346    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccrazgw6.s:381    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccrazgw6.s:386    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/ccrazgw6.s:393    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/ccrazgw6.s:419    .text.EmergencyStopTaskEntry:0000000000000000 $t
     /tmp/ccrazgw6.s:426    .text.EmergencyStopTaskEntry:0000000000000000 EmergencyStopTaskEntry
     /tmp/ccrazgw6.s:458    .text.EmergencyStopTaskEntry:0000000000000014 $d
     /tmp/ccrazgw6.s:463    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccrazgw6.s:470    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccrazgw6.s:603    .text.ApplicationFSMEntry:0000000000000098 $d
     /tmp/ccrazgw6.s:610    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccrazgw6.s:617    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccrazgw6.s:697    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccrazgw6.s:702    .text.ServoDriverInit:0000000000000000 $t
     /tmp/ccrazgw6.s:709    .text.ServoDriverInit:0000000000000000 ServoDriverInit
     /tmp/ccrazgw6.s:780    .text.ServoDriverInit:0000000000000060 $d
     /tmp/ccrazgw6.s:785    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccrazgw6.s:792    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccrazgw6.s:894    .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/ccrazgw6.s:901    .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/ccrazgw6.s:938    .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccrazgw6.s:945    .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccrazgw6.s:1027   .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccrazgw6.s:1034   .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccrazgw6.s:1114   .text.MiniBotInputsEntry:0000000000000068 $d
     /tmp/ccrazgw6.s:1123   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccrazgw6.s:1130   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccrazgw6.s:1163   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccrazgw6.s:1168   .text.Error_Handler:0000000000000000 $t
     /tmp/ccrazgw6.s:1175   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccrazgw6.s:1207   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccrazgw6.s:1213   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccrazgw6.s:1376   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccrazgw6.s:1383   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccrazgw6.s:1389   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccrazgw6.s:1446   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccrazgw6.s:1453   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccrazgw6.s:1459   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccrazgw6.s:1513   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccrazgw6.s:1519   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccrazgw6.s:1525   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccrazgw6.s:1582   .text.MX_I2C2_Init:000000000000002c $d
     /tmp/ccrazgw6.s:1589   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccrazgw6.s:1596   .text.SystemClock_Config:0000000000000000 SystemClock_Config
ARM GAS  /tmp/ccrazgw6.s 			page 82


     /tmp/ccrazgw6.s:1743   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccrazgw6.s:1749   .text.main:0000000000000000 $t
     /tmp/ccrazgw6.s:1756   .text.main:0000000000000000 main
     /tmp/ccrazgw6.s:1968   .text.main:0000000000000180 $d
     /tmp/ccrazgw6.s:2161   .bss.StateMutexHandle:0000000000000000 StateMutexHandle
     /tmp/ccrazgw6.s:2105   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/ccrazgw6.s:2133   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/ccrazgw6.s:2119   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccrazgw6.s:2112   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/ccrazgw6.s:2140   .bss.MotorControlTasHandle:0000000000000000 MotorControlTasHandle
     /tmp/ccrazgw6.s:2098   .bss.EmergencyStopTaHandle:0000000000000000 EmergencyStopTaHandle
     /tmp/ccrazgw6.s:2084   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccrazgw6.s:2126   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccrazgw6.s:2091   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccrazgw6.s:2168   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccrazgw6.s:2202   .bss.huart2:0000000000000000 huart2
     /tmp/ccrazgw6.s:2195   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccrazgw6.s:2188   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccrazgw6.s:2181   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccrazgw6.s:2175   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccrazgw6.s:2209   .bss.minibot_data:0000000000000000 minibot_data
     /tmp/ccrazgw6.s:2215   .bss.state:0000000000000000 state
     /tmp/ccrazgw6.s:2147   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccrazgw6.s:2154   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccrazgw6.s:2004   .rodata:0000000000000000 $d
     /tmp/ccrazgw6.s:2080   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2087   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2094   .bss.EmergencyStopTaHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2101   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2108   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2115   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2122   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2129   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2136   .bss.MotorControlTasHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2143   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccrazgw6.s:2150   .bss.Qdata:0000000000000000 $d
     /tmp/ccrazgw6.s:2157   .bss.StateMutexHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2164   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccrazgw6.s:2171   .bss.hadc1:0000000000000000 $d
     /tmp/ccrazgw6.s:2178   .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccrazgw6.s:2184   .bss.hi2c1:0000000000000000 $d
     /tmp/ccrazgw6.s:2191   .bss.hi2c2:0000000000000000 $d
     /tmp/ccrazgw6.s:2198   .bss.huart2:0000000000000000 $d
     /tmp/ccrazgw6.s:2205   .bss.minibot_data:0000000000000000 $d
     /tmp/ccrazgw6.s:2216   .bss.state:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
HAL_GPIO_ReadPin
xQueueReceive
PCA9685_Init
PCA9685_SetServoAngle
HAL_ADC_Start_DMA
ARM GAS  /tmp/ccrazgw6.s 			page 83


xQueueGenericSend
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
