ARM GAS  /tmp/ccodJj5F.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 456D6572 		.ascii	"EmergencyStopTa\000"
  29      67656E63 
  29      7953746F 
  29      70546100 
  30              		.align	2
  31              	.LC12:
  32 004c 4D6F746F 		.ascii	"MotorControlTas\000"
  32      72436F6E 
  32      74726F6C 
  32      54617300 
  33              		.align	2
  34              	.LC14:
  35 005c 4C434450 		.ascii	"LCDPrintTask\000"
  35      72696E74 
  35      5461736B 
  35      00
  36              		.text
  37              	.Ltext0:
ARM GAS  /tmp/ccodJj5F.s 			page 2


  38              		.cfi_sections	.debug_frame
  39              		.section	.text.MX_GPIO_Init,"ax",%progbits
  40              		.align	1
  41              		.arch armv7e-m
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	MX_GPIO_Init:
  48              	.LFB251:
  49              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint32_t PotMin;
  40:Core/Src/main.c **** 	uint32_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
ARM GAS  /tmp/ccodJj5F.s 			page 3


  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  60:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  61:Core/Src/main.c **** 	uint32_t WristPotValue;
  62:Core/Src/main.c **** 	uint8_t  GripperValue;
  63:Core/Src/main.c **** } MiniBot_Qdata;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  66:Core/Src/main.c **** uint32_t PotRawValue[4];
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /*
  70:Core/Src/main.c ****  * MegaBot Structures
  71:Core/Src/main.c ****  */
  72:Core/Src/main.c **** typedef struct{
  73:Core/Src/main.c **** 	uint8_t  ServoNum;
  74:Core/Src/main.c **** 	uint16_t ServoMin;
  75:Core/Src/main.c **** 	uint16_t ServoMax;
  76:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  77:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** typedef struct{
  80:Core/Src/main.c **** 	uint8_t  ServoNum;
  81:Core/Src/main.c **** 	uint16_t ServoMin;
  82:Core/Src/main.c **** 	uint16_t ServoMax;
  83:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  84:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** typedef struct{
  87:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  88:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
  89:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  90:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
  91:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
  92:Core/Src/main.c **** } MegaBot_Config_t;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** enum State{
  96:Core/Src/main.c ****   Init,
  97:Core/Src/main.c ****   Ready,
  98:Core/Src/main.c ****   Running,
  99:Core/Src/main.c ****   EmergencyStop
 100:Core/Src/main.c **** };
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** volatile enum State state = Init;
 103:Core/Src/main.c **** volatile MiniBot_Qdata minibot_data;
ARM GAS  /tmp/ccodJj5F.s 			page 4


 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PTD */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 108:Core/Src/main.c **** /* USER CODE BEGIN PD */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* USER CODE END PD */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 113:Core/Src/main.c **** /* USER CODE BEGIN PM */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /* USER CODE END PM */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 118:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 119:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 122:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** UART_HandleTypeDef huart2;
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** osThreadId defaultTaskHandle;
 127:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 128:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 129:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 130:Core/Src/main.c **** osThreadId EmergencyStopTaHandle;
 131:Core/Src/main.c **** osThreadId MotorControlTasHandle;
 132:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 133:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 134:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 135:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 136:Core/Src/main.c **** osMutexId EmergencyMutexHandle;
 137:Core/Src/main.c **** /* USER CODE BEGIN PV */
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** /* USER CODE END PV */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 142:Core/Src/main.c **** void SystemClock_Config(void);
 143:Core/Src/main.c **** static void MX_GPIO_Init(void);
 144:Core/Src/main.c **** static void MX_DMA_Init(void);
 145:Core/Src/main.c **** static void MX_ADC1_Init(void);
 146:Core/Src/main.c **** static void MX_I2C1_Init(void);
 147:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 148:Core/Src/main.c **** static void MX_I2C2_Init(void);
 149:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 150:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 151:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
 152:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 153:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument);
 154:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 155:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 160:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot);
ARM GAS  /tmp/ccodJj5F.s 			page 5


 161:Core/Src/main.c **** 
 162:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 163:Core/Src/main.c **** 
 164:Core/Src/main.c **** /* USER CODE END PFP */
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 167:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /* USER CODE END 0 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /**
 173:Core/Src/main.c ****   * @brief  The application entry point.
 174:Core/Src/main.c ****   * @retval int
 175:Core/Src/main.c ****   */
 176:Core/Src/main.c **** int main(void)
 177:Core/Src/main.c **** {
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* USER CODE END 1 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 186:Core/Src/main.c ****   HAL_Init();
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* USER CODE END Init */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* Configure the system clock */
 193:Core/Src/main.c ****   SystemClock_Config();
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* USER CODE END SysInit */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* Initialize all configured peripherals */
 200:Core/Src/main.c ****   MX_GPIO_Init();
 201:Core/Src/main.c ****   MX_DMA_Init();
 202:Core/Src/main.c ****   MX_ADC1_Init();
 203:Core/Src/main.c ****   MX_I2C1_Init();
 204:Core/Src/main.c ****   MX_USART2_UART_Init();
 205:Core/Src/main.c ****   MX_I2C2_Init();
 206:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE END 2 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* Create the mutex(es) */
 211:Core/Src/main.c ****   /* definition and creation of EmergencyMutex */
 212:Core/Src/main.c ****   osMutexDef(EmergencyMutex);
 213:Core/Src/main.c ****   EmergencyMutexHandle = osMutexCreate(osMutex(EmergencyMutex));
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 216:Core/Src/main.c ****   /* add mutexes, ... */
 217:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
ARM GAS  /tmp/ccodJj5F.s 			page 6


 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 220:Core/Src/main.c ****   /* add semaphores, ... */
 221:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 224:Core/Src/main.c ****   /* start timers, add new ones, ... */
 225:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* Create the queue(s) */
 228:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 229:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 230:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 233:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, uint16_t);
 234:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 237:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, uint16_t);
 238:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 241:Core/Src/main.c ****   /* add queues, ... */
 242:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* Create the thread(s) */
 245:Core/Src/main.c ****   /* definition and creation of defaultTask */
 246:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 247:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 250:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityLow, 0, 128);
 251:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 254:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 128);
 255:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 258:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityNormal, 0, 128);
 259:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* definition and creation of EmergencyStopTa */
 262:Core/Src/main.c ****   osThreadDef(EmergencyStopTa, EmergencyStopTaskEntry, osPriorityHigh, 0, 128);
 263:Core/Src/main.c ****   EmergencyStopTaHandle = osThreadCreate(osThread(EmergencyStopTa), NULL);
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* definition and creation of MotorControlTas */
 266:Core/Src/main.c ****   osThreadDef(MotorControlTas, MotorControlTaskEntry, osPriorityNormal, 0, 128);
 267:Core/Src/main.c ****   MotorControlTasHandle = osThreadCreate(osThread(MotorControlTas), NULL);
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 270:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 271:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 274:Core/Src/main.c ****   /* add threads, ... */
ARM GAS  /tmp/ccodJj5F.s 			page 7


 275:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* Start scheduler */
 278:Core/Src/main.c ****   osKernelStart();
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* Infinite loop */
 283:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 284:Core/Src/main.c ****   while (1)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     /* USER CODE END WHILE */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 289:Core/Src/main.c ****   }
 290:Core/Src/main.c ****   /* USER CODE END 3 */
 291:Core/Src/main.c **** }
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** /**
 294:Core/Src/main.c ****   * @brief System Clock Configuration
 295:Core/Src/main.c ****   * @retval None
 296:Core/Src/main.c ****   */
 297:Core/Src/main.c **** void SystemClock_Config(void)
 298:Core/Src/main.c **** {
 299:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 300:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 305:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 308:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 309:Core/Src/main.c ****   */
 310:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 311:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 312:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 313:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 320:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 321:Core/Src/main.c ****   {
 322:Core/Src/main.c ****     Error_Handler();
 323:Core/Src/main.c ****   }
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 326:Core/Src/main.c ****   */
 327:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 328:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 329:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 330:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 331:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
ARM GAS  /tmp/ccodJj5F.s 			page 8


 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c **** }
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /**
 341:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 342:Core/Src/main.c ****   * @param None
 343:Core/Src/main.c ****   * @retval None
 344:Core/Src/main.c ****   */
 345:Core/Src/main.c **** static void MX_ADC1_Init(void)
 346:Core/Src/main.c **** {
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 359:Core/Src/main.c ****   */
 360:Core/Src/main.c ****   hadc1.Instance = ADC1;
 361:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 362:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 363:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 364:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 365:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 366:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 367:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 368:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 369:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 370:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 371:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 372:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 373:Core/Src/main.c ****   {
 374:Core/Src/main.c ****     Error_Handler();
 375:Core/Src/main.c ****   }
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 378:Core/Src/main.c ****   */
 379:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 380:Core/Src/main.c ****   sConfig.Rank = 1;
 381:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 382:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 383:Core/Src/main.c ****   {
 384:Core/Src/main.c ****     Error_Handler();
 385:Core/Src/main.c ****   }
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 388:Core/Src/main.c ****   */
ARM GAS  /tmp/ccodJj5F.s 			page 9


 389:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 390:Core/Src/main.c ****   sConfig.Rank = 2;
 391:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 397:Core/Src/main.c ****   */
 398:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 399:Core/Src/main.c ****   sConfig.Rank = 3;
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 401:Core/Src/main.c ****   {
 402:Core/Src/main.c ****     Error_Handler();
 403:Core/Src/main.c ****   }
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 406:Core/Src/main.c ****   */
 407:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 408:Core/Src/main.c ****   sConfig.Rank = 4;
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 410:Core/Src/main.c ****   {
 411:Core/Src/main.c ****     Error_Handler();
 412:Core/Src/main.c ****   }
 413:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 416:Core/Src/main.c **** 
 417:Core/Src/main.c **** }
 418:Core/Src/main.c **** 
 419:Core/Src/main.c **** /**
 420:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 421:Core/Src/main.c ****   * @param None
 422:Core/Src/main.c ****   * @retval None
 423:Core/Src/main.c ****   */
 424:Core/Src/main.c **** static void MX_I2C1_Init(void)
 425:Core/Src/main.c **** {
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 434:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 435:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 436:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 437:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 438:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 439:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 440:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 441:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 442:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 443:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 444:Core/Src/main.c ****   {
 445:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccodJj5F.s 			page 10


 446:Core/Src/main.c ****   }
 447:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** }
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /**
 454:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 455:Core/Src/main.c ****   * @param None
 456:Core/Src/main.c ****   * @retval None
 457:Core/Src/main.c ****   */
 458:Core/Src/main.c **** static void MX_I2C2_Init(void)
 459:Core/Src/main.c **** {
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 466:Core/Src/main.c **** 
 467:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 468:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 469:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 470:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 471:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 472:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 473:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 474:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 475:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 476:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 477:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 478:Core/Src/main.c ****   {
 479:Core/Src/main.c ****     Error_Handler();
 480:Core/Src/main.c ****   }
 481:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 484:Core/Src/main.c **** 
 485:Core/Src/main.c **** }
 486:Core/Src/main.c **** 
 487:Core/Src/main.c **** /**
 488:Core/Src/main.c ****   * @brief USART2 Initialization Function
 489:Core/Src/main.c ****   * @param None
 490:Core/Src/main.c ****   * @retval None
 491:Core/Src/main.c ****   */
 492:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 493:Core/Src/main.c **** {
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 502:Core/Src/main.c ****   huart2.Instance = USART2;
ARM GAS  /tmp/ccodJj5F.s 			page 11


 503:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 504:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 505:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 506:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 507:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 508:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 509:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 510:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 511:Core/Src/main.c ****   {
 512:Core/Src/main.c ****     Error_Handler();
 513:Core/Src/main.c ****   }
 514:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c **** }
 519:Core/Src/main.c **** 
 520:Core/Src/main.c **** /**
 521:Core/Src/main.c ****   * Enable DMA controller clock
 522:Core/Src/main.c ****   */
 523:Core/Src/main.c **** static void MX_DMA_Init(void)
 524:Core/Src/main.c **** {
 525:Core/Src/main.c **** 
 526:Core/Src/main.c ****   /* DMA controller clock enable */
 527:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /* DMA interrupt init */
 530:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 531:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 532:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 533:Core/Src/main.c **** 
 534:Core/Src/main.c **** }
 535:Core/Src/main.c **** 
 536:Core/Src/main.c **** /**
 537:Core/Src/main.c ****   * @brief GPIO Initialization Function
 538:Core/Src/main.c ****   * @param None
 539:Core/Src/main.c ****   * @retval None
 540:Core/Src/main.c ****   */
 541:Core/Src/main.c **** static void MX_GPIO_Init(void)
 542:Core/Src/main.c **** {
  50              		.loc 1 542 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 40
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  55              		.cfi_def_cfa_offset 20
  56              		.cfi_offset 4, -20
  57              		.cfi_offset 5, -16
  58              		.cfi_offset 6, -12
  59              		.cfi_offset 7, -8
  60              		.cfi_offset 14, -4
  61 0002 8BB0     		sub	sp, sp, #44
  62              		.cfi_def_cfa_offset 64
 543:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  63              		.loc 1 543 3 view .LVU1
  64              		.loc 1 543 20 is_stmt 0 view .LVU2
  65 0004 0024     		movs	r4, #0
ARM GAS  /tmp/ccodJj5F.s 			page 12


  66 0006 0594     		str	r4, [sp, #20]
  67 0008 0694     		str	r4, [sp, #24]
  68 000a 0794     		str	r4, [sp, #28]
  69 000c 0894     		str	r4, [sp, #32]
  70 000e 0994     		str	r4, [sp, #36]
 544:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 545:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 548:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  71              		.loc 1 548 3 is_stmt 1 view .LVU3
  72              	.LBB4:
  73              		.loc 1 548 3 view .LVU4
  74 0010 0194     		str	r4, [sp, #4]
  75              		.loc 1 548 3 view .LVU5
  76 0012 2A4B     		ldr	r3, .L3
  77 0014 1A6B     		ldr	r2, [r3, #48]
  78 0016 42F00402 		orr	r2, r2, #4
  79 001a 1A63     		str	r2, [r3, #48]
  80              		.loc 1 548 3 view .LVU6
  81 001c 1A6B     		ldr	r2, [r3, #48]
  82 001e 02F00402 		and	r2, r2, #4
  83 0022 0192     		str	r2, [sp, #4]
  84              		.loc 1 548 3 view .LVU7
  85 0024 019A     		ldr	r2, [sp, #4]
  86              	.LBE4:
  87              		.loc 1 548 3 view .LVU8
 549:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  88              		.loc 1 549 3 view .LVU9
  89              	.LBB5:
  90              		.loc 1 549 3 view .LVU10
  91 0026 0294     		str	r4, [sp, #8]
  92              		.loc 1 549 3 view .LVU11
  93 0028 1A6B     		ldr	r2, [r3, #48]
  94 002a 42F08002 		orr	r2, r2, #128
  95 002e 1A63     		str	r2, [r3, #48]
  96              		.loc 1 549 3 view .LVU12
  97 0030 1A6B     		ldr	r2, [r3, #48]
  98 0032 02F08002 		and	r2, r2, #128
  99 0036 0292     		str	r2, [sp, #8]
 100              		.loc 1 549 3 view .LVU13
 101 0038 029A     		ldr	r2, [sp, #8]
 102              	.LBE5:
 103              		.loc 1 549 3 view .LVU14
 550:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 104              		.loc 1 550 3 view .LVU15
 105              	.LBB6:
 106              		.loc 1 550 3 view .LVU16
 107 003a 0394     		str	r4, [sp, #12]
 108              		.loc 1 550 3 view .LVU17
 109 003c 1A6B     		ldr	r2, [r3, #48]
 110 003e 42F00102 		orr	r2, r2, #1
 111 0042 1A63     		str	r2, [r3, #48]
 112              		.loc 1 550 3 view .LVU18
 113 0044 1A6B     		ldr	r2, [r3, #48]
 114 0046 02F00102 		and	r2, r2, #1
 115 004a 0392     		str	r2, [sp, #12]
ARM GAS  /tmp/ccodJj5F.s 			page 13


 116              		.loc 1 550 3 view .LVU19
 117 004c 039A     		ldr	r2, [sp, #12]
 118              	.LBE6:
 119              		.loc 1 550 3 view .LVU20
 551:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 120              		.loc 1 551 3 view .LVU21
 121              	.LBB7:
 122              		.loc 1 551 3 view .LVU22
 123 004e 0494     		str	r4, [sp, #16]
 124              		.loc 1 551 3 view .LVU23
 125 0050 1A6B     		ldr	r2, [r3, #48]
 126 0052 42F00202 		orr	r2, r2, #2
 127 0056 1A63     		str	r2, [r3, #48]
 128              		.loc 1 551 3 view .LVU24
 129 0058 1B6B     		ldr	r3, [r3, #48]
 130 005a 03F00203 		and	r3, r3, #2
 131 005e 0493     		str	r3, [sp, #16]
 132              		.loc 1 551 3 view .LVU25
 133 0060 049B     		ldr	r3, [sp, #16]
 134              	.LBE7:
 135              		.loc 1 551 3 view .LVU26
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 554:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 136              		.loc 1 554 3 view .LVU27
 137 0062 174E     		ldr	r6, .L3+4
 138 0064 2246     		mov	r2, r4
 139 0066 2021     		movs	r1, #32
 140 0068 3046     		mov	r0, r6
 141 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 142              	.LVL0:
 555:Core/Src/main.c **** 
 556:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 557:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 143              		.loc 1 557 3 view .LVU28
 144              		.loc 1 557 23 is_stmt 0 view .LVU29
 145 006e 4FF40053 		mov	r3, #8192
 146 0072 0593     		str	r3, [sp, #20]
 558:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 147              		.loc 1 558 3 is_stmt 1 view .LVU30
 148              		.loc 1 558 24 is_stmt 0 view .LVU31
 149 0074 4FF40413 		mov	r3, #2162688
 150 0078 0693     		str	r3, [sp, #24]
 559:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 151              		.loc 1 559 3 is_stmt 1 view .LVU32
 152              		.loc 1 559 24 is_stmt 0 view .LVU33
 153 007a 0794     		str	r4, [sp, #28]
 560:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 154              		.loc 1 560 3 is_stmt 1 view .LVU34
 155 007c 05A9     		add	r1, sp, #20
 156 007e 1148     		ldr	r0, .L3+8
 157 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL1:
 561:Core/Src/main.c **** 
 562:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 563:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 159              		.loc 1 563 3 view .LVU35
ARM GAS  /tmp/ccodJj5F.s 			page 14


 160              		.loc 1 563 23 is_stmt 0 view .LVU36
 161 0084 2027     		movs	r7, #32
 162 0086 0597     		str	r7, [sp, #20]
 564:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 163              		.loc 1 564 3 is_stmt 1 view .LVU37
 164              		.loc 1 564 24 is_stmt 0 view .LVU38
 165 0088 0125     		movs	r5, #1
 166 008a 0695     		str	r5, [sp, #24]
 565:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 167              		.loc 1 565 3 is_stmt 1 view .LVU39
 168              		.loc 1 565 24 is_stmt 0 view .LVU40
 169 008c 0794     		str	r4, [sp, #28]
 566:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 170              		.loc 1 566 3 is_stmt 1 view .LVU41
 171              		.loc 1 566 25 is_stmt 0 view .LVU42
 172 008e 0894     		str	r4, [sp, #32]
 567:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 173              		.loc 1 567 3 is_stmt 1 view .LVU43
 174 0090 05A9     		add	r1, sp, #20
 175 0092 3046     		mov	r0, r6
 176 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 177              	.LVL2:
 568:Core/Src/main.c **** 
 569:Core/Src/main.c ****   /*Configure GPIO pins : EmergencyStopBtn_Pin GripperButton_Pin */
 570:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin|GripperButton_Pin;
 178              		.loc 1 570 3 view .LVU44
 179              		.loc 1 570 23 is_stmt 0 view .LVU45
 180 0098 4FF44073 		mov	r3, #768
 181 009c 0593     		str	r3, [sp, #20]
 571:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 182              		.loc 1 571 3 is_stmt 1 view .LVU46
 183              		.loc 1 571 24 is_stmt 0 view .LVU47
 184 009e 0694     		str	r4, [sp, #24]
 572:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 185              		.loc 1 572 3 is_stmt 1 view .LVU48
 186              		.loc 1 572 24 is_stmt 0 view .LVU49
 187 00a0 0795     		str	r5, [sp, #28]
 573:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 188              		.loc 1 573 3 is_stmt 1 view .LVU50
 189 00a2 05A9     		add	r1, sp, #20
 190 00a4 3046     		mov	r0, r6
 191 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 192              	.LVL3:
 574:Core/Src/main.c **** 
 575:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 576:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 193              		.loc 1 576 3 view .LVU51
 194              		.loc 1 576 23 is_stmt 0 view .LVU52
 195 00aa 0597     		str	r7, [sp, #20]
 577:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 196              		.loc 1 577 3 is_stmt 1 view .LVU53
 197              		.loc 1 577 24 is_stmt 0 view .LVU54
 198 00ac 0694     		str	r4, [sp, #24]
 578:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 199              		.loc 1 578 3 is_stmt 1 view .LVU55
 200              		.loc 1 578 24 is_stmt 0 view .LVU56
 201 00ae 0795     		str	r5, [sp, #28]
ARM GAS  /tmp/ccodJj5F.s 			page 15


 579:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 202              		.loc 1 579 3 is_stmt 1 view .LVU57
 203 00b0 05A9     		add	r1, sp, #20
 204 00b2 0548     		ldr	r0, .L3+12
 205 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 206              	.LVL4:
 580:Core/Src/main.c **** 
 581:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 582:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 583:Core/Src/main.c **** }
 207              		.loc 1 583 1 is_stmt 0 view .LVU58
 208 00b8 0BB0     		add	sp, sp, #44
 209              		.cfi_def_cfa_offset 20
 210              		@ sp needed
 211 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 212              	.L4:
 213              		.align	2
 214              	.L3:
 215 00bc 00380240 		.word	1073887232
 216 00c0 00000240 		.word	1073872896
 217 00c4 00080240 		.word	1073874944
 218 00c8 00040240 		.word	1073873920
 219              		.cfi_endproc
 220              	.LFE251:
 222              		.section	.text.MX_DMA_Init,"ax",%progbits
 223              		.align	1
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 227              		.fpu fpv4-sp-d16
 229              	MX_DMA_Init:
 230              	.LFB250:
 524:Core/Src/main.c **** 
 231              		.loc 1 524 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 8
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 235 0000 00B5     		push	{lr}
 236              		.cfi_def_cfa_offset 4
 237              		.cfi_offset 14, -4
 238 0002 83B0     		sub	sp, sp, #12
 239              		.cfi_def_cfa_offset 16
 527:Core/Src/main.c **** 
 240              		.loc 1 527 3 view .LVU60
 241              	.LBB8:
 527:Core/Src/main.c **** 
 242              		.loc 1 527 3 view .LVU61
 243 0004 0022     		movs	r2, #0
 244 0006 0192     		str	r2, [sp, #4]
 527:Core/Src/main.c **** 
 245              		.loc 1 527 3 view .LVU62
 246 0008 094B     		ldr	r3, .L7
 247 000a 196B     		ldr	r1, [r3, #48]
 248 000c 41F48001 		orr	r1, r1, #4194304
 249 0010 1963     		str	r1, [r3, #48]
 527:Core/Src/main.c **** 
 250              		.loc 1 527 3 view .LVU63
ARM GAS  /tmp/ccodJj5F.s 			page 16


 251 0012 1B6B     		ldr	r3, [r3, #48]
 252 0014 03F48003 		and	r3, r3, #4194304
 253 0018 0193     		str	r3, [sp, #4]
 527:Core/Src/main.c **** 
 254              		.loc 1 527 3 view .LVU64
 255 001a 019B     		ldr	r3, [sp, #4]
 256              	.LBE8:
 527:Core/Src/main.c **** 
 257              		.loc 1 527 3 view .LVU65
 531:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 258              		.loc 1 531 3 view .LVU66
 259 001c 0521     		movs	r1, #5
 260 001e 3820     		movs	r0, #56
 261 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL5:
 532:Core/Src/main.c **** 
 263              		.loc 1 532 3 view .LVU67
 264 0024 3820     		movs	r0, #56
 265 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 266              	.LVL6:
 534:Core/Src/main.c **** 
 267              		.loc 1 534 1 is_stmt 0 view .LVU68
 268 002a 03B0     		add	sp, sp, #12
 269              		.cfi_def_cfa_offset 4
 270              		@ sp needed
 271 002c 5DF804FB 		ldr	pc, [sp], #4
 272              	.L8:
 273              		.align	2
 274              	.L7:
 275 0030 00380240 		.word	1073887232
 276              		.cfi_endproc
 277              	.LFE250:
 279              		.section	.text.StartDefaultTask,"ax",%progbits
 280              		.align	1
 281              		.global	StartDefaultTask
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	StartDefaultTask:
 288              	.LFB255:
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** 
 588:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 589:Core/Src/main.c **** 	// Configure Each of the joints
 590:Core/Src/main.c **** 
 591:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 592:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 593:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 594:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 595:Core/Src/main.c **** 
 596:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 597:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 598:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 599:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
ARM GAS  /tmp/ccodJj5F.s 			page 17


 600:Core/Src/main.c **** 
 601:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 602:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 603:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 604:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 605:Core/Src/main.c **** 
 606:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 607:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 608:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 609:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 610:Core/Src/main.c **** 
 611:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 612:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 613:Core/Src/main.c **** }
 614:Core/Src/main.c **** 
 615:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot){
 616:Core/Src/main.c **** 
 617:Core/Src/main.c **** }
 618:Core/Src/main.c **** 
 619:Core/Src/main.c **** 
 620:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 621:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 622:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 623:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 624:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 625:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 626:Core/Src/main.c ****     }else{
 627:Core/Src/main.c ****       *QPotData = PotRawValue;
 628:Core/Src/main.c ****     }
 629:Core/Src/main.c ****     if(Joint->PotInvertRange){
 630:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 631:Core/Src/main.c ****     }
 632:Core/Src/main.c ****   }
 633:Core/Src/main.c **** }
 634:Core/Src/main.c **** 
 635:Core/Src/main.c **** 
 636:Core/Src/main.c **** 
 637:Core/Src/main.c **** /* USER CODE END 4 */
 638:Core/Src/main.c **** 
 639:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 640:Core/Src/main.c **** /**
 641:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 642:Core/Src/main.c ****   * @param  argument: Not used
 643:Core/Src/main.c ****   * @retval None
 644:Core/Src/main.c ****   */
 645:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 646:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 647:Core/Src/main.c **** {
 289              		.loc 1 647 1 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ Volatile: function does not return.
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              	.LVL7:
 295              		.loc 1 647 1 is_stmt 0 view .LVU70
 296 0000 08B5     		push	{r3, lr}
 297              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccodJj5F.s 			page 18


 298              		.cfi_offset 3, -8
 299              		.cfi_offset 14, -4
 300              	.LVL8:
 301              	.L10:
 648:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 649:Core/Src/main.c ****   /* Infinite loop */
 650:Core/Src/main.c ****   for(;;)
 302              		.loc 1 650 3 is_stmt 1 discriminator 1 view .LVU71
 651:Core/Src/main.c ****   {
 652:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 303              		.loc 1 652 5 discriminator 1 view .LVU72
 304 0002 0022     		movs	r2, #0
 305 0004 2021     		movs	r1, #32
 306 0006 0448     		ldr	r0, .L12
 307 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 308              	.LVL9:
 653:Core/Src/main.c ****     osDelay(1000);
 309              		.loc 1 653 5 discriminator 1 view .LVU73
 310 000c 4FF47A70 		mov	r0, #1000
 311 0010 FFF7FEFF 		bl	osDelay
 312              	.LVL10:
 650:Core/Src/main.c ****   {
 313              		.loc 1 650 8 discriminator 1 view .LVU74
 314 0014 F5E7     		b	.L10
 315              	.L13:
 316 0016 00BF     		.align	2
 317              	.L12:
 318 0018 00000240 		.word	1073872896
 319              		.cfi_endproc
 320              	.LFE255:
 322              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 323              		.align	1
 324              		.global	BlinkLEDTaskEntry
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu fpv4-sp-d16
 330              	BlinkLEDTaskEntry:
 331              	.LFB256:
 654:Core/Src/main.c ****   }
 655:Core/Src/main.c ****   /* USER CODE END 5 */
 656:Core/Src/main.c **** }
 657:Core/Src/main.c **** 
 658:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 659:Core/Src/main.c **** /**
 660:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 661:Core/Src/main.c **** * @param argument: Not used
 662:Core/Src/main.c **** * @retval None
 663:Core/Src/main.c **** */
 664:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 665:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 666:Core/Src/main.c **** {
 332              		.loc 1 666 1 view -0
 333              		.cfi_startproc
 334              		@ Volatile: function does not return.
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccodJj5F.s 			page 19


 337              	.LVL11:
 338              		.loc 1 666 1 is_stmt 0 view .LVU76
 339 0000 08B5     		push	{r3, lr}
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 3, -8
 342              		.cfi_offset 14, -4
 343              	.LVL12:
 344              	.L15:
 667:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 668:Core/Src/main.c ****   /* Infinite loop */
 669:Core/Src/main.c ****   for(;;)
 345              		.loc 1 669 3 is_stmt 1 discriminator 1 view .LVU77
 670:Core/Src/main.c ****   {
 671:Core/Src/main.c ****     
 672:Core/Src/main.c ****     osDelay(500);
 346              		.loc 1 672 5 discriminator 1 view .LVU78
 347 0002 4FF4FA70 		mov	r0, #500
 348 0006 FFF7FEFF 		bl	osDelay
 349              	.LVL13:
 673:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 350              		.loc 1 673 5 discriminator 1 view .LVU79
 351 000a 0122     		movs	r2, #1
 352 000c 2021     		movs	r1, #32
 353 000e 0448     		ldr	r0, .L17
 354 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 355              	.LVL14:
 674:Core/Src/main.c ****     osDelay(500);
 356              		.loc 1 674 5 discriminator 1 view .LVU80
 357 0014 4FF4FA70 		mov	r0, #500
 358 0018 FFF7FEFF 		bl	osDelay
 359              	.LVL15:
 669:Core/Src/main.c ****   {
 360              		.loc 1 669 8 discriminator 1 view .LVU81
 361 001c F1E7     		b	.L15
 362              	.L18:
 363 001e 00BF     		.align	2
 364              	.L17:
 365 0020 00000240 		.word	1073872896
 366              		.cfi_endproc
 367              	.LFE256:
 369              		.section	.text.EmergencyStopTaskEntry,"ax",%progbits
 370              		.align	1
 371              		.global	EmergencyStopTaskEntry
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu fpv4-sp-d16
 377              	EmergencyStopTaskEntry:
 378              	.LFB259:
 675:Core/Src/main.c ****   }
 676:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 677:Core/Src/main.c **** }
 678:Core/Src/main.c **** 
 679:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 680:Core/Src/main.c **** /**
 681:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 682:Core/Src/main.c **** * @param argument: Not used
ARM GAS  /tmp/ccodJj5F.s 			page 20


 683:Core/Src/main.c **** * @retval None
 684:Core/Src/main.c **** */
 685:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 686:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 687:Core/Src/main.c **** {
 688:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 689:Core/Src/main.c **** 
 690:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 691:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 692:Core/Src/main.c **** 
 693:Core/Src/main.c ****   
 694:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, PotRawValue, 4);
 695:Core/Src/main.c **** 
 696:Core/Src/main.c **** 	/* Infinite loop */
 697:Core/Src/main.c **** 	for(;;)
 698:Core/Src/main.c **** 	{
 699:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 700:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 701:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 702:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 703:Core/Src/main.c **** 
 704:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 705:Core/Src/main.c ****     
 706:Core/Src/main.c ****     xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, 10);
 707:Core/Src/main.c **** 
 708:Core/Src/main.c ****     osDelay(1);
 709:Core/Src/main.c **** 	}
 710:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 711:Core/Src/main.c **** }
 712:Core/Src/main.c **** 
 713:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 714:Core/Src/main.c **** /**
 715:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 716:Core/Src/main.c **** * @param argument: Not used
 717:Core/Src/main.c **** * @retval None
 718:Core/Src/main.c **** */
 719:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 720:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 721:Core/Src/main.c **** {
 722:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 723:Core/Src/main.c **** 
 724:Core/Src/main.c ****   // enum State state = Init;
 725:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 726:Core/Src/main.c **** 
 727:Core/Src/main.c ****   /* Infinite loop */
 728:Core/Src/main.c ****   for(;;)
 729:Core/Src/main.c ****   {
 730:Core/Src/main.c ****     if(state == Init){
 731:Core/Src/main.c ****       state = Ready;
 732:Core/Src/main.c **** 
 733:Core/Src/main.c ****     }else if(state == Ready){
 734:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 735:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 736:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 737:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 738:Core/Src/main.c ****           state++;
 739:Core/Src/main.c ****         }
ARM GAS  /tmp/ccodJj5F.s 			page 21


 740:Core/Src/main.c ****       }
 741:Core/Src/main.c **** 
 742:Core/Src/main.c ****     }else if(state == Running){
 743:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 744:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 745:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 746:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 747:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 748:Core/Src/main.c ****           state--;
 749:Core/Src/main.c ****         }
 750:Core/Src/main.c ****       }
 751:Core/Src/main.c **** 
 752:Core/Src/main.c ****     }
 753:Core/Src/main.c ****     
 754:Core/Src/main.c ****     if(state == EmergencyStop){
 755:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 756:Core/Src/main.c ****     }
 757:Core/Src/main.c **** 
 758:Core/Src/main.c **** 
 759:Core/Src/main.c **** 
 760:Core/Src/main.c ****     osDelay(1);
 761:Core/Src/main.c ****   }
 762:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 763:Core/Src/main.c **** }
 764:Core/Src/main.c **** 
 765:Core/Src/main.c **** /* USER CODE BEGIN Header_EmergencyStopTaskEntry */
 766:Core/Src/main.c **** /**
 767:Core/Src/main.c **** * @brief Function implementing the EmergencyStopTa thread.
 768:Core/Src/main.c **** * @param argument: Not used
 769:Core/Src/main.c **** * @retval None
 770:Core/Src/main.c **** */
 771:Core/Src/main.c **** /* USER CODE END Header_EmergencyStopTaskEntry */
 772:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument)
 773:Core/Src/main.c **** {
 379              		.loc 1 773 1 view -0
 380              		.cfi_startproc
 381              		@ Volatile: function does not return.
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              	.LVL16:
 385              		.loc 1 773 1 is_stmt 0 view .LVU83
 386 0000 08B5     		push	{r3, lr}
 387              		.cfi_def_cfa_offset 8
 388              		.cfi_offset 3, -8
 389              		.cfi_offset 14, -4
 390              	.LVL17:
 391              	.L20:
 774:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 775:Core/Src/main.c ****   /* Infinite loop */
 776:Core/Src/main.c ****   for(;;)
 392              		.loc 1 776 3 is_stmt 1 discriminator 1 view .LVU84
 777:Core/Src/main.c ****   {
 778:Core/Src/main.c ****     osDelay(1);
 393              		.loc 1 778 5 discriminator 1 view .LVU85
 394 0002 0120     		movs	r0, #1
 395 0004 FFF7FEFF 		bl	osDelay
 396              	.LVL18:
ARM GAS  /tmp/ccodJj5F.s 			page 22


 776:Core/Src/main.c ****   {
 397              		.loc 1 776 8 discriminator 1 view .LVU86
 398 0008 FBE7     		b	.L20
 399              		.cfi_endproc
 400              	.LFE259:
 402              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 403              		.align	1
 404              		.global	MotorControlTaskEntry
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 408              		.fpu fpv4-sp-d16
 410              	MotorControlTaskEntry:
 411              	.LFB260:
 779:Core/Src/main.c ****   }
 780:Core/Src/main.c ****   /* USER CODE END EmergencyStopTaskEntry */
 781:Core/Src/main.c **** }
 782:Core/Src/main.c **** 
 783:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 784:Core/Src/main.c **** /**
 785:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 786:Core/Src/main.c **** * @param argument: Not used
 787:Core/Src/main.c **** * @retval None
 788:Core/Src/main.c **** */
 789:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 790:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
 791:Core/Src/main.c **** {
 412              		.loc 1 791 1 view -0
 413              		.cfi_startproc
 414              		@ Volatile: function does not return.
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              	.LVL19:
 418              		.loc 1 791 1 is_stmt 0 view .LVU88
 419 0000 08B5     		push	{r3, lr}
 420              		.cfi_def_cfa_offset 8
 421              		.cfi_offset 3, -8
 422              		.cfi_offset 14, -4
 423              	.LVL20:
 424              	.L23:
 792:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 793:Core/Src/main.c ****   /* Infinite loop */
 794:Core/Src/main.c ****   for(;;)
 425              		.loc 1 794 3 is_stmt 1 discriminator 1 view .LVU89
 795:Core/Src/main.c ****   {
 796:Core/Src/main.c ****     osDelay(1);
 426              		.loc 1 796 5 discriminator 1 view .LVU90
 427 0002 0120     		movs	r0, #1
 428 0004 FFF7FEFF 		bl	osDelay
 429              	.LVL21:
 794:Core/Src/main.c ****   {
 430              		.loc 1 794 8 discriminator 1 view .LVU91
 431 0008 FBE7     		b	.L23
 432              		.cfi_endproc
 433              	.LFE260:
 435              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 436              		.align	1
ARM GAS  /tmp/ccodJj5F.s 			page 23


 437              		.global	LCDPrintTaskEntry
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	LCDPrintTaskEntry:
 444              	.LFB261:
 797:Core/Src/main.c ****   }
 798:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 799:Core/Src/main.c **** }
 800:Core/Src/main.c **** 
 801:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 802:Core/Src/main.c **** /**
 803:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 804:Core/Src/main.c **** * @param argument: Not used
 805:Core/Src/main.c **** * @retval None
 806:Core/Src/main.c **** */
 807:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 808:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 809:Core/Src/main.c **** {
 445              		.loc 1 809 1 view -0
 446              		.cfi_startproc
 447              		@ Volatile: function does not return.
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              	.LVL22:
 451              		.loc 1 809 1 is_stmt 0 view .LVU93
 452 0000 08B5     		push	{r3, lr}
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 3, -8
 455              		.cfi_offset 14, -4
 456              	.LVL23:
 457              	.L26:
 810:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 811:Core/Src/main.c ****   /* Infinite loop */
 812:Core/Src/main.c ****   for(;;)
 458              		.loc 1 812 3 is_stmt 1 discriminator 1 view .LVU94
 813:Core/Src/main.c ****   {
 814:Core/Src/main.c ****     osDelay(1);
 459              		.loc 1 814 5 discriminator 1 view .LVU95
 460 0002 0120     		movs	r0, #1
 461 0004 FFF7FEFF 		bl	osDelay
 462              	.LVL24:
 812:Core/Src/main.c ****   {
 463              		.loc 1 812 8 discriminator 1 view .LVU96
 464 0008 FBE7     		b	.L26
 465              		.cfi_endproc
 466              	.LFE261:
 468              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 469              		.align	1
 470              		.global	ApplicationFSMEntry
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	ApplicationFSMEntry:
 477              	.LFB258:
ARM GAS  /tmp/ccodJj5F.s 			page 24


 721:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 478              		.loc 1 721 1 view -0
 479              		.cfi_startproc
 480              		@ Volatile: function does not return.
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL25:
 721:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 484              		.loc 1 721 1 is_stmt 0 view .LVU98
 485 0000 08B5     		push	{r3, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 3, -8
 488              		.cfi_offset 14, -4
 489 0002 07E0     		b	.L32
 490              	.LVL26:
 491              	.L34:
 731:Core/Src/main.c **** 
 492              		.loc 1 731 7 is_stmt 1 view .LVU99
 731:Core/Src/main.c **** 
 493              		.loc 1 731 13 is_stmt 0 view .LVU100
 494 0004 244B     		ldr	r3, .L36
 495 0006 0122     		movs	r2, #1
 496 0008 1A70     		strb	r2, [r3]
 497              	.L30:
 754:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 498              		.loc 1 754 5 is_stmt 1 view .LVU101
 754:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 499              		.loc 1 754 14 is_stmt 0 view .LVU102
 500 000a 234B     		ldr	r3, .L36
 501 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 756:Core/Src/main.c **** 
 502              		.loc 1 756 5 is_stmt 1 view .LVU103
 760:Core/Src/main.c ****   }
 503              		.loc 1 760 5 view .LVU104
 504 000e 0120     		movs	r0, #1
 505 0010 FFF7FEFF 		bl	osDelay
 506              	.LVL27:
 728:Core/Src/main.c ****   {
 507              		.loc 1 728 8 view .LVU105
 508              	.L32:
 728:Core/Src/main.c ****   {
 509              		.loc 1 728 3 view .LVU106
 730:Core/Src/main.c ****       state = Ready;
 510              		.loc 1 730 5 view .LVU107
 730:Core/Src/main.c ****       state = Ready;
 511              		.loc 1 730 14 is_stmt 0 view .LVU108
 512 0014 204B     		ldr	r3, .L36
 513 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 730:Core/Src/main.c ****       state = Ready;
 514              		.loc 1 730 7 view .LVU109
 515 0018 002B     		cmp	r3, #0
 516 001a F3D0     		beq	.L34
 733:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 517              		.loc 1 733 11 is_stmt 1 view .LVU110
 733:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 518              		.loc 1 733 20 is_stmt 0 view .LVU111
 519 001c 1E4B     		ldr	r3, .L36
ARM GAS  /tmp/ccodJj5F.s 			page 25


 520 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 521 0020 DBB2     		uxtb	r3, r3
 733:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 522              		.loc 1 733 13 view .LVU112
 523 0022 012B     		cmp	r3, #1
 524 0024 1ED0     		beq	.L35
 742:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 525              		.loc 1 742 11 is_stmt 1 view .LVU113
 742:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 526              		.loc 1 742 20 is_stmt 0 view .LVU114
 527 0026 1C4B     		ldr	r3, .L36
 528 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 529 002a DBB2     		uxtb	r3, r3
 742:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 530              		.loc 1 742 13 view .LVU115
 531 002c 022B     		cmp	r3, #2
 532 002e ECD1     		bne	.L30
 744:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 533              		.loc 1 744 7 is_stmt 1 view .LVU116
 534 0030 1A4C     		ldr	r4, .L36+4
 535 0032 0A22     		movs	r2, #10
 536 0034 2146     		mov	r1, r4
 537 0036 1A4B     		ldr	r3, .L36+8
 538 0038 1868     		ldr	r0, [r3]
 539 003a FFF7FEFF 		bl	xQueueReceive
 540              	.LVL28:
 745:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 541              		.loc 1 745 7 view .LVU117
 745:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 542              		.loc 1 745 22 is_stmt 0 view .LVU118
 543 003e 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 745:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 544              		.loc 1 745 9 view .LVU119
 545 0040 002B     		cmp	r3, #0
 546 0042 E2D1     		bne	.L30
 746:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 547              		.loc 1 746 9 is_stmt 1 view .LVU120
 548 0044 0A22     		movs	r2, #10
 549 0046 2146     		mov	r1, r4
 550 0048 154B     		ldr	r3, .L36+8
 551 004a 1868     		ldr	r0, [r3]
 552 004c FFF7FEFF 		bl	xQueueReceive
 553              	.LVL29:
 747:Core/Src/main.c ****           state--;
 554              		.loc 1 747 9 view .LVU121
 747:Core/Src/main.c ****           state--;
 555              		.loc 1 747 24 is_stmt 0 view .LVU122
 556 0050 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 557 0052 DBB2     		uxtb	r3, r3
 747:Core/Src/main.c ****           state--;
 558              		.loc 1 747 11 view .LVU123
 559 0054 012B     		cmp	r3, #1
 560 0056 D8D1     		bne	.L30
 748:Core/Src/main.c ****         }
 561              		.loc 1 748 11 is_stmt 1 view .LVU124
 748:Core/Src/main.c ****         }
 562              		.loc 1 748 16 is_stmt 0 view .LVU125
ARM GAS  /tmp/ccodJj5F.s 			page 26


 563 0058 0F4A     		ldr	r2, .L36
 564 005a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 565 005c 013B     		subs	r3, r3, #1
 566 005e DBB2     		uxtb	r3, r3
 567 0060 1370     		strb	r3, [r2]
 568 0062 D2E7     		b	.L30
 569              	.L35:
 734:Core/Src/main.c ****       if(minibot_data.GripperValue == 0){
 570              		.loc 1 734 7 is_stmt 1 view .LVU126
 571 0064 0D4C     		ldr	r4, .L36+4
 572 0066 0A22     		movs	r2, #10
 573 0068 2146     		mov	r1, r4
 574 006a 0D4B     		ldr	r3, .L36+8
 575 006c 1868     		ldr	r0, [r3]
 576 006e FFF7FEFF 		bl	xQueueReceive
 577              	.LVL30:
 735:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 578              		.loc 1 735 7 view .LVU127
 735:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 579              		.loc 1 735 22 is_stmt 0 view .LVU128
 580 0072 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 735:Core/Src/main.c ****         xQueueReceive(MiniBotInputQueueHandle, (void*)&minibot_data, 10);
 581              		.loc 1 735 9 view .LVU129
 582 0074 002B     		cmp	r3, #0
 583 0076 C8D1     		bne	.L30
 736:Core/Src/main.c ****         if(minibot_data.GripperValue == 1){
 584              		.loc 1 736 9 is_stmt 1 view .LVU130
 585 0078 0A22     		movs	r2, #10
 586 007a 2146     		mov	r1, r4
 587 007c 084B     		ldr	r3, .L36+8
 588 007e 1868     		ldr	r0, [r3]
 589 0080 FFF7FEFF 		bl	xQueueReceive
 590              	.LVL31:
 737:Core/Src/main.c ****           state++;
 591              		.loc 1 737 9 view .LVU131
 737:Core/Src/main.c ****           state++;
 592              		.loc 1 737 24 is_stmt 0 view .LVU132
 593 0084 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 594 0086 DBB2     		uxtb	r3, r3
 737:Core/Src/main.c ****           state++;
 595              		.loc 1 737 11 view .LVU133
 596 0088 012B     		cmp	r3, #1
 597 008a BED1     		bne	.L30
 738:Core/Src/main.c ****         }
 598              		.loc 1 738 11 is_stmt 1 view .LVU134
 738:Core/Src/main.c ****         }
 599              		.loc 1 738 16 is_stmt 0 view .LVU135
 600 008c 024A     		ldr	r2, .L36
 601 008e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 602 0090 0133     		adds	r3, r3, #1
 603 0092 DBB2     		uxtb	r3, r3
 604 0094 1370     		strb	r3, [r2]
 605 0096 B8E7     		b	.L30
 606              	.L37:
 607              		.align	2
 608              	.L36:
 609 0098 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccodJj5F.s 			page 27


 610 009c 00000000 		.word	.LANCHOR1
 611 00a0 00000000 		.word	.LANCHOR2
 612              		.cfi_endproc
 613              	.LFE258:
 615              		.section	.text.MiniBotInit,"ax",%progbits
 616              		.align	1
 617              		.global	MiniBotInit
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 621              		.fpu fpv4-sp-d16
 623              	MiniBotInit:
 624              	.LVL32:
 625              	.LFB252:
 588:Core/Src/main.c **** 	// Configure Each of the joints
 626              		.loc 1 588 44 is_stmt 1 view -0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 588:Core/Src/main.c **** 	// Configure Each of the joints
 630              		.loc 1 588 44 is_stmt 0 view .LVU137
 631 0000 00B5     		push	{lr}
 632              		.cfi_def_cfa_offset 4
 633              		.cfi_offset 14, -4
 591:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 634              		.loc 1 591 4 is_stmt 1 view .LVU138
 591:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 635              		.loc 1 591 25 is_stmt 0 view .LVU139
 636 0002 0023     		movs	r3, #0
 637 0004 0370     		strb	r3, [r0]
 592:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 638              		.loc 1 592 4 is_stmt 1 view .LVU140
 592:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 639              		.loc 1 592 25 is_stmt 0 view .LVU141
 640 0006 4FF44872 		mov	r2, #800
 641 000a 4260     		str	r2, [r0, #4]
 593:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 642              		.loc 1 593 4 is_stmt 1 view .LVU142
 593:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 643              		.loc 1 593 25 is_stmt 0 view .LVU143
 644 000c 40F64851 		movw	r1, #3400
 645 0010 8160     		str	r1, [r0, #8]
 594:Core/Src/main.c **** 
 646              		.loc 1 594 4 is_stmt 1 view .LVU144
 594:Core/Src/main.c **** 
 647              		.loc 1 594 33 is_stmt 0 view .LVU145
 648 0012 0373     		strb	r3, [r0, #12]
 596:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 649              		.loc 1 596 4 is_stmt 1 view .LVU146
 596:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 650              		.loc 1 596 29 is_stmt 0 view .LVU147
 651 0014 4FF0010C 		mov	ip, #1
 652 0018 80F810C0 		strb	ip, [r0, #16]
 597:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 653              		.loc 1 597 4 is_stmt 1 view .LVU148
 597:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 654              		.loc 1 597 29 is_stmt 0 view .LVU149
ARM GAS  /tmp/ccodJj5F.s 			page 28


 655 001c 4FF41672 		mov	r2, #600
 656 0020 4261     		str	r2, [r0, #20]
 598:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 657              		.loc 1 598 4 is_stmt 1 view .LVU150
 598:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 658              		.loc 1 598 29 is_stmt 0 view .LVU151
 659 0022 8161     		str	r1, [r0, #24]
 599:Core/Src/main.c **** 
 660              		.loc 1 599 4 is_stmt 1 view .LVU152
 599:Core/Src/main.c **** 
 661              		.loc 1 599 37 is_stmt 0 view .LVU153
 662 0024 0377     		strb	r3, [r0, #28]
 601:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 663              		.loc 1 601 4 is_stmt 1 view .LVU154
 601:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 664              		.loc 1 601 26 is_stmt 0 view .LVU155
 665 0026 4FF0020E 		mov	lr, #2
 666 002a 80F820E0 		strb	lr, [r0, #32]
 602:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 667              		.loc 1 602 4 is_stmt 1 view .LVU156
 602:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 668              		.loc 1 602 26 is_stmt 0 view .LVU157
 669 002e 4262     		str	r2, [r0, #36]
 603:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 670              		.loc 1 603 4 is_stmt 1 view .LVU158
 603:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 671              		.loc 1 603 26 is_stmt 0 view .LVU159
 672 0030 8162     		str	r1, [r0, #40]
 604:Core/Src/main.c **** 
 673              		.loc 1 604 4 is_stmt 1 view .LVU160
 604:Core/Src/main.c **** 
 674              		.loc 1 604 34 is_stmt 0 view .LVU161
 675 0032 80F82C30 		strb	r3, [r0, #44]
 606:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 676              		.loc 1 606 4 is_stmt 1 view .LVU162
 606:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 677              		.loc 1 606 26 is_stmt 0 view .LVU163
 678 0036 0323     		movs	r3, #3
 679 0038 80F83030 		strb	r3, [r0, #48]
 607:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 680              		.loc 1 607 4 is_stmt 1 view .LVU164
 607:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 681              		.loc 1 607 26 is_stmt 0 view .LVU165
 682 003c 4263     		str	r2, [r0, #52]
 608:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 683              		.loc 1 608 4 is_stmt 1 view .LVU166
 608:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 684              		.loc 1 608 26 is_stmt 0 view .LVU167
 685 003e 4FF44863 		mov	r3, #3200
 686 0042 8363     		str	r3, [r0, #56]
 609:Core/Src/main.c **** 
 687              		.loc 1 609 4 is_stmt 1 view .LVU168
 609:Core/Src/main.c **** 
 688              		.loc 1 609 34 is_stmt 0 view .LVU169
 689 0044 80F83CC0 		strb	ip, [r0, #60]
 611:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 690              		.loc 1 611 4 is_stmt 1 view .LVU170
ARM GAS  /tmp/ccodJj5F.s 			page 29


 611:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 691              		.loc 1 611 27 is_stmt 0 view .LVU171
 692 0048 034B     		ldr	r3, .L40
 693 004a 0364     		str	r3, [r0, #64]
 612:Core/Src/main.c **** }
 694              		.loc 1 612 4 is_stmt 1 view .LVU172
 612:Core/Src/main.c **** }
 695              		.loc 1 612 30 is_stmt 0 view .LVU173
 696 004c 4FF40073 		mov	r3, #512
 697 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 613:Core/Src/main.c **** 
 698              		.loc 1 613 1 view .LVU174
 699 0054 5DF804FB 		ldr	pc, [sp], #4
 700              	.L41:
 701              		.align	2
 702              	.L40:
 703 0058 00000240 		.word	1073872896
 704              		.cfi_endproc
 705              	.LFE252:
 707              		.section	.text.MegaBotInit,"ax",%progbits
 708              		.align	1
 709              		.global	MegaBotInit
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu fpv4-sp-d16
 715              	MegaBotInit:
 716              	.LVL33:
 717              	.LFB253:
 615:Core/Src/main.c **** 
 718              		.loc 1 615 44 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 617:Core/Src/main.c **** 
 723              		.loc 1 617 1 view .LVU176
 724 0000 7047     		bx	lr
 725              		.cfi_endproc
 726              	.LFE253:
 728              		.section	.text.QPotDataUpdate,"ax",%progbits
 729              		.align	1
 730              		.global	QPotDataUpdate
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv4-sp-d16
 736              	QPotDataUpdate:
 737              	.LVL34:
 738              	.LFB254:
 620:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 739              		.loc 1 620 111 view -0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 621:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
ARM GAS  /tmp/ccodJj5F.s 			page 30


 744              		.loc 1 621 3 view .LVU178
 621:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 745              		.loc 1 621 20 is_stmt 0 view .LVU179
 746 0000 1368     		ldr	r3, [r2]
 621:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 747              		.loc 1 621 30 view .LVU180
 748 0002 0A33     		adds	r3, r3, #10
 621:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 749              		.loc 1 621 5 view .LVU181
 750 0004 8342     		cmp	r3, r0
 751 0006 03D3     		bcc	.L44
 621:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 752              		.loc 1 621 52 discriminator 1 view .LVU182
 753 0008 1368     		ldr	r3, [r2]
 621:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 754              		.loc 1 621 62 discriminator 1 view .LVU183
 755 000a 0A3B     		subs	r3, r3, #10
 621:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 756              		.loc 1 621 35 discriminator 1 view .LVU184
 757 000c 8342     		cmp	r3, r0
 758 000e 0CD9     		bls	.L43
 759              	.L44:
 622:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 760              		.loc 1 622 5 is_stmt 1 view .LVU185
 622:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 761              		.loc 1 622 27 is_stmt 0 view .LVU186
 762 0010 8B68     		ldr	r3, [r1, #8]
 622:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 763              		.loc 1 622 7 view .LVU187
 764 0012 8342     		cmp	r3, r0
 765 0014 0AD2     		bcs	.L46
 623:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 766              		.loc 1 623 7 is_stmt 1 view .LVU188
 623:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 767              		.loc 1 623 24 is_stmt 0 view .LVU189
 768 0016 8B68     		ldr	r3, [r1, #8]
 623:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 769              		.loc 1 623 17 view .LVU190
 770 0018 1360     		str	r3, [r2]
 771              	.L47:
 629:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 772              		.loc 1 629 5 is_stmt 1 view .LVU191
 629:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 773              		.loc 1 629 13 is_stmt 0 view .LVU192
 774 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 629:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 775              		.loc 1 629 7 view .LVU193
 776 001c 2BB1     		cbz	r3, .L43
 630:Core/Src/main.c ****     }
 777              		.loc 1 630 7 is_stmt 1 view .LVU194
 630:Core/Src/main.c ****     }
 778              		.loc 1 630 24 is_stmt 0 view .LVU195
 779 001e 8B68     		ldr	r3, [r1, #8]
 630:Core/Src/main.c ****     }
 780              		.loc 1 630 35 view .LVU196
 781 0020 1068     		ldr	r0, [r2]
 782              	.LVL35:
ARM GAS  /tmp/ccodJj5F.s 			page 31


 630:Core/Src/main.c ****     }
 783              		.loc 1 630 33 view .LVU197
 784 0022 1B1A     		subs	r3, r3, r0
 630:Core/Src/main.c ****     }
 785              		.loc 1 630 52 view .LVU198
 786 0024 4968     		ldr	r1, [r1, #4]
 787              	.LVL36:
 630:Core/Src/main.c ****     }
 788              		.loc 1 630 45 view .LVU199
 789 0026 0B44     		add	r3, r3, r1
 630:Core/Src/main.c ****     }
 790              		.loc 1 630 17 view .LVU200
 791 0028 1360     		str	r3, [r2]
 792              	.L43:
 633:Core/Src/main.c **** 
 793              		.loc 1 633 1 view .LVU201
 794 002a 7047     		bx	lr
 795              	.LVL37:
 796              	.L46:
 624:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 797              		.loc 1 624 11 is_stmt 1 view .LVU202
 624:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 798              		.loc 1 624 33 is_stmt 0 view .LVU203
 799 002c 4B68     		ldr	r3, [r1, #4]
 624:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 800              		.loc 1 624 13 view .LVU204
 801 002e 8342     		cmp	r3, r0
 802 0030 02D9     		bls	.L48
 625:Core/Src/main.c ****     }else{
 803              		.loc 1 625 7 is_stmt 1 view .LVU205
 625:Core/Src/main.c ****     }else{
 804              		.loc 1 625 24 is_stmt 0 view .LVU206
 805 0032 4B68     		ldr	r3, [r1, #4]
 625:Core/Src/main.c ****     }else{
 806              		.loc 1 625 17 view .LVU207
 807 0034 1360     		str	r3, [r2]
 808 0036 F0E7     		b	.L47
 809              	.L48:
 627:Core/Src/main.c ****     }
 810              		.loc 1 627 7 is_stmt 1 view .LVU208
 627:Core/Src/main.c ****     }
 811              		.loc 1 627 17 is_stmt 0 view .LVU209
 812 0038 1060     		str	r0, [r2]
 813 003a EEE7     		b	.L47
 814              		.cfi_endproc
 815              	.LFE254:
 817              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 818              		.align	1
 819              		.global	MiniBotInputsEntry
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu fpv4-sp-d16
 825              	MiniBotInputsEntry:
 826              	.LVL38:
 827              	.LFB257:
 687:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
ARM GAS  /tmp/ccodJj5F.s 			page 32


 828              		.loc 1 687 1 is_stmt 1 view -0
 829              		.cfi_startproc
 830              		@ Volatile: function does not return.
 831              		@ args = 0, pretend = 0, frame = 72
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 687:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 833              		.loc 1 687 1 is_stmt 0 view .LVU211
 834 0000 00B5     		push	{lr}
 835              		.cfi_def_cfa_offset 4
 836              		.cfi_offset 14, -4
 837 0002 93B0     		sub	sp, sp, #76
 838              		.cfi_def_cfa_offset 80
 690:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 839              		.loc 1 690 2 is_stmt 1 view .LVU212
 691:Core/Src/main.c **** 
 840              		.loc 1 691 2 view .LVU213
 841 0004 6846     		mov	r0, sp
 842              	.LVL39:
 691:Core/Src/main.c **** 
 843              		.loc 1 691 2 is_stmt 0 view .LVU214
 844 0006 FFF7FEFF 		bl	MiniBotInit
 845              	.LVL40:
 694:Core/Src/main.c **** 
 846              		.loc 1 694 3 is_stmt 1 view .LVU215
 847 000a 0422     		movs	r2, #4
 848 000c 1649     		ldr	r1, .L52
 849 000e 1748     		ldr	r0, .L52+4
 850 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 851              	.LVL41:
 852              	.L50:
 697:Core/Src/main.c **** 	{
 853              		.loc 1 697 2 discriminator 1 view .LVU216
 699:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 854              		.loc 1 699 5 discriminator 1 view .LVU217
 855 0014 164C     		ldr	r4, .L52+8
 856 0016 144D     		ldr	r5, .L52
 857 0018 2246     		mov	r2, r4
 858 001a 6946     		mov	r1, sp
 859 001c 2868     		ldr	r0, [r5]
 860 001e FFF7FEFF 		bl	QPotDataUpdate
 861              	.LVL42:
 700:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 862              		.loc 1 700 5 discriminator 1 view .LVU218
 863 0022 221D     		adds	r2, r4, #4
 864 0024 04A9     		add	r1, sp, #16
 865 0026 6868     		ldr	r0, [r5, #4]
 866 0028 FFF7FEFF 		bl	QPotDataUpdate
 867              	.LVL43:
 701:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 868              		.loc 1 701 5 discriminator 1 view .LVU219
 869 002c 04F10802 		add	r2, r4, #8
 870 0030 08A9     		add	r1, sp, #32
 871 0032 A868     		ldr	r0, [r5, #8]
 872 0034 FFF7FEFF 		bl	QPotDataUpdate
 873              	.LVL44:
 702:Core/Src/main.c **** 
 874              		.loc 1 702 5 discriminator 1 view .LVU220
ARM GAS  /tmp/ccodJj5F.s 			page 33


 875 0038 04F10C02 		add	r2, r4, #12
 876 003c 0CA9     		add	r1, sp, #48
 877 003e E868     		ldr	r0, [r5, #12]
 878 0040 FFF7FEFF 		bl	QPotDataUpdate
 879              	.LVL45:
 704:Core/Src/main.c ****     
 880              		.loc 1 704 5 discriminator 1 view .LVU221
 704:Core/Src/main.c ****     
 881              		.loc 1 704 35 is_stmt 0 discriminator 1 view .LVU222
 882 0044 4FF40071 		mov	r1, #512
 883 0048 0A48     		ldr	r0, .L52+12
 884 004a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 885              	.LVL46:
 704:Core/Src/main.c ****     
 886              		.loc 1 704 24 discriminator 1 view .LVU223
 887 004e 2074     		strb	r0, [r4, #16]
 706:Core/Src/main.c **** 
 888              		.loc 1 706 5 is_stmt 1 discriminator 1 view .LVU224
 889 0050 0023     		movs	r3, #0
 890 0052 0A22     		movs	r2, #10
 891 0054 2146     		mov	r1, r4
 892 0056 0848     		ldr	r0, .L52+16
 893 0058 0068     		ldr	r0, [r0]
 894 005a FFF7FEFF 		bl	xQueueGenericSend
 895              	.LVL47:
 708:Core/Src/main.c **** 	}
 896              		.loc 1 708 5 discriminator 1 view .LVU225
 897 005e 0120     		movs	r0, #1
 898 0060 FFF7FEFF 		bl	osDelay
 899              	.LVL48:
 697:Core/Src/main.c **** 	{
 900              		.loc 1 697 7 discriminator 1 view .LVU226
 901 0064 D6E7     		b	.L50
 902              	.L53:
 903 0066 00BF     		.align	2
 904              	.L52:
 905 0068 00000000 		.word	.LANCHOR3
 906 006c 00000000 		.word	.LANCHOR4
 907 0070 00000000 		.word	.LANCHOR5
 908 0074 00000240 		.word	1073872896
 909 0078 00000000 		.word	.LANCHOR2
 910              		.cfi_endproc
 911              	.LFE257:
 913              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 914              		.align	1
 915              		.global	HAL_TIM_PeriodElapsedCallback
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu fpv4-sp-d16
 921              	HAL_TIM_PeriodElapsedCallback:
 922              	.LVL49:
 923              	.LFB262:
 815:Core/Src/main.c ****   }
 816:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 817:Core/Src/main.c **** }
 818:Core/Src/main.c **** 
ARM GAS  /tmp/ccodJj5F.s 			page 34


 819:Core/Src/main.c **** /**
 820:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 821:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 822:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 823:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 824:Core/Src/main.c ****   * @param  htim : TIM handle
 825:Core/Src/main.c ****   * @retval None
 826:Core/Src/main.c ****   */
 827:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 828:Core/Src/main.c **** {
 924              		.loc 1 828 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		.loc 1 828 1 is_stmt 0 view .LVU228
 929 0000 08B5     		push	{r3, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 3, -8
 932              		.cfi_offset 14, -4
 829:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 830:Core/Src/main.c **** 
 831:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 832:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 933              		.loc 1 832 3 is_stmt 1 view .LVU229
 934              		.loc 1 832 11 is_stmt 0 view .LVU230
 935 0002 0268     		ldr	r2, [r0]
 936              		.loc 1 832 6 view .LVU231
 937 0004 034B     		ldr	r3, .L58
 938 0006 9A42     		cmp	r2, r3
 939 0008 00D0     		beq	.L57
 940              	.LVL50:
 941              	.L54:
 833:Core/Src/main.c ****     HAL_IncTick();
 834:Core/Src/main.c ****   }
 835:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 836:Core/Src/main.c **** 
 837:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 838:Core/Src/main.c **** }
 942              		.loc 1 838 1 view .LVU232
 943 000a 08BD     		pop	{r3, pc}
 944              	.LVL51:
 945              	.L57:
 833:Core/Src/main.c ****     HAL_IncTick();
 946              		.loc 1 833 5 is_stmt 1 view .LVU233
 947 000c FFF7FEFF 		bl	HAL_IncTick
 948              	.LVL52:
 949              		.loc 1 838 1 is_stmt 0 view .LVU234
 950 0010 FBE7     		b	.L54
 951              	.L59:
 952 0012 00BF     		.align	2
 953              	.L58:
 954 0014 00100040 		.word	1073745920
 955              		.cfi_endproc
 956              	.LFE262:
 958              		.section	.text.Error_Handler,"ax",%progbits
 959              		.align	1
 960              		.global	Error_Handler
ARM GAS  /tmp/ccodJj5F.s 			page 35


 961              		.syntax unified
 962              		.thumb
 963              		.thumb_func
 964              		.fpu fpv4-sp-d16
 966              	Error_Handler:
 967              	.LFB263:
 839:Core/Src/main.c **** 
 840:Core/Src/main.c **** /**
 841:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 842:Core/Src/main.c ****   * @retval None
 843:Core/Src/main.c ****   */
 844:Core/Src/main.c **** void Error_Handler(void)
 845:Core/Src/main.c **** {
 968              		.loc 1 845 1 is_stmt 1 view -0
 969              		.cfi_startproc
 970              		@ Volatile: function does not return.
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973              		@ link register save eliminated.
 846:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 847:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 848:Core/Src/main.c ****   __disable_irq();
 974              		.loc 1 848 3 view .LVU236
 975              	.LBB9:
 976              	.LBI9:
 977              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  /tmp/ccodJj5F.s 			page 36


  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccodJj5F.s 			page 37


  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccodJj5F.s 			page 38


 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccodJj5F.s 			page 39


 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccodJj5F.s 			page 40


 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccodJj5F.s 			page 41


 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
ARM GAS  /tmp/ccodJj5F.s 			page 42


 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/ccodJj5F.s 			page 43


 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
ARM GAS  /tmp/ccodJj5F.s 			page 44


 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccodJj5F.s 			page 45


 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccodJj5F.s 			page 46


 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccodJj5F.s 			page 47


 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
ARM GAS  /tmp/ccodJj5F.s 			page 48


 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
ARM GAS  /tmp/ccodJj5F.s 			page 49


 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccodJj5F.s 			page 50


 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccodJj5F.s 			page 51


 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccodJj5F.s 			page 52


 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 978              		.loc 2 960 27 view .LVU237
 979              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 980              		.loc 2 962 3 view .LVU238
 981              		.syntax unified
 982              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 983 0000 72B6     		cpsid i
 984              	@ 0 "" 2
 985              		.thumb
 986              		.syntax unified
 987              	.L61:
 988              	.LBE10:
 989              	.LBE9:
 849:Core/Src/main.c ****   while (1)
 990              		.loc 1 849 3 discriminator 1 view .LVU239
 850:Core/Src/main.c ****   {
 851:Core/Src/main.c ****   }
 991              		.loc 1 851 3 discriminator 1 view .LVU240
 849:Core/Src/main.c ****   while (1)
 992              		.loc 1 849 9 discriminator 1 view .LVU241
 993 0002 FEE7     		b	.L61
 994              		.cfi_endproc
 995              	.LFE263:
 997              		.section	.text.MX_ADC1_Init,"ax",%progbits
 998              		.align	1
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1002              		.fpu fpv4-sp-d16
 1004              	MX_ADC1_Init:
 1005              	.LFB246:
 346:Core/Src/main.c **** 
 1006              		.loc 1 346 1 view -0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 16
 1009              		@ frame_needed = 0, uses_anonymous_args = 0
 1010 0000 00B5     		push	{lr}
 1011              		.cfi_def_cfa_offset 4
 1012              		.cfi_offset 14, -4
ARM GAS  /tmp/ccodJj5F.s 			page 53


 1013 0002 85B0     		sub	sp, sp, #20
 1014              		.cfi_def_cfa_offset 24
 352:Core/Src/main.c **** 
 1015              		.loc 1 352 3 view .LVU243
 352:Core/Src/main.c **** 
 1016              		.loc 1 352 26 is_stmt 0 view .LVU244
 1017 0004 0023     		movs	r3, #0
 1018 0006 0093     		str	r3, [sp]
 1019 0008 0193     		str	r3, [sp, #4]
 1020 000a 0293     		str	r3, [sp, #8]
 1021 000c 0393     		str	r3, [sp, #12]
 360:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1022              		.loc 1 360 3 is_stmt 1 view .LVU245
 360:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1023              		.loc 1 360 18 is_stmt 0 view .LVU246
 1024 000e 2548     		ldr	r0, .L74
 1025 0010 254A     		ldr	r2, .L74+4
 1026 0012 0260     		str	r2, [r0]
 361:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1027              		.loc 1 361 3 is_stmt 1 view .LVU247
 361:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1028              		.loc 1 361 29 is_stmt 0 view .LVU248
 1029 0014 4FF48032 		mov	r2, #65536
 1030 0018 4260     		str	r2, [r0, #4]
 362:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1031              		.loc 1 362 3 is_stmt 1 view .LVU249
 362:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1032              		.loc 1 362 25 is_stmt 0 view .LVU250
 1033 001a 8360     		str	r3, [r0, #8]
 363:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1034              		.loc 1 363 3 is_stmt 1 view .LVU251
 363:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 1035              		.loc 1 363 27 is_stmt 0 view .LVU252
 1036 001c 0122     		movs	r2, #1
 1037 001e 0261     		str	r2, [r0, #16]
 364:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1038              		.loc 1 364 3 is_stmt 1 view .LVU253
 364:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1039              		.loc 1 364 33 is_stmt 0 view .LVU254
 1040 0020 0276     		strb	r2, [r0, #24]
 365:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1041              		.loc 1 365 3 is_stmt 1 view .LVU255
 365:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1042              		.loc 1 365 36 is_stmt 0 view .LVU256
 1043 0022 80F82030 		strb	r3, [r0, #32]
 366:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1044              		.loc 1 366 3 is_stmt 1 view .LVU257
 366:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1045              		.loc 1 366 35 is_stmt 0 view .LVU258
 1046 0026 C362     		str	r3, [r0, #44]
 367:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1047              		.loc 1 367 3 is_stmt 1 view .LVU259
 367:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1048              		.loc 1 367 31 is_stmt 0 view .LVU260
 1049 0028 2049     		ldr	r1, .L74+8
 1050 002a 8162     		str	r1, [r0, #40]
 368:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
ARM GAS  /tmp/ccodJj5F.s 			page 54


 1051              		.loc 1 368 3 is_stmt 1 view .LVU261
 368:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1052              		.loc 1 368 24 is_stmt 0 view .LVU262
 1053 002c C360     		str	r3, [r0, #12]
 369:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1054              		.loc 1 369 3 is_stmt 1 view .LVU263
 369:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 1055              		.loc 1 369 30 is_stmt 0 view .LVU264
 1056 002e 0421     		movs	r1, #4
 1057 0030 C161     		str	r1, [r0, #28]
 370:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1058              		.loc 1 370 3 is_stmt 1 view .LVU265
 370:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1059              		.loc 1 370 36 is_stmt 0 view .LVU266
 1060 0032 80F83020 		strb	r2, [r0, #48]
 371:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1061              		.loc 1 371 3 is_stmt 1 view .LVU267
 371:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1062              		.loc 1 371 27 is_stmt 0 view .LVU268
 1063 0036 4361     		str	r3, [r0, #20]
 372:Core/Src/main.c ****   {
 1064              		.loc 1 372 3 is_stmt 1 view .LVU269
 372:Core/Src/main.c ****   {
 1065              		.loc 1 372 7 is_stmt 0 view .LVU270
 1066 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1067              	.LVL53:
 372:Core/Src/main.c ****   {
 1068              		.loc 1 372 6 view .LVU271
 1069 003c 38BB     		cbnz	r0, .L69
 379:Core/Src/main.c ****   sConfig.Rank = 1;
 1070              		.loc 1 379 3 is_stmt 1 view .LVU272
 379:Core/Src/main.c ****   sConfig.Rank = 1;
 1071              		.loc 1 379 19 is_stmt 0 view .LVU273
 1072 003e 0023     		movs	r3, #0
 1073 0040 0093     		str	r3, [sp]
 380:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1074              		.loc 1 380 3 is_stmt 1 view .LVU274
 380:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1075              		.loc 1 380 16 is_stmt 0 view .LVU275
 1076 0042 0122     		movs	r2, #1
 1077 0044 0192     		str	r2, [sp, #4]
 381:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1078              		.loc 1 381 3 is_stmt 1 view .LVU276
 381:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1079              		.loc 1 381 24 is_stmt 0 view .LVU277
 1080 0046 0293     		str	r3, [sp, #8]
 382:Core/Src/main.c ****   {
 1081              		.loc 1 382 3 is_stmt 1 view .LVU278
 382:Core/Src/main.c ****   {
 1082              		.loc 1 382 7 is_stmt 0 view .LVU279
 1083 0048 6946     		mov	r1, sp
 1084 004a 1648     		ldr	r0, .L74
 1085 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1086              	.LVL54:
 382:Core/Src/main.c ****   {
 1087              		.loc 1 382 6 view .LVU280
 1088 0050 F8B9     		cbnz	r0, .L70
ARM GAS  /tmp/ccodJj5F.s 			page 55


 389:Core/Src/main.c ****   sConfig.Rank = 2;
 1089              		.loc 1 389 3 is_stmt 1 view .LVU281
 389:Core/Src/main.c ****   sConfig.Rank = 2;
 1090              		.loc 1 389 19 is_stmt 0 view .LVU282
 1091 0052 0123     		movs	r3, #1
 1092 0054 0093     		str	r3, [sp]
 390:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1093              		.loc 1 390 3 is_stmt 1 view .LVU283
 390:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1094              		.loc 1 390 16 is_stmt 0 view .LVU284
 1095 0056 0223     		movs	r3, #2
 1096 0058 0193     		str	r3, [sp, #4]
 391:Core/Src/main.c ****   {
 1097              		.loc 1 391 3 is_stmt 1 view .LVU285
 391:Core/Src/main.c ****   {
 1098              		.loc 1 391 7 is_stmt 0 view .LVU286
 1099 005a 6946     		mov	r1, sp
 1100 005c 1148     		ldr	r0, .L74
 1101 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1102              	.LVL55:
 391:Core/Src/main.c ****   {
 1103              		.loc 1 391 6 view .LVU287
 1104 0062 C0B9     		cbnz	r0, .L71
 398:Core/Src/main.c ****   sConfig.Rank = 3;
 1105              		.loc 1 398 3 is_stmt 1 view .LVU288
 398:Core/Src/main.c ****   sConfig.Rank = 3;
 1106              		.loc 1 398 19 is_stmt 0 view .LVU289
 1107 0064 0423     		movs	r3, #4
 1108 0066 0093     		str	r3, [sp]
 399:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1109              		.loc 1 399 3 is_stmt 1 view .LVU290
 399:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1110              		.loc 1 399 16 is_stmt 0 view .LVU291
 1111 0068 0323     		movs	r3, #3
 1112 006a 0193     		str	r3, [sp, #4]
 400:Core/Src/main.c ****   {
 1113              		.loc 1 400 3 is_stmt 1 view .LVU292
 400:Core/Src/main.c ****   {
 1114              		.loc 1 400 7 is_stmt 0 view .LVU293
 1115 006c 6946     		mov	r1, sp
 1116 006e 0D48     		ldr	r0, .L74
 1117 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1118              	.LVL56:
 400:Core/Src/main.c ****   {
 1119              		.loc 1 400 6 view .LVU294
 1120 0074 88B9     		cbnz	r0, .L72
 407:Core/Src/main.c ****   sConfig.Rank = 4;
 1121              		.loc 1 407 3 is_stmt 1 view .LVU295
 407:Core/Src/main.c ****   sConfig.Rank = 4;
 1122              		.loc 1 407 19 is_stmt 0 view .LVU296
 1123 0076 0823     		movs	r3, #8
 1124 0078 0093     		str	r3, [sp]
 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1125              		.loc 1 408 3 is_stmt 1 view .LVU297
 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1126              		.loc 1 408 16 is_stmt 0 view .LVU298
 1127 007a 0423     		movs	r3, #4
ARM GAS  /tmp/ccodJj5F.s 			page 56


 1128 007c 0193     		str	r3, [sp, #4]
 409:Core/Src/main.c ****   {
 1129              		.loc 1 409 3 is_stmt 1 view .LVU299
 409:Core/Src/main.c ****   {
 1130              		.loc 1 409 7 is_stmt 0 view .LVU300
 1131 007e 6946     		mov	r1, sp
 1132 0080 0848     		ldr	r0, .L74
 1133 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1134              	.LVL57:
 409:Core/Src/main.c ****   {
 1135              		.loc 1 409 6 view .LVU301
 1136 0086 50B9     		cbnz	r0, .L73
 417:Core/Src/main.c **** 
 1137              		.loc 1 417 1 view .LVU302
 1138 0088 05B0     		add	sp, sp, #20
 1139              		.cfi_remember_state
 1140              		.cfi_def_cfa_offset 4
 1141              		@ sp needed
 1142 008a 5DF804FB 		ldr	pc, [sp], #4
 1143              	.L69:
 1144              		.cfi_restore_state
 374:Core/Src/main.c ****   }
 1145              		.loc 1 374 5 is_stmt 1 view .LVU303
 1146 008e FFF7FEFF 		bl	Error_Handler
 1147              	.LVL58:
 1148              	.L70:
 384:Core/Src/main.c ****   }
 1149              		.loc 1 384 5 view .LVU304
 1150 0092 FFF7FEFF 		bl	Error_Handler
 1151              	.LVL59:
 1152              	.L71:
 393:Core/Src/main.c ****   }
 1153              		.loc 1 393 5 view .LVU305
 1154 0096 FFF7FEFF 		bl	Error_Handler
 1155              	.LVL60:
 1156              	.L72:
 402:Core/Src/main.c ****   }
 1157              		.loc 1 402 5 view .LVU306
 1158 009a FFF7FEFF 		bl	Error_Handler
 1159              	.LVL61:
 1160              	.L73:
 411:Core/Src/main.c ****   }
 1161              		.loc 1 411 5 view .LVU307
 1162 009e FFF7FEFF 		bl	Error_Handler
 1163              	.LVL62:
 1164              	.L75:
 1165 00a2 00BF     		.align	2
 1166              	.L74:
 1167 00a4 00000000 		.word	.LANCHOR4
 1168 00a8 00200140 		.word	1073815552
 1169 00ac 0100000F 		.word	251658241
 1170              		.cfi_endproc
 1171              	.LFE246:
 1173              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1174              		.align	1
 1175              		.syntax unified
 1176              		.thumb
ARM GAS  /tmp/ccodJj5F.s 			page 57


 1177              		.thumb_func
 1178              		.fpu fpv4-sp-d16
 1180              	MX_I2C1_Init:
 1181              	.LFB247:
 425:Core/Src/main.c **** 
 1182              		.loc 1 425 1 view -0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 0, uses_anonymous_args = 0
 1186 0000 08B5     		push	{r3, lr}
 1187              		.cfi_def_cfa_offset 8
 1188              		.cfi_offset 3, -8
 1189              		.cfi_offset 14, -4
 434:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1190              		.loc 1 434 3 view .LVU309
 434:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1191              		.loc 1 434 18 is_stmt 0 view .LVU310
 1192 0002 0A48     		ldr	r0, .L80
 1193 0004 0A4B     		ldr	r3, .L80+4
 1194 0006 0360     		str	r3, [r0]
 435:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1195              		.loc 1 435 3 is_stmt 1 view .LVU311
 435:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1196              		.loc 1 435 25 is_stmt 0 view .LVU312
 1197 0008 0A4B     		ldr	r3, .L80+8
 1198 000a 4360     		str	r3, [r0, #4]
 436:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1199              		.loc 1 436 3 is_stmt 1 view .LVU313
 436:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1200              		.loc 1 436 24 is_stmt 0 view .LVU314
 1201 000c 0023     		movs	r3, #0
 1202 000e 8360     		str	r3, [r0, #8]
 437:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1203              		.loc 1 437 3 is_stmt 1 view .LVU315
 437:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1204              		.loc 1 437 26 is_stmt 0 view .LVU316
 1205 0010 C360     		str	r3, [r0, #12]
 438:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1206              		.loc 1 438 3 is_stmt 1 view .LVU317
 438:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1207              		.loc 1 438 29 is_stmt 0 view .LVU318
 1208 0012 4FF48042 		mov	r2, #16384
 1209 0016 0261     		str	r2, [r0, #16]
 439:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1210              		.loc 1 439 3 is_stmt 1 view .LVU319
 439:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1211              		.loc 1 439 30 is_stmt 0 view .LVU320
 1212 0018 4361     		str	r3, [r0, #20]
 440:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1213              		.loc 1 440 3 is_stmt 1 view .LVU321
 440:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1214              		.loc 1 440 26 is_stmt 0 view .LVU322
 1215 001a 8361     		str	r3, [r0, #24]
 441:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1216              		.loc 1 441 3 is_stmt 1 view .LVU323
 441:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1217              		.loc 1 441 30 is_stmt 0 view .LVU324
ARM GAS  /tmp/ccodJj5F.s 			page 58


 1218 001c C361     		str	r3, [r0, #28]
 442:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1219              		.loc 1 442 3 is_stmt 1 view .LVU325
 442:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1220              		.loc 1 442 28 is_stmt 0 view .LVU326
 1221 001e 0362     		str	r3, [r0, #32]
 443:Core/Src/main.c ****   {
 1222              		.loc 1 443 3 is_stmt 1 view .LVU327
 443:Core/Src/main.c ****   {
 1223              		.loc 1 443 7 is_stmt 0 view .LVU328
 1224 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1225              	.LVL63:
 443:Core/Src/main.c ****   {
 1226              		.loc 1 443 6 view .LVU329
 1227 0024 00B9     		cbnz	r0, .L79
 451:Core/Src/main.c **** 
 1228              		.loc 1 451 1 view .LVU330
 1229 0026 08BD     		pop	{r3, pc}
 1230              	.L79:
 445:Core/Src/main.c ****   }
 1231              		.loc 1 445 5 is_stmt 1 view .LVU331
 1232 0028 FFF7FEFF 		bl	Error_Handler
 1233              	.LVL64:
 1234              	.L81:
 1235              		.align	2
 1236              	.L80:
 1237 002c 00000000 		.word	.LANCHOR6
 1238 0030 00540040 		.word	1073763328
 1239 0034 A0860100 		.word	100000
 1240              		.cfi_endproc
 1241              	.LFE247:
 1243              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1244              		.align	1
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1248              		.fpu fpv4-sp-d16
 1250              	MX_USART2_UART_Init:
 1251              	.LFB249:
 493:Core/Src/main.c **** 
 1252              		.loc 1 493 1 view -0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256 0000 08B5     		push	{r3, lr}
 1257              		.cfi_def_cfa_offset 8
 1258              		.cfi_offset 3, -8
 1259              		.cfi_offset 14, -4
 502:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1260              		.loc 1 502 3 view .LVU333
 502:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1261              		.loc 1 502 19 is_stmt 0 view .LVU334
 1262 0002 0A48     		ldr	r0, .L86
 1263 0004 0A4B     		ldr	r3, .L86+4
 1264 0006 0360     		str	r3, [r0]
 503:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1265              		.loc 1 503 3 is_stmt 1 view .LVU335
ARM GAS  /tmp/ccodJj5F.s 			page 59


 503:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1266              		.loc 1 503 24 is_stmt 0 view .LVU336
 1267 0008 4FF4E133 		mov	r3, #115200
 1268 000c 4360     		str	r3, [r0, #4]
 504:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1269              		.loc 1 504 3 is_stmt 1 view .LVU337
 504:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1270              		.loc 1 504 26 is_stmt 0 view .LVU338
 1271 000e 0023     		movs	r3, #0
 1272 0010 8360     		str	r3, [r0, #8]
 505:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1273              		.loc 1 505 3 is_stmt 1 view .LVU339
 505:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1274              		.loc 1 505 24 is_stmt 0 view .LVU340
 1275 0012 C360     		str	r3, [r0, #12]
 506:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1276              		.loc 1 506 3 is_stmt 1 view .LVU341
 506:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1277              		.loc 1 506 22 is_stmt 0 view .LVU342
 1278 0014 0361     		str	r3, [r0, #16]
 507:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1279              		.loc 1 507 3 is_stmt 1 view .LVU343
 507:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1280              		.loc 1 507 20 is_stmt 0 view .LVU344
 1281 0016 0C22     		movs	r2, #12
 1282 0018 4261     		str	r2, [r0, #20]
 508:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1283              		.loc 1 508 3 is_stmt 1 view .LVU345
 508:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1284              		.loc 1 508 25 is_stmt 0 view .LVU346
 1285 001a 8361     		str	r3, [r0, #24]
 509:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1286              		.loc 1 509 3 is_stmt 1 view .LVU347
 509:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1287              		.loc 1 509 28 is_stmt 0 view .LVU348
 1288 001c C361     		str	r3, [r0, #28]
 510:Core/Src/main.c ****   {
 1289              		.loc 1 510 3 is_stmt 1 view .LVU349
 510:Core/Src/main.c ****   {
 1290              		.loc 1 510 7 is_stmt 0 view .LVU350
 1291 001e FFF7FEFF 		bl	HAL_UART_Init
 1292              	.LVL65:
 510:Core/Src/main.c ****   {
 1293              		.loc 1 510 6 view .LVU351
 1294 0022 00B9     		cbnz	r0, .L85
 518:Core/Src/main.c **** 
 1295              		.loc 1 518 1 view .LVU352
 1296 0024 08BD     		pop	{r3, pc}
 1297              	.L85:
 512:Core/Src/main.c ****   }
 1298              		.loc 1 512 5 is_stmt 1 view .LVU353
 1299 0026 FFF7FEFF 		bl	Error_Handler
 1300              	.LVL66:
 1301              	.L87:
 1302 002a 00BF     		.align	2
 1303              	.L86:
 1304 002c 00000000 		.word	.LANCHOR7
ARM GAS  /tmp/ccodJj5F.s 			page 60


 1305 0030 00440040 		.word	1073759232
 1306              		.cfi_endproc
 1307              	.LFE249:
 1309              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1310              		.align	1
 1311              		.syntax unified
 1312              		.thumb
 1313              		.thumb_func
 1314              		.fpu fpv4-sp-d16
 1316              	MX_I2C2_Init:
 1317              	.LFB248:
 459:Core/Src/main.c **** 
 1318              		.loc 1 459 1 view -0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 1322 0000 08B5     		push	{r3, lr}
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 3, -8
 1325              		.cfi_offset 14, -4
 468:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1326              		.loc 1 468 3 view .LVU355
 468:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1327              		.loc 1 468 18 is_stmt 0 view .LVU356
 1328 0002 0A48     		ldr	r0, .L92
 1329 0004 0A4B     		ldr	r3, .L92+4
 1330 0006 0360     		str	r3, [r0]
 469:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1331              		.loc 1 469 3 is_stmt 1 view .LVU357
 469:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1332              		.loc 1 469 25 is_stmt 0 view .LVU358
 1333 0008 0A4B     		ldr	r3, .L92+8
 1334 000a 4360     		str	r3, [r0, #4]
 470:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1335              		.loc 1 470 3 is_stmt 1 view .LVU359
 470:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1336              		.loc 1 470 24 is_stmt 0 view .LVU360
 1337 000c 0023     		movs	r3, #0
 1338 000e 8360     		str	r3, [r0, #8]
 471:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1339              		.loc 1 471 3 is_stmt 1 view .LVU361
 471:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1340              		.loc 1 471 26 is_stmt 0 view .LVU362
 1341 0010 C360     		str	r3, [r0, #12]
 472:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1342              		.loc 1 472 3 is_stmt 1 view .LVU363
 472:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1343              		.loc 1 472 29 is_stmt 0 view .LVU364
 1344 0012 4FF48042 		mov	r2, #16384
 1345 0016 0261     		str	r2, [r0, #16]
 473:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1346              		.loc 1 473 3 is_stmt 1 view .LVU365
 473:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1347              		.loc 1 473 30 is_stmt 0 view .LVU366
 1348 0018 4361     		str	r3, [r0, #20]
 474:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1349              		.loc 1 474 3 is_stmt 1 view .LVU367
ARM GAS  /tmp/ccodJj5F.s 			page 61


 474:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1350              		.loc 1 474 26 is_stmt 0 view .LVU368
 1351 001a 8361     		str	r3, [r0, #24]
 475:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1352              		.loc 1 475 3 is_stmt 1 view .LVU369
 475:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1353              		.loc 1 475 30 is_stmt 0 view .LVU370
 1354 001c C361     		str	r3, [r0, #28]
 476:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1355              		.loc 1 476 3 is_stmt 1 view .LVU371
 476:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1356              		.loc 1 476 28 is_stmt 0 view .LVU372
 1357 001e 0362     		str	r3, [r0, #32]
 477:Core/Src/main.c ****   {
 1358              		.loc 1 477 3 is_stmt 1 view .LVU373
 477:Core/Src/main.c ****   {
 1359              		.loc 1 477 7 is_stmt 0 view .LVU374
 1360 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1361              	.LVL67:
 477:Core/Src/main.c ****   {
 1362              		.loc 1 477 6 view .LVU375
 1363 0024 00B9     		cbnz	r0, .L91
 485:Core/Src/main.c **** 
 1364              		.loc 1 485 1 view .LVU376
 1365 0026 08BD     		pop	{r3, pc}
 1366              	.L91:
 479:Core/Src/main.c ****   }
 1367              		.loc 1 479 5 is_stmt 1 view .LVU377
 1368 0028 FFF7FEFF 		bl	Error_Handler
 1369              	.LVL68:
 1370              	.L93:
 1371              		.align	2
 1372              	.L92:
 1373 002c 00000000 		.word	.LANCHOR8
 1374 0030 00580040 		.word	1073764352
 1375 0034 A0860100 		.word	100000
 1376              		.cfi_endproc
 1377              	.LFE248:
 1379              		.section	.text.SystemClock_Config,"ax",%progbits
 1380              		.align	1
 1381              		.global	SystemClock_Config
 1382              		.syntax unified
 1383              		.thumb
 1384              		.thumb_func
 1385              		.fpu fpv4-sp-d16
 1387              	SystemClock_Config:
 1388              	.LFB245:
 298:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1389              		.loc 1 298 1 view -0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 80
 1392              		@ frame_needed = 0, uses_anonymous_args = 0
 1393 0000 00B5     		push	{lr}
 1394              		.cfi_def_cfa_offset 4
 1395              		.cfi_offset 14, -4
 1396 0002 95B0     		sub	sp, sp, #84
 1397              		.cfi_def_cfa_offset 88
ARM GAS  /tmp/ccodJj5F.s 			page 62


 299:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1398              		.loc 1 299 3 view .LVU379
 299:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1399              		.loc 1 299 22 is_stmt 0 view .LVU380
 1400 0004 3422     		movs	r2, #52
 1401 0006 0021     		movs	r1, #0
 1402 0008 07A8     		add	r0, sp, #28
 1403 000a FFF7FEFF 		bl	memset
 1404              	.LVL69:
 300:Core/Src/main.c **** 
 1405              		.loc 1 300 3 is_stmt 1 view .LVU381
 300:Core/Src/main.c **** 
 1406              		.loc 1 300 22 is_stmt 0 view .LVU382
 1407 000e 0023     		movs	r3, #0
 1408 0010 0293     		str	r3, [sp, #8]
 1409 0012 0393     		str	r3, [sp, #12]
 1410 0014 0493     		str	r3, [sp, #16]
 1411 0016 0593     		str	r3, [sp, #20]
 1412 0018 0693     		str	r3, [sp, #24]
 304:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1413              		.loc 1 304 3 is_stmt 1 view .LVU383
 1414              	.LBB11:
 304:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1415              		.loc 1 304 3 view .LVU384
 1416 001a 0093     		str	r3, [sp]
 304:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1417              		.loc 1 304 3 view .LVU385
 1418 001c 1F4A     		ldr	r2, .L100
 1419 001e 116C     		ldr	r1, [r2, #64]
 1420 0020 41F08051 		orr	r1, r1, #268435456
 1421 0024 1164     		str	r1, [r2, #64]
 304:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1422              		.loc 1 304 3 view .LVU386
 1423 0026 126C     		ldr	r2, [r2, #64]
 1424 0028 02F08052 		and	r2, r2, #268435456
 1425 002c 0092     		str	r2, [sp]
 304:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1426              		.loc 1 304 3 view .LVU387
 1427 002e 009A     		ldr	r2, [sp]
 1428              	.LBE11:
 304:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1429              		.loc 1 304 3 view .LVU388
 305:Core/Src/main.c **** 
 1430              		.loc 1 305 3 view .LVU389
 1431              	.LBB12:
 305:Core/Src/main.c **** 
 1432              		.loc 1 305 3 view .LVU390
 1433 0030 0193     		str	r3, [sp, #4]
 305:Core/Src/main.c **** 
 1434              		.loc 1 305 3 view .LVU391
 1435 0032 1B49     		ldr	r1, .L100+4
 1436 0034 0A68     		ldr	r2, [r1]
 1437 0036 22F44042 		bic	r2, r2, #49152
 1438 003a 42F48042 		orr	r2, r2, #16384
 1439 003e 0A60     		str	r2, [r1]
 305:Core/Src/main.c **** 
 1440              		.loc 1 305 3 view .LVU392
ARM GAS  /tmp/ccodJj5F.s 			page 63


 1441 0040 0A68     		ldr	r2, [r1]
 1442 0042 02F44042 		and	r2, r2, #49152
 1443 0046 0192     		str	r2, [sp, #4]
 305:Core/Src/main.c **** 
 1444              		.loc 1 305 3 view .LVU393
 1445 0048 019A     		ldr	r2, [sp, #4]
 1446              	.LBE12:
 305:Core/Src/main.c **** 
 1447              		.loc 1 305 3 view .LVU394
 310:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1448              		.loc 1 310 3 view .LVU395
 310:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1449              		.loc 1 310 36 is_stmt 0 view .LVU396
 1450 004a 0222     		movs	r2, #2
 1451 004c 0792     		str	r2, [sp, #28]
 311:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1452              		.loc 1 311 3 is_stmt 1 view .LVU397
 311:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1453              		.loc 1 311 30 is_stmt 0 view .LVU398
 1454 004e 0121     		movs	r1, #1
 1455 0050 0A91     		str	r1, [sp, #40]
 312:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1456              		.loc 1 312 3 is_stmt 1 view .LVU399
 312:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1457              		.loc 1 312 41 is_stmt 0 view .LVU400
 1458 0052 1021     		movs	r1, #16
 1459 0054 0B91     		str	r1, [sp, #44]
 313:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1460              		.loc 1 313 3 is_stmt 1 view .LVU401
 313:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1461              		.loc 1 313 34 is_stmt 0 view .LVU402
 1462 0056 0D92     		str	r2, [sp, #52]
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1463              		.loc 1 314 3 is_stmt 1 view .LVU403
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1464              		.loc 1 314 35 is_stmt 0 view .LVU404
 1465 0058 0E93     		str	r3, [sp, #56]
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1466              		.loc 1 315 3 is_stmt 1 view .LVU405
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1467              		.loc 1 315 30 is_stmt 0 view .LVU406
 1468 005a 0F91     		str	r1, [sp, #60]
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1469              		.loc 1 316 3 is_stmt 1 view .LVU407
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1470              		.loc 1 316 30 is_stmt 0 view .LVU408
 1471 005c 4FF4A873 		mov	r3, #336
 1472 0060 1093     		str	r3, [sp, #64]
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1473              		.loc 1 317 3 is_stmt 1 view .LVU409
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1474              		.loc 1 317 30 is_stmt 0 view .LVU410
 1475 0062 0423     		movs	r3, #4
 1476 0064 1193     		str	r3, [sp, #68]
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1477              		.loc 1 318 3 is_stmt 1 view .LVU411
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
ARM GAS  /tmp/ccodJj5F.s 			page 64


 1478              		.loc 1 318 30 is_stmt 0 view .LVU412
 1479 0066 1292     		str	r2, [sp, #72]
 319:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1480              		.loc 1 319 3 is_stmt 1 view .LVU413
 319:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1481              		.loc 1 319 30 is_stmt 0 view .LVU414
 1482 0068 1392     		str	r2, [sp, #76]
 320:Core/Src/main.c ****   {
 1483              		.loc 1 320 3 is_stmt 1 view .LVU415
 320:Core/Src/main.c ****   {
 1484              		.loc 1 320 7 is_stmt 0 view .LVU416
 1485 006a 07A8     		add	r0, sp, #28
 1486 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1487              	.LVL70:
 320:Core/Src/main.c ****   {
 1488              		.loc 1 320 6 view .LVU417
 1489 0070 80B9     		cbnz	r0, .L98
 327:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1490              		.loc 1 327 3 is_stmt 1 view .LVU418
 327:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1491              		.loc 1 327 31 is_stmt 0 view .LVU419
 1492 0072 0F23     		movs	r3, #15
 1493 0074 0293     		str	r3, [sp, #8]
 329:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1494              		.loc 1 329 3 is_stmt 1 view .LVU420
 329:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1495              		.loc 1 329 34 is_stmt 0 view .LVU421
 1496 0076 0221     		movs	r1, #2
 1497 0078 0391     		str	r1, [sp, #12]
 330:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1498              		.loc 1 330 3 is_stmt 1 view .LVU422
 330:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1499              		.loc 1 330 35 is_stmt 0 view .LVU423
 1500 007a 0023     		movs	r3, #0
 1501 007c 0493     		str	r3, [sp, #16]
 331:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1502              		.loc 1 331 3 is_stmt 1 view .LVU424
 331:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1503              		.loc 1 331 36 is_stmt 0 view .LVU425
 1504 007e 4FF48052 		mov	r2, #4096
 1505 0082 0592     		str	r2, [sp, #20]
 332:Core/Src/main.c **** 
 1506              		.loc 1 332 3 is_stmt 1 view .LVU426
 332:Core/Src/main.c **** 
 1507              		.loc 1 332 36 is_stmt 0 view .LVU427
 1508 0084 0693     		str	r3, [sp, #24]
 334:Core/Src/main.c ****   {
 1509              		.loc 1 334 3 is_stmt 1 view .LVU428
 334:Core/Src/main.c ****   {
 1510              		.loc 1 334 7 is_stmt 0 view .LVU429
 1511 0086 02A8     		add	r0, sp, #8
 1512 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1513              	.LVL71:
 334:Core/Src/main.c ****   {
 1514              		.loc 1 334 6 view .LVU430
 1515 008c 20B9     		cbnz	r0, .L99
 338:Core/Src/main.c **** 
ARM GAS  /tmp/ccodJj5F.s 			page 65


 1516              		.loc 1 338 1 view .LVU431
 1517 008e 15B0     		add	sp, sp, #84
 1518              		.cfi_remember_state
 1519              		.cfi_def_cfa_offset 4
 1520              		@ sp needed
 1521 0090 5DF804FB 		ldr	pc, [sp], #4
 1522              	.L98:
 1523              		.cfi_restore_state
 322:Core/Src/main.c ****   }
 1524              		.loc 1 322 5 is_stmt 1 view .LVU432
 1525 0094 FFF7FEFF 		bl	Error_Handler
 1526              	.LVL72:
 1527              	.L99:
 336:Core/Src/main.c ****   }
 1528              		.loc 1 336 5 view .LVU433
 1529 0098 FFF7FEFF 		bl	Error_Handler
 1530              	.LVL73:
 1531              	.L101:
 1532              		.align	2
 1533              	.L100:
 1534 009c 00380240 		.word	1073887232
 1535 00a0 00700040 		.word	1073770496
 1536              		.cfi_endproc
 1537              	.LFE245:
 1539              		.section	.text.main,"ax",%progbits
 1540              		.align	1
 1541              		.global	main
 1542              		.syntax unified
 1543              		.thumb
 1544              		.thumb_func
 1545              		.fpu fpv4-sp-d16
 1547              	main:
 1548              	.LFB244:
 177:Core/Src/main.c **** 
 1549              		.loc 1 177 1 view -0
 1550              		.cfi_startproc
 1551              		@ Volatile: function does not return.
 1552              		@ args = 0, pretend = 0, frame = 256
 1553              		@ frame_needed = 0, uses_anonymous_args = 0
 1554 0000 00B5     		push	{lr}
 1555              		.cfi_def_cfa_offset 4
 1556              		.cfi_offset 14, -4
 1557 0002 C1B0     		sub	sp, sp, #260
 1558              		.cfi_def_cfa_offset 264
 186:Core/Src/main.c **** 
 1559              		.loc 1 186 3 view .LVU435
 1560 0004 FFF7FEFF 		bl	HAL_Init
 1561              	.LVL74:
 193:Core/Src/main.c **** 
 1562              		.loc 1 193 3 view .LVU436
 1563 0008 FFF7FEFF 		bl	SystemClock_Config
 1564              	.LVL75:
 200:Core/Src/main.c ****   MX_DMA_Init();
 1565              		.loc 1 200 3 view .LVU437
 1566 000c FFF7FEFF 		bl	MX_GPIO_Init
 1567              	.LVL76:
 201:Core/Src/main.c ****   MX_ADC1_Init();
ARM GAS  /tmp/ccodJj5F.s 			page 66


 1568              		.loc 1 201 3 view .LVU438
 1569 0010 FFF7FEFF 		bl	MX_DMA_Init
 1570              	.LVL77:
 202:Core/Src/main.c ****   MX_I2C1_Init();
 1571              		.loc 1 202 3 view .LVU439
 1572 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1573              	.LVL78:
 203:Core/Src/main.c ****   MX_USART2_UART_Init();
 1574              		.loc 1 203 3 view .LVU440
 1575 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1576              	.LVL79:
 204:Core/Src/main.c ****   MX_I2C2_Init();
 1577              		.loc 1 204 3 view .LVU441
 1578 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1579              	.LVL80:
 205:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1580              		.loc 1 205 3 view .LVU442
 1581 0020 FFF7FEFF 		bl	MX_I2C2_Init
 1582              	.LVL81:
 212:Core/Src/main.c ****   EmergencyMutexHandle = osMutexCreate(osMutex(EmergencyMutex));
 1583              		.loc 1 212 3 view .LVU443
 1584 0024 0025     		movs	r5, #0
 1585 0026 3E95     		str	r5, [sp, #248]
 1586 0028 3F95     		str	r5, [sp, #252]
 213:Core/Src/main.c **** 
 1587              		.loc 1 213 3 view .LVU444
 213:Core/Src/main.c **** 
 1588              		.loc 1 213 26 is_stmt 0 view .LVU445
 1589 002a 3EA8     		add	r0, sp, #248
 1590 002c FFF7FEFF 		bl	osMutexCreate
 1591              	.LVL82:
 213:Core/Src/main.c **** 
 1592              		.loc 1 213 24 view .LVU446
 1593 0030 534B     		ldr	r3, .L105
 1594 0032 1860     		str	r0, [r3]
 229:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 1595              		.loc 1 229 3 is_stmt 1 view .LVU447
 1596 0034 534C     		ldr	r4, .L105+4
 1597 0036 3AAE     		add	r6, sp, #232
 1598 0038 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1599 003c 86E80F00 		stm	r6, {r0, r1, r2, r3}
 230:Core/Src/main.c **** 
 1600              		.loc 1 230 3 view .LVU448
 230:Core/Src/main.c **** 
 1601              		.loc 1 230 29 is_stmt 0 view .LVU449
 1602 0040 2946     		mov	r1, r5
 1603 0042 3046     		mov	r0, r6
 1604 0044 FFF7FEFF 		bl	osMessageCreate
 1605              	.LVL83:
 230:Core/Src/main.c **** 
 1606              		.loc 1 230 27 view .LVU450
 1607 0048 4F4B     		ldr	r3, .L105+8
 1608 004a 1860     		str	r0, [r3]
 233:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 1609              		.loc 1 233 3 is_stmt 1 view .LVU451
 1610 004c 0DF1D80C 		add	ip, sp, #216
 1611 0050 04F11006 		add	r6, r4, #16
ARM GAS  /tmp/ccodJj5F.s 			page 67


 1612 0054 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1613 0058 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 234:Core/Src/main.c **** 
 1614              		.loc 1 234 3 view .LVU452
 234:Core/Src/main.c **** 
 1615              		.loc 1 234 29 is_stmt 0 view .LVU453
 1616 005c 2946     		mov	r1, r5
 1617 005e 6046     		mov	r0, ip
 1618 0060 FFF7FEFF 		bl	osMessageCreate
 1619              	.LVL84:
 234:Core/Src/main.c **** 
 1620              		.loc 1 234 27 view .LVU454
 1621 0064 494B     		ldr	r3, .L105+12
 1622 0066 1860     		str	r0, [r3]
 237:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 1623              		.loc 1 237 3 is_stmt 1 view .LVU455
 1624 0068 0DF1C80C 		add	ip, sp, #200
 1625 006c 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1626 0070 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 238:Core/Src/main.c **** 
 1627              		.loc 1 238 3 view .LVU456
 238:Core/Src/main.c **** 
 1628              		.loc 1 238 25 is_stmt 0 view .LVU457
 1629 0074 2946     		mov	r1, r5
 1630 0076 6046     		mov	r0, ip
 1631 0078 FFF7FEFF 		bl	osMessageCreate
 1632              	.LVL85:
 238:Core/Src/main.c **** 
 1633              		.loc 1 238 23 view .LVU458
 1634 007c 444B     		ldr	r3, .L105+16
 1635 007e 1860     		str	r0, [r3]
 246:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1636              		.loc 1 246 3 is_stmt 1 view .LVU459
 1637 0080 0DF1AC0C 		add	ip, sp, #172
 1638 0084 04F1200E 		add	lr, r4, #32
 1639 0088 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1640 008c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1641 0090 9EE80700 		ldm	lr, {r0, r1, r2}
 1642 0094 8CE80700 		stm	ip, {r0, r1, r2}
 247:Core/Src/main.c **** 
 1643              		.loc 1 247 3 view .LVU460
 247:Core/Src/main.c **** 
 1644              		.loc 1 247 23 is_stmt 0 view .LVU461
 1645 0098 2946     		mov	r1, r5
 1646 009a 2BA8     		add	r0, sp, #172
 1647 009c FFF7FEFF 		bl	osThreadCreate
 1648              	.LVL86:
 247:Core/Src/main.c **** 
 1649              		.loc 1 247 21 view .LVU462
 1650 00a0 3C4B     		ldr	r3, .L105+20
 1651 00a2 1860     		str	r0, [r3]
 250:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 1652              		.loc 1 250 3 is_stmt 1 view .LVU463
 1653 00a4 0DF1900C 		add	ip, sp, #144
 1654 00a8 04F13C0E 		add	lr, r4, #60
 1655 00ac BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1656 00b0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccodJj5F.s 			page 68


 1657 00b4 9EE80700 		ldm	lr, {r0, r1, r2}
 1658 00b8 8CE80700 		stm	ip, {r0, r1, r2}
 251:Core/Src/main.c **** 
 1659              		.loc 1 251 3 view .LVU464
 251:Core/Src/main.c **** 
 1660              		.loc 1 251 24 is_stmt 0 view .LVU465
 1661 00bc 2946     		mov	r1, r5
 1662 00be 24A8     		add	r0, sp, #144
 1663 00c0 FFF7FEFF 		bl	osThreadCreate
 1664              	.LVL87:
 251:Core/Src/main.c **** 
 1665              		.loc 1 251 22 view .LVU466
 1666 00c4 344B     		ldr	r3, .L105+24
 1667 00c6 1860     		str	r0, [r3]
 254:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 1668              		.loc 1 254 3 is_stmt 1 view .LVU467
 1669 00c8 0DF1740C 		add	ip, sp, #116
 1670 00cc 04F1580E 		add	lr, r4, #88
 1671 00d0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1672 00d4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1673 00d8 9EE80700 		ldm	lr, {r0, r1, r2}
 1674 00dc 8CE80700 		stm	ip, {r0, r1, r2}
 255:Core/Src/main.c **** 
 1675              		.loc 1 255 3 view .LVU468
 255:Core/Src/main.c **** 
 1676              		.loc 1 255 25 is_stmt 0 view .LVU469
 1677 00e0 2946     		mov	r1, r5
 1678 00e2 1DA8     		add	r0, sp, #116
 1679 00e4 FFF7FEFF 		bl	osThreadCreate
 1680              	.LVL88:
 255:Core/Src/main.c **** 
 1681              		.loc 1 255 23 view .LVU470
 1682 00e8 2C4B     		ldr	r3, .L105+28
 1683 00ea 1860     		str	r0, [r3]
 258:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 1684              		.loc 1 258 3 is_stmt 1 view .LVU471
 1685 00ec 0DF1580C 		add	ip, sp, #88
 1686 00f0 04F1740E 		add	lr, r4, #116
 1687 00f4 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1688 00f8 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1689 00fc 9EE80700 		ldm	lr, {r0, r1, r2}
 1690 0100 8CE80700 		stm	ip, {r0, r1, r2}
 259:Core/Src/main.c **** 
 1691              		.loc 1 259 3 view .LVU472
 259:Core/Src/main.c **** 
 1692              		.loc 1 259 26 is_stmt 0 view .LVU473
 1693 0104 2946     		mov	r1, r5
 1694 0106 16A8     		add	r0, sp, #88
 1695 0108 FFF7FEFF 		bl	osThreadCreate
 1696              	.LVL89:
 259:Core/Src/main.c **** 
 1697              		.loc 1 259 24 view .LVU474
 1698 010c 244B     		ldr	r3, .L105+32
 1699 010e 1860     		str	r0, [r3]
 262:Core/Src/main.c ****   EmergencyStopTaHandle = osThreadCreate(osThread(EmergencyStopTa), NULL);
 1700              		.loc 1 262 3 is_stmt 1 view .LVU475
 1701 0110 0DF13C0C 		add	ip, sp, #60
ARM GAS  /tmp/ccodJj5F.s 			page 69


 1702 0114 04F1900E 		add	lr, r4, #144
 1703 0118 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1704 011c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1705 0120 9EE80700 		ldm	lr, {r0, r1, r2}
 1706 0124 8CE80700 		stm	ip, {r0, r1, r2}
 263:Core/Src/main.c **** 
 1707              		.loc 1 263 3 view .LVU476
 263:Core/Src/main.c **** 
 1708              		.loc 1 263 27 is_stmt 0 view .LVU477
 1709 0128 2946     		mov	r1, r5
 1710 012a 0FA8     		add	r0, sp, #60
 1711 012c FFF7FEFF 		bl	osThreadCreate
 1712              	.LVL90:
 263:Core/Src/main.c **** 
 1713              		.loc 1 263 25 view .LVU478
 1714 0130 1C4B     		ldr	r3, .L105+36
 1715 0132 1860     		str	r0, [r3]
 266:Core/Src/main.c ****   MotorControlTasHandle = osThreadCreate(osThread(MotorControlTas), NULL);
 1716              		.loc 1 266 3 is_stmt 1 view .LVU479
 1717 0134 0DF1200C 		add	ip, sp, #32
 1718 0138 04F1AC0E 		add	lr, r4, #172
 1719 013c BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1720 0140 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1721 0144 9EE80700 		ldm	lr, {r0, r1, r2}
 1722 0148 8CE80700 		stm	ip, {r0, r1, r2}
 267:Core/Src/main.c **** 
 1723              		.loc 1 267 3 view .LVU480
 267:Core/Src/main.c **** 
 1724              		.loc 1 267 27 is_stmt 0 view .LVU481
 1725 014c 2946     		mov	r1, r5
 1726 014e 08A8     		add	r0, sp, #32
 1727 0150 FFF7FEFF 		bl	osThreadCreate
 1728              	.LVL91:
 267:Core/Src/main.c **** 
 1729              		.loc 1 267 25 view .LVU482
 1730 0154 144B     		ldr	r3, .L105+40
 1731 0156 1860     		str	r0, [r3]
 270:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 1732              		.loc 1 270 3 is_stmt 1 view .LVU483
 1733 0158 0DF1040C 		add	ip, sp, #4
 1734 015c C834     		adds	r4, r4, #200
 1735 015e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1736 0160 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1737 0164 94E80700 		ldm	r4, {r0, r1, r2}
 1738 0168 8CE80700 		stm	ip, {r0, r1, r2}
 271:Core/Src/main.c **** 
 1739              		.loc 1 271 3 view .LVU484
 271:Core/Src/main.c **** 
 1740              		.loc 1 271 24 is_stmt 0 view .LVU485
 1741 016c 2946     		mov	r1, r5
 1742 016e 01A8     		add	r0, sp, #4
 1743 0170 FFF7FEFF 		bl	osThreadCreate
 1744              	.LVL92:
 271:Core/Src/main.c **** 
 1745              		.loc 1 271 22 view .LVU486
 1746 0174 0D4B     		ldr	r3, .L105+44
 1747 0176 1860     		str	r0, [r3]
ARM GAS  /tmp/ccodJj5F.s 			page 70


 278:Core/Src/main.c **** 
 1748              		.loc 1 278 3 is_stmt 1 view .LVU487
 1749 0178 FFF7FEFF 		bl	osKernelStart
 1750              	.LVL93:
 1751              	.L103:
 284:Core/Src/main.c ****   {
 1752              		.loc 1 284 3 discriminator 1 view .LVU488
 289:Core/Src/main.c ****   /* USER CODE END 3 */
 1753              		.loc 1 289 3 discriminator 1 view .LVU489
 284:Core/Src/main.c ****   {
 1754              		.loc 1 284 9 discriminator 1 view .LVU490
 1755 017c FEE7     		b	.L103
 1756              	.L106:
 1757 017e 00BF     		.align	2
 1758              	.L105:
 1759 0180 00000000 		.word	.LANCHOR9
 1760 0184 00000000 		.word	.LANCHOR10
 1761 0188 00000000 		.word	.LANCHOR2
 1762 018c 00000000 		.word	.LANCHOR11
 1763 0190 00000000 		.word	.LANCHOR12
 1764 0194 00000000 		.word	.LANCHOR13
 1765 0198 00000000 		.word	.LANCHOR14
 1766 019c 00000000 		.word	.LANCHOR15
 1767 01a0 00000000 		.word	.LANCHOR16
 1768 01a4 00000000 		.word	.LANCHOR17
 1769 01a8 00000000 		.word	.LANCHOR18
 1770 01ac 00000000 		.word	.LANCHOR19
 1771              		.cfi_endproc
 1772              	.LFE244:
 1774              		.global	EmergencyMutexHandle
 1775              		.global	LCDPrintQueueHandle
 1776              		.global	MotorControlQueueHandle
 1777              		.global	MiniBotInputQueueHandle
 1778              		.global	LCDPrintTaskHandle
 1779              		.global	MotorControlTasHandle
 1780              		.global	EmergencyStopTaHandle
 1781              		.global	ApplicationFSMHandle
 1782              		.global	MiniBotInputsHandle
 1783              		.global	BlinkLEDTaskHandle
 1784              		.global	defaultTaskHandle
 1785              		.global	huart2
 1786              		.global	hi2c2
 1787              		.global	hi2c1
 1788              		.global	hdma_adc1
 1789              		.global	hadc1
 1790              		.global	minibot_data
 1791              		.global	state
 1792              		.global	PotRawValue
 1793              		.global	Qdata
 1794              		.section	.rodata
 1795              		.align	2
 1796              		.set	.LANCHOR10,. + 0
 1797              	.LC0:
 1798 0000 10000000 		.word	16
 1799 0004 14000000 		.word	20
 1800 0008 00000000 		.word	0
 1801 000c 00000000 		.word	0
ARM GAS  /tmp/ccodJj5F.s 			page 71


 1802              	.LC1:
 1803 0010 10000000 		.word	16
 1804 0014 02000000 		.word	2
 1805 0018 00000000 		.word	0
 1806 001c 00000000 		.word	0
 1807              	.LC16:
 1808 0020 00000000 		.word	.LC2
 1809 0024 00000000 		.word	StartDefaultTask
 1810 0028 0000     		.short	0
 1811 002a 0000     		.space	2
 1812 002c 00000000 		.word	0
 1813 0030 80000000 		.word	128
 1814 0034 00000000 		.word	0
 1815 0038 00000000 		.word	0
 1816              	.LC17:
 1817 003c 0C000000 		.word	.LC4
 1818 0040 00000000 		.word	BlinkLEDTaskEntry
 1819 0044 FEFF     		.short	-2
 1820 0046 0000     		.space	2
 1821 0048 00000000 		.word	0
 1822 004c 80000000 		.word	128
 1823 0050 00000000 		.word	0
 1824 0054 00000000 		.word	0
 1825              	.LC18:
 1826 0058 1C000000 		.word	.LC6
 1827 005c 00000000 		.word	MiniBotInputsEntry
 1828 0060 0000     		.short	0
 1829 0062 0000     		.space	2
 1830 0064 00000000 		.word	0
 1831 0068 80000000 		.word	128
 1832 006c 00000000 		.word	0
 1833 0070 00000000 		.word	0
 1834              	.LC19:
 1835 0074 2C000000 		.word	.LC8
 1836 0078 00000000 		.word	ApplicationFSMEntry
 1837 007c 0000     		.short	0
 1838 007e 0000     		.space	2
 1839 0080 00000000 		.word	0
 1840 0084 80000000 		.word	128
 1841 0088 00000000 		.word	0
 1842 008c 00000000 		.word	0
 1843              	.LC20:
 1844 0090 3C000000 		.word	.LC10
 1845 0094 00000000 		.word	EmergencyStopTaskEntry
 1846 0098 0200     		.short	2
 1847 009a 0000     		.space	2
 1848 009c 00000000 		.word	0
 1849 00a0 80000000 		.word	128
 1850 00a4 00000000 		.word	0
 1851 00a8 00000000 		.word	0
 1852              	.LC21:
 1853 00ac 4C000000 		.word	.LC12
 1854 00b0 00000000 		.word	MotorControlTaskEntry
 1855 00b4 0000     		.short	0
 1856 00b6 0000     		.space	2
 1857 00b8 00000000 		.word	0
 1858 00bc 80000000 		.word	128
ARM GAS  /tmp/ccodJj5F.s 			page 72


 1859 00c0 00000000 		.word	0
 1860 00c4 00000000 		.word	0
 1861              	.LC22:
 1862 00c8 5C000000 		.word	.LC14
 1863 00cc 00000000 		.word	LCDPrintTaskEntry
 1864 00d0 0000     		.short	0
 1865 00d2 0000     		.space	2
 1866 00d4 00000000 		.word	0
 1867 00d8 80000000 		.word	128
 1868 00dc 00000000 		.word	0
 1869 00e0 00000000 		.word	0
 1870              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 1871              		.align	2
 1872              		.set	.LANCHOR16,. + 0
 1875              	ApplicationFSMHandle:
 1876 0000 00000000 		.space	4
 1877              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 1878              		.align	2
 1879              		.set	.LANCHOR14,. + 0
 1882              	BlinkLEDTaskHandle:
 1883 0000 00000000 		.space	4
 1884              		.section	.bss.EmergencyMutexHandle,"aw",%nobits
 1885              		.align	2
 1886              		.set	.LANCHOR9,. + 0
 1889              	EmergencyMutexHandle:
 1890 0000 00000000 		.space	4
 1891              		.section	.bss.EmergencyStopTaHandle,"aw",%nobits
 1892              		.align	2
 1893              		.set	.LANCHOR17,. + 0
 1896              	EmergencyStopTaHandle:
 1897 0000 00000000 		.space	4
 1898              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 1899              		.align	2
 1900              		.set	.LANCHOR12,. + 0
 1903              	LCDPrintQueueHandle:
 1904 0000 00000000 		.space	4
 1905              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 1906              		.align	2
 1907              		.set	.LANCHOR19,. + 0
 1910              	LCDPrintTaskHandle:
 1911 0000 00000000 		.space	4
 1912              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 1913              		.align	2
 1914              		.set	.LANCHOR2,. + 0
 1917              	MiniBotInputQueueHandle:
 1918 0000 00000000 		.space	4
 1919              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 1920              		.align	2
 1921              		.set	.LANCHOR15,. + 0
 1924              	MiniBotInputsHandle:
 1925 0000 00000000 		.space	4
 1926              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
 1927              		.align	2
 1928              		.set	.LANCHOR11,. + 0
 1931              	MotorControlQueueHandle:
 1932 0000 00000000 		.space	4
 1933              		.section	.bss.MotorControlTasHandle,"aw",%nobits
ARM GAS  /tmp/ccodJj5F.s 			page 73


 1934              		.align	2
 1935              		.set	.LANCHOR18,. + 0
 1938              	MotorControlTasHandle:
 1939 0000 00000000 		.space	4
 1940              		.section	.bss.PotRawValue,"aw",%nobits
 1941              		.align	2
 1942              		.set	.LANCHOR3,. + 0
 1945              	PotRawValue:
 1946 0000 00000000 		.space	16
 1946      00000000 
 1946      00000000 
 1946      00000000 
 1947              		.section	.bss.Qdata,"aw",%nobits
 1948              		.align	2
 1949              		.set	.LANCHOR5,. + 0
 1952              	Qdata:
 1953 0000 00000000 		.space	20
 1953      00000000 
 1953      00000000 
 1953      00000000 
 1953      00000000 
 1954              		.section	.bss.defaultTaskHandle,"aw",%nobits
 1955              		.align	2
 1956              		.set	.LANCHOR13,. + 0
 1959              	defaultTaskHandle:
 1960 0000 00000000 		.space	4
 1961              		.section	.bss.hadc1,"aw",%nobits
 1962              		.align	2
 1963              		.set	.LANCHOR4,. + 0
 1966              	hadc1:
 1967 0000 00000000 		.space	72
 1967      00000000 
 1967      00000000 
 1967      00000000 
 1967      00000000 
 1968              		.section	.bss.hdma_adc1,"aw",%nobits
 1969              		.align	2
 1972              	hdma_adc1:
 1973 0000 00000000 		.space	96
 1973      00000000 
 1973      00000000 
 1973      00000000 
 1973      00000000 
 1974              		.section	.bss.hi2c1,"aw",%nobits
 1975              		.align	2
 1976              		.set	.LANCHOR6,. + 0
 1979              	hi2c1:
 1980 0000 00000000 		.space	84
 1980      00000000 
 1980      00000000 
 1980      00000000 
 1980      00000000 
 1981              		.section	.bss.hi2c2,"aw",%nobits
 1982              		.align	2
 1983              		.set	.LANCHOR8,. + 0
 1986              	hi2c2:
 1987 0000 00000000 		.space	84
ARM GAS  /tmp/ccodJj5F.s 			page 74


 1987      00000000 
 1987      00000000 
 1987      00000000 
 1987      00000000 
 1988              		.section	.bss.huart2,"aw",%nobits
 1989              		.align	2
 1990              		.set	.LANCHOR7,. + 0
 1993              	huart2:
 1994 0000 00000000 		.space	72
 1994      00000000 
 1994      00000000 
 1994      00000000 
 1994      00000000 
 1995              		.section	.bss.minibot_data,"aw",%nobits
 1996              		.align	2
 1997              		.set	.LANCHOR1,. + 0
 2000              	minibot_data:
 2001 0000 00000000 		.space	20
 2001      00000000 
 2001      00000000 
 2001      00000000 
 2001      00000000 
 2002              		.section	.bss.state,"aw",%nobits
 2003              		.set	.LANCHOR0,. + 0
 2006              	state:
 2007 0000 00       		.space	1
 2008              		.text
 2009              	.Letext0:
 2010              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2011              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2012              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2013              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2014              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2015              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2016              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2017              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2018              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2019              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2020              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2021              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2022              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2023              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2024              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2025              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2026              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2027              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2028              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2029              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2030              		.file 23 "<built-in>"
ARM GAS  /tmp/ccodJj5F.s 			page 75


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccodJj5F.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccodJj5F.s:40     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccodJj5F.s:47     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccodJj5F.s:215    .text.MX_GPIO_Init:00000000000000bc $d
     /tmp/ccodJj5F.s:223    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccodJj5F.s:229    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccodJj5F.s:275    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccodJj5F.s:280    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccodJj5F.s:287    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccodJj5F.s:318    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccodJj5F.s:323    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccodJj5F.s:330    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccodJj5F.s:365    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccodJj5F.s:370    .text.EmergencyStopTaskEntry:0000000000000000 $t
     /tmp/ccodJj5F.s:377    .text.EmergencyStopTaskEntry:0000000000000000 EmergencyStopTaskEntry
     /tmp/ccodJj5F.s:403    .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/ccodJj5F.s:410    .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/ccodJj5F.s:436    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/ccodJj5F.s:443    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/ccodJj5F.s:469    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccodJj5F.s:476    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccodJj5F.s:609    .text.ApplicationFSMEntry:0000000000000098 $d
     /tmp/ccodJj5F.s:616    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccodJj5F.s:623    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccodJj5F.s:703    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccodJj5F.s:708    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccodJj5F.s:715    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccodJj5F.s:729    .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccodJj5F.s:736    .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccodJj5F.s:818    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccodJj5F.s:825    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccodJj5F.s:905    .text.MiniBotInputsEntry:0000000000000068 $d
     /tmp/ccodJj5F.s:914    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccodJj5F.s:921    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccodJj5F.s:954    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccodJj5F.s:959    .text.Error_Handler:0000000000000000 $t
     /tmp/ccodJj5F.s:966    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccodJj5F.s:998    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccodJj5F.s:1004   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccodJj5F.s:1167   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccodJj5F.s:1174   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccodJj5F.s:1180   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccodJj5F.s:1237   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccodJj5F.s:1244   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccodJj5F.s:1250   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccodJj5F.s:1304   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccodJj5F.s:1310   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccodJj5F.s:1316   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccodJj5F.s:1373   .text.MX_I2C2_Init:000000000000002c $d
     /tmp/ccodJj5F.s:1380   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccodJj5F.s:1387   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccodJj5F.s:1534   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccodJj5F.s:1540   .text.main:0000000000000000 $t
     /tmp/ccodJj5F.s:1547   .text.main:0000000000000000 main
     /tmp/ccodJj5F.s:1759   .text.main:0000000000000180 $d
ARM GAS  /tmp/ccodJj5F.s 			page 76


     /tmp/ccodJj5F.s:1889   .bss.EmergencyMutexHandle:0000000000000000 EmergencyMutexHandle
     /tmp/ccodJj5F.s:1903   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/ccodJj5F.s:1931   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/ccodJj5F.s:1917   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccodJj5F.s:1910   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/ccodJj5F.s:1938   .bss.MotorControlTasHandle:0000000000000000 MotorControlTasHandle
     /tmp/ccodJj5F.s:1896   .bss.EmergencyStopTaHandle:0000000000000000 EmergencyStopTaHandle
     /tmp/ccodJj5F.s:1875   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccodJj5F.s:1924   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccodJj5F.s:1882   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccodJj5F.s:1959   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccodJj5F.s:1993   .bss.huart2:0000000000000000 huart2
     /tmp/ccodJj5F.s:1986   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccodJj5F.s:1979   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccodJj5F.s:1972   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccodJj5F.s:1966   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccodJj5F.s:2000   .bss.minibot_data:0000000000000000 minibot_data
     /tmp/ccodJj5F.s:2006   .bss.state:0000000000000000 state
     /tmp/ccodJj5F.s:1945   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccodJj5F.s:1952   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccodJj5F.s:1795   .rodata:0000000000000000 $d
     /tmp/ccodJj5F.s:1871   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1878   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1885   .bss.EmergencyMutexHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1892   .bss.EmergencyStopTaHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1899   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1906   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1913   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1920   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1927   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1934   .bss.MotorControlTasHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1941   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccodJj5F.s:1948   .bss.Qdata:0000000000000000 $d
     /tmp/ccodJj5F.s:1955   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccodJj5F.s:1962   .bss.hadc1:0000000000000000 $d
     /tmp/ccodJj5F.s:1969   .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccodJj5F.s:1975   .bss.hi2c1:0000000000000000 $d
     /tmp/ccodJj5F.s:1982   .bss.hi2c2:0000000000000000 $d
     /tmp/ccodJj5F.s:1989   .bss.huart2:0000000000000000 $d
     /tmp/ccodJj5F.s:1996   .bss.minibot_data:0000000000000000 $d
     /tmp/ccodJj5F.s:2007   .bss.state:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
xQueueReceive
HAL_ADC_Start_DMA
HAL_GPIO_ReadPin
xQueueGenericSend
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
ARM GAS  /tmp/ccodJj5F.s 			page 77


memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
