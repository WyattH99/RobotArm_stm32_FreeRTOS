ARM GAS  /tmp/cc70gxEm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB250:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/cc70gxEm.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint16_t PotMin;
  40:Core/Src/main.c **** 	uint16_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  60:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  61:Core/Src/main.c **** 	uint32_t WristPotValue;
  62:Core/Src/main.c **** 	uint8_t  GripperValue;
  63:Core/Src/main.c **** } MiniBot_Qdata;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /*
  68:Core/Src/main.c ****  * MegaBot Structures
  69:Core/Src/main.c ****  */
  70:Core/Src/main.c **** typedef struct{
  71:Core/Src/main.c **** 	uint8_t  ServoNum;
  72:Core/Src/main.c **** 	uint16_t ServoMin;
  73:Core/Src/main.c **** 	uint16_t ServoMax;
  74:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  75:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** typedef struct{
  78:Core/Src/main.c **** 	uint8_t  ServoNum;
  79:Core/Src/main.c **** 	uint16_t ServoMin;
  80:Core/Src/main.c **** 	uint16_t ServoMax;
  81:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  82:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** typedef struct{
  85:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  86:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
  87:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  88:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
ARM GAS  /tmp/cc70gxEm.s 			page 3


  89:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
  90:Core/Src/main.c **** } MegaBot_Config_t;
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* USER CODE END PTD */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  95:Core/Src/main.c **** /* USER CODE BEGIN PD */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /* USER CODE END PD */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 100:Core/Src/main.c **** /* USER CODE BEGIN PM */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /* USER CODE END PM */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 105:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** UART_HandleTypeDef huart2;
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** /* Definitions for defaultTask */
 112:Core/Src/main.c **** osThreadId_t defaultTaskHandle;
 113:Core/Src/main.c **** const osThreadAttr_t defaultTask_attributes = {
 114:Core/Src/main.c ****   .name = "defaultTask",
 115:Core/Src/main.c ****   .stack_size = 128 * 4,
 116:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 117:Core/Src/main.c **** };
 118:Core/Src/main.c **** /* Definitions for BlinkLEDTask */
 119:Core/Src/main.c **** osThreadId_t BlinkLEDTaskHandle;
 120:Core/Src/main.c **** const osThreadAttr_t BlinkLEDTask_attributes = {
 121:Core/Src/main.c ****   .name = "BlinkLEDTask",
 122:Core/Src/main.c ****   .stack_size = 128 * 4,
 123:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityLow,
 124:Core/Src/main.c **** };
 125:Core/Src/main.c **** /* Definitions for MiniBotInputs */
 126:Core/Src/main.c **** osThreadId_t MiniBotInputsHandle;
 127:Core/Src/main.c **** const osThreadAttr_t MiniBotInputs_attributes = {
 128:Core/Src/main.c ****   .name = "MiniBotInputs",
 129:Core/Src/main.c ****   .stack_size = 128 * 4,
 130:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 131:Core/Src/main.c **** };
 132:Core/Src/main.c **** /* Definitions for ApplicationFSM */
 133:Core/Src/main.c **** osThreadId_t ApplicationFSMHandle;
 134:Core/Src/main.c **** const osThreadAttr_t ApplicationFSM_attributes = {
 135:Core/Src/main.c ****   .name = "ApplicationFSM",
 136:Core/Src/main.c ****   .stack_size = 128 * 4,
 137:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 138:Core/Src/main.c **** };
 139:Core/Src/main.c **** /* Definitions for MiniBotInputQueue */
 140:Core/Src/main.c **** osMessageQueueId_t MiniBotInputQueueHandle;
 141:Core/Src/main.c **** const osMessageQueueAttr_t MiniBotInputQueue_attributes = {
 142:Core/Src/main.c ****   .name = "MiniBotInputQueue"
 143:Core/Src/main.c **** };
 144:Core/Src/main.c **** /* USER CODE BEGIN PV */
 145:Core/Src/main.c **** 
ARM GAS  /tmp/cc70gxEm.s 			page 4


 146:Core/Src/main.c **** /* USER CODE END PV */
 147:Core/Src/main.c **** 
 148:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 149:Core/Src/main.c **** void SystemClock_Config(void);
 150:Core/Src/main.c **** static void MX_GPIO_Init(void);
 151:Core/Src/main.c **** static void MX_ADC1_Init(void);
 152:Core/Src/main.c **** static void MX_I2C1_Init(void);
 153:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 154:Core/Src/main.c **** void StartDefaultTask(void *argument);
 155:Core/Src/main.c **** void BlinkLEDTaskEntry(void *argument);
 156:Core/Src/main.c **** void MiniBotInputsEntry(void *argument);
 157:Core/Src/main.c **** void ApplicationFSMEntry(void *argument);
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** /* USER CODE END PFP */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 164:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 167:Core/Src/main.c **** 	// Configure Each of the joints
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 170:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 171:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 172:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 175:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 176:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 177:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 178:Core/Src/main.c **** 
 179:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 180:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 181:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 182:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 185:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 186:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 187:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 190:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot){
 194:Core/Src/main.c **** 
 195:Core/Src/main.c **** }
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** /* USER CODE END 0 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** /**
 200:Core/Src/main.c ****   * @brief  The application entry point.
 201:Core/Src/main.c ****   * @retval int
 202:Core/Src/main.c ****   */
ARM GAS  /tmp/cc70gxEm.s 			page 5


 203:Core/Src/main.c **** int main(void)
 204:Core/Src/main.c **** {
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE END 1 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 213:Core/Src/main.c ****   HAL_Init();
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE END Init */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* Configure the system clock */
 220:Core/Src/main.c ****   SystemClock_Config();
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* USER CODE END SysInit */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* Initialize all configured peripherals */
 227:Core/Src/main.c ****   MX_GPIO_Init();
 228:Core/Src/main.c ****   MX_ADC1_Init();
 229:Core/Src/main.c ****   MX_I2C1_Init();
 230:Core/Src/main.c ****   MX_USART2_UART_Init();
 231:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE END 2 */
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* Init scheduler */
 236:Core/Src/main.c ****   osKernelInitialize();
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 239:Core/Src/main.c ****   /* add mutexes, ... */
 240:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 243:Core/Src/main.c ****   /* add semaphores, ... */
 244:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 247:Core/Src/main.c ****   /* start timers, add new ones, ... */
 248:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* Create the queue(s) */
 251:Core/Src/main.c ****   /* creation of MiniBotInputQueue */
 252:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &MiniBotInputQueue_attributes)
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 255:Core/Src/main.c ****   /* add queues, ... */
 256:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* Create the thread(s) */
 259:Core/Src/main.c ****   /* creation of defaultTask */
ARM GAS  /tmp/cc70gxEm.s 			page 6


 260:Core/Src/main.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* creation of BlinkLEDTask */
 263:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadNew(BlinkLEDTaskEntry, NULL, &BlinkLEDTask_attributes);
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* creation of MiniBotInputs */
 266:Core/Src/main.c ****   MiniBotInputsHandle = osThreadNew(MiniBotInputsEntry, NULL, &MiniBotInputs_attributes);
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* creation of ApplicationFSM */
 269:Core/Src/main.c ****   ApplicationFSMHandle = osThreadNew(ApplicationFSMEntry, NULL, &ApplicationFSM_attributes);
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 272:Core/Src/main.c ****   /* add threads, ... */
 273:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 276:Core/Src/main.c ****   /* add events, ... */
 277:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* Start scheduler */
 280:Core/Src/main.c ****   osKernelStart();
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* Infinite loop */
 285:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 286:Core/Src/main.c ****   while (1)
 287:Core/Src/main.c ****   {
 288:Core/Src/main.c ****     /* USER CODE END WHILE */
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 291:Core/Src/main.c ****   }
 292:Core/Src/main.c ****   /* USER CODE END 3 */
 293:Core/Src/main.c **** }
 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** /**
 296:Core/Src/main.c ****   * @brief System Clock Configuration
 297:Core/Src/main.c ****   * @retval None
 298:Core/Src/main.c ****   */
 299:Core/Src/main.c **** void SystemClock_Config(void)
 300:Core/Src/main.c **** {
 301:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 302:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 305:Core/Src/main.c ****   */
 306:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 307:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 310:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 311:Core/Src/main.c ****   */
 312:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 313:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 314:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
ARM GAS  /tmp/cc70gxEm.s 			page 7


 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 322:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 323:Core/Src/main.c ****   {
 324:Core/Src/main.c ****     Error_Handler();
 325:Core/Src/main.c ****   }
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 328:Core/Src/main.c ****   */
 329:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 330:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 331:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 332:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 333:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 334:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****     Error_Handler();
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c **** }
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** /**
 343:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 344:Core/Src/main.c ****   * @param None
 345:Core/Src/main.c ****   * @retval None
 346:Core/Src/main.c ****   */
 347:Core/Src/main.c **** static void MX_ADC1_Init(void)
 348:Core/Src/main.c **** {
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 361:Core/Src/main.c ****   */
 362:Core/Src/main.c ****   hadc1.Instance = ADC1;
 363:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 364:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 365:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 366:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 367:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 368:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 369:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 370:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 371:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 372:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 373:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
ARM GAS  /tmp/cc70gxEm.s 			page 8


 374:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 375:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 376:Core/Src/main.c ****   {
 377:Core/Src/main.c ****     Error_Handler();
 378:Core/Src/main.c ****   }
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 381:Core/Src/main.c ****   */
 382:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 383:Core/Src/main.c ****   sConfig.Rank = 1;
 384:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 385:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 386:Core/Src/main.c ****   {
 387:Core/Src/main.c ****     Error_Handler();
 388:Core/Src/main.c ****   }
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 391:Core/Src/main.c ****   */
 392:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 393:Core/Src/main.c ****   sConfig.Rank = 2;
 394:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 395:Core/Src/main.c ****   {
 396:Core/Src/main.c ****     Error_Handler();
 397:Core/Src/main.c ****   }
 398:Core/Src/main.c **** 
 399:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 400:Core/Src/main.c ****   */
 401:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 402:Core/Src/main.c ****   sConfig.Rank = 3;
 403:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 404:Core/Src/main.c ****   {
 405:Core/Src/main.c ****     Error_Handler();
 406:Core/Src/main.c ****   }
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 409:Core/Src/main.c ****   */
 410:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 411:Core/Src/main.c ****   sConfig.Rank = 4;
 412:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 413:Core/Src/main.c ****   {
 414:Core/Src/main.c ****     Error_Handler();
 415:Core/Src/main.c ****   }
 416:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 419:Core/Src/main.c **** 
 420:Core/Src/main.c **** }
 421:Core/Src/main.c **** 
 422:Core/Src/main.c **** /**
 423:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 424:Core/Src/main.c ****   * @param None
 425:Core/Src/main.c ****   * @retval None
 426:Core/Src/main.c ****   */
 427:Core/Src/main.c **** static void MX_I2C1_Init(void)
 428:Core/Src/main.c **** {
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
ARM GAS  /tmp/cc70gxEm.s 			page 9


 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 437:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 438:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 439:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 440:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 441:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 442:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 443:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 444:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 445:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 446:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 447:Core/Src/main.c ****   {
 448:Core/Src/main.c ****     Error_Handler();
 449:Core/Src/main.c ****   }
 450:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 453:Core/Src/main.c **** 
 454:Core/Src/main.c **** }
 455:Core/Src/main.c **** 
 456:Core/Src/main.c **** /**
 457:Core/Src/main.c ****   * @brief USART2 Initialization Function
 458:Core/Src/main.c ****   * @param None
 459:Core/Src/main.c ****   * @retval None
 460:Core/Src/main.c ****   */
 461:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 462:Core/Src/main.c **** {
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 471:Core/Src/main.c ****   huart2.Instance = USART2;
 472:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 473:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 474:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 475:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 476:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 477:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 478:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 479:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 480:Core/Src/main.c ****   {
 481:Core/Src/main.c ****     Error_Handler();
 482:Core/Src/main.c ****   }
 483:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 486:Core/Src/main.c **** 
 487:Core/Src/main.c **** }
ARM GAS  /tmp/cc70gxEm.s 			page 10


 488:Core/Src/main.c **** 
 489:Core/Src/main.c **** /**
 490:Core/Src/main.c ****   * @brief GPIO Initialization Function
 491:Core/Src/main.c ****   * @param None
 492:Core/Src/main.c ****   * @retval None
 493:Core/Src/main.c ****   */
 494:Core/Src/main.c **** static void MX_GPIO_Init(void)
 495:Core/Src/main.c **** {
  28              		.loc 1 495 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 496:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 496 3 view .LVU1
  41              		.loc 1 496 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 497:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 498:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 499:Core/Src/main.c **** 
 500:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 501:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 501 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 501 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 501 3 view .LVU5
  53 0012 274B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 501 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 501 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 501 3 view .LVU8
 502:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 502 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 502 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 502 3 view .LVU11
ARM GAS  /tmp/cc70gxEm.s 			page 11


  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 502 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 502 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 502 3 view .LVU14
 503:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 503 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 503 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 503 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 503 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 503 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 503 3 view .LVU20
 504:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 504 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 504 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 504 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 504 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 504 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 504 3 view .LVU26
 505:Core/Src/main.c **** 
 506:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 507:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 507 3 view .LVU27
 114 0062 144D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 508:Core/Src/main.c **** 
 509:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
ARM GAS  /tmp/cc70gxEm.s 			page 12


 510:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 510 3 view .LVU28
 121              		.loc 1 510 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 511:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 511 3 is_stmt 1 view .LVU30
 125              		.loc 1 511 24 is_stmt 0 view .LVU31
 126 0074 4FF40413 		mov	r3, #2162688
 127 0078 0693     		str	r3, [sp, #24]
 512:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 512 3 is_stmt 1 view .LVU32
 129              		.loc 1 512 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 513:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 513 3 is_stmt 1 view .LVU34
 132 007c 05A9     		add	r1, sp, #20
 133 007e 0E48     		ldr	r0, .L3+8
 134 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL1:
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 516:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 136              		.loc 1 516 3 view .LVU35
 137              		.loc 1 516 23 is_stmt 0 view .LVU36
 138 0084 2023     		movs	r3, #32
 139 0086 0593     		str	r3, [sp, #20]
 517:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 140              		.loc 1 517 3 is_stmt 1 view .LVU37
 141              		.loc 1 517 24 is_stmt 0 view .LVU38
 142 0088 0126     		movs	r6, #1
 143 008a 0696     		str	r6, [sp, #24]
 518:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 144              		.loc 1 518 3 is_stmt 1 view .LVU39
 145              		.loc 1 518 24 is_stmt 0 view .LVU40
 146 008c 0794     		str	r4, [sp, #28]
 519:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 147              		.loc 1 519 3 is_stmt 1 view .LVU41
 148              		.loc 1 519 25 is_stmt 0 view .LVU42
 149 008e 0894     		str	r4, [sp, #32]
 520:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 150              		.loc 1 520 3 is_stmt 1 view .LVU43
 151 0090 05A9     		add	r1, sp, #20
 152 0092 2846     		mov	r0, r5
 153 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 154              	.LVL2:
 521:Core/Src/main.c **** 
 522:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 523:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 155              		.loc 1 523 3 view .LVU44
 156              		.loc 1 523 23 is_stmt 0 view .LVU45
 157 0098 4FF40073 		mov	r3, #512
 158 009c 0593     		str	r3, [sp, #20]
 524:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 159              		.loc 1 524 3 is_stmt 1 view .LVU46
 160              		.loc 1 524 24 is_stmt 0 view .LVU47
 161 009e 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/cc70gxEm.s 			page 13


 525:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 162              		.loc 1 525 3 is_stmt 1 view .LVU48
 163              		.loc 1 525 24 is_stmt 0 view .LVU49
 164 00a0 0796     		str	r6, [sp, #28]
 526:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 165              		.loc 1 526 3 is_stmt 1 view .LVU50
 166 00a2 05A9     		add	r1, sp, #20
 167 00a4 2846     		mov	r0, r5
 168 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 527:Core/Src/main.c **** 
 528:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 529:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 530:Core/Src/main.c **** }
 170              		.loc 1 530 1 is_stmt 0 view .LVU51
 171 00aa 0AB0     		add	sp, sp, #40
 172              		.cfi_def_cfa_offset 16
 173              		@ sp needed
 174 00ac 70BD     		pop	{r4, r5, r6, pc}
 175              	.L4:
 176 00ae 00BF     		.align	2
 177              	.L3:
 178 00b0 00380240 		.word	1073887232
 179 00b4 00000240 		.word	1073872896
 180 00b8 00080240 		.word	1073874944
 181              		.cfi_endproc
 182              	.LFE250:
 184              		.section	.text.StartDefaultTask,"ax",%progbits
 185              		.align	1
 186              		.global	StartDefaultTask
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu fpv4-sp-d16
 192              	StartDefaultTask:
 193              	.LFB251:
 531:Core/Src/main.c **** 
 532:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 533:Core/Src/main.c **** 
 534:Core/Src/main.c **** /* USER CODE END 4 */
 535:Core/Src/main.c **** 
 536:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 537:Core/Src/main.c **** /**
 538:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 539:Core/Src/main.c ****   * @param  argument: Not used
 540:Core/Src/main.c ****   * @retval None
 541:Core/Src/main.c ****   */
 542:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 543:Core/Src/main.c **** void StartDefaultTask(void *argument)
 544:Core/Src/main.c **** {
 194              		.loc 1 544 1 is_stmt 1 view -0
 195              		.cfi_startproc
 196              		@ Volatile: function does not return.
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              	.LVL4:
 200              		.loc 1 544 1 is_stmt 0 view .LVU53
ARM GAS  /tmp/cc70gxEm.s 			page 14


 201 0000 08B5     		push	{r3, lr}
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 3, -8
 204              		.cfi_offset 14, -4
 205              	.LVL5:
 206              	.L6:
 545:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 546:Core/Src/main.c ****   /* Infinite loop */
 547:Core/Src/main.c ****   for(;;)
 207              		.loc 1 547 3 is_stmt 1 discriminator 1 view .LVU54
 548:Core/Src/main.c ****   {
 549:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 208              		.loc 1 549 5 discriminator 1 view .LVU55
 209 0002 0022     		movs	r2, #0
 210 0004 2021     		movs	r1, #32
 211 0006 0448     		ldr	r0, .L8
 212 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 213              	.LVL6:
 550:Core/Src/main.c ****     osDelay(1000);
 214              		.loc 1 550 5 discriminator 1 view .LVU56
 215 000c 4FF47A70 		mov	r0, #1000
 216 0010 FFF7FEFF 		bl	osDelay
 217              	.LVL7:
 547:Core/Src/main.c ****   {
 218              		.loc 1 547 8 discriminator 1 view .LVU57
 219 0014 F5E7     		b	.L6
 220              	.L9:
 221 0016 00BF     		.align	2
 222              	.L8:
 223 0018 00000240 		.word	1073872896
 224              		.cfi_endproc
 225              	.LFE251:
 227              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 228              		.align	1
 229              		.global	BlinkLEDTaskEntry
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv4-sp-d16
 235              	BlinkLEDTaskEntry:
 236              	.LFB252:
 551:Core/Src/main.c ****   }
 552:Core/Src/main.c ****   /* USER CODE END 5 */
 553:Core/Src/main.c **** }
 554:Core/Src/main.c **** 
 555:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 556:Core/Src/main.c **** /**
 557:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 558:Core/Src/main.c **** * @param argument: Not used
 559:Core/Src/main.c **** * @retval None
 560:Core/Src/main.c **** */
 561:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 562:Core/Src/main.c **** void BlinkLEDTaskEntry(void *argument)
 563:Core/Src/main.c **** {
 237              		.loc 1 563 1 view -0
 238              		.cfi_startproc
 239              		@ Volatile: function does not return.
ARM GAS  /tmp/cc70gxEm.s 			page 15


 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              	.LVL8:
 243              		.loc 1 563 1 is_stmt 0 view .LVU59
 244 0000 08B5     		push	{r3, lr}
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 3, -8
 247              		.cfi_offset 14, -4
 248              	.LVL9:
 249              	.L11:
 564:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 565:Core/Src/main.c ****   /* Infinite loop */
 566:Core/Src/main.c ****   for(;;)
 250              		.loc 1 566 3 is_stmt 1 discriminator 1 view .LVU60
 567:Core/Src/main.c ****   {
 568:Core/Src/main.c ****     
 569:Core/Src/main.c ****     osDelay(500);
 251              		.loc 1 569 5 discriminator 1 view .LVU61
 252 0002 4FF4FA70 		mov	r0, #500
 253 0006 FFF7FEFF 		bl	osDelay
 254              	.LVL10:
 570:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 255              		.loc 1 570 5 discriminator 1 view .LVU62
 256 000a 0122     		movs	r2, #1
 257 000c 2021     		movs	r1, #32
 258 000e 0448     		ldr	r0, .L13
 259 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 260              	.LVL11:
 571:Core/Src/main.c ****     osDelay(500);
 261              		.loc 1 571 5 discriminator 1 view .LVU63
 262 0014 4FF4FA70 		mov	r0, #500
 263 0018 FFF7FEFF 		bl	osDelay
 264              	.LVL12:
 566:Core/Src/main.c ****   {
 265              		.loc 1 566 8 discriminator 1 view .LVU64
 266 001c F1E7     		b	.L11
 267              	.L14:
 268 001e 00BF     		.align	2
 269              	.L13:
 270 0020 00000240 		.word	1073872896
 271              		.cfi_endproc
 272              	.LFE252:
 274              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 275              		.align	1
 276              		.global	ApplicationFSMEntry
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	ApplicationFSMEntry:
 283              	.LFB254:
 572:Core/Src/main.c ****   }
 573:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 574:Core/Src/main.c **** }
 575:Core/Src/main.c **** 
 576:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 577:Core/Src/main.c **** /**
ARM GAS  /tmp/cc70gxEm.s 			page 16


 578:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 579:Core/Src/main.c **** * @param argument: Not used
 580:Core/Src/main.c **** * @retval None
 581:Core/Src/main.c **** */
 582:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 583:Core/Src/main.c **** void MiniBotInputsEntry(void *argument)
 584:Core/Src/main.c **** {
 585:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 588:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** 	/* Infinite loop */
 591:Core/Src/main.c **** 	for(;;)
 592:Core/Src/main.c **** 	{
 593:Core/Src/main.c **** 		HAL_ADC_Start(&hadc1);
 594:Core/Src/main.c **** 		HAL_ADC_PollForConversion(&hadc1, 1);
 595:Core/Src/main.c **** 
 596:Core/Src/main.c **** 		osDelay(1);
 597:Core/Src/main.c **** 	}
 598:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 599:Core/Src/main.c **** }
 600:Core/Src/main.c **** 
 601:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 602:Core/Src/main.c **** /**
 603:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 604:Core/Src/main.c **** * @param argument: Not used
 605:Core/Src/main.c **** * @retval None
 606:Core/Src/main.c **** */
 607:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 608:Core/Src/main.c **** void ApplicationFSMEntry(void *argument)
 609:Core/Src/main.c **** {
 284              		.loc 1 609 1 view -0
 285              		.cfi_startproc
 286              		@ Volatile: function does not return.
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              	.LVL13:
 290              		.loc 1 609 1 is_stmt 0 view .LVU66
 291 0000 08B5     		push	{r3, lr}
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 3, -8
 294              		.cfi_offset 14, -4
 295              	.LVL14:
 296              	.L16:
 610:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 611:Core/Src/main.c ****   /* Infinite loop */
 612:Core/Src/main.c ****   for(;;)
 297              		.loc 1 612 3 is_stmt 1 discriminator 1 view .LVU67
 613:Core/Src/main.c ****   {
 614:Core/Src/main.c ****     osDelay(1);
 298              		.loc 1 614 5 discriminator 1 view .LVU68
 299 0002 0120     		movs	r0, #1
 300 0004 FFF7FEFF 		bl	osDelay
 301              	.LVL15:
 612:Core/Src/main.c ****   {
 302              		.loc 1 612 8 discriminator 1 view .LVU69
ARM GAS  /tmp/cc70gxEm.s 			page 17


 303 0008 FBE7     		b	.L16
 304              		.cfi_endproc
 305              	.LFE254:
 307              		.section	.text.MiniBotInit,"ax",%progbits
 308              		.align	1
 309              		.global	MiniBotInit
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 313              		.fpu fpv4-sp-d16
 315              	MiniBotInit:
 316              	.LVL16:
 317              	.LFB243:
 166:Core/Src/main.c **** 	// Configure Each of the joints
 318              		.loc 1 166 44 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 166:Core/Src/main.c **** 	// Configure Each of the joints
 322              		.loc 1 166 44 is_stmt 0 view .LVU71
 323 0000 00B5     		push	{lr}
 324              		.cfi_def_cfa_offset 4
 325              		.cfi_offset 14, -4
 169:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 326              		.loc 1 169 4 is_stmt 1 view .LVU72
 169:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 327              		.loc 1 169 25 is_stmt 0 view .LVU73
 328 0002 0023     		movs	r3, #0
 329 0004 0370     		strb	r3, [r0]
 170:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 330              		.loc 1 170 4 is_stmt 1 view .LVU74
 170:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 331              		.loc 1 170 25 is_stmt 0 view .LVU75
 332 0006 4FF44872 		mov	r2, #800
 333 000a 4280     		strh	r2, [r0, #2]	@ movhi
 171:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 334              		.loc 1 171 4 is_stmt 1 view .LVU76
 171:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 335              		.loc 1 171 25 is_stmt 0 view .LVU77
 336 000c 40F64851 		movw	r1, #3400
 337 0010 8180     		strh	r1, [r0, #4]	@ movhi
 172:Core/Src/main.c **** 
 338              		.loc 1 172 4 is_stmt 1 view .LVU78
 172:Core/Src/main.c **** 
 339              		.loc 1 172 33 is_stmt 0 view .LVU79
 340 0012 8371     		strb	r3, [r0, #6]
 174:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 341              		.loc 1 174 4 is_stmt 1 view .LVU80
 174:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 342              		.loc 1 174 29 is_stmt 0 view .LVU81
 343 0014 4FF0010C 		mov	ip, #1
 344 0018 80F808C0 		strb	ip, [r0, #8]
 175:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 345              		.loc 1 175 4 is_stmt 1 view .LVU82
 175:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 346              		.loc 1 175 29 is_stmt 0 view .LVU83
 347 001c 4FF41672 		mov	r2, #600
ARM GAS  /tmp/cc70gxEm.s 			page 18


 348 0020 4281     		strh	r2, [r0, #10]	@ movhi
 176:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 349              		.loc 1 176 4 is_stmt 1 view .LVU84
 176:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 350              		.loc 1 176 29 is_stmt 0 view .LVU85
 351 0022 8181     		strh	r1, [r0, #12]	@ movhi
 177:Core/Src/main.c **** 
 352              		.loc 1 177 4 is_stmt 1 view .LVU86
 177:Core/Src/main.c **** 
 353              		.loc 1 177 37 is_stmt 0 view .LVU87
 354 0024 8373     		strb	r3, [r0, #14]
 179:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 355              		.loc 1 179 4 is_stmt 1 view .LVU88
 179:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 356              		.loc 1 179 26 is_stmt 0 view .LVU89
 357 0026 4FF0020E 		mov	lr, #2
 358 002a 80F810E0 		strb	lr, [r0, #16]
 180:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 359              		.loc 1 180 4 is_stmt 1 view .LVU90
 180:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 360              		.loc 1 180 26 is_stmt 0 view .LVU91
 361 002e 4282     		strh	r2, [r0, #18]	@ movhi
 181:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 362              		.loc 1 181 4 is_stmt 1 view .LVU92
 181:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 363              		.loc 1 181 26 is_stmt 0 view .LVU93
 364 0030 8182     		strh	r1, [r0, #20]	@ movhi
 182:Core/Src/main.c **** 
 365              		.loc 1 182 4 is_stmt 1 view .LVU94
 182:Core/Src/main.c **** 
 366              		.loc 1 182 34 is_stmt 0 view .LVU95
 367 0032 8375     		strb	r3, [r0, #22]
 184:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 368              		.loc 1 184 4 is_stmt 1 view .LVU96
 184:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 369              		.loc 1 184 26 is_stmt 0 view .LVU97
 370 0034 0323     		movs	r3, #3
 371 0036 0376     		strb	r3, [r0, #24]
 185:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 372              		.loc 1 185 4 is_stmt 1 view .LVU98
 185:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 373              		.loc 1 185 26 is_stmt 0 view .LVU99
 374 0038 4283     		strh	r2, [r0, #26]	@ movhi
 186:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 375              		.loc 1 186 4 is_stmt 1 view .LVU100
 186:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 376              		.loc 1 186 26 is_stmt 0 view .LVU101
 377 003a 4FF44863 		mov	r3, #3200
 378 003e 8383     		strh	r3, [r0, #28]	@ movhi
 187:Core/Src/main.c **** 
 379              		.loc 1 187 4 is_stmt 1 view .LVU102
 187:Core/Src/main.c **** 
 380              		.loc 1 187 34 is_stmt 0 view .LVU103
 381 0040 80F81EC0 		strb	ip, [r0, #30]
 189:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 382              		.loc 1 189 4 is_stmt 1 view .LVU104
 189:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
ARM GAS  /tmp/cc70gxEm.s 			page 19


 383              		.loc 1 189 27 is_stmt 0 view .LVU105
 384 0044 034B     		ldr	r3, .L20
 385 0046 0362     		str	r3, [r0, #32]
 190:Core/Src/main.c **** }
 386              		.loc 1 190 4 is_stmt 1 view .LVU106
 190:Core/Src/main.c **** }
 387              		.loc 1 190 30 is_stmt 0 view .LVU107
 388 0048 4FF40073 		mov	r3, #512
 389 004c 8384     		strh	r3, [r0, #36]	@ movhi
 191:Core/Src/main.c **** 
 390              		.loc 1 191 1 view .LVU108
 391 004e 5DF804FB 		ldr	pc, [sp], #4
 392              	.L21:
 393 0052 00BF     		.align	2
 394              	.L20:
 395 0054 00000240 		.word	1073872896
 396              		.cfi_endproc
 397              	.LFE243:
 399              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 400              		.align	1
 401              		.global	MiniBotInputsEntry
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 405              		.fpu fpv4-sp-d16
 407              	MiniBotInputsEntry:
 408              	.LVL17:
 409              	.LFB253:
 584:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 410              		.loc 1 584 1 is_stmt 1 view -0
 411              		.cfi_startproc
 412              		@ Volatile: function does not return.
 413              		@ args = 0, pretend = 0, frame = 40
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 584:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 415              		.loc 1 584 1 is_stmt 0 view .LVU110
 416 0000 00B5     		push	{lr}
 417              		.cfi_def_cfa_offset 4
 418              		.cfi_offset 14, -4
 419 0002 8BB0     		sub	sp, sp, #44
 420              		.cfi_def_cfa_offset 48
 587:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 421              		.loc 1 587 2 is_stmt 1 view .LVU111
 588:Core/Src/main.c **** 
 422              		.loc 1 588 2 view .LVU112
 423 0004 6846     		mov	r0, sp
 424              	.LVL18:
 588:Core/Src/main.c **** 
 425              		.loc 1 588 2 is_stmt 0 view .LVU113
 426 0006 FFF7FEFF 		bl	MiniBotInit
 427              	.LVL19:
 428              	.L23:
 591:Core/Src/main.c **** 	{
 429              		.loc 1 591 2 is_stmt 1 discriminator 1 view .LVU114
 593:Core/Src/main.c **** 		HAL_ADC_PollForConversion(&hadc1, 1);
 430              		.loc 1 593 3 discriminator 1 view .LVU115
 431 000a 064C     		ldr	r4, .L25
ARM GAS  /tmp/cc70gxEm.s 			page 20


 432 000c 2046     		mov	r0, r4
 433 000e FFF7FEFF 		bl	HAL_ADC_Start
 434              	.LVL20:
 594:Core/Src/main.c **** 
 435              		.loc 1 594 3 discriminator 1 view .LVU116
 436 0012 0121     		movs	r1, #1
 437 0014 2046     		mov	r0, r4
 438 0016 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 439              	.LVL21:
 596:Core/Src/main.c **** 	}
 440              		.loc 1 596 3 discriminator 1 view .LVU117
 441 001a 0120     		movs	r0, #1
 442 001c FFF7FEFF 		bl	osDelay
 443              	.LVL22:
 591:Core/Src/main.c **** 	{
 444              		.loc 1 591 7 discriminator 1 view .LVU118
 445 0020 F3E7     		b	.L23
 446              	.L26:
 447 0022 00BF     		.align	2
 448              	.L25:
 449 0024 00000000 		.word	.LANCHOR0
 450              		.cfi_endproc
 451              	.LFE253:
 453              		.section	.text.MegaBotInit,"ax",%progbits
 454              		.align	1
 455              		.global	MegaBotInit
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 459              		.fpu fpv4-sp-d16
 461              	MegaBotInit:
 462              	.LVL23:
 463              	.LFB244:
 193:Core/Src/main.c **** 
 464              		.loc 1 193 44 view -0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              		@ link register save eliminated.
 195:Core/Src/main.c **** 
 469              		.loc 1 195 1 view .LVU120
 470 0000 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE244:
 474              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 475              		.align	1
 476              		.global	HAL_TIM_PeriodElapsedCallback
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	HAL_TIM_PeriodElapsedCallback:
 483              	.LVL24:
 484              	.LFB255:
 615:Core/Src/main.c ****   }
 616:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 617:Core/Src/main.c **** }
ARM GAS  /tmp/cc70gxEm.s 			page 21


 618:Core/Src/main.c **** 
 619:Core/Src/main.c **** /**
 620:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 621:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 622:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 623:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 624:Core/Src/main.c ****   * @param  htim : TIM handle
 625:Core/Src/main.c ****   * @retval None
 626:Core/Src/main.c ****   */
 627:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 628:Core/Src/main.c **** {
 485              		.loc 1 628 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		.loc 1 628 1 is_stmt 0 view .LVU122
 490 0000 08B5     		push	{r3, lr}
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 3, -8
 493              		.cfi_offset 14, -4
 629:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 632:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 494              		.loc 1 632 3 is_stmt 1 view .LVU123
 495              		.loc 1 632 11 is_stmt 0 view .LVU124
 496 0002 0268     		ldr	r2, [r0]
 497              		.loc 1 632 6 view .LVU125
 498 0004 034B     		ldr	r3, .L32
 499 0006 9A42     		cmp	r2, r3
 500 0008 00D0     		beq	.L31
 501              	.LVL25:
 502              	.L28:
 633:Core/Src/main.c ****     HAL_IncTick();
 634:Core/Src/main.c ****   }
 635:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 636:Core/Src/main.c **** 
 637:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 638:Core/Src/main.c **** }
 503              		.loc 1 638 1 view .LVU126
 504 000a 08BD     		pop	{r3, pc}
 505              	.LVL26:
 506              	.L31:
 633:Core/Src/main.c ****     HAL_IncTick();
 507              		.loc 1 633 5 is_stmt 1 view .LVU127
 508 000c FFF7FEFF 		bl	HAL_IncTick
 509              	.LVL27:
 510              		.loc 1 638 1 is_stmt 0 view .LVU128
 511 0010 FBE7     		b	.L28
 512              	.L33:
 513 0012 00BF     		.align	2
 514              	.L32:
 515 0014 00100040 		.word	1073745920
 516              		.cfi_endproc
 517              	.LFE255:
 519              		.section	.text.Error_Handler,"ax",%progbits
 520              		.align	1
ARM GAS  /tmp/cc70gxEm.s 			page 22


 521              		.global	Error_Handler
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu fpv4-sp-d16
 527              	Error_Handler:
 528              	.LFB256:
 639:Core/Src/main.c **** 
 640:Core/Src/main.c **** /**
 641:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 642:Core/Src/main.c ****   * @retval None
 643:Core/Src/main.c ****   */
 644:Core/Src/main.c **** void Error_Handler(void)
 645:Core/Src/main.c **** {
 529              		.loc 1 645 1 is_stmt 1 view -0
 530              		.cfi_startproc
 531              		@ Volatile: function does not return.
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 646:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 647:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 648:Core/Src/main.c ****   __disable_irq();
 535              		.loc 1 648 3 view .LVU130
 536              	.LBB8:
 537              	.LBI8:
 538              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
ARM GAS  /tmp/cc70gxEm.s 			page 23


  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/cc70gxEm.s 			page 24


  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
ARM GAS  /tmp/cc70gxEm.s 			page 25


 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc70gxEm.s 			page 26


 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
ARM GAS  /tmp/cc70gxEm.s 			page 27


 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
ARM GAS  /tmp/cc70gxEm.s 			page 28


 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc70gxEm.s 			page 29


 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  /tmp/cc70gxEm.s 			page 30


 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
ARM GAS  /tmp/cc70gxEm.s 			page 31


 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc70gxEm.s 			page 32


 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc70gxEm.s 			page 33


 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cc70gxEm.s 			page 34


 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
ARM GAS  /tmp/cc70gxEm.s 			page 35


 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc70gxEm.s 			page 36


 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/cc70gxEm.s 			page 37


 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/cc70gxEm.s 			page 38


 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc70gxEm.s 			page 39


 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 539              		.loc 2 960 27 view .LVU131
 540              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 541              		.loc 2 962 3 view .LVU132
 542              		.syntax unified
 543              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 544 0000 72B6     		cpsid i
 545              	@ 0 "" 2
 546              		.thumb
 547              		.syntax unified
 548              	.L35:
 549              	.LBE9:
 550              	.LBE8:
 649:Core/Src/main.c ****   while (1)
 551              		.loc 1 649 3 discriminator 1 view .LVU133
 650:Core/Src/main.c ****   {
 651:Core/Src/main.c ****   }
 552              		.loc 1 651 3 discriminator 1 view .LVU134
 649:Core/Src/main.c ****   while (1)
 553              		.loc 1 649 9 discriminator 1 view .LVU135
 554 0002 FEE7     		b	.L35
 555              		.cfi_endproc
 556              	.LFE256:
 558              		.section	.text.MX_ADC1_Init,"ax",%progbits
 559              		.align	1
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
 565              	MX_ADC1_Init:
 566              	.LFB247:
 348:Core/Src/main.c **** 
 567              		.loc 1 348 1 view -0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 16
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571 0000 00B5     		push	{lr}
 572              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc70gxEm.s 			page 40


 573              		.cfi_offset 14, -4
 574 0002 85B0     		sub	sp, sp, #20
 575              		.cfi_def_cfa_offset 24
 354:Core/Src/main.c **** 
 576              		.loc 1 354 3 view .LVU137
 354:Core/Src/main.c **** 
 577              		.loc 1 354 26 is_stmt 0 view .LVU138
 578 0004 0023     		movs	r3, #0
 579 0006 0093     		str	r3, [sp]
 580 0008 0193     		str	r3, [sp, #4]
 581 000a 0293     		str	r3, [sp, #8]
 582 000c 0393     		str	r3, [sp, #12]
 362:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 583              		.loc 1 362 3 is_stmt 1 view .LVU139
 362:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 584              		.loc 1 362 18 is_stmt 0 view .LVU140
 585 000e 2648     		ldr	r0, .L48
 586 0010 264A     		ldr	r2, .L48+4
 587 0012 0260     		str	r2, [r0]
 363:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 588              		.loc 1 363 3 is_stmt 1 view .LVU141
 363:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 589              		.loc 1 363 29 is_stmt 0 view .LVU142
 590 0014 4FF48032 		mov	r2, #65536
 591 0018 4260     		str	r2, [r0, #4]
 364:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 592              		.loc 1 364 3 is_stmt 1 view .LVU143
 364:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 593              		.loc 1 364 25 is_stmt 0 view .LVU144
 594 001a 8360     		str	r3, [r0, #8]
 365:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 595              		.loc 1 365 3 is_stmt 1 view .LVU145
 365:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 596              		.loc 1 365 27 is_stmt 0 view .LVU146
 597 001c 0122     		movs	r2, #1
 598 001e 0261     		str	r2, [r0, #16]
 366:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 599              		.loc 1 366 3 is_stmt 1 view .LVU147
 366:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 600              		.loc 1 366 33 is_stmt 0 view .LVU148
 601 0020 0376     		strb	r3, [r0, #24]
 367:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 602              		.loc 1 367 3 is_stmt 1 view .LVU149
 367:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 603              		.loc 1 367 36 is_stmt 0 view .LVU150
 604 0022 80F82020 		strb	r2, [r0, #32]
 368:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 605              		.loc 1 368 3 is_stmt 1 view .LVU151
 368:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 606              		.loc 1 368 34 is_stmt 0 view .LVU152
 607 0026 4262     		str	r2, [r0, #36]
 369:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 608              		.loc 1 369 3 is_stmt 1 view .LVU153
 369:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 609              		.loc 1 369 35 is_stmt 0 view .LVU154
 610 0028 C362     		str	r3, [r0, #44]
 370:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
ARM GAS  /tmp/cc70gxEm.s 			page 41


 611              		.loc 1 370 3 is_stmt 1 view .LVU155
 370:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 612              		.loc 1 370 31 is_stmt 0 view .LVU156
 613 002a 02F17062 		add	r2, r2, #251658240
 614 002e 8262     		str	r2, [r0, #40]
 371:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 615              		.loc 1 371 3 is_stmt 1 view .LVU157
 371:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 616              		.loc 1 371 24 is_stmt 0 view .LVU158
 617 0030 C360     		str	r3, [r0, #12]
 372:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 618              		.loc 1 372 3 is_stmt 1 view .LVU159
 372:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 619              		.loc 1 372 30 is_stmt 0 view .LVU160
 620 0032 0422     		movs	r2, #4
 621 0034 C261     		str	r2, [r0, #28]
 373:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 622              		.loc 1 373 3 is_stmt 1 view .LVU161
 373:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 623              		.loc 1 373 36 is_stmt 0 view .LVU162
 624 0036 80F83030 		strb	r3, [r0, #48]
 374:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 625              		.loc 1 374 3 is_stmt 1 view .LVU163
 374:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 626              		.loc 1 374 27 is_stmt 0 view .LVU164
 627 003a 4361     		str	r3, [r0, #20]
 375:Core/Src/main.c ****   {
 628              		.loc 1 375 3 is_stmt 1 view .LVU165
 375:Core/Src/main.c ****   {
 629              		.loc 1 375 7 is_stmt 0 view .LVU166
 630 003c FFF7FEFF 		bl	HAL_ADC_Init
 631              	.LVL28:
 375:Core/Src/main.c ****   {
 632              		.loc 1 375 6 view .LVU167
 633 0040 38BB     		cbnz	r0, .L43
 382:Core/Src/main.c ****   sConfig.Rank = 1;
 634              		.loc 1 382 3 is_stmt 1 view .LVU168
 382:Core/Src/main.c ****   sConfig.Rank = 1;
 635              		.loc 1 382 19 is_stmt 0 view .LVU169
 636 0042 0023     		movs	r3, #0
 637 0044 0093     		str	r3, [sp]
 383:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 638              		.loc 1 383 3 is_stmt 1 view .LVU170
 383:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 639              		.loc 1 383 16 is_stmt 0 view .LVU171
 640 0046 0122     		movs	r2, #1
 641 0048 0192     		str	r2, [sp, #4]
 384:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 642              		.loc 1 384 3 is_stmt 1 view .LVU172
 384:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 643              		.loc 1 384 24 is_stmt 0 view .LVU173
 644 004a 0293     		str	r3, [sp, #8]
 385:Core/Src/main.c ****   {
 645              		.loc 1 385 3 is_stmt 1 view .LVU174
 385:Core/Src/main.c ****   {
 646              		.loc 1 385 7 is_stmt 0 view .LVU175
 647 004c 6946     		mov	r1, sp
ARM GAS  /tmp/cc70gxEm.s 			page 42


 648 004e 1648     		ldr	r0, .L48
 649 0050 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 650              	.LVL29:
 385:Core/Src/main.c ****   {
 651              		.loc 1 385 6 view .LVU176
 652 0054 F8B9     		cbnz	r0, .L44
 392:Core/Src/main.c ****   sConfig.Rank = 2;
 653              		.loc 1 392 3 is_stmt 1 view .LVU177
 392:Core/Src/main.c ****   sConfig.Rank = 2;
 654              		.loc 1 392 19 is_stmt 0 view .LVU178
 655 0056 0123     		movs	r3, #1
 656 0058 0093     		str	r3, [sp]
 393:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 657              		.loc 1 393 3 is_stmt 1 view .LVU179
 393:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 658              		.loc 1 393 16 is_stmt 0 view .LVU180
 659 005a 0223     		movs	r3, #2
 660 005c 0193     		str	r3, [sp, #4]
 394:Core/Src/main.c ****   {
 661              		.loc 1 394 3 is_stmt 1 view .LVU181
 394:Core/Src/main.c ****   {
 662              		.loc 1 394 7 is_stmt 0 view .LVU182
 663 005e 6946     		mov	r1, sp
 664 0060 1148     		ldr	r0, .L48
 665 0062 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 666              	.LVL30:
 394:Core/Src/main.c ****   {
 667              		.loc 1 394 6 view .LVU183
 668 0066 C0B9     		cbnz	r0, .L45
 401:Core/Src/main.c ****   sConfig.Rank = 3;
 669              		.loc 1 401 3 is_stmt 1 view .LVU184
 401:Core/Src/main.c ****   sConfig.Rank = 3;
 670              		.loc 1 401 19 is_stmt 0 view .LVU185
 671 0068 0423     		movs	r3, #4
 672 006a 0093     		str	r3, [sp]
 402:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 673              		.loc 1 402 3 is_stmt 1 view .LVU186
 402:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 674              		.loc 1 402 16 is_stmt 0 view .LVU187
 675 006c 0323     		movs	r3, #3
 676 006e 0193     		str	r3, [sp, #4]
 403:Core/Src/main.c ****   {
 677              		.loc 1 403 3 is_stmt 1 view .LVU188
 403:Core/Src/main.c ****   {
 678              		.loc 1 403 7 is_stmt 0 view .LVU189
 679 0070 6946     		mov	r1, sp
 680 0072 0D48     		ldr	r0, .L48
 681 0074 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 682              	.LVL31:
 403:Core/Src/main.c ****   {
 683              		.loc 1 403 6 view .LVU190
 684 0078 88B9     		cbnz	r0, .L46
 410:Core/Src/main.c ****   sConfig.Rank = 4;
 685              		.loc 1 410 3 is_stmt 1 view .LVU191
 410:Core/Src/main.c ****   sConfig.Rank = 4;
 686              		.loc 1 410 19 is_stmt 0 view .LVU192
 687 007a 0823     		movs	r3, #8
ARM GAS  /tmp/cc70gxEm.s 			page 43


 688 007c 0093     		str	r3, [sp]
 411:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 689              		.loc 1 411 3 is_stmt 1 view .LVU193
 411:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 690              		.loc 1 411 16 is_stmt 0 view .LVU194
 691 007e 0423     		movs	r3, #4
 692 0080 0193     		str	r3, [sp, #4]
 412:Core/Src/main.c ****   {
 693              		.loc 1 412 3 is_stmt 1 view .LVU195
 412:Core/Src/main.c ****   {
 694              		.loc 1 412 7 is_stmt 0 view .LVU196
 695 0082 6946     		mov	r1, sp
 696 0084 0848     		ldr	r0, .L48
 697 0086 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 698              	.LVL32:
 412:Core/Src/main.c ****   {
 699              		.loc 1 412 6 view .LVU197
 700 008a 50B9     		cbnz	r0, .L47
 420:Core/Src/main.c **** 
 701              		.loc 1 420 1 view .LVU198
 702 008c 05B0     		add	sp, sp, #20
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 4
 705              		@ sp needed
 706 008e 5DF804FB 		ldr	pc, [sp], #4
 707              	.L43:
 708              		.cfi_restore_state
 377:Core/Src/main.c ****   }
 709              		.loc 1 377 5 is_stmt 1 view .LVU199
 710 0092 FFF7FEFF 		bl	Error_Handler
 711              	.LVL33:
 712              	.L44:
 387:Core/Src/main.c ****   }
 713              		.loc 1 387 5 view .LVU200
 714 0096 FFF7FEFF 		bl	Error_Handler
 715              	.LVL34:
 716              	.L45:
 396:Core/Src/main.c ****   }
 717              		.loc 1 396 5 view .LVU201
 718 009a FFF7FEFF 		bl	Error_Handler
 719              	.LVL35:
 720              	.L46:
 405:Core/Src/main.c ****   }
 721              		.loc 1 405 5 view .LVU202
 722 009e FFF7FEFF 		bl	Error_Handler
 723              	.LVL36:
 724              	.L47:
 414:Core/Src/main.c ****   }
 725              		.loc 1 414 5 view .LVU203
 726 00a2 FFF7FEFF 		bl	Error_Handler
 727              	.LVL37:
 728              	.L49:
 729 00a6 00BF     		.align	2
 730              	.L48:
 731 00a8 00000000 		.word	.LANCHOR0
 732 00ac 00200140 		.word	1073815552
 733              		.cfi_endproc
ARM GAS  /tmp/cc70gxEm.s 			page 44


 734              	.LFE247:
 736              		.section	.text.MX_I2C1_Init,"ax",%progbits
 737              		.align	1
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	MX_I2C1_Init:
 744              	.LFB248:
 428:Core/Src/main.c **** 
 745              		.loc 1 428 1 view -0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749 0000 08B5     		push	{r3, lr}
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 3, -8
 752              		.cfi_offset 14, -4
 437:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 753              		.loc 1 437 3 view .LVU205
 437:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 754              		.loc 1 437 18 is_stmt 0 view .LVU206
 755 0002 0A48     		ldr	r0, .L54
 756 0004 0A4B     		ldr	r3, .L54+4
 757 0006 0360     		str	r3, [r0]
 438:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 758              		.loc 1 438 3 is_stmt 1 view .LVU207
 438:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 759              		.loc 1 438 25 is_stmt 0 view .LVU208
 760 0008 0A4B     		ldr	r3, .L54+8
 761 000a 4360     		str	r3, [r0, #4]
 439:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 762              		.loc 1 439 3 is_stmt 1 view .LVU209
 439:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 763              		.loc 1 439 24 is_stmt 0 view .LVU210
 764 000c 0023     		movs	r3, #0
 765 000e 8360     		str	r3, [r0, #8]
 440:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 766              		.loc 1 440 3 is_stmt 1 view .LVU211
 440:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 767              		.loc 1 440 26 is_stmt 0 view .LVU212
 768 0010 C360     		str	r3, [r0, #12]
 441:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 769              		.loc 1 441 3 is_stmt 1 view .LVU213
 441:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 770              		.loc 1 441 29 is_stmt 0 view .LVU214
 771 0012 4FF48042 		mov	r2, #16384
 772 0016 0261     		str	r2, [r0, #16]
 442:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 773              		.loc 1 442 3 is_stmt 1 view .LVU215
 442:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 774              		.loc 1 442 30 is_stmt 0 view .LVU216
 775 0018 4361     		str	r3, [r0, #20]
 443:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 776              		.loc 1 443 3 is_stmt 1 view .LVU217
 443:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 777              		.loc 1 443 26 is_stmt 0 view .LVU218
ARM GAS  /tmp/cc70gxEm.s 			page 45


 778 001a 8361     		str	r3, [r0, #24]
 444:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 779              		.loc 1 444 3 is_stmt 1 view .LVU219
 444:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 780              		.loc 1 444 30 is_stmt 0 view .LVU220
 781 001c C361     		str	r3, [r0, #28]
 445:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 782              		.loc 1 445 3 is_stmt 1 view .LVU221
 445:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 783              		.loc 1 445 28 is_stmt 0 view .LVU222
 784 001e 0362     		str	r3, [r0, #32]
 446:Core/Src/main.c ****   {
 785              		.loc 1 446 3 is_stmt 1 view .LVU223
 446:Core/Src/main.c ****   {
 786              		.loc 1 446 7 is_stmt 0 view .LVU224
 787 0020 FFF7FEFF 		bl	HAL_I2C_Init
 788              	.LVL38:
 446:Core/Src/main.c ****   {
 789              		.loc 1 446 6 view .LVU225
 790 0024 00B9     		cbnz	r0, .L53
 454:Core/Src/main.c **** 
 791              		.loc 1 454 1 view .LVU226
 792 0026 08BD     		pop	{r3, pc}
 793              	.L53:
 448:Core/Src/main.c ****   }
 794              		.loc 1 448 5 is_stmt 1 view .LVU227
 795 0028 FFF7FEFF 		bl	Error_Handler
 796              	.LVL39:
 797              	.L55:
 798              		.align	2
 799              	.L54:
 800 002c 00000000 		.word	.LANCHOR1
 801 0030 00540040 		.word	1073763328
 802 0034 A0860100 		.word	100000
 803              		.cfi_endproc
 804              	.LFE248:
 806              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 807              		.align	1
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu fpv4-sp-d16
 813              	MX_USART2_UART_Init:
 814              	.LFB249:
 462:Core/Src/main.c **** 
 815              		.loc 1 462 1 view -0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819 0000 08B5     		push	{r3, lr}
 820              		.cfi_def_cfa_offset 8
 821              		.cfi_offset 3, -8
 822              		.cfi_offset 14, -4
 471:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 823              		.loc 1 471 3 view .LVU229
 471:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 824              		.loc 1 471 19 is_stmt 0 view .LVU230
ARM GAS  /tmp/cc70gxEm.s 			page 46


 825 0002 0A48     		ldr	r0, .L60
 826 0004 0A4B     		ldr	r3, .L60+4
 827 0006 0360     		str	r3, [r0]
 472:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 828              		.loc 1 472 3 is_stmt 1 view .LVU231
 472:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 829              		.loc 1 472 24 is_stmt 0 view .LVU232
 830 0008 4FF4E133 		mov	r3, #115200
 831 000c 4360     		str	r3, [r0, #4]
 473:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 832              		.loc 1 473 3 is_stmt 1 view .LVU233
 473:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 833              		.loc 1 473 26 is_stmt 0 view .LVU234
 834 000e 0023     		movs	r3, #0
 835 0010 8360     		str	r3, [r0, #8]
 474:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 836              		.loc 1 474 3 is_stmt 1 view .LVU235
 474:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 837              		.loc 1 474 24 is_stmt 0 view .LVU236
 838 0012 C360     		str	r3, [r0, #12]
 475:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 839              		.loc 1 475 3 is_stmt 1 view .LVU237
 475:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 840              		.loc 1 475 22 is_stmt 0 view .LVU238
 841 0014 0361     		str	r3, [r0, #16]
 476:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 842              		.loc 1 476 3 is_stmt 1 view .LVU239
 476:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 843              		.loc 1 476 20 is_stmt 0 view .LVU240
 844 0016 0C22     		movs	r2, #12
 845 0018 4261     		str	r2, [r0, #20]
 477:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 846              		.loc 1 477 3 is_stmt 1 view .LVU241
 477:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 847              		.loc 1 477 25 is_stmt 0 view .LVU242
 848 001a 8361     		str	r3, [r0, #24]
 478:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 849              		.loc 1 478 3 is_stmt 1 view .LVU243
 478:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 850              		.loc 1 478 28 is_stmt 0 view .LVU244
 851 001c C361     		str	r3, [r0, #28]
 479:Core/Src/main.c ****   {
 852              		.loc 1 479 3 is_stmt 1 view .LVU245
 479:Core/Src/main.c ****   {
 853              		.loc 1 479 7 is_stmt 0 view .LVU246
 854 001e FFF7FEFF 		bl	HAL_UART_Init
 855              	.LVL40:
 479:Core/Src/main.c ****   {
 856              		.loc 1 479 6 view .LVU247
 857 0022 00B9     		cbnz	r0, .L59
 487:Core/Src/main.c **** 
 858              		.loc 1 487 1 view .LVU248
 859 0024 08BD     		pop	{r3, pc}
 860              	.L59:
 481:Core/Src/main.c ****   }
 861              		.loc 1 481 5 is_stmt 1 view .LVU249
 862 0026 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cc70gxEm.s 			page 47


 863              	.LVL41:
 864              	.L61:
 865 002a 00BF     		.align	2
 866              	.L60:
 867 002c 00000000 		.word	.LANCHOR2
 868 0030 00440040 		.word	1073759232
 869              		.cfi_endproc
 870              	.LFE249:
 872              		.section	.text.SystemClock_Config,"ax",%progbits
 873              		.align	1
 874              		.global	SystemClock_Config
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 878              		.fpu fpv4-sp-d16
 880              	SystemClock_Config:
 881              	.LFB246:
 300:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 882              		.loc 1 300 1 view -0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 80
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 886 0000 00B5     		push	{lr}
 887              		.cfi_def_cfa_offset 4
 888              		.cfi_offset 14, -4
 889 0002 95B0     		sub	sp, sp, #84
 890              		.cfi_def_cfa_offset 88
 301:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 891              		.loc 1 301 3 view .LVU251
 301:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 892              		.loc 1 301 22 is_stmt 0 view .LVU252
 893 0004 3422     		movs	r2, #52
 894 0006 0021     		movs	r1, #0
 895 0008 07A8     		add	r0, sp, #28
 896 000a FFF7FEFF 		bl	memset
 897              	.LVL42:
 302:Core/Src/main.c **** 
 898              		.loc 1 302 3 is_stmt 1 view .LVU253
 302:Core/Src/main.c **** 
 899              		.loc 1 302 22 is_stmt 0 view .LVU254
 900 000e 0023     		movs	r3, #0
 901 0010 0293     		str	r3, [sp, #8]
 902 0012 0393     		str	r3, [sp, #12]
 903 0014 0493     		str	r3, [sp, #16]
 904 0016 0593     		str	r3, [sp, #20]
 905 0018 0693     		str	r3, [sp, #24]
 306:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 906              		.loc 1 306 3 is_stmt 1 view .LVU255
 907              	.LBB10:
 306:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 908              		.loc 1 306 3 view .LVU256
 909 001a 0093     		str	r3, [sp]
 306:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 910              		.loc 1 306 3 view .LVU257
 911 001c 1F4A     		ldr	r2, .L68
 912 001e 116C     		ldr	r1, [r2, #64]
 913 0020 41F08051 		orr	r1, r1, #268435456
ARM GAS  /tmp/cc70gxEm.s 			page 48


 914 0024 1164     		str	r1, [r2, #64]
 306:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 915              		.loc 1 306 3 view .LVU258
 916 0026 126C     		ldr	r2, [r2, #64]
 917 0028 02F08052 		and	r2, r2, #268435456
 918 002c 0092     		str	r2, [sp]
 306:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 919              		.loc 1 306 3 view .LVU259
 920 002e 009A     		ldr	r2, [sp]
 921              	.LBE10:
 306:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 922              		.loc 1 306 3 view .LVU260
 307:Core/Src/main.c **** 
 923              		.loc 1 307 3 view .LVU261
 924              	.LBB11:
 307:Core/Src/main.c **** 
 925              		.loc 1 307 3 view .LVU262
 926 0030 0193     		str	r3, [sp, #4]
 307:Core/Src/main.c **** 
 927              		.loc 1 307 3 view .LVU263
 928 0032 1B49     		ldr	r1, .L68+4
 929 0034 0A68     		ldr	r2, [r1]
 930 0036 22F44042 		bic	r2, r2, #49152
 931 003a 42F48042 		orr	r2, r2, #16384
 932 003e 0A60     		str	r2, [r1]
 307:Core/Src/main.c **** 
 933              		.loc 1 307 3 view .LVU264
 934 0040 0A68     		ldr	r2, [r1]
 935 0042 02F44042 		and	r2, r2, #49152
 936 0046 0192     		str	r2, [sp, #4]
 307:Core/Src/main.c **** 
 937              		.loc 1 307 3 view .LVU265
 938 0048 019A     		ldr	r2, [sp, #4]
 939              	.LBE11:
 307:Core/Src/main.c **** 
 940              		.loc 1 307 3 view .LVU266
 312:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 941              		.loc 1 312 3 view .LVU267
 312:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 942              		.loc 1 312 36 is_stmt 0 view .LVU268
 943 004a 0222     		movs	r2, #2
 944 004c 0792     		str	r2, [sp, #28]
 313:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 945              		.loc 1 313 3 is_stmt 1 view .LVU269
 313:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 946              		.loc 1 313 30 is_stmt 0 view .LVU270
 947 004e 0121     		movs	r1, #1
 948 0050 0A91     		str	r1, [sp, #40]
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 949              		.loc 1 314 3 is_stmt 1 view .LVU271
 314:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 950              		.loc 1 314 41 is_stmt 0 view .LVU272
 951 0052 1021     		movs	r1, #16
 952 0054 0B91     		str	r1, [sp, #44]
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 953              		.loc 1 315 3 is_stmt 1 view .LVU273
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
ARM GAS  /tmp/cc70gxEm.s 			page 49


 954              		.loc 1 315 34 is_stmt 0 view .LVU274
 955 0056 0D92     		str	r2, [sp, #52]
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 956              		.loc 1 316 3 is_stmt 1 view .LVU275
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 957              		.loc 1 316 35 is_stmt 0 view .LVU276
 958 0058 0E93     		str	r3, [sp, #56]
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 959              		.loc 1 317 3 is_stmt 1 view .LVU277
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 960              		.loc 1 317 30 is_stmt 0 view .LVU278
 961 005a 0F91     		str	r1, [sp, #60]
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 962              		.loc 1 318 3 is_stmt 1 view .LVU279
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 963              		.loc 1 318 30 is_stmt 0 view .LVU280
 964 005c 4FF4A873 		mov	r3, #336
 965 0060 1093     		str	r3, [sp, #64]
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 966              		.loc 1 319 3 is_stmt 1 view .LVU281
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 967              		.loc 1 319 30 is_stmt 0 view .LVU282
 968 0062 0423     		movs	r3, #4
 969 0064 1193     		str	r3, [sp, #68]
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 970              		.loc 1 320 3 is_stmt 1 view .LVU283
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 971              		.loc 1 320 30 is_stmt 0 view .LVU284
 972 0066 1292     		str	r2, [sp, #72]
 321:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 973              		.loc 1 321 3 is_stmt 1 view .LVU285
 321:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 974              		.loc 1 321 30 is_stmt 0 view .LVU286
 975 0068 1392     		str	r2, [sp, #76]
 322:Core/Src/main.c ****   {
 976              		.loc 1 322 3 is_stmt 1 view .LVU287
 322:Core/Src/main.c ****   {
 977              		.loc 1 322 7 is_stmt 0 view .LVU288
 978 006a 07A8     		add	r0, sp, #28
 979 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 980              	.LVL43:
 322:Core/Src/main.c ****   {
 981              		.loc 1 322 6 view .LVU289
 982 0070 80B9     		cbnz	r0, .L66
 329:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 983              		.loc 1 329 3 is_stmt 1 view .LVU290
 329:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 984              		.loc 1 329 31 is_stmt 0 view .LVU291
 985 0072 0F23     		movs	r3, #15
 986 0074 0293     		str	r3, [sp, #8]
 331:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 987              		.loc 1 331 3 is_stmt 1 view .LVU292
 331:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 988              		.loc 1 331 34 is_stmt 0 view .LVU293
 989 0076 0221     		movs	r1, #2
 990 0078 0391     		str	r1, [sp, #12]
 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
ARM GAS  /tmp/cc70gxEm.s 			page 50


 991              		.loc 1 332 3 is_stmt 1 view .LVU294
 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 992              		.loc 1 332 35 is_stmt 0 view .LVU295
 993 007a 0023     		movs	r3, #0
 994 007c 0493     		str	r3, [sp, #16]
 333:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 995              		.loc 1 333 3 is_stmt 1 view .LVU296
 333:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 996              		.loc 1 333 36 is_stmt 0 view .LVU297
 997 007e 4FF48052 		mov	r2, #4096
 998 0082 0592     		str	r2, [sp, #20]
 334:Core/Src/main.c **** 
 999              		.loc 1 334 3 is_stmt 1 view .LVU298
 334:Core/Src/main.c **** 
 1000              		.loc 1 334 36 is_stmt 0 view .LVU299
 1001 0084 0693     		str	r3, [sp, #24]
 336:Core/Src/main.c ****   {
 1002              		.loc 1 336 3 is_stmt 1 view .LVU300
 336:Core/Src/main.c ****   {
 1003              		.loc 1 336 7 is_stmt 0 view .LVU301
 1004 0086 02A8     		add	r0, sp, #8
 1005 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1006              	.LVL44:
 336:Core/Src/main.c ****   {
 1007              		.loc 1 336 6 view .LVU302
 1008 008c 20B9     		cbnz	r0, .L67
 340:Core/Src/main.c **** 
 1009              		.loc 1 340 1 view .LVU303
 1010 008e 15B0     		add	sp, sp, #84
 1011              		.cfi_remember_state
 1012              		.cfi_def_cfa_offset 4
 1013              		@ sp needed
 1014 0090 5DF804FB 		ldr	pc, [sp], #4
 1015              	.L66:
 1016              		.cfi_restore_state
 324:Core/Src/main.c ****   }
 1017              		.loc 1 324 5 is_stmt 1 view .LVU304
 1018 0094 FFF7FEFF 		bl	Error_Handler
 1019              	.LVL45:
 1020              	.L67:
 338:Core/Src/main.c ****   }
 1021              		.loc 1 338 5 view .LVU305
 1022 0098 FFF7FEFF 		bl	Error_Handler
 1023              	.LVL46:
 1024              	.L69:
 1025              		.align	2
 1026              	.L68:
 1027 009c 00380240 		.word	1073887232
 1028 00a0 00700040 		.word	1073770496
 1029              		.cfi_endproc
 1030              	.LFE246:
 1032              		.section	.text.main,"ax",%progbits
 1033              		.align	1
 1034              		.global	main
 1035              		.syntax unified
 1036              		.thumb
 1037              		.thumb_func
ARM GAS  /tmp/cc70gxEm.s 			page 51


 1038              		.fpu fpv4-sp-d16
 1040              	main:
 1041              	.LFB245:
 204:Core/Src/main.c **** 
 1042              		.loc 1 204 1 view -0
 1043              		.cfi_startproc
 1044              		@ Volatile: function does not return.
 1045              		@ args = 0, pretend = 0, frame = 0
 1046              		@ frame_needed = 0, uses_anonymous_args = 0
 1047 0000 08B5     		push	{r3, lr}
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 3, -8
 1050              		.cfi_offset 14, -4
 213:Core/Src/main.c **** 
 1051              		.loc 1 213 3 view .LVU307
 1052 0002 FFF7FEFF 		bl	HAL_Init
 1053              	.LVL47:
 220:Core/Src/main.c **** 
 1054              		.loc 1 220 3 view .LVU308
 1055 0006 FFF7FEFF 		bl	SystemClock_Config
 1056              	.LVL48:
 227:Core/Src/main.c ****   MX_ADC1_Init();
 1057              		.loc 1 227 3 view .LVU309
 1058 000a FFF7FEFF 		bl	MX_GPIO_Init
 1059              	.LVL49:
 228:Core/Src/main.c ****   MX_I2C1_Init();
 1060              		.loc 1 228 3 view .LVU310
 1061 000e FFF7FEFF 		bl	MX_ADC1_Init
 1062              	.LVL50:
 229:Core/Src/main.c ****   MX_USART2_UART_Init();
 1063              		.loc 1 229 3 view .LVU311
 1064 0012 FFF7FEFF 		bl	MX_I2C1_Init
 1065              	.LVL51:
 230:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1066              		.loc 1 230 3 view .LVU312
 1067 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 1068              	.LVL52:
 236:Core/Src/main.c **** 
 1069              		.loc 1 236 3 view .LVU313
 1070 001a FFF7FEFF 		bl	osKernelInitialize
 1071              	.LVL53:
 252:Core/Src/main.c **** 
 1072              		.loc 1 252 3 view .LVU314
 252:Core/Src/main.c **** 
 1073              		.loc 1 252 29 is_stmt 0 view .LVU315
 1074 001e 134A     		ldr	r2, .L73
 1075 0020 0421     		movs	r1, #4
 1076 0022 1020     		movs	r0, #16
 1077 0024 FFF7FEFF 		bl	osMessageQueueNew
 1078              	.LVL54:
 252:Core/Src/main.c **** 
 1079              		.loc 1 252 27 view .LVU316
 1080 0028 114B     		ldr	r3, .L73+4
 1081 002a 1860     		str	r0, [r3]
 260:Core/Src/main.c **** 
 1082              		.loc 1 260 3 is_stmt 1 view .LVU317
 260:Core/Src/main.c **** 
ARM GAS  /tmp/cc70gxEm.s 			page 52


 1083              		.loc 1 260 23 is_stmt 0 view .LVU318
 1084 002c 114A     		ldr	r2, .L73+8
 1085 002e 0021     		movs	r1, #0
 1086 0030 1148     		ldr	r0, .L73+12
 1087 0032 FFF7FEFF 		bl	osThreadNew
 1088              	.LVL55:
 260:Core/Src/main.c **** 
 1089              		.loc 1 260 21 view .LVU319
 1090 0036 114B     		ldr	r3, .L73+16
 1091 0038 1860     		str	r0, [r3]
 263:Core/Src/main.c **** 
 1092              		.loc 1 263 3 is_stmt 1 view .LVU320
 263:Core/Src/main.c **** 
 1093              		.loc 1 263 24 is_stmt 0 view .LVU321
 1094 003a 114A     		ldr	r2, .L73+20
 1095 003c 0021     		movs	r1, #0
 1096 003e 1148     		ldr	r0, .L73+24
 1097 0040 FFF7FEFF 		bl	osThreadNew
 1098              	.LVL56:
 263:Core/Src/main.c **** 
 1099              		.loc 1 263 22 view .LVU322
 1100 0044 104B     		ldr	r3, .L73+28
 1101 0046 1860     		str	r0, [r3]
 266:Core/Src/main.c **** 
 1102              		.loc 1 266 3 is_stmt 1 view .LVU323
 266:Core/Src/main.c **** 
 1103              		.loc 1 266 25 is_stmt 0 view .LVU324
 1104 0048 104A     		ldr	r2, .L73+32
 1105 004a 0021     		movs	r1, #0
 1106 004c 1048     		ldr	r0, .L73+36
 1107 004e FFF7FEFF 		bl	osThreadNew
 1108              	.LVL57:
 266:Core/Src/main.c **** 
 1109              		.loc 1 266 23 view .LVU325
 1110 0052 104B     		ldr	r3, .L73+40
 1111 0054 1860     		str	r0, [r3]
 269:Core/Src/main.c **** 
 1112              		.loc 1 269 3 is_stmt 1 view .LVU326
 269:Core/Src/main.c **** 
 1113              		.loc 1 269 26 is_stmt 0 view .LVU327
 1114 0056 104A     		ldr	r2, .L73+44
 1115 0058 0021     		movs	r1, #0
 1116 005a 1048     		ldr	r0, .L73+48
 1117 005c FFF7FEFF 		bl	osThreadNew
 1118              	.LVL58:
 269:Core/Src/main.c **** 
 1119              		.loc 1 269 24 view .LVU328
 1120 0060 0F4B     		ldr	r3, .L73+52
 1121 0062 1860     		str	r0, [r3]
 280:Core/Src/main.c **** 
 1122              		.loc 1 280 3 is_stmt 1 view .LVU329
 1123 0064 FFF7FEFF 		bl	osKernelStart
 1124              	.LVL59:
 1125              	.L71:
 286:Core/Src/main.c ****   {
 1126              		.loc 1 286 3 discriminator 1 view .LVU330
 291:Core/Src/main.c ****   /* USER CODE END 3 */
ARM GAS  /tmp/cc70gxEm.s 			page 53


 1127              		.loc 1 291 3 discriminator 1 view .LVU331
 286:Core/Src/main.c ****   {
 1128              		.loc 1 286 9 discriminator 1 view .LVU332
 1129 0068 FEE7     		b	.L71
 1130              	.L74:
 1131 006a 00BF     		.align	2
 1132              	.L73:
 1133 006c 00000000 		.word	.LANCHOR3
 1134 0070 00000000 		.word	.LANCHOR4
 1135 0074 00000000 		.word	.LANCHOR5
 1136 0078 00000000 		.word	StartDefaultTask
 1137 007c 00000000 		.word	.LANCHOR6
 1138 0080 00000000 		.word	.LANCHOR7
 1139 0084 00000000 		.word	BlinkLEDTaskEntry
 1140 0088 00000000 		.word	.LANCHOR8
 1141 008c 00000000 		.word	.LANCHOR9
 1142 0090 00000000 		.word	MiniBotInputsEntry
 1143 0094 00000000 		.word	.LANCHOR10
 1144 0098 00000000 		.word	.LANCHOR11
 1145 009c 00000000 		.word	ApplicationFSMEntry
 1146 00a0 00000000 		.word	.LANCHOR12
 1147              		.cfi_endproc
 1148              	.LFE245:
 1150              		.global	MiniBotInputQueue_attributes
 1151              		.section	.rodata.str1.4,"aMS",%progbits,1
 1152              		.align	2
 1153              	.LC0:
 1154 0000 4D696E69 		.ascii	"MiniBotInputQueue\000"
 1154      426F7449 
 1154      6E707574 
 1154      51756575 
 1154      6500
 1155              		.global	MiniBotInputQueueHandle
 1156              		.global	ApplicationFSM_attributes
 1157 0012 0000     		.align	2
 1158              	.LC1:
 1159 0014 4170706C 		.ascii	"ApplicationFSM\000"
 1159      69636174 
 1159      696F6E46 
 1159      534D00
 1160              		.global	ApplicationFSMHandle
 1161              		.global	MiniBotInputs_attributes
 1162 0023 00       		.align	2
 1163              	.LC2:
 1164 0024 4D696E69 		.ascii	"MiniBotInputs\000"
 1164      426F7449 
 1164      6E707574 
 1164      7300
 1165              		.global	MiniBotInputsHandle
 1166              		.global	BlinkLEDTask_attributes
 1167 0032 0000     		.align	2
 1168              	.LC3:
 1169 0034 426C696E 		.ascii	"BlinkLEDTask\000"
 1169      6B4C4544 
 1169      5461736B 
 1169      00
 1170              		.global	BlinkLEDTaskHandle
ARM GAS  /tmp/cc70gxEm.s 			page 54


 1171              		.global	defaultTask_attributes
 1172 0041 000000   		.align	2
 1173              	.LC4:
 1174 0044 64656661 		.ascii	"defaultTask\000"
 1174      756C7454 
 1174      61736B00 
 1175              		.global	defaultTaskHandle
 1176              		.global	huart2
 1177              		.global	hi2c1
 1178              		.global	hadc1
 1179              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 1180              		.align	2
 1181              		.set	.LANCHOR12,. + 0
 1184              	ApplicationFSMHandle:
 1185 0000 00000000 		.space	4
 1186              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 1187              		.align	2
 1188              		.set	.LANCHOR8,. + 0
 1191              	BlinkLEDTaskHandle:
 1192 0000 00000000 		.space	4
 1193              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 1194              		.align	2
 1195              		.set	.LANCHOR4,. + 0
 1198              	MiniBotInputQueueHandle:
 1199 0000 00000000 		.space	4
 1200              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 1201              		.align	2
 1202              		.set	.LANCHOR10,. + 0
 1205              	MiniBotInputsHandle:
 1206 0000 00000000 		.space	4
 1207              		.section	.bss.defaultTaskHandle,"aw",%nobits
 1208              		.align	2
 1209              		.set	.LANCHOR6,. + 0
 1212              	defaultTaskHandle:
 1213 0000 00000000 		.space	4
 1214              		.section	.bss.hadc1,"aw",%nobits
 1215              		.align	2
 1216              		.set	.LANCHOR0,. + 0
 1219              	hadc1:
 1220 0000 00000000 		.space	72
 1220      00000000 
 1220      00000000 
 1220      00000000 
 1220      00000000 
 1221              		.section	.bss.hi2c1,"aw",%nobits
 1222              		.align	2
 1223              		.set	.LANCHOR1,. + 0
 1226              	hi2c1:
 1227 0000 00000000 		.space	84
 1227      00000000 
 1227      00000000 
 1227      00000000 
 1227      00000000 
 1228              		.section	.bss.huart2,"aw",%nobits
 1229              		.align	2
 1230              		.set	.LANCHOR2,. + 0
 1233              	huart2:
ARM GAS  /tmp/cc70gxEm.s 			page 55


 1234 0000 00000000 		.space	72
 1234      00000000 
 1234      00000000 
 1234      00000000 
 1234      00000000 
 1235              		.section	.rodata.ApplicationFSM_attributes,"a"
 1236              		.align	2
 1237              		.set	.LANCHOR11,. + 0
 1240              	ApplicationFSM_attributes:
 1241 0000 14000000 		.word	.LC1
 1242 0004 00000000 		.space	16
 1242      00000000 
 1242      00000000 
 1242      00000000 
 1243 0014 00020000 		.word	512
 1244 0018 18000000 		.word	24
 1245 001c 00000000 		.space	8
 1245      00000000 
 1246              		.section	.rodata.BlinkLEDTask_attributes,"a"
 1247              		.align	2
 1248              		.set	.LANCHOR7,. + 0
 1251              	BlinkLEDTask_attributes:
 1252 0000 34000000 		.word	.LC3
 1253 0004 00000000 		.space	16
 1253      00000000 
 1253      00000000 
 1253      00000000 
 1254 0014 00020000 		.word	512
 1255 0018 08000000 		.word	8
 1256 001c 00000000 		.space	8
 1256      00000000 
 1257              		.section	.rodata.MiniBotInputQueue_attributes,"a"
 1258              		.align	2
 1259              		.set	.LANCHOR3,. + 0
 1262              	MiniBotInputQueue_attributes:
 1263 0000 00000000 		.word	.LC0
 1264 0004 00000000 		.space	20
 1264      00000000 
 1264      00000000 
 1264      00000000 
 1264      00000000 
 1265              		.section	.rodata.MiniBotInputs_attributes,"a"
 1266              		.align	2
 1267              		.set	.LANCHOR9,. + 0
 1270              	MiniBotInputs_attributes:
 1271 0000 24000000 		.word	.LC2
 1272 0004 00000000 		.space	16
 1272      00000000 
 1272      00000000 
 1272      00000000 
 1273 0014 00020000 		.word	512
 1274 0018 18000000 		.word	24
 1275 001c 00000000 		.space	8
 1275      00000000 
 1276              		.section	.rodata.defaultTask_attributes,"a"
 1277              		.align	2
 1278              		.set	.LANCHOR5,. + 0
ARM GAS  /tmp/cc70gxEm.s 			page 56


 1281              	defaultTask_attributes:
 1282 0000 44000000 		.word	.LC4
 1283 0004 00000000 		.space	16
 1283      00000000 
 1283      00000000 
 1283      00000000 
 1284 0014 00020000 		.word	512
 1285 0018 18000000 		.word	24
 1286 001c 00000000 		.space	8
 1286      00000000 
 1287              		.text
 1288              	.Letext0:
 1289              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1290              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1291              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1292              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1293              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1294              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1295              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1296              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1297              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1298              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1299              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1300              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1301              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1302              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1303              		.file 17 "<built-in>"
ARM GAS  /tmp/cc70gxEm.s 			page 57


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc70gxEm.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc70gxEm.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc70gxEm.s:178    .text.MX_GPIO_Init:00000000000000b0 $d
     /tmp/cc70gxEm.s:185    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc70gxEm.s:192    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc70gxEm.s:223    .text.StartDefaultTask:0000000000000018 $d
     /tmp/cc70gxEm.s:228    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/cc70gxEm.s:235    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/cc70gxEm.s:270    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/cc70gxEm.s:275    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/cc70gxEm.s:282    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/cc70gxEm.s:308    .text.MiniBotInit:0000000000000000 $t
     /tmp/cc70gxEm.s:315    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/cc70gxEm.s:395    .text.MiniBotInit:0000000000000054 $d
     /tmp/cc70gxEm.s:400    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/cc70gxEm.s:407    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/cc70gxEm.s:449    .text.MiniBotInputsEntry:0000000000000024 $d
     /tmp/cc70gxEm.s:454    .text.MegaBotInit:0000000000000000 $t
     /tmp/cc70gxEm.s:461    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/cc70gxEm.s:475    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc70gxEm.s:482    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc70gxEm.s:515    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cc70gxEm.s:520    .text.Error_Handler:0000000000000000 $t
     /tmp/cc70gxEm.s:527    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc70gxEm.s:559    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc70gxEm.s:565    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc70gxEm.s:731    .text.MX_ADC1_Init:00000000000000a8 $d
     /tmp/cc70gxEm.s:737    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cc70gxEm.s:743    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cc70gxEm.s:800    .text.MX_I2C1_Init:000000000000002c $d
     /tmp/cc70gxEm.s:807    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc70gxEm.s:813    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc70gxEm.s:867    .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/cc70gxEm.s:873    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc70gxEm.s:880    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc70gxEm.s:1027   .text.SystemClock_Config:000000000000009c $d
     /tmp/cc70gxEm.s:1033   .text.main:0000000000000000 $t
     /tmp/cc70gxEm.s:1040   .text.main:0000000000000000 main
     /tmp/cc70gxEm.s:1133   .text.main:000000000000006c $d
     /tmp/cc70gxEm.s:1262   .rodata.MiniBotInputQueue_attributes:0000000000000000 MiniBotInputQueue_attributes
     /tmp/cc70gxEm.s:1152   .rodata.str1.4:0000000000000000 $d
     /tmp/cc70gxEm.s:1198   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/cc70gxEm.s:1240   .rodata.ApplicationFSM_attributes:0000000000000000 ApplicationFSM_attributes
     /tmp/cc70gxEm.s:1184   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/cc70gxEm.s:1270   .rodata.MiniBotInputs_attributes:0000000000000000 MiniBotInputs_attributes
     /tmp/cc70gxEm.s:1205   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/cc70gxEm.s:1251   .rodata.BlinkLEDTask_attributes:0000000000000000 BlinkLEDTask_attributes
     /tmp/cc70gxEm.s:1191   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/cc70gxEm.s:1281   .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
     /tmp/cc70gxEm.s:1212   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/cc70gxEm.s:1233   .bss.huart2:0000000000000000 huart2
     /tmp/cc70gxEm.s:1226   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/cc70gxEm.s:1219   .bss.hadc1:0000000000000000 hadc1
     /tmp/cc70gxEm.s:1180   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/cc70gxEm.s:1187   .bss.BlinkLEDTaskHandle:0000000000000000 $d
ARM GAS  /tmp/cc70gxEm.s 			page 58


     /tmp/cc70gxEm.s:1194   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/cc70gxEm.s:1201   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/cc70gxEm.s:1208   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/cc70gxEm.s:1215   .bss.hadc1:0000000000000000 $d
     /tmp/cc70gxEm.s:1222   .bss.hi2c1:0000000000000000 $d
     /tmp/cc70gxEm.s:1229   .bss.huart2:0000000000000000 $d
     /tmp/cc70gxEm.s:1236   .rodata.ApplicationFSM_attributes:0000000000000000 $d
     /tmp/cc70gxEm.s:1247   .rodata.BlinkLEDTask_attributes:0000000000000000 $d
     /tmp/cc70gxEm.s:1258   .rodata.MiniBotInputQueue_attributes:0000000000000000 $d
     /tmp/cc70gxEm.s:1266   .rodata.MiniBotInputs_attributes:0000000000000000 $d
     /tmp/cc70gxEm.s:1277   .rodata.defaultTask_attributes:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osKernelInitialize
osMessageQueueNew
osThreadNew
osKernelStart
