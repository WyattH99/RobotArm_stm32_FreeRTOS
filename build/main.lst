ARM GAS  /tmp/ccYwoJb7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 456D6572 		.ascii	"EmergencyStopTask\000"
  29      67656E63 
  29      7953746F 
  29      70546173 
  29      6B00
  30 004e 0000     		.align	2
  31              	.LC12:
  32 0050 4D6F746F 		.ascii	"MotorControlTask\000"
  32      72436F6E 
  32      74726F6C 
  32      5461736B 
  32      00
  33 0061 000000   		.align	2
  34              	.LC14:
  35 0064 4C434450 		.ascii	"LCDPrintTask\000"
  35      72696E74 
  35      5461736B 
  35      00
ARM GAS  /tmp/ccYwoJb7.s 			page 2


  36              		.text
  37              	.Ltext0:
  38              		.cfi_sections	.debug_frame
  39              		.section	.text.MX_GPIO_Init,"ax",%progbits
  40              		.align	1
  41              		.arch armv7e-m
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	MX_GPIO_Init:
  48              	.LFB250:
  49              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint32_t PotMin;
  40:Core/Src/main.c **** 	uint32_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
ARM GAS  /tmp/ccYwoJb7.s 			page 3


  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t BasePotMin;
  60:Core/Src/main.c **** 	uint32_t BasePotMax;
  61:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  62:Core/Src/main.c **** 	uint32_t ShoulderPotMin;
  63:Core/Src/main.c **** 	uint32_t ShoulderPotMax;
  64:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  65:Core/Src/main.c **** 	uint32_t ElbowPotMin;
  66:Core/Src/main.c **** 	uint32_t ElbowPotMax;
  67:Core/Src/main.c **** 	uint32_t WristPotValue;
  68:Core/Src/main.c **** 	uint32_t WristPotMin;
  69:Core/Src/main.c **** 	uint32_t WristPotMax;
  70:Core/Src/main.c **** 	uint8_t  GripperValue;
  71:Core/Src/main.c **** } MiniBot_Qdata;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  74:Core/Src/main.c **** uint32_t PotRawValue[4];
  75:Core/Src/main.c **** volatile MiniBot_Qdata MiniBot_Qdata_Buf;
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /*
  79:Core/Src/main.c ****  * MegaBot Structures
  80:Core/Src/main.c ****  */
  81:Core/Src/main.c **** typedef struct{
  82:Core/Src/main.c **** 	uint8_t  ServoNum;
  83:Core/Src/main.c **** 	uint16_t ServoMin;
  84:Core/Src/main.c **** 	uint16_t ServoMax;
  85:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  86:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** typedef struct{
  89:Core/Src/main.c **** 	uint8_t  ServoNum;
  90:Core/Src/main.c **** 	uint16_t ServoMin;
  91:Core/Src/main.c **** 	uint16_t ServoMax;
  92:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  93:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** typedef struct{
  96:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  97:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
  98:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  99:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
 100:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
 101:Core/Src/main.c **** } MegaBot_Config_t;
ARM GAS  /tmp/ccYwoJb7.s 			page 4


 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** volatile MiniBot_Qdata Temp_Qdata_Buf;
 104:Core/Src/main.c **** volatile MiniBot_Qdata MotorControl_Qdata_Buf;
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** uint8_t tempFailedToPostMessage = 0;
 107:Core/Src/main.c **** uint16_t MappedServoAngle[4];
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** enum State{
 111:Core/Src/main.c ****   Init,
 112:Core/Src/main.c ****   Ready,
 113:Core/Src/main.c ****   Running,
 114:Core/Src/main.c ****   EmergencyStop
 115:Core/Src/main.c **** };
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** volatile enum State state = Init;
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** /* USER CODE END PTD */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 122:Core/Src/main.c **** /* USER CODE BEGIN PD */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* USER CODE END PD */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 127:Core/Src/main.c **** /* USER CODE BEGIN PM */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /* USER CODE END PM */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 132:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 135:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** UART_HandleTypeDef huart2;
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** osThreadId defaultTaskHandle;
 140:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 141:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 142:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 143:Core/Src/main.c **** osThreadId EmergencyStopTaskHandle;
 144:Core/Src/main.c **** osThreadId MotorControlTaskHandle;
 145:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 146:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 147:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 148:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 149:Core/Src/main.c **** osMutexId StateMutexHandle;
 150:Core/Src/main.c **** /* USER CODE BEGIN PV */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c **** /* USER CODE END PV */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 155:Core/Src/main.c **** void SystemClock_Config(void);
 156:Core/Src/main.c **** static void MX_GPIO_Init(void);
 157:Core/Src/main.c **** static void MX_ADC1_Init(void);
 158:Core/Src/main.c **** static void MX_I2C1_Init(void);
ARM GAS  /tmp/ccYwoJb7.s 			page 5


 159:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 160:Core/Src/main.c **** static void MX_I2C2_Init(void);
 161:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 162:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 163:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
 164:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 165:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument);
 166:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 167:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 172:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot);
 173:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot);
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 176:Core/Src/main.c **** 
 177:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot);
 178:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /* USER CODE END PFP */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 183:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** /* USER CODE END 0 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c **** /**
 189:Core/Src/main.c ****   * @brief  The application entry point.
 190:Core/Src/main.c ****   * @retval int
 191:Core/Src/main.c ****   */
 192:Core/Src/main.c **** int main(void)
 193:Core/Src/main.c **** {
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* USER CODE END 1 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 202:Core/Src/main.c ****   HAL_Init();
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE END Init */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* Configure the system clock */
 209:Core/Src/main.c ****   SystemClock_Config();
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE END SysInit */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* Initialize all configured peripherals */
ARM GAS  /tmp/ccYwoJb7.s 			page 6


 216:Core/Src/main.c ****   MX_GPIO_Init();
 217:Core/Src/main.c ****   MX_ADC1_Init();
 218:Core/Src/main.c ****   MX_I2C1_Init();
 219:Core/Src/main.c ****   MX_USART2_UART_Init();
 220:Core/Src/main.c ****   MX_I2C2_Init();
 221:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE END 2 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* Create the mutex(es) */
 226:Core/Src/main.c ****   /* definition and creation of StateMutex */
 227:Core/Src/main.c ****   osMutexDef(StateMutex);
 228:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 231:Core/Src/main.c ****   /* add mutexes, ... */
 232:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 235:Core/Src/main.c ****   /* add semaphores, ... */
 236:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 239:Core/Src/main.c ****   /* start timers, add new ones, ... */
 240:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* Create the queue(s) */
 243:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 244:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 245:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 248:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, MiniBot_Qdata);
 249:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 252:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, uint16_t);
 253:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 256:Core/Src/main.c ****   /* add queues, ... */
 257:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* Create the thread(s) */
 260:Core/Src/main.c ****   /* definition and creation of defaultTask */
 261:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 262:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 265:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityNormal, 0, 128);
 266:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 269:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 512);
 270:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
ARM GAS  /tmp/ccYwoJb7.s 			page 7


 273:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityHigh, 0, 512);
 274:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* definition and creation of EmergencyStopTask */
 277:Core/Src/main.c ****   osThreadDef(EmergencyStopTask, EmergencyStopTaskEntry, osPriorityNormal, 0, 128);
 278:Core/Src/main.c ****   EmergencyStopTaskHandle = osThreadCreate(osThread(EmergencyStopTask), NULL);
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* definition and creation of MotorControlTask */
 281:Core/Src/main.c ****   osThreadDef(MotorControlTask, MotorControlTaskEntry, osPriorityNormal, 0, 512);
 282:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 285:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 286:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 289:Core/Src/main.c ****   /* add threads, ... */
 290:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 291:Core/Src/main.c **** 
 292:Core/Src/main.c ****   /* Start scheduler */
 293:Core/Src/main.c ****   osKernelStart();
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* Infinite loop */
 298:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 299:Core/Src/main.c ****   while (1)
 300:Core/Src/main.c ****   {
 301:Core/Src/main.c ****     /* USER CODE END WHILE */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 304:Core/Src/main.c ****   }
 305:Core/Src/main.c ****   /* USER CODE END 3 */
 306:Core/Src/main.c **** }
 307:Core/Src/main.c **** 
 308:Core/Src/main.c **** /**
 309:Core/Src/main.c ****   * @brief System Clock Configuration
 310:Core/Src/main.c ****   * @retval None
 311:Core/Src/main.c ****   */
 312:Core/Src/main.c **** void SystemClock_Config(void)
 313:Core/Src/main.c **** {
 314:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 315:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 318:Core/Src/main.c ****   */
 319:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 320:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 323:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 324:Core/Src/main.c ****   */
 325:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 326:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 327:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 328:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
ARM GAS  /tmp/ccYwoJb7.s 			page 8


 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 335:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 341:Core/Src/main.c ****   */
 342:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 343:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 344:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 345:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 346:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 347:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 350:Core/Src/main.c ****   {
 351:Core/Src/main.c ****     Error_Handler();
 352:Core/Src/main.c ****   }
 353:Core/Src/main.c **** }
 354:Core/Src/main.c **** 
 355:Core/Src/main.c **** /**
 356:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 357:Core/Src/main.c ****   * @param None
 358:Core/Src/main.c ****   * @retval None
 359:Core/Src/main.c ****   */
 360:Core/Src/main.c **** static void MX_ADC1_Init(void)
 361:Core/Src/main.c **** {
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 374:Core/Src/main.c ****   */
 375:Core/Src/main.c ****   hadc1.Instance = ADC1;
 376:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 377:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 378:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 379:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 380:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 381:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 382:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 383:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 384:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 385:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 386:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
ARM GAS  /tmp/ccYwoJb7.s 			page 9


 387:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 388:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****     Error_Handler();
 391:Core/Src/main.c ****   }
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 394:Core/Src/main.c ****   */
 395:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 396:Core/Src/main.c ****   sConfig.Rank = 1;
 397:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 398:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 399:Core/Src/main.c ****   {
 400:Core/Src/main.c ****     Error_Handler();
 401:Core/Src/main.c ****   }
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 404:Core/Src/main.c ****   */
 405:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 406:Core/Src/main.c ****   sConfig.Rank = 2;
 407:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 408:Core/Src/main.c ****   {
 409:Core/Src/main.c ****     Error_Handler();
 410:Core/Src/main.c ****   }
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 413:Core/Src/main.c ****   */
 414:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 415:Core/Src/main.c ****   sConfig.Rank = 3;
 416:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 417:Core/Src/main.c ****   {
 418:Core/Src/main.c ****     Error_Handler();
 419:Core/Src/main.c ****   }
 420:Core/Src/main.c **** 
 421:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 422:Core/Src/main.c ****   */
 423:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 424:Core/Src/main.c ****   sConfig.Rank = 4;
 425:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 426:Core/Src/main.c ****   {
 427:Core/Src/main.c ****     Error_Handler();
 428:Core/Src/main.c ****   }
 429:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** }
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** /**
 436:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 437:Core/Src/main.c ****   * @param None
 438:Core/Src/main.c ****   * @retval None
 439:Core/Src/main.c ****   */
 440:Core/Src/main.c **** static void MX_I2C1_Init(void)
 441:Core/Src/main.c **** {
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
ARM GAS  /tmp/ccYwoJb7.s 			page 10


 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 450:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 451:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 452:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 453:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 454:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 455:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 456:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 457:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 458:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 459:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 460:Core/Src/main.c ****   {
 461:Core/Src/main.c ****     Error_Handler();
 462:Core/Src/main.c ****   }
 463:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 466:Core/Src/main.c **** 
 467:Core/Src/main.c **** }
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** /**
 470:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 471:Core/Src/main.c ****   * @param None
 472:Core/Src/main.c ****   * @retval None
 473:Core/Src/main.c ****   */
 474:Core/Src/main.c **** static void MX_I2C2_Init(void)
 475:Core/Src/main.c **** {
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 484:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 485:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 486:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 487:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 488:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 489:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 490:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 491:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 492:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 493:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 494:Core/Src/main.c ****   {
 495:Core/Src/main.c ****     Error_Handler();
 496:Core/Src/main.c ****   }
 497:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 500:Core/Src/main.c **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 11


 501:Core/Src/main.c **** }
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** /**
 504:Core/Src/main.c ****   * @brief USART2 Initialization Function
 505:Core/Src/main.c ****   * @param None
 506:Core/Src/main.c ****   * @retval None
 507:Core/Src/main.c ****   */
 508:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 509:Core/Src/main.c **** {
 510:Core/Src/main.c **** 
 511:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 518:Core/Src/main.c ****   huart2.Instance = USART2;
 519:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 520:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 521:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 522:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 523:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 524:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 525:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 526:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 527:Core/Src/main.c ****   {
 528:Core/Src/main.c ****     Error_Handler();
 529:Core/Src/main.c ****   }
 530:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 531:Core/Src/main.c **** 
 532:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 533:Core/Src/main.c **** 
 534:Core/Src/main.c **** }
 535:Core/Src/main.c **** 
 536:Core/Src/main.c **** /**
 537:Core/Src/main.c ****   * @brief GPIO Initialization Function
 538:Core/Src/main.c ****   * @param None
 539:Core/Src/main.c ****   * @retval None
 540:Core/Src/main.c ****   */
 541:Core/Src/main.c **** static void MX_GPIO_Init(void)
 542:Core/Src/main.c **** {
  50              		.loc 1 542 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 40
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  55              		.cfi_def_cfa_offset 24
  56              		.cfi_offset 4, -24
  57              		.cfi_offset 5, -20
  58              		.cfi_offset 6, -16
  59              		.cfi_offset 7, -12
  60              		.cfi_offset 8, -8
  61              		.cfi_offset 14, -4
  62 0004 8AB0     		sub	sp, sp, #40
  63              		.cfi_def_cfa_offset 64
 543:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
ARM GAS  /tmp/ccYwoJb7.s 			page 12


  64              		.loc 1 543 3 view .LVU1
  65              		.loc 1 543 20 is_stmt 0 view .LVU2
  66 0006 0024     		movs	r4, #0
  67 0008 0594     		str	r4, [sp, #20]
  68 000a 0694     		str	r4, [sp, #24]
  69 000c 0794     		str	r4, [sp, #28]
  70 000e 0894     		str	r4, [sp, #32]
  71 0010 0994     		str	r4, [sp, #36]
 544:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 545:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 546:Core/Src/main.c **** 
 547:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 548:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  72              		.loc 1 548 3 is_stmt 1 view .LVU3
  73              	.LBB4:
  74              		.loc 1 548 3 view .LVU4
  75 0012 0194     		str	r4, [sp, #4]
  76              		.loc 1 548 3 view .LVU5
  77 0014 304B     		ldr	r3, .L3
  78 0016 1A6B     		ldr	r2, [r3, #48]
  79 0018 42F00402 		orr	r2, r2, #4
  80 001c 1A63     		str	r2, [r3, #48]
  81              		.loc 1 548 3 view .LVU6
  82 001e 1A6B     		ldr	r2, [r3, #48]
  83 0020 02F00402 		and	r2, r2, #4
  84 0024 0192     		str	r2, [sp, #4]
  85              		.loc 1 548 3 view .LVU7
  86 0026 019A     		ldr	r2, [sp, #4]
  87              	.LBE4:
  88              		.loc 1 548 3 view .LVU8
 549:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  89              		.loc 1 549 3 view .LVU9
  90              	.LBB5:
  91              		.loc 1 549 3 view .LVU10
  92 0028 0294     		str	r4, [sp, #8]
  93              		.loc 1 549 3 view .LVU11
  94 002a 1A6B     		ldr	r2, [r3, #48]
  95 002c 42F08002 		orr	r2, r2, #128
  96 0030 1A63     		str	r2, [r3, #48]
  97              		.loc 1 549 3 view .LVU12
  98 0032 1A6B     		ldr	r2, [r3, #48]
  99 0034 02F08002 		and	r2, r2, #128
 100 0038 0292     		str	r2, [sp, #8]
 101              		.loc 1 549 3 view .LVU13
 102 003a 029A     		ldr	r2, [sp, #8]
 103              	.LBE5:
 104              		.loc 1 549 3 view .LVU14
 550:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 105              		.loc 1 550 3 view .LVU15
 106              	.LBB6:
 107              		.loc 1 550 3 view .LVU16
 108 003c 0394     		str	r4, [sp, #12]
 109              		.loc 1 550 3 view .LVU17
 110 003e 1A6B     		ldr	r2, [r3, #48]
 111 0040 42F00102 		orr	r2, r2, #1
 112 0044 1A63     		str	r2, [r3, #48]
 113              		.loc 1 550 3 view .LVU18
ARM GAS  /tmp/ccYwoJb7.s 			page 13


 114 0046 1A6B     		ldr	r2, [r3, #48]
 115 0048 02F00102 		and	r2, r2, #1
 116 004c 0392     		str	r2, [sp, #12]
 117              		.loc 1 550 3 view .LVU19
 118 004e 039A     		ldr	r2, [sp, #12]
 119              	.LBE6:
 120              		.loc 1 550 3 view .LVU20
 551:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 121              		.loc 1 551 3 view .LVU21
 122              	.LBB7:
 123              		.loc 1 551 3 view .LVU22
 124 0050 0494     		str	r4, [sp, #16]
 125              		.loc 1 551 3 view .LVU23
 126 0052 1A6B     		ldr	r2, [r3, #48]
 127 0054 42F00202 		orr	r2, r2, #2
 128 0058 1A63     		str	r2, [r3, #48]
 129              		.loc 1 551 3 view .LVU24
 130 005a 1B6B     		ldr	r3, [r3, #48]
 131 005c 03F00203 		and	r3, r3, #2
 132 0060 0493     		str	r3, [sp, #16]
 133              		.loc 1 551 3 view .LVU25
 134 0062 049B     		ldr	r3, [sp, #16]
 135              	.LBE7:
 136              		.loc 1 551 3 view .LVU26
 552:Core/Src/main.c **** 
 553:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 554:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 137              		.loc 1 554 3 view .LVU27
 138 0064 1D4E     		ldr	r6, .L3+4
 139 0066 2246     		mov	r2, r4
 140 0068 2021     		movs	r1, #32
 141 006a 3046     		mov	r0, r6
 142 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL0:
 555:Core/Src/main.c **** 
 556:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 557:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 557 3 view .LVU28
 145              		.loc 1 557 23 is_stmt 0 view .LVU29
 146 0070 4FF40053 		mov	r3, #8192
 147 0074 0593     		str	r3, [sp, #20]
 558:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 148              		.loc 1 558 3 is_stmt 1 view .LVU30
 149              		.loc 1 558 24 is_stmt 0 view .LVU31
 150 0076 4FF40418 		mov	r8, #2162688
 151 007a CDF81880 		str	r8, [sp, #24]
 559:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 559 3 is_stmt 1 view .LVU32
 153              		.loc 1 559 24 is_stmt 0 view .LVU33
 154 007e 0794     		str	r4, [sp, #28]
 560:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 155              		.loc 1 560 3 is_stmt 1 view .LVU34
 156 0080 05A9     		add	r1, sp, #20
 157 0082 1748     		ldr	r0, .L3+8
 158 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL1:
 561:Core/Src/main.c **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 14


 562:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 563:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 160              		.loc 1 563 3 view .LVU35
 161              		.loc 1 563 23 is_stmt 0 view .LVU36
 162 0088 2027     		movs	r7, #32
 163 008a 0597     		str	r7, [sp, #20]
 564:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 164              		.loc 1 564 3 is_stmt 1 view .LVU37
 165              		.loc 1 564 24 is_stmt 0 view .LVU38
 166 008c 0125     		movs	r5, #1
 167 008e 0695     		str	r5, [sp, #24]
 565:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 168              		.loc 1 565 3 is_stmt 1 view .LVU39
 169              		.loc 1 565 24 is_stmt 0 view .LVU40
 170 0090 0794     		str	r4, [sp, #28]
 566:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 171              		.loc 1 566 3 is_stmt 1 view .LVU41
 172              		.loc 1 566 25 is_stmt 0 view .LVU42
 173 0092 0894     		str	r4, [sp, #32]
 567:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 174              		.loc 1 567 3 is_stmt 1 view .LVU43
 175 0094 05A9     		add	r1, sp, #20
 176 0096 3046     		mov	r0, r6
 177 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 178              	.LVL2:
 568:Core/Src/main.c **** 
 569:Core/Src/main.c ****   /*Configure GPIO pin : EmergencyStopBtn_Pin */
 570:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin;
 179              		.loc 1 570 3 view .LVU44
 180              		.loc 1 570 23 is_stmt 0 view .LVU45
 181 009c 4FF48073 		mov	r3, #256
 182 00a0 0593     		str	r3, [sp, #20]
 571:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 183              		.loc 1 571 3 is_stmt 1 view .LVU46
 184              		.loc 1 571 24 is_stmt 0 view .LVU47
 185 00a2 CDF81880 		str	r8, [sp, #24]
 572:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 186              		.loc 1 572 3 is_stmt 1 view .LVU48
 187              		.loc 1 572 24 is_stmt 0 view .LVU49
 188 00a6 0795     		str	r5, [sp, #28]
 573:Core/Src/main.c ****   HAL_GPIO_Init(EmergencyStopBtn_GPIO_Port, &GPIO_InitStruct);
 189              		.loc 1 573 3 is_stmt 1 view .LVU50
 190 00a8 05A9     		add	r1, sp, #20
 191 00aa 3046     		mov	r0, r6
 192 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 193              	.LVL3:
 574:Core/Src/main.c **** 
 575:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 576:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 194              		.loc 1 576 3 view .LVU51
 195              		.loc 1 576 23 is_stmt 0 view .LVU52
 196 00b0 4FF40073 		mov	r3, #512
 197 00b4 0593     		str	r3, [sp, #20]
 577:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 198              		.loc 1 577 3 is_stmt 1 view .LVU53
 199              		.loc 1 577 24 is_stmt 0 view .LVU54
 200 00b6 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccYwoJb7.s 			page 15


 578:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 201              		.loc 1 578 3 is_stmt 1 view .LVU55
 202              		.loc 1 578 24 is_stmt 0 view .LVU56
 203 00b8 0795     		str	r5, [sp, #28]
 579:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 204              		.loc 1 579 3 is_stmt 1 view .LVU57
 205 00ba 05A9     		add	r1, sp, #20
 206 00bc 3046     		mov	r0, r6
 207 00be FFF7FEFF 		bl	HAL_GPIO_Init
 208              	.LVL4:
 580:Core/Src/main.c **** 
 581:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 582:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 209              		.loc 1 582 3 view .LVU58
 210              		.loc 1 582 23 is_stmt 0 view .LVU59
 211 00c2 0597     		str	r7, [sp, #20]
 583:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 212              		.loc 1 583 3 is_stmt 1 view .LVU60
 213              		.loc 1 583 24 is_stmt 0 view .LVU61
 214 00c4 0694     		str	r4, [sp, #24]
 584:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 215              		.loc 1 584 3 is_stmt 1 view .LVU62
 216              		.loc 1 584 24 is_stmt 0 view .LVU63
 217 00c6 0795     		str	r5, [sp, #28]
 585:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 218              		.loc 1 585 3 is_stmt 1 view .LVU64
 219 00c8 05A9     		add	r1, sp, #20
 220 00ca 0648     		ldr	r0, .L3+12
 221 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 222              	.LVL5:
 586:Core/Src/main.c **** 
 587:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 588:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 589:Core/Src/main.c **** }
 223              		.loc 1 589 1 is_stmt 0 view .LVU65
 224 00d0 0AB0     		add	sp, sp, #40
 225              		.cfi_def_cfa_offset 24
 226              		@ sp needed
 227 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 228              	.L4:
 229 00d6 00BF     		.align	2
 230              	.L3:
 231 00d8 00380240 		.word	1073887232
 232 00dc 00000240 		.word	1073872896
 233 00e0 00080240 		.word	1073874944
 234 00e4 00040240 		.word	1073873920
 235              		.cfi_endproc
 236              	.LFE250:
 238              		.section	.text.StartDefaultTask,"ax",%progbits
 239              		.align	1
 240              		.global	StartDefaultTask
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu fpv4-sp-d16
 246              	StartDefaultTask:
 247              	.LFB257:
ARM GAS  /tmp/ccYwoJb7.s 			page 16


 590:Core/Src/main.c **** 
 591:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 592:Core/Src/main.c **** 
 593:Core/Src/main.c **** 
 594:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 595:Core/Src/main.c **** 	// Configure Each of the joints
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 598:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 599:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 600:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 601:Core/Src/main.c **** 
 602:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 604:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 606:Core/Src/main.c **** 
 607:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 609:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 611:Core/Src/main.c **** 
 612:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 614:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 616:Core/Src/main.c **** 
 617:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 618:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 619:Core/Src/main.c **** }
 620:Core/Src/main.c **** 
 621:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot){
 622:Core/Src/main.c ****   // Configure Each of the joints
 623:Core/Src/main.c ****   MegaBot->Base.ServoNum = 0;
 624:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 625:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 626:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 627:Core/Src/main.c **** 
 628:Core/Src/main.c ****   MegaBot->Shoulder.ServoNum = 1;
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 630:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 632:Core/Src/main.c **** 
 633:Core/Src/main.c ****   MegaBot->Elbow.ServoNum = 2;
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 635:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 637:Core/Src/main.c **** 
 638:Core/Src/main.c ****   MegaBot->Wrist.ServoNum = 3;
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 640:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 642:Core/Src/main.c **** 
 643:Core/Src/main.c ****   MegaBot->Gripper.ServoNum = 4;
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 645:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
ARM GAS  /tmp/ccYwoJb7.s 			page 17


 647:Core/Src/main.c **** 
 648:Core/Src/main.c ****   ServoDriverInit(MegaBot);
 649:Core/Src/main.c **** }
 650:Core/Src/main.c **** 
 651:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot){
 652:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 658:Core/Src/main.c **** }
 659:Core/Src/main.c **** 
 660:Core/Src/main.c **** 
 661:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 662:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 663:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 664:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 665:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 666:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 667:Core/Src/main.c ****     }else{
 668:Core/Src/main.c ****       *QPotData = PotRawValue;
 669:Core/Src/main.c ****     }
 670:Core/Src/main.c ****     if(Joint->PotInvertRange){
 671:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 672:Core/Src/main.c ****     }
 673:Core/Src/main.c ****   }
 674:Core/Src/main.c **** }
 675:Core/Src/main.c **** 
 676:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot){
 677:Core/Src/main.c ****   // MAP each of the angles
 678:Core/Src/main.c ****   // Send each of new Joints angle
 679:Core/Src/main.c ****   // uint16_t MappedServoAngle;
 680:Core/Src/main.c ****   // Base
 681:Core/Src/main.c ****   MappedServoAngle[0] = MAP(MiniBot->BasePotValue, MiniBot->BasePotMin, MiniBot->BasePotMax, MegaBo
 682:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 683:Core/Src/main.c ****   // Shoulder
 684:Core/Src/main.c ****   MappedServoAngle[1] = MAP(MiniBot->ShoulderPotValue, MiniBot->ShoulderPotMin, MiniBot->ShoulderPo
 685:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 686:Core/Src/main.c ****   // Elbow
 687:Core/Src/main.c ****   MappedServoAngle[2] = MAP(MiniBot->ElbowPotValue, MiniBot->ElbowPotMin, MiniBot->ElbowPotMax, Meg
 688:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 689:Core/Src/main.c ****   // Wrist
 690:Core/Src/main.c ****   MappedServoAngle[3] = MAP(MiniBot->WristPotValue, MiniBot->WristPotMin, MiniBot->WristPotMax, Meg
 691:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 692:Core/Src/main.c ****   // Gripper
 693:Core/Src/main.c ****   if(MiniBot->GripperValue){
 694:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 695:Core/Src/main.c ****   }else{
 696:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMax);
 697:Core/Src/main.c ****   }
 698:Core/Src/main.c **** }
 699:Core/Src/main.c **** 
 700:Core/Src/main.c **** // Used to map the Potentiometer Range (0-4096) to the Servo Range (0-180)
 701:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 702:Core/Src/main.c **** {
 703:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
ARM GAS  /tmp/ccYwoJb7.s 			page 18


 704:Core/Src/main.c **** }
 705:Core/Src/main.c **** 
 706:Core/Src/main.c **** 
 707:Core/Src/main.c **** /* USER CODE END 4 */
 708:Core/Src/main.c **** 
 709:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 710:Core/Src/main.c **** /**
 711:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 712:Core/Src/main.c ****   * @param  argument: Not used
 713:Core/Src/main.c ****   * @retval None
 714:Core/Src/main.c ****   */
 715:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 716:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 717:Core/Src/main.c **** {
 248              		.loc 1 717 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ Volatile: function does not return.
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL6:
 254              		.loc 1 717 1 is_stmt 0 view .LVU67
 255 0000 08B5     		push	{r3, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 3, -8
 258              		.cfi_offset 14, -4
 259              	.LVL7:
 260              	.L6:
 718:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 719:Core/Src/main.c ****   /* Infinite loop */
 720:Core/Src/main.c ****   for(;;)
 261              		.loc 1 720 3 is_stmt 1 discriminator 1 view .LVU68
 721:Core/Src/main.c ****   {
 722:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 262              		.loc 1 722 5 discriminator 1 view .LVU69
 263 0002 0022     		movs	r2, #0
 264 0004 2021     		movs	r1, #32
 265 0006 0448     		ldr	r0, .L8
 266 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 267              	.LVL8:
 723:Core/Src/main.c ****     osDelay(1000);
 268              		.loc 1 723 5 discriminator 1 view .LVU70
 269 000c 4FF47A70 		mov	r0, #1000
 270 0010 FFF7FEFF 		bl	osDelay
 271              	.LVL9:
 720:Core/Src/main.c ****   {
 272              		.loc 1 720 8 discriminator 1 view .LVU71
 273 0014 F5E7     		b	.L6
 274              	.L9:
 275 0016 00BF     		.align	2
 276              	.L8:
 277 0018 00000240 		.word	1073872896
 278              		.cfi_endproc
 279              	.LFE257:
 281              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 282              		.align	1
 283              		.global	BlinkLEDTaskEntry
 284              		.syntax unified
ARM GAS  /tmp/ccYwoJb7.s 			page 19


 285              		.thumb
 286              		.thumb_func
 287              		.fpu fpv4-sp-d16
 289              	BlinkLEDTaskEntry:
 290              	.LFB258:
 724:Core/Src/main.c ****   }
 725:Core/Src/main.c ****   /* USER CODE END 5 */
 726:Core/Src/main.c **** }
 727:Core/Src/main.c **** 
 728:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 729:Core/Src/main.c **** /**
 730:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 731:Core/Src/main.c **** * @param argument: Not used
 732:Core/Src/main.c **** * @retval None
 733:Core/Src/main.c **** */
 734:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 735:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 736:Core/Src/main.c **** {
 291              		.loc 1 736 1 view -0
 292              		.cfi_startproc
 293              		@ Volatile: function does not return.
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL10:
 297              		.loc 1 736 1 is_stmt 0 view .LVU73
 298 0000 08B5     		push	{r3, lr}
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 3, -8
 301              		.cfi_offset 14, -4
 302              	.LVL11:
 303              	.L11:
 737:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 738:Core/Src/main.c ****   /* Infinite loop */
 739:Core/Src/main.c ****   for(;;)
 304              		.loc 1 739 3 is_stmt 1 discriminator 1 view .LVU74
 740:Core/Src/main.c ****   {
 741:Core/Src/main.c ****     
 742:Core/Src/main.c ****     osDelay(500);
 305              		.loc 1 742 5 discriminator 1 view .LVU75
 306 0002 4FF4FA70 		mov	r0, #500
 307 0006 FFF7FEFF 		bl	osDelay
 308              	.LVL12:
 743:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 309              		.loc 1 743 5 discriminator 1 view .LVU76
 310 000a 0122     		movs	r2, #1
 311 000c 2021     		movs	r1, #32
 312 000e 0448     		ldr	r0, .L13
 313 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 314              	.LVL13:
 744:Core/Src/main.c ****     osDelay(500);
 315              		.loc 1 744 5 discriminator 1 view .LVU77
 316 0014 4FF4FA70 		mov	r0, #500
 317 0018 FFF7FEFF 		bl	osDelay
 318              	.LVL14:
 739:Core/Src/main.c ****   {
 319              		.loc 1 739 8 discriminator 1 view .LVU78
 320 001c F1E7     		b	.L11
ARM GAS  /tmp/ccYwoJb7.s 			page 20


 321              	.L14:
 322 001e 00BF     		.align	2
 323              	.L13:
 324 0020 00000240 		.word	1073872896
 325              		.cfi_endproc
 326              	.LFE258:
 328              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 329              		.align	1
 330              		.global	LCDPrintTaskEntry
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	LCDPrintTaskEntry:
 337              	.LFB263:
 745:Core/Src/main.c ****   }
 746:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 747:Core/Src/main.c **** }
 748:Core/Src/main.c **** 
 749:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 750:Core/Src/main.c **** /**
 751:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 752:Core/Src/main.c **** * @param argument: Not used
 753:Core/Src/main.c **** * @retval None
 754:Core/Src/main.c **** */
 755:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 756:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 757:Core/Src/main.c **** {
 758:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 759:Core/Src/main.c **** 
 760:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 761:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 762:Core/Src/main.c **** 
 763:Core/Src/main.c ****   Qdata.BasePotMax = MiniBot.Base.PotMax;
 764:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 765:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 766:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 767:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 768:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 769:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 770:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 771:Core/Src/main.c ****   
 772:Core/Src/main.c **** 
 773:Core/Src/main.c **** 	/* Infinite loop */
 774:Core/Src/main.c **** 	for(;;)
 775:Core/Src/main.c **** 	{
 776:Core/Src/main.c ****     for(uint8_t i=0; i<4; i++){
 777:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 778:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 779:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 780:Core/Src/main.c ****     }
 781:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 782:Core/Src/main.c **** 
 783:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 784:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 785:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 786:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
ARM GAS  /tmp/ccYwoJb7.s 			page 21


 787:Core/Src/main.c **** 
 788:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 789:Core/Src/main.c ****     
 790:Core/Src/main.c ****     if(MiniBotInputQueueHandle != 0){
 791:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 792:Core/Src/main.c ****         // failed to post message
 793:Core/Src/main.c ****         tempFailedToPostMessage = 1;
 794:Core/Src/main.c ****       }
 795:Core/Src/main.c ****     }
 796:Core/Src/main.c ****   
 797:Core/Src/main.c **** 
 798:Core/Src/main.c ****     osDelay(1);
 799:Core/Src/main.c **** 	}
 800:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 801:Core/Src/main.c **** }
 802:Core/Src/main.c **** 
 803:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 804:Core/Src/main.c **** /**
 805:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 806:Core/Src/main.c **** * @param argument: Not used
 807:Core/Src/main.c **** * @retval None
 808:Core/Src/main.c **** */
 809:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 810:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 811:Core/Src/main.c **** {
 812:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 813:Core/Src/main.c **** 
 814:Core/Src/main.c ****   // enum State state = Init;
 815:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 816:Core/Src/main.c **** 
 817:Core/Src/main.c ****   /* Infinite loop */
 818:Core/Src/main.c ****   for(;;)
 819:Core/Src/main.c ****   {
 820:Core/Src/main.c ****     if(state == Init){
 821:Core/Src/main.c ****       state = Ready;
 822:Core/Src/main.c **** 
 823:Core/Src/main.c ****     }else if(state == Ready){
 824:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 825:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 826:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 827:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 828:Core/Src/main.c ****               state++;
 829:Core/Src/main.c ****             }
 830:Core/Src/main.c ****           }
 831:Core/Src/main.c ****         }
 832:Core/Src/main.c ****       }
 833:Core/Src/main.c **** 
 834:Core/Src/main.c ****     }else if(state == Running){
 835:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 836:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 837:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 838:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 839:Core/Src/main.c ****       }
 840:Core/Src/main.c ****       
 841:Core/Src/main.c ****     }
 842:Core/Src/main.c ****     
 843:Core/Src/main.c ****     if(state == EmergencyStop){
ARM GAS  /tmp/ccYwoJb7.s 			page 22


 844:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 845:Core/Src/main.c ****     }
 846:Core/Src/main.c **** 
 847:Core/Src/main.c **** 
 848:Core/Src/main.c **** 
 849:Core/Src/main.c ****     osDelay(1);
 850:Core/Src/main.c ****   }
 851:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 852:Core/Src/main.c **** }
 853:Core/Src/main.c **** 
 854:Core/Src/main.c **** /* USER CODE BEGIN Header_EmergencyStopTaskEntry */
 855:Core/Src/main.c **** /**
 856:Core/Src/main.c **** * @brief Function implementing the EmergencyStopTa thread.
 857:Core/Src/main.c **** * @param argument: Not used
 858:Core/Src/main.c **** * @retval None
 859:Core/Src/main.c **** */
 860:Core/Src/main.c **** /* USER CODE END Header_EmergencyStopTaskEntry */
 861:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument)
 862:Core/Src/main.c **** {
 863:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 864:Core/Src/main.c ****   /* Infinite loop */
 865:Core/Src/main.c ****   for(;;)
 866:Core/Src/main.c ****   {
 867:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 868:Core/Src/main.c ****       
 869:Core/Src/main.c ****     }
 870:Core/Src/main.c **** 
 871:Core/Src/main.c **** 
 872:Core/Src/main.c ****     osDelay(1);
 873:Core/Src/main.c ****   }
 874:Core/Src/main.c ****   /* USER CODE END EmergencyStopTaskEntry */
 875:Core/Src/main.c **** }
 876:Core/Src/main.c **** 
 877:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 878:Core/Src/main.c **** /**
 879:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 880:Core/Src/main.c **** * @param argument: Not used
 881:Core/Src/main.c **** * @retval None
 882:Core/Src/main.c **** */
 883:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 884:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
 885:Core/Src/main.c **** {
 886:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 887:Core/Src/main.c **** 
 888:Core/Src/main.c ****   MegaBot_Config_t MegaBot;
 889:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 890:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 891:Core/Src/main.c **** 
 892:Core/Src/main.c **** 
 893:Core/Src/main.c ****   /* Infinite loop */
 894:Core/Src/main.c ****   for(;;)
 895:Core/Src/main.c ****   {
 896:Core/Src/main.c **** 
 897:Core/Src/main.c ****     if(xQueueReceive(MotorControlQueueHandle, (void*)&MotorControl_Qdata_Buf, portMAX_DELAY) == pdP
 898:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 899:Core/Src/main.c ****     }
 900:Core/Src/main.c **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 23


 901:Core/Src/main.c **** 
 902:Core/Src/main.c **** 
 903:Core/Src/main.c ****     osDelay(1);
 904:Core/Src/main.c ****   }
 905:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 906:Core/Src/main.c **** }
 907:Core/Src/main.c **** 
 908:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 909:Core/Src/main.c **** /**
 910:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 911:Core/Src/main.c **** * @param argument: Not used
 912:Core/Src/main.c **** * @retval None
 913:Core/Src/main.c **** */
 914:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 915:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 916:Core/Src/main.c **** {
 338              		.loc 1 916 1 view -0
 339              		.cfi_startproc
 340              		@ Volatile: function does not return.
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              	.LVL15:
 344              		.loc 1 916 1 is_stmt 0 view .LVU80
 345 0000 08B5     		push	{r3, lr}
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 3, -8
 348              		.cfi_offset 14, -4
 349              	.LVL16:
 350              	.L16:
 917:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 918:Core/Src/main.c ****   /* Infinite loop */
 919:Core/Src/main.c ****   for(;;)
 351              		.loc 1 919 3 is_stmt 1 discriminator 1 view .LVU81
 920:Core/Src/main.c ****   {
 921:Core/Src/main.c ****     osDelay(1);
 352              		.loc 1 921 5 discriminator 1 view .LVU82
 353 0002 0120     		movs	r0, #1
 354 0004 FFF7FEFF 		bl	osDelay
 355              	.LVL17:
 919:Core/Src/main.c ****   {
 356              		.loc 1 919 8 discriminator 1 view .LVU83
 357 0008 FBE7     		b	.L16
 358              		.cfi_endproc
 359              	.LFE263:
 361              		.section	.text.EmergencyStopTaskEntry,"ax",%progbits
 362              		.align	1
 363              		.global	EmergencyStopTaskEntry
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu fpv4-sp-d16
 369              	EmergencyStopTaskEntry:
 370              	.LFB261:
 862:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 371              		.loc 1 862 1 view -0
 372              		.cfi_startproc
 373              		@ Volatile: function does not return.
ARM GAS  /tmp/ccYwoJb7.s 			page 24


 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              	.LVL18:
 862:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 377              		.loc 1 862 1 is_stmt 0 view .LVU85
 378 0000 08B5     		push	{r3, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 3, -8
 381              		.cfi_offset 14, -4
 382              	.LVL19:
 383              	.L19:
 865:Core/Src/main.c ****   {
 384              		.loc 1 865 3 is_stmt 1 view .LVU86
 867:Core/Src/main.c ****       
 385              		.loc 1 867 5 view .LVU87
 867:Core/Src/main.c ****       
 386              		.loc 1 867 8 is_stmt 0 view .LVU88
 387 0002 4FF48071 		mov	r1, #256
 388 0006 0348     		ldr	r0, .L21
 389 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 390              	.LVL20:
 869:Core/Src/main.c **** 
 391              		.loc 1 869 5 is_stmt 1 view .LVU89
 872:Core/Src/main.c ****   }
 392              		.loc 1 872 5 view .LVU90
 393 000c 0120     		movs	r0, #1
 394 000e FFF7FEFF 		bl	osDelay
 395              	.LVL21:
 865:Core/Src/main.c ****   {
 396              		.loc 1 865 8 view .LVU91
 397 0012 F6E7     		b	.L19
 398              	.L22:
 399              		.align	2
 400              	.L21:
 401 0014 00000240 		.word	1073872896
 402              		.cfi_endproc
 403              	.LFE261:
 405              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 406              		.align	1
 407              		.global	ApplicationFSMEntry
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	ApplicationFSMEntry:
 414              	.LFB260:
 811:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 415              		.loc 1 811 1 view -0
 416              		.cfi_startproc
 417              		@ Volatile: function does not return.
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              	.LVL22:
 811:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 421              		.loc 1 811 1 is_stmt 0 view .LVU93
 422 0000 08B5     		push	{r3, lr}
 423              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccYwoJb7.s 			page 25


 424              		.cfi_offset 3, -8
 425              		.cfi_offset 14, -4
 426 0002 07E0     		b	.L27
 427              	.LVL23:
 428              	.L29:
 821:Core/Src/main.c **** 
 429              		.loc 1 821 7 is_stmt 1 view .LVU94
 821:Core/Src/main.c **** 
 430              		.loc 1 821 13 is_stmt 0 view .LVU95
 431 0004 2C4B     		ldr	r3, .L31
 432 0006 0122     		movs	r2, #1
 433 0008 1A70     		strb	r2, [r3]
 434              	.L25:
 843:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 435              		.loc 1 843 5 is_stmt 1 view .LVU96
 843:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 436              		.loc 1 843 14 is_stmt 0 view .LVU97
 437 000a 2B4B     		ldr	r3, .L31
 438 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 845:Core/Src/main.c **** 
 439              		.loc 1 845 5 is_stmt 1 view .LVU98
 849:Core/Src/main.c ****   }
 440              		.loc 1 849 5 view .LVU99
 441 000e 0120     		movs	r0, #1
 442 0010 FFF7FEFF 		bl	osDelay
 443              	.LVL24:
 818:Core/Src/main.c ****   {
 444              		.loc 1 818 8 view .LVU100
 445              	.L27:
 818:Core/Src/main.c ****   {
 446              		.loc 1 818 3 view .LVU101
 820:Core/Src/main.c ****       state = Ready;
 447              		.loc 1 820 5 view .LVU102
 820:Core/Src/main.c ****       state = Ready;
 448              		.loc 1 820 14 is_stmt 0 view .LVU103
 449 0014 284B     		ldr	r3, .L31
 450 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 820:Core/Src/main.c ****       state = Ready;
 451              		.loc 1 820 7 view .LVU104
 452 0018 002B     		cmp	r3, #0
 453 001a F3D0     		beq	.L29
 823:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 454              		.loc 1 823 11 is_stmt 1 view .LVU105
 823:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 455              		.loc 1 823 20 is_stmt 0 view .LVU106
 456 001c 264B     		ldr	r3, .L31
 457 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 458 0020 DBB2     		uxtb	r3, r3
 823:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 459              		.loc 1 823 13 view .LVU107
 460 0022 012B     		cmp	r3, #1
 461 0024 25D0     		beq	.L30
 834:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 462              		.loc 1 834 11 is_stmt 1 view .LVU108
 834:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 463              		.loc 1 834 20 is_stmt 0 view .LVU109
 464 0026 244B     		ldr	r3, .L31
ARM GAS  /tmp/ccYwoJb7.s 			page 26


 465 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 466 002a DBB2     		uxtb	r3, r3
 834:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 467              		.loc 1 834 13 view .LVU110
 468 002c 022B     		cmp	r3, #2
 469 002e ECD1     		bne	.L25
 836:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 470              		.loc 1 836 7 is_stmt 1 view .LVU111
 836:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 471              		.loc 1 836 10 is_stmt 0 view .LVU112
 472 0030 4FF0FF32 		mov	r2, #-1
 473 0034 2149     		ldr	r1, .L31+4
 474 0036 224B     		ldr	r3, .L31+8
 475 0038 1868     		ldr	r0, [r3]
 476 003a FFF7FEFF 		bl	xQueueReceive
 477              	.LVL25:
 836:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 478              		.loc 1 836 9 view .LVU113
 479 003e 0128     		cmp	r0, #1
 480 0040 E3D1     		bne	.L25
 837:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 481              		.loc 1 837 9 is_stmt 1 view .LVU114
 837:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 482              		.loc 1 837 24 is_stmt 0 view .LVU115
 483 0042 204D     		ldr	r5, .L31+12
 484 0044 AC46     		mov	ip, r5
 485 0046 1D4C     		ldr	r4, .L31+4
 486 0048 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 487 004a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 488 004e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 489 0050 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 490 0054 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 491 0056 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 492 005a 2368     		ldr	r3, [r4]
 493 005c CCF80030 		str	r3, [ip]
 838:Core/Src/main.c ****       }
 494              		.loc 1 838 9 is_stmt 1 view .LVU116
 495 0060 0023     		movs	r3, #0
 496 0062 4FF0FF32 		mov	r2, #-1
 497 0066 2946     		mov	r1, r5
 498 0068 1748     		ldr	r0, .L31+16
 499 006a 0068     		ldr	r0, [r0]
 500 006c FFF7FEFF 		bl	xQueueGenericSend
 501              	.LVL26:
 502 0070 CBE7     		b	.L25
 503              	.L30:
 824:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 504              		.loc 1 824 7 view .LVU117
 824:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 505              		.loc 1 824 10 is_stmt 0 view .LVU118
 506 0072 4FF0FF32 		mov	r2, #-1
 507 0076 1149     		ldr	r1, .L31+4
 508 0078 114B     		ldr	r3, .L31+8
 509 007a 1868     		ldr	r0, [r3]
 510 007c FFF7FEFF 		bl	xQueueReceive
 511              	.LVL27:
 824:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
ARM GAS  /tmp/ccYwoJb7.s 			page 27


 512              		.loc 1 824 9 view .LVU119
 513 0080 0128     		cmp	r0, #1
 514 0082 C2D1     		bne	.L25
 825:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 515              		.loc 1 825 9 is_stmt 1 view .LVU120
 825:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 516              		.loc 1 825 29 is_stmt 0 view .LVU121
 517 0084 0D4B     		ldr	r3, .L31+4
 518 0086 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 825:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 519              		.loc 1 825 11 view .LVU122
 520 008a 002B     		cmp	r3, #0
 521 008c BDD1     		bne	.L25
 826:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 522              		.loc 1 826 11 is_stmt 1 view .LVU123
 826:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 523              		.loc 1 826 14 is_stmt 0 view .LVU124
 524 008e 4FF0FF32 		mov	r2, #-1
 525 0092 0A49     		ldr	r1, .L31+4
 526 0094 0A4B     		ldr	r3, .L31+8
 527 0096 1868     		ldr	r0, [r3]
 528 0098 FFF7FEFF 		bl	xQueueReceive
 529              	.LVL28:
 826:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 530              		.loc 1 826 13 view .LVU125
 531 009c 0128     		cmp	r0, #1
 532 009e B4D1     		bne	.L25
 827:Core/Src/main.c ****               state++;
 533              		.loc 1 827 13 is_stmt 1 view .LVU126
 827:Core/Src/main.c ****               state++;
 534              		.loc 1 827 33 is_stmt 0 view .LVU127
 535 00a0 064B     		ldr	r3, .L31+4
 536 00a2 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 537 00a6 DBB2     		uxtb	r3, r3
 827:Core/Src/main.c ****               state++;
 538              		.loc 1 827 15 view .LVU128
 539 00a8 012B     		cmp	r3, #1
 540 00aa AED1     		bne	.L25
 828:Core/Src/main.c ****             }
 541              		.loc 1 828 15 is_stmt 1 view .LVU129
 828:Core/Src/main.c ****             }
 542              		.loc 1 828 20 is_stmt 0 view .LVU130
 543 00ac 024A     		ldr	r2, .L31
 544 00ae 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 545 00b0 0133     		adds	r3, r3, #1
 546 00b2 DBB2     		uxtb	r3, r3
 547 00b4 1370     		strb	r3, [r2]
 548 00b6 A8E7     		b	.L25
 549              	.L32:
 550              		.align	2
 551              	.L31:
 552 00b8 00000000 		.word	.LANCHOR0
 553 00bc 00000000 		.word	.LANCHOR1
 554 00c0 00000000 		.word	.LANCHOR2
 555 00c4 00000000 		.word	.LANCHOR3
 556 00c8 00000000 		.word	.LANCHOR4
 557              		.cfi_endproc
ARM GAS  /tmp/ccYwoJb7.s 			page 28


 558              	.LFE260:
 560              		.section	.text.MiniBotInit,"ax",%progbits
 561              		.align	1
 562              		.global	MiniBotInit
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	MiniBotInit:
 569              	.LVL29:
 570              	.LFB251:
 594:Core/Src/main.c **** 	// Configure Each of the joints
 571              		.loc 1 594 44 is_stmt 1 view -0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 594:Core/Src/main.c **** 	// Configure Each of the joints
 575              		.loc 1 594 44 is_stmt 0 view .LVU132
 576 0000 00B5     		push	{lr}
 577              		.cfi_def_cfa_offset 4
 578              		.cfi_offset 14, -4
 597:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 579              		.loc 1 597 4 is_stmt 1 view .LVU133
 597:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 580              		.loc 1 597 25 is_stmt 0 view .LVU134
 581 0002 0023     		movs	r3, #0
 582 0004 0370     		strb	r3, [r0]
 598:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 583              		.loc 1 598 4 is_stmt 1 view .LVU135
 598:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 584              		.loc 1 598 25 is_stmt 0 view .LVU136
 585 0006 4FF44872 		mov	r2, #800
 586 000a 4260     		str	r2, [r0, #4]
 599:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 587              		.loc 1 599 4 is_stmt 1 view .LVU137
 599:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 588              		.loc 1 599 25 is_stmt 0 view .LVU138
 589 000c 40F64851 		movw	r1, #3400
 590 0010 8160     		str	r1, [r0, #8]
 600:Core/Src/main.c **** 
 591              		.loc 1 600 4 is_stmt 1 view .LVU139
 600:Core/Src/main.c **** 
 592              		.loc 1 600 33 is_stmt 0 view .LVU140
 593 0012 0373     		strb	r3, [r0, #12]
 602:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 594              		.loc 1 602 4 is_stmt 1 view .LVU141
 602:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 595              		.loc 1 602 29 is_stmt 0 view .LVU142
 596 0014 4FF0010C 		mov	ip, #1
 597 0018 80F810C0 		strb	ip, [r0, #16]
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 598              		.loc 1 603 4 is_stmt 1 view .LVU143
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 599              		.loc 1 603 29 is_stmt 0 view .LVU144
 600 001c 4FF41672 		mov	r2, #600
 601 0020 4261     		str	r2, [r0, #20]
 604:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
ARM GAS  /tmp/ccYwoJb7.s 			page 29


 602              		.loc 1 604 4 is_stmt 1 view .LVU145
 604:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 603              		.loc 1 604 29 is_stmt 0 view .LVU146
 604 0022 8161     		str	r1, [r0, #24]
 605:Core/Src/main.c **** 
 605              		.loc 1 605 4 is_stmt 1 view .LVU147
 605:Core/Src/main.c **** 
 606              		.loc 1 605 37 is_stmt 0 view .LVU148
 607 0024 0377     		strb	r3, [r0, #28]
 607:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 608              		.loc 1 607 4 is_stmt 1 view .LVU149
 607:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 609              		.loc 1 607 26 is_stmt 0 view .LVU150
 610 0026 4FF0020E 		mov	lr, #2
 611 002a 80F820E0 		strb	lr, [r0, #32]
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 612              		.loc 1 608 4 is_stmt 1 view .LVU151
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 613              		.loc 1 608 26 is_stmt 0 view .LVU152
 614 002e 4262     		str	r2, [r0, #36]
 609:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 615              		.loc 1 609 4 is_stmt 1 view .LVU153
 609:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 616              		.loc 1 609 26 is_stmt 0 view .LVU154
 617 0030 8162     		str	r1, [r0, #40]
 610:Core/Src/main.c **** 
 618              		.loc 1 610 4 is_stmt 1 view .LVU155
 610:Core/Src/main.c **** 
 619              		.loc 1 610 34 is_stmt 0 view .LVU156
 620 0032 80F82C30 		strb	r3, [r0, #44]
 612:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 621              		.loc 1 612 4 is_stmt 1 view .LVU157
 612:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 622              		.loc 1 612 26 is_stmt 0 view .LVU158
 623 0036 0323     		movs	r3, #3
 624 0038 80F83030 		strb	r3, [r0, #48]
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 625              		.loc 1 613 4 is_stmt 1 view .LVU159
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 626              		.loc 1 613 26 is_stmt 0 view .LVU160
 627 003c 4263     		str	r2, [r0, #52]
 614:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 628              		.loc 1 614 4 is_stmt 1 view .LVU161
 614:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 629              		.loc 1 614 26 is_stmt 0 view .LVU162
 630 003e 4FF44863 		mov	r3, #3200
 631 0042 8363     		str	r3, [r0, #56]
 615:Core/Src/main.c **** 
 632              		.loc 1 615 4 is_stmt 1 view .LVU163
 615:Core/Src/main.c **** 
 633              		.loc 1 615 34 is_stmt 0 view .LVU164
 634 0044 80F83CC0 		strb	ip, [r0, #60]
 617:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 635              		.loc 1 617 4 is_stmt 1 view .LVU165
 617:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 636              		.loc 1 617 27 is_stmt 0 view .LVU166
 637 0048 034B     		ldr	r3, .L35
ARM GAS  /tmp/ccYwoJb7.s 			page 30


 638 004a 0364     		str	r3, [r0, #64]
 618:Core/Src/main.c **** }
 639              		.loc 1 618 4 is_stmt 1 view .LVU167
 618:Core/Src/main.c **** }
 640              		.loc 1 618 30 is_stmt 0 view .LVU168
 641 004c 4FF40073 		mov	r3, #512
 642 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 619:Core/Src/main.c **** 
 643              		.loc 1 619 1 view .LVU169
 644 0054 5DF804FB 		ldr	pc, [sp], #4
 645              	.L36:
 646              		.align	2
 647              	.L35:
 648 0058 00000240 		.word	1073872896
 649              		.cfi_endproc
 650              	.LFE251:
 652              		.section	.text.ServoDriverInit,"ax",%progbits
 653              		.align	1
 654              		.global	ServoDriverInit
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 658              		.fpu fpv4-sp-d16
 660              	ServoDriverInit:
 661              	.LVL30:
 662              	.LFB253:
 651:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 663              		.loc 1 651 48 is_stmt 1 view -0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 651:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 667              		.loc 1 651 48 is_stmt 0 view .LVU171
 668 0000 10B5     		push	{r4, lr}
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 4, -8
 671              		.cfi_offset 14, -4
 672 0002 0446     		mov	r4, r0
 652:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 673              		.loc 1 652 3 is_stmt 1 view .LVU172
 674 0004 1648     		ldr	r0, .L39
 675              	.LVL31:
 652:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 676              		.loc 1 652 3 is_stmt 0 view .LVU173
 677 0006 FFF7FEFF 		bl	PCA9685_Init
 678              	.LVL32:
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 679              		.loc 1 653 3 is_stmt 1 view .LVU174
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 680              		.loc 1 653 62 is_stmt 0 view .LVU175
 681 000a E388     		ldrh	r3, [r4, #6]
 682 000c 00EE103A 		vmov	s0, r3	@ int
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 683              		.loc 1 653 3 view .LVU176
 684 0010 B8EE400A 		vcvt.f32.u32	s0, s0
 685 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 686 0016 FFF7FEFF 		bl	PCA9685_SetServoAngle
ARM GAS  /tmp/ccYwoJb7.s 			page 31


 687              	.LVL33:
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 688              		.loc 1 654 3 is_stmt 1 view .LVU177
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 689              		.loc 1 654 70 is_stmt 0 view .LVU178
 690 001a E389     		ldrh	r3, [r4, #14]
 691 001c 00EE103A 		vmov	s0, r3	@ int
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 692              		.loc 1 654 3 view .LVU179
 693 0020 B8EE400A 		vcvt.f32.u32	s0, s0
 694 0024 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 695 0026 FFF7FEFF 		bl	PCA9685_SetServoAngle
 696              	.LVL34:
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 697              		.loc 1 655 3 is_stmt 1 view .LVU180
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 698              		.loc 1 655 64 is_stmt 0 view .LVU181
 699 002a E38A     		ldrh	r3, [r4, #22]
 700 002c 00EE103A 		vmov	s0, r3	@ int
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 701              		.loc 1 655 3 view .LVU182
 702 0030 B8EE400A 		vcvt.f32.u32	s0, s0
 703 0034 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 704 0036 FFF7FEFF 		bl	PCA9685_SetServoAngle
 705              	.LVL35:
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 706              		.loc 1 656 3 is_stmt 1 view .LVU183
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 707              		.loc 1 656 64 is_stmt 0 view .LVU184
 708 003a E38B     		ldrh	r3, [r4, #30]
 709 003c 00EE103A 		vmov	s0, r3	@ int
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 710              		.loc 1 656 3 view .LVU185
 711 0040 B8EE400A 		vcvt.f32.u32	s0, s0
 712 0044 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 713 0046 FFF7FEFF 		bl	PCA9685_SetServoAngle
 714              	.LVL36:
 657:Core/Src/main.c **** }
 715              		.loc 1 657 3 is_stmt 1 view .LVU186
 657:Core/Src/main.c **** }
 716              		.loc 1 657 68 is_stmt 0 view .LVU187
 717 004a E38C     		ldrh	r3, [r4, #38]
 718 004c 00EE103A 		vmov	s0, r3	@ int
 657:Core/Src/main.c **** }
 719              		.loc 1 657 3 view .LVU188
 720 0050 B8EE400A 		vcvt.f32.u32	s0, s0
 721 0054 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 722 0058 FFF7FEFF 		bl	PCA9685_SetServoAngle
 723              	.LVL37:
 658:Core/Src/main.c **** 
 724              		.loc 1 658 1 view .LVU189
 725 005c 10BD     		pop	{r4, pc}
 726              	.LVL38:
 727              	.L40:
 658:Core/Src/main.c **** 
 728              		.loc 1 658 1 view .LVU190
 729 005e 00BF     		.align	2
ARM GAS  /tmp/ccYwoJb7.s 			page 32


 730              	.L39:
 731 0060 00000000 		.word	.LANCHOR5
 732              		.cfi_endproc
 733              	.LFE253:
 735              		.section	.text.MegaBotInit,"ax",%progbits
 736              		.align	1
 737              		.global	MegaBotInit
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	MegaBotInit:
 744              	.LVL39:
 745              	.LFB252:
 621:Core/Src/main.c ****   // Configure Each of the joints
 746              		.loc 1 621 44 is_stmt 1 view -0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 621:Core/Src/main.c ****   // Configure Each of the joints
 750              		.loc 1 621 44 is_stmt 0 view .LVU192
 751 0000 08B5     		push	{r3, lr}
 752              		.cfi_def_cfa_offset 8
 753              		.cfi_offset 3, -8
 754              		.cfi_offset 14, -4
 623:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 755              		.loc 1 623 3 is_stmt 1 view .LVU193
 623:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 756              		.loc 1 623 26 is_stmt 0 view .LVU194
 757 0002 0022     		movs	r2, #0
 758 0004 0270     		strb	r2, [r0]
 624:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 759              		.loc 1 624 3 is_stmt 1 view .LVU195
 624:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 760              		.loc 1 624 26 is_stmt 0 view .LVU196
 761 0006 4280     		strh	r2, [r0, #2]	@ movhi
 625:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 762              		.loc 1 625 3 is_stmt 1 view .LVU197
 625:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 763              		.loc 1 625 26 is_stmt 0 view .LVU198
 764 0008 B421     		movs	r1, #180
 765 000a 8180     		strh	r1, [r0, #4]	@ movhi
 626:Core/Src/main.c **** 
 766              		.loc 1 626 3 is_stmt 1 view .LVU199
 626:Core/Src/main.c **** 
 767              		.loc 1 626 32 is_stmt 0 view .LVU200
 768 000c 4FF05A0C 		mov	ip, #90
 769 0010 A0F806C0 		strh	ip, [r0, #6]	@ movhi
 628:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 770              		.loc 1 628 3 is_stmt 1 view .LVU201
 628:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 771              		.loc 1 628 30 is_stmt 0 view .LVU202
 772 0014 4FF0010E 		mov	lr, #1
 773 0018 80F808E0 		strb	lr, [r0, #8]
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 774              		.loc 1 629 3 is_stmt 1 view .LVU203
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
ARM GAS  /tmp/ccYwoJb7.s 			page 33


 775              		.loc 1 629 30 is_stmt 0 view .LVU204
 776 001c 4281     		strh	r2, [r0, #10]	@ movhi
 630:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 777              		.loc 1 630 3 is_stmt 1 view .LVU205
 630:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 778              		.loc 1 630 30 is_stmt 0 view .LVU206
 779 001e 8181     		strh	r1, [r0, #12]	@ movhi
 631:Core/Src/main.c **** 
 780              		.loc 1 631 3 is_stmt 1 view .LVU207
 631:Core/Src/main.c **** 
 781              		.loc 1 631 36 is_stmt 0 view .LVU208
 782 0020 C281     		strh	r2, [r0, #14]	@ movhi
 633:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 783              		.loc 1 633 3 is_stmt 1 view .LVU209
 633:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 784              		.loc 1 633 27 is_stmt 0 view .LVU210
 785 0022 4FF0020E 		mov	lr, #2
 786 0026 80F810E0 		strb	lr, [r0, #16]
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 787              		.loc 1 634 3 is_stmt 1 view .LVU211
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 788              		.loc 1 634 27 is_stmt 0 view .LVU212
 789 002a 4FF0320E 		mov	lr, #50
 790 002e A0F812E0 		strh	lr, [r0, #18]	@ movhi
 635:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 791              		.loc 1 635 3 is_stmt 1 view .LVU213
 635:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 792              		.loc 1 635 27 is_stmt 0 view .LVU214
 793 0032 8182     		strh	r1, [r0, #20]	@ movhi
 636:Core/Src/main.c **** 
 794              		.loc 1 636 3 is_stmt 1 view .LVU215
 636:Core/Src/main.c **** 
 795              		.loc 1 636 33 is_stmt 0 view .LVU216
 796 0034 C182     		strh	r1, [r0, #22]	@ movhi
 638:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 797              		.loc 1 638 3 is_stmt 1 view .LVU217
 638:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 798              		.loc 1 638 27 is_stmt 0 view .LVU218
 799 0036 4FF0030E 		mov	lr, #3
 800 003a 80F818E0 		strb	lr, [r0, #24]
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 801              		.loc 1 639 3 is_stmt 1 view .LVU219
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 802              		.loc 1 639 27 is_stmt 0 view .LVU220
 803 003e 4283     		strh	r2, [r0, #26]	@ movhi
 640:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 804              		.loc 1 640 3 is_stmt 1 view .LVU221
 640:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 805              		.loc 1 640 27 is_stmt 0 view .LVU222
 806 0040 8183     		strh	r1, [r0, #28]	@ movhi
 641:Core/Src/main.c **** 
 807              		.loc 1 641 3 is_stmt 1 view .LVU223
 641:Core/Src/main.c **** 
 808              		.loc 1 641 33 is_stmt 0 view .LVU224
 809 0042 A0F81EC0 		strh	ip, [r0, #30]	@ movhi
 643:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 810              		.loc 1 643 3 is_stmt 1 view .LVU225
ARM GAS  /tmp/ccYwoJb7.s 			page 34


 643:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 811              		.loc 1 643 29 is_stmt 0 view .LVU226
 812 0046 0421     		movs	r1, #4
 813 0048 80F82010 		strb	r1, [r0, #32]
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 814              		.loc 1 644 3 is_stmt 1 view .LVU227
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 815              		.loc 1 644 29 is_stmt 0 view .LVU228
 816 004c 4284     		strh	r2, [r0, #34]	@ movhi
 645:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 817              		.loc 1 645 3 is_stmt 1 view .LVU229
 645:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 818              		.loc 1 645 29 is_stmt 0 view .LVU230
 819 004e 4621     		movs	r1, #70
 820 0050 8184     		strh	r1, [r0, #36]	@ movhi
 646:Core/Src/main.c **** 
 821              		.loc 1 646 3 is_stmt 1 view .LVU231
 646:Core/Src/main.c **** 
 822              		.loc 1 646 35 is_stmt 0 view .LVU232
 823 0052 C284     		strh	r2, [r0, #38]	@ movhi
 648:Core/Src/main.c **** }
 824              		.loc 1 648 3 is_stmt 1 view .LVU233
 825 0054 FFF7FEFF 		bl	ServoDriverInit
 826              	.LVL40:
 649:Core/Src/main.c **** 
 827              		.loc 1 649 1 is_stmt 0 view .LVU234
 828 0058 08BD     		pop	{r3, pc}
 829              		.cfi_endproc
 830              	.LFE252:
 832              		.section	.text.QPotDataUpdate,"ax",%progbits
 833              		.align	1
 834              		.global	QPotDataUpdate
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu fpv4-sp-d16
 840              	QPotDataUpdate:
 841              	.LVL41:
 842              	.LFB254:
 661:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 843              		.loc 1 661 111 is_stmt 1 view -0
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 0
 846              		@ frame_needed = 0, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 848              		.loc 1 662 3 view .LVU236
 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 849              		.loc 1 662 20 is_stmt 0 view .LVU237
 850 0000 1368     		ldr	r3, [r2]
 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 851              		.loc 1 662 30 view .LVU238
 852 0002 0A33     		adds	r3, r3, #10
 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 853              		.loc 1 662 5 view .LVU239
 854 0004 8342     		cmp	r3, r0
 855 0006 03D3     		bcc	.L44
ARM GAS  /tmp/ccYwoJb7.s 			page 35


 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 856              		.loc 1 662 52 discriminator 1 view .LVU240
 857 0008 1368     		ldr	r3, [r2]
 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 858              		.loc 1 662 62 discriminator 1 view .LVU241
 859 000a 0A3B     		subs	r3, r3, #10
 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 860              		.loc 1 662 35 discriminator 1 view .LVU242
 861 000c 8342     		cmp	r3, r0
 862 000e 0CD9     		bls	.L43
 863              	.L44:
 663:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 864              		.loc 1 663 5 is_stmt 1 view .LVU243
 663:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 865              		.loc 1 663 27 is_stmt 0 view .LVU244
 866 0010 8B68     		ldr	r3, [r1, #8]
 663:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 867              		.loc 1 663 7 view .LVU245
 868 0012 8342     		cmp	r3, r0
 869 0014 0AD2     		bcs	.L46
 664:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 870              		.loc 1 664 7 is_stmt 1 view .LVU246
 664:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 871              		.loc 1 664 24 is_stmt 0 view .LVU247
 872 0016 8B68     		ldr	r3, [r1, #8]
 664:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 873              		.loc 1 664 17 view .LVU248
 874 0018 1360     		str	r3, [r2]
 875              	.L47:
 670:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 876              		.loc 1 670 5 is_stmt 1 view .LVU249
 670:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 877              		.loc 1 670 13 is_stmt 0 view .LVU250
 878 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 670:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 879              		.loc 1 670 7 view .LVU251
 880 001c 2BB1     		cbz	r3, .L43
 671:Core/Src/main.c ****     }
 881              		.loc 1 671 7 is_stmt 1 view .LVU252
 671:Core/Src/main.c ****     }
 882              		.loc 1 671 24 is_stmt 0 view .LVU253
 883 001e 8B68     		ldr	r3, [r1, #8]
 671:Core/Src/main.c ****     }
 884              		.loc 1 671 35 view .LVU254
 885 0020 1068     		ldr	r0, [r2]
 886              	.LVL42:
 671:Core/Src/main.c ****     }
 887              		.loc 1 671 33 view .LVU255
 888 0022 1B1A     		subs	r3, r3, r0
 671:Core/Src/main.c ****     }
 889              		.loc 1 671 52 view .LVU256
 890 0024 4968     		ldr	r1, [r1, #4]
 891              	.LVL43:
 671:Core/Src/main.c ****     }
 892              		.loc 1 671 45 view .LVU257
 893 0026 0B44     		add	r3, r3, r1
 671:Core/Src/main.c ****     }
ARM GAS  /tmp/ccYwoJb7.s 			page 36


 894              		.loc 1 671 17 view .LVU258
 895 0028 1360     		str	r3, [r2]
 896              	.L43:
 674:Core/Src/main.c **** 
 897              		.loc 1 674 1 view .LVU259
 898 002a 7047     		bx	lr
 899              	.LVL44:
 900              	.L46:
 665:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 901              		.loc 1 665 11 is_stmt 1 view .LVU260
 665:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 902              		.loc 1 665 33 is_stmt 0 view .LVU261
 903 002c 4B68     		ldr	r3, [r1, #4]
 665:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 904              		.loc 1 665 13 view .LVU262
 905 002e 8342     		cmp	r3, r0
 906 0030 02D9     		bls	.L48
 666:Core/Src/main.c ****     }else{
 907              		.loc 1 666 7 is_stmt 1 view .LVU263
 666:Core/Src/main.c ****     }else{
 908              		.loc 1 666 24 is_stmt 0 view .LVU264
 909 0032 4B68     		ldr	r3, [r1, #4]
 666:Core/Src/main.c ****     }else{
 910              		.loc 1 666 17 view .LVU265
 911 0034 1360     		str	r3, [r2]
 912 0036 F0E7     		b	.L47
 913              	.L48:
 668:Core/Src/main.c ****     }
 914              		.loc 1 668 7 is_stmt 1 view .LVU266
 668:Core/Src/main.c ****     }
 915              		.loc 1 668 17 is_stmt 0 view .LVU267
 916 0038 1060     		str	r0, [r2]
 917 003a EEE7     		b	.L47
 918              		.cfi_endproc
 919              	.LFE254:
 921              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 922              		.align	1
 923              		.global	MiniBotInputsEntry
 924              		.syntax unified
 925              		.thumb
 926              		.thumb_func
 927              		.fpu fpv4-sp-d16
 929              	MiniBotInputsEntry:
 930              	.LVL45:
 931              	.LFB259:
 757:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 932              		.loc 1 757 1 is_stmt 1 view -0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 72
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 757:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 936              		.loc 1 757 1 is_stmt 0 view .LVU269
 937 0000 30B5     		push	{r4, r5, lr}
 938              		.cfi_def_cfa_offset 12
 939              		.cfi_offset 4, -12
 940              		.cfi_offset 5, -8
 941              		.cfi_offset 14, -4
ARM GAS  /tmp/ccYwoJb7.s 			page 37


 942 0002 93B0     		sub	sp, sp, #76
 943              		.cfi_def_cfa_offset 88
 760:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 944              		.loc 1 760 2 is_stmt 1 view .LVU270
 761:Core/Src/main.c **** 
 945              		.loc 1 761 2 view .LVU271
 946 0004 6846     		mov	r0, sp
 947              	.LVL46:
 761:Core/Src/main.c **** 
 948              		.loc 1 761 2 is_stmt 0 view .LVU272
 949 0006 FFF7FEFF 		bl	MiniBotInit
 950              	.LVL47:
 763:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 951              		.loc 1 763 3 is_stmt 1 view .LVU273
 763:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 952              		.loc 1 763 20 is_stmt 0 view .LVU274
 953 000a 2D4B     		ldr	r3, .L55
 954 000c 029A     		ldr	r2, [sp, #8]
 955 000e 9A60     		str	r2, [r3, #8]
 764:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 956              		.loc 1 764 3 is_stmt 1 view .LVU275
 764:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 957              		.loc 1 764 34 is_stmt 0 view .LVU276
 958 0010 019A     		ldr	r2, [sp, #4]
 764:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 959              		.loc 1 764 20 view .LVU277
 960 0012 5A60     		str	r2, [r3, #4]
 765:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 961              		.loc 1 765 3 is_stmt 1 view .LVU278
 765:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 962              		.loc 1 765 42 is_stmt 0 view .LVU279
 963 0014 069A     		ldr	r2, [sp, #24]
 765:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 964              		.loc 1 765 24 view .LVU280
 965 0016 5A61     		str	r2, [r3, #20]
 766:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 966              		.loc 1 766 3 is_stmt 1 view .LVU281
 766:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 967              		.loc 1 766 42 is_stmt 0 view .LVU282
 968 0018 059A     		ldr	r2, [sp, #20]
 766:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 969              		.loc 1 766 24 view .LVU283
 970 001a 1A61     		str	r2, [r3, #16]
 767:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 971              		.loc 1 767 3 is_stmt 1 view .LVU284
 767:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 972              		.loc 1 767 36 is_stmt 0 view .LVU285
 973 001c 0A9A     		ldr	r2, [sp, #40]
 767:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 974              		.loc 1 767 21 view .LVU286
 975 001e 1A62     		str	r2, [r3, #32]
 768:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 976              		.loc 1 768 3 is_stmt 1 view .LVU287
 768:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 977              		.loc 1 768 36 is_stmt 0 view .LVU288
 978 0020 099A     		ldr	r2, [sp, #36]
 768:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
ARM GAS  /tmp/ccYwoJb7.s 			page 38


 979              		.loc 1 768 21 view .LVU289
 980 0022 DA61     		str	r2, [r3, #28]
 769:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 981              		.loc 1 769 3 is_stmt 1 view .LVU290
 769:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 982              		.loc 1 769 36 is_stmt 0 view .LVU291
 983 0024 0E9A     		ldr	r2, [sp, #56]
 769:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 984              		.loc 1 769 21 view .LVU292
 985 0026 DA62     		str	r2, [r3, #44]
 770:Core/Src/main.c ****   
 986              		.loc 1 770 3 is_stmt 1 view .LVU293
 770:Core/Src/main.c ****   
 987              		.loc 1 770 36 is_stmt 0 view .LVU294
 988 0028 0D9A     		ldr	r2, [sp, #52]
 770:Core/Src/main.c ****   
 989              		.loc 1 770 21 view .LVU295
 990 002a 9A62     		str	r2, [r3, #40]
 991 002c 45E0     		b	.L53
 992              	.LVL48:
 993              	.L51:
 994              	.LBB8:
 777:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 995              		.loc 1 777 7 is_stmt 1 discriminator 3 view .LVU296
 996 002e 254D     		ldr	r5, .L55+4
 997 0030 2846     		mov	r0, r5
 998 0032 FFF7FEFF 		bl	HAL_ADC_Start
 999              	.LVL49:
 778:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 1000              		.loc 1 778 7 discriminator 3 view .LVU297
 1001 0036 0121     		movs	r1, #1
 1002 0038 2846     		mov	r0, r5
 1003 003a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1004              	.LVL50:
 779:Core/Src/main.c ****     }
 1005              		.loc 1 779 7 discriminator 3 view .LVU298
 779:Core/Src/main.c ****     }
 1006              		.loc 1 779 24 is_stmt 0 discriminator 3 view .LVU299
 1007 003e 2846     		mov	r0, r5
 1008 0040 FFF7FEFF 		bl	HAL_ADC_GetValue
 1009              	.LVL51:
 779:Core/Src/main.c ****     }
 1010              		.loc 1 779 22 discriminator 3 view .LVU300
 1011 0044 204B     		ldr	r3, .L55+8
 1012 0046 43F82400 		str	r0, [r3, r4, lsl #2]
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1013              		.loc 1 776 27 is_stmt 1 discriminator 3 view .LVU301
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1014              		.loc 1 776 28 is_stmt 0 discriminator 3 view .LVU302
 1015 004a 0134     		adds	r4, r4, #1
 1016              	.LVL52:
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1017              		.loc 1 776 28 discriminator 3 view .LVU303
 1018 004c E4B2     		uxtb	r4, r4
 1019              	.LVL53:
 1020              	.L50:
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
ARM GAS  /tmp/ccYwoJb7.s 			page 39


 1021              		.loc 1 776 22 is_stmt 1 discriminator 1 view .LVU304
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1022              		.loc 1 776 5 is_stmt 0 discriminator 1 view .LVU305
 1023 004e 032C     		cmp	r4, #3
 1024 0050 EDD9     		bls	.L51
 1025              	.LBE8:
 781:Core/Src/main.c **** 
 1026              		.loc 1 781 5 is_stmt 1 view .LVU306
 1027 0052 1C48     		ldr	r0, .L55+4
 1028 0054 FFF7FEFF 		bl	HAL_ADC_Stop
 1029              	.LVL54:
 783:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1030              		.loc 1 783 5 view .LVU307
 1031 0058 194C     		ldr	r4, .L55
 1032              	.LVL55:
 783:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1033              		.loc 1 783 5 is_stmt 0 view .LVU308
 1034 005a 1B4D     		ldr	r5, .L55+8
 1035 005c 2246     		mov	r2, r4
 1036 005e 6946     		mov	r1, sp
 1037 0060 2868     		ldr	r0, [r5]
 1038 0062 FFF7FEFF 		bl	QPotDataUpdate
 1039              	.LVL56:
 784:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 1040              		.loc 1 784 5 is_stmt 1 view .LVU309
 1041 0066 04F10C02 		add	r2, r4, #12
 1042 006a 04A9     		add	r1, sp, #16
 1043 006c 6868     		ldr	r0, [r5, #4]
 1044 006e FFF7FEFF 		bl	QPotDataUpdate
 1045              	.LVL57:
 785:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 1046              		.loc 1 785 5 view .LVU310
 1047 0072 04F11802 		add	r2, r4, #24
 1048 0076 08A9     		add	r1, sp, #32
 1049 0078 A868     		ldr	r0, [r5, #8]
 1050 007a FFF7FEFF 		bl	QPotDataUpdate
 1051              	.LVL58:
 786:Core/Src/main.c **** 
 1052              		.loc 1 786 5 view .LVU311
 1053 007e 04F12402 		add	r2, r4, #36
 1054 0082 0CA9     		add	r1, sp, #48
 1055 0084 E868     		ldr	r0, [r5, #12]
 1056 0086 FFF7FEFF 		bl	QPotDataUpdate
 1057              	.LVL59:
 788:Core/Src/main.c ****     
 1058              		.loc 1 788 5 view .LVU312
 788:Core/Src/main.c ****     
 1059              		.loc 1 788 35 is_stmt 0 view .LVU313
 1060 008a 4FF40071 		mov	r1, #512
 1061 008e 0F48     		ldr	r0, .L55+12
 1062 0090 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1063              	.LVL60:
 788:Core/Src/main.c ****     
 1064              		.loc 1 788 24 view .LVU314
 1065 0094 84F83000 		strb	r0, [r4, #48]
 790:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1066              		.loc 1 790 5 is_stmt 1 view .LVU315
ARM GAS  /tmp/ccYwoJb7.s 			page 40


 790:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1067              		.loc 1 790 32 is_stmt 0 view .LVU316
 1068 0098 0D4B     		ldr	r3, .L55+16
 1069 009a 1868     		ldr	r0, [r3]
 790:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1070              		.loc 1 790 7 view .LVU317
 1071 009c 50B1     		cbz	r0, .L52
 791:Core/Src/main.c ****         // failed to post message
 1072              		.loc 1 791 7 is_stmt 1 view .LVU318
 791:Core/Src/main.c ****         // failed to post message
 1073              		.loc 1 791 10 is_stmt 0 view .LVU319
 1074 009e 0023     		movs	r3, #0
 1075 00a0 4FF0FF32 		mov	r2, #-1
 1076 00a4 2146     		mov	r1, r4
 1077 00a6 FFF7FEFF 		bl	xQueueGenericSend
 1078              	.LVL61:
 791:Core/Src/main.c ****         // failed to post message
 1079              		.loc 1 791 9 view .LVU320
 1080 00aa 0128     		cmp	r0, #1
 1081 00ac 02D0     		beq	.L52
 793:Core/Src/main.c ****       }
 1082              		.loc 1 793 9 is_stmt 1 view .LVU321
 793:Core/Src/main.c ****       }
 1083              		.loc 1 793 33 is_stmt 0 view .LVU322
 1084 00ae 094B     		ldr	r3, .L55+20
 1085 00b0 0122     		movs	r2, #1
 1086 00b2 1A70     		strb	r2, [r3]
 1087              	.L52:
 798:Core/Src/main.c **** 	}
 1088              		.loc 1 798 5 is_stmt 1 view .LVU323
 1089 00b4 0120     		movs	r0, #1
 1090 00b6 FFF7FEFF 		bl	osDelay
 1091              	.LVL62:
 774:Core/Src/main.c **** 	{
 1092              		.loc 1 774 7 view .LVU324
 1093              	.L53:
 774:Core/Src/main.c **** 	{
 1094              		.loc 1 774 2 view .LVU325
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1095              		.loc 1 776 5 view .LVU326
 1096              	.LBB9:
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1097              		.loc 1 776 9 view .LVU327
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1098              		.loc 1 776 17 is_stmt 0 view .LVU328
 1099 00ba 0024     		movs	r4, #0
 776:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1100              		.loc 1 776 5 view .LVU329
 1101 00bc C7E7     		b	.L50
 1102              	.L56:
 1103 00be 00BF     		.align	2
 1104              	.L55:
 1105 00c0 00000000 		.word	.LANCHOR6
 1106 00c4 00000000 		.word	.LANCHOR7
 1107 00c8 00000000 		.word	.LANCHOR8
 1108 00cc 00000240 		.word	1073872896
 1109 00d0 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/ccYwoJb7.s 			page 41


 1110 00d4 00000000 		.word	.LANCHOR9
 1111              	.LBE9:
 1112              		.cfi_endproc
 1113              	.LFE259:
 1115              		.section	.text.MAP,"ax",%progbits
 1116              		.align	1
 1117              		.global	MAP
 1118              		.syntax unified
 1119              		.thumb
 1120              		.thumb_func
 1121              		.fpu fpv4-sp-d16
 1123              	MAP:
 1124              	.LVL63:
 1125              	.LFB256:
 702:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 1126              		.loc 1 702 1 is_stmt 1 view -0
 1127              		.cfi_startproc
 1128              		@ args = 4, pretend = 0, frame = 0
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 703:Core/Src/main.c **** }
 1131              		.loc 1 703 5 view .LVU331
 703:Core/Src/main.c **** }
 1132              		.loc 1 703 24 is_stmt 0 view .LVU332
 1133 0000 A0EB010C 		sub	ip, r0, r1
 703:Core/Src/main.c **** }
 1134              		.loc 1 703 51 view .LVU333
 1135 0004 0098     		ldr	r0, [sp]
 1136              	.LVL64:
 703:Core/Src/main.c **** }
 1137              		.loc 1 703 51 view .LVU334
 1138 0006 C01A     		subs	r0, r0, r3
 703:Core/Src/main.c **** }
 1139              		.loc 1 703 37 view .LVU335
 1140 0008 00FB0CFC 		mul	ip, r0, ip
 703:Core/Src/main.c **** }
 1141              		.loc 1 703 79 view .LVU336
 1142 000c 511A     		subs	r1, r2, r1
 1143              	.LVL65:
 703:Core/Src/main.c **** }
 1144              		.loc 1 703 66 view .LVU337
 1145 000e BCFBF1FC 		udiv	ip, ip, r1
 704:Core/Src/main.c **** 
 1146              		.loc 1 704 1 view .LVU338
 1147 0012 0CEB0300 		add	r0, ip, r3
 1148 0016 7047     		bx	lr
 1149              		.cfi_endproc
 1150              	.LFE256:
 1152              		.section	.text.MoveServo,"ax",%progbits
 1153              		.align	1
 1154              		.global	MoveServo
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1158              		.fpu fpv4-sp-d16
 1160              	MoveServo:
 1161              	.LVL66:
ARM GAS  /tmp/ccYwoJb7.s 			page 42


 1162              	.LFB255:
 676:Core/Src/main.c ****   // MAP each of the angles
 1163              		.loc 1 676 75 is_stmt 1 view -0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 0
 1166              		@ frame_needed = 0, uses_anonymous_args = 0
 676:Core/Src/main.c ****   // MAP each of the angles
 1167              		.loc 1 676 75 is_stmt 0 view .LVU340
 1168 0000 70B5     		push	{r4, r5, r6, lr}
 1169              		.cfi_def_cfa_offset 16
 1170              		.cfi_offset 4, -16
 1171              		.cfi_offset 5, -12
 1172              		.cfi_offset 6, -8
 1173              		.cfi_offset 14, -4
 1174 0002 82B0     		sub	sp, sp, #8
 1175              		.cfi_def_cfa_offset 24
 1176 0004 0446     		mov	r4, r0
 1177 0006 0D46     		mov	r5, r1
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1178              		.loc 1 681 3 is_stmt 1 view .LVU341
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1179              		.loc 1 681 25 is_stmt 0 view .LVU342
 1180 0008 0868     		ldr	r0, [r1]
 1181              	.LVL67:
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1182              		.loc 1 681 25 view .LVU343
 1183 000a 4968     		ldr	r1, [r1, #4]
 1184              	.LVL68:
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1185              		.loc 1 681 25 view .LVU344
 1186 000c AA68     		ldr	r2, [r5, #8]
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1187              		.loc 1 681 131 view .LVU345
 1188 000e A388     		ldrh	r3, [r4, #4]
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1189              		.loc 1 681 25 view .LVU346
 1190 0010 0093     		str	r3, [sp]
 1191 0012 6388     		ldrh	r3, [r4, #2]
 1192 0014 FFF7FEFF 		bl	MAP
 1193              	.LVL69:
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1194              		.loc 1 681 23 view .LVU347
 1195 0018 80B2     		uxth	r0, r0
 1196 001a 2A4E     		ldr	r6, .L62
 1197 001c 3080     		strh	r0, [r6]	@ movhi
 682:Core/Src/main.c ****   // Shoulder
 1198              		.loc 1 682 3 is_stmt 1 view .LVU348
 1199 001e 07EE900A 		vmov	s15, r0	@ int
 1200 0022 B8EE670A 		vcvt.f32.u32	s0, s15
 1201 0026 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1202 0028 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1203              	.LVL70:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1204              		.loc 1 684 3 view .LVU349
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1205              		.loc 1 684 25 is_stmt 0 view .LVU350
 1206 002c E868     		ldr	r0, [r5, #12]
ARM GAS  /tmp/ccYwoJb7.s 			page 43


 1207 002e 2969     		ldr	r1, [r5, #16]
 1208 0030 6A69     		ldr	r2, [r5, #20]
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1209              		.loc 1 684 151 view .LVU351
 1210 0032 A389     		ldrh	r3, [r4, #12]
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1211              		.loc 1 684 25 view .LVU352
 1212 0034 0093     		str	r3, [sp]
 1213 0036 6389     		ldrh	r3, [r4, #10]
 1214 0038 FFF7FEFF 		bl	MAP
 1215              	.LVL71:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1216              		.loc 1 684 23 view .LVU353
 1217 003c 80B2     		uxth	r0, r0
 1218 003e 7080     		strh	r0, [r6, #2]	@ movhi
 685:Core/Src/main.c ****   // Elbow
 1219              		.loc 1 685 3 is_stmt 1 view .LVU354
 1220 0040 07EE900A 		vmov	s15, r0	@ int
 1221 0044 B8EE670A 		vcvt.f32.u32	s0, s15
 1222 0048 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 1223 004a FFF7FEFF 		bl	PCA9685_SetServoAngle
 1224              	.LVL72:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1225              		.loc 1 687 3 view .LVU355
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1226              		.loc 1 687 25 is_stmt 0 view .LVU356
 1227 004e A869     		ldr	r0, [r5, #24]
 1228 0050 E969     		ldr	r1, [r5, #28]
 1229 0052 2A6A     		ldr	r2, [r5, #32]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1230              		.loc 1 687 136 view .LVU357
 1231 0054 A38A     		ldrh	r3, [r4, #20]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1232              		.loc 1 687 25 view .LVU358
 1233 0056 0093     		str	r3, [sp]
 1234 0058 638A     		ldrh	r3, [r4, #18]
 1235 005a FFF7FEFF 		bl	MAP
 1236              	.LVL73:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1237              		.loc 1 687 23 view .LVU359
 1238 005e 80B2     		uxth	r0, r0
 1239 0060 B080     		strh	r0, [r6, #4]	@ movhi
 688:Core/Src/main.c ****   // Wrist
 1240              		.loc 1 688 3 is_stmt 1 view .LVU360
 1241 0062 07EE900A 		vmov	s15, r0	@ int
 1242 0066 B8EE670A 		vcvt.f32.u32	s0, s15
 1243 006a 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 1244 006c FFF7FEFF 		bl	PCA9685_SetServoAngle
 1245              	.LVL74:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1246              		.loc 1 690 3 view .LVU361
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1247              		.loc 1 690 25 is_stmt 0 view .LVU362
 1248 0070 686A     		ldr	r0, [r5, #36]
 1249 0072 A96A     		ldr	r1, [r5, #40]
 1250 0074 EA6A     		ldr	r2, [r5, #44]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
ARM GAS  /tmp/ccYwoJb7.s 			page 44


 1251              		.loc 1 690 136 view .LVU363
 1252 0076 A38B     		ldrh	r3, [r4, #28]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1253              		.loc 1 690 25 view .LVU364
 1254 0078 0093     		str	r3, [sp]
 1255 007a 638B     		ldrh	r3, [r4, #26]
 1256 007c FFF7FEFF 		bl	MAP
 1257              	.LVL75:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1258              		.loc 1 690 23 view .LVU365
 1259 0080 80B2     		uxth	r0, r0
 1260 0082 F080     		strh	r0, [r6, #6]	@ movhi
 691:Core/Src/main.c ****   // Gripper
 1261              		.loc 1 691 3 is_stmt 1 view .LVU366
 1262 0084 07EE900A 		vmov	s15, r0	@ int
 1263 0088 B8EE670A 		vcvt.f32.u32	s0, s15
 1264 008c 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 1265 008e FFF7FEFF 		bl	PCA9685_SetServoAngle
 1266              	.LVL76:
 693:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1267              		.loc 1 693 3 view .LVU367
 693:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1268              		.loc 1 693 13 is_stmt 0 view .LVU368
 1269 0092 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 693:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1270              		.loc 1 693 5 view .LVU369
 1271 0096 53B1     		cbz	r3, .L59
 694:Core/Src/main.c ****   }else{
 1272              		.loc 1 694 5 is_stmt 1 view .LVU370
 694:Core/Src/main.c ****   }else{
 1273              		.loc 1 694 70 is_stmt 0 view .LVU371
 1274 0098 638C     		ldrh	r3, [r4, #34]
 1275 009a 00EE103A 		vmov	s0, r3	@ int
 694:Core/Src/main.c ****   }else{
 1276              		.loc 1 694 5 view .LVU372
 1277 009e B8EE400A 		vcvt.f32.u32	s0, s0
 1278 00a2 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1279 00a6 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1280              	.LVL77:
 1281              	.L58:
 698:Core/Src/main.c **** 
 1282              		.loc 1 698 1 view .LVU373
 1283 00aa 02B0     		add	sp, sp, #8
 1284              		.cfi_remember_state
 1285              		.cfi_def_cfa_offset 16
 1286              		@ sp needed
 1287 00ac 70BD     		pop	{r4, r5, r6, pc}
 1288              	.LVL78:
 1289              	.L59:
 1290              		.cfi_restore_state
 696:Core/Src/main.c ****   }
 1291              		.loc 1 696 5 is_stmt 1 view .LVU374
 696:Core/Src/main.c ****   }
 1292              		.loc 1 696 70 is_stmt 0 view .LVU375
 1293 00ae A38C     		ldrh	r3, [r4, #36]
 1294 00b0 00EE103A 		vmov	s0, r3	@ int
 696:Core/Src/main.c ****   }
ARM GAS  /tmp/ccYwoJb7.s 			page 45


 1295              		.loc 1 696 5 view .LVU376
 1296 00b4 B8EE400A 		vcvt.f32.u32	s0, s0
 1297 00b8 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1298 00bc FFF7FEFF 		bl	PCA9685_SetServoAngle
 1299              	.LVL79:
 698:Core/Src/main.c **** 
 1300              		.loc 1 698 1 view .LVU377
 1301 00c0 F3E7     		b	.L58
 1302              	.L63:
 1303 00c2 00BF     		.align	2
 1304              	.L62:
 1305 00c4 00000000 		.word	.LANCHOR10
 1306              		.cfi_endproc
 1307              	.LFE255:
 1309              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 1310              		.align	1
 1311              		.global	MotorControlTaskEntry
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	MotorControlTaskEntry:
 1318              	.LVL80:
 1319              	.LFB262:
 885:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1320              		.loc 1 885 1 is_stmt 1 view -0
 1321              		.cfi_startproc
 1322              		@ Volatile: function does not return.
 1323              		@ args = 0, pretend = 0, frame = 40
 1324              		@ frame_needed = 0, uses_anonymous_args = 0
 885:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1325              		.loc 1 885 1 is_stmt 0 view .LVU379
 1326 0000 00B5     		push	{lr}
 1327              		.cfi_def_cfa_offset 4
 1328              		.cfi_offset 14, -4
 1329 0002 8BB0     		sub	sp, sp, #44
 1330              		.cfi_def_cfa_offset 48
 888:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 1331              		.loc 1 888 3 is_stmt 1 view .LVU380
 889:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1332              		.loc 1 889 3 view .LVU381
 1333 0004 6846     		mov	r0, sp
 1334              	.LVL81:
 889:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1335              		.loc 1 889 3 is_stmt 0 view .LVU382
 1336 0006 FFF7FEFF 		bl	MegaBotInit
 1337              	.LVL82:
 890:Core/Src/main.c **** 
 1338              		.loc 1 890 3 is_stmt 1 view .LVU383
 1339 000a 6846     		mov	r0, sp
 1340 000c FFF7FEFF 		bl	ServoDriverInit
 1341              	.LVL83:
 1342 0010 06E0     		b	.L66
 1343              	.L68:
 898:Core/Src/main.c ****     }
 1344              		.loc 1 898 7 view .LVU384
 1345 0012 0849     		ldr	r1, .L69
ARM GAS  /tmp/ccYwoJb7.s 			page 46


 1346 0014 6846     		mov	r0, sp
 1347 0016 FFF7FEFF 		bl	MoveServo
 1348              	.LVL84:
 1349              	.L65:
 903:Core/Src/main.c ****   }
 1350              		.loc 1 903 5 view .LVU385
 1351 001a 0120     		movs	r0, #1
 1352 001c FFF7FEFF 		bl	osDelay
 1353              	.LVL85:
 894:Core/Src/main.c ****   {
 1354              		.loc 1 894 8 view .LVU386
 1355              	.L66:
 894:Core/Src/main.c ****   {
 1356              		.loc 1 894 3 view .LVU387
 897:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1357              		.loc 1 897 5 view .LVU388
 897:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1358              		.loc 1 897 8 is_stmt 0 view .LVU389
 1359 0020 4FF0FF32 		mov	r2, #-1
 1360 0024 0349     		ldr	r1, .L69
 1361 0026 044B     		ldr	r3, .L69+4
 1362 0028 1868     		ldr	r0, [r3]
 1363 002a FFF7FEFF 		bl	xQueueReceive
 1364              	.LVL86:
 897:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1365              		.loc 1 897 7 view .LVU390
 1366 002e 0128     		cmp	r0, #1
 1367 0030 EFD0     		beq	.L68
 1368 0032 F2E7     		b	.L65
 1369              	.L70:
 1370              		.align	2
 1371              	.L69:
 1372 0034 00000000 		.word	.LANCHOR11
 1373 0038 00000000 		.word	.LANCHOR4
 1374              		.cfi_endproc
 1375              	.LFE262:
 1377              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1378              		.align	1
 1379              		.global	HAL_TIM_PeriodElapsedCallback
 1380              		.syntax unified
 1381              		.thumb
 1382              		.thumb_func
 1383              		.fpu fpv4-sp-d16
 1385              	HAL_TIM_PeriodElapsedCallback:
 1386              	.LVL87:
 1387              	.LFB264:
 922:Core/Src/main.c ****   }
 923:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 924:Core/Src/main.c **** }
 925:Core/Src/main.c **** 
 926:Core/Src/main.c **** /**
 927:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 928:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 929:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 930:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 931:Core/Src/main.c ****   * @param  htim : TIM handle
 932:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccYwoJb7.s 			page 47


 933:Core/Src/main.c ****   */
 934:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 935:Core/Src/main.c **** {
 1388              		.loc 1 935 1 is_stmt 1 view -0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 0
 1391              		@ frame_needed = 0, uses_anonymous_args = 0
 1392              		.loc 1 935 1 is_stmt 0 view .LVU392
 1393 0000 08B5     		push	{r3, lr}
 1394              		.cfi_def_cfa_offset 8
 1395              		.cfi_offset 3, -8
 1396              		.cfi_offset 14, -4
 936:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 937:Core/Src/main.c **** 
 938:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 939:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1397              		.loc 1 939 3 is_stmt 1 view .LVU393
 1398              		.loc 1 939 11 is_stmt 0 view .LVU394
 1399 0002 0268     		ldr	r2, [r0]
 1400              		.loc 1 939 6 view .LVU395
 1401 0004 034B     		ldr	r3, .L75
 1402 0006 9A42     		cmp	r2, r3
 1403 0008 00D0     		beq	.L74
 1404              	.LVL88:
 1405              	.L71:
 940:Core/Src/main.c ****     HAL_IncTick();
 941:Core/Src/main.c ****   }
 942:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 943:Core/Src/main.c **** 
 944:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 945:Core/Src/main.c **** }
 1406              		.loc 1 945 1 view .LVU396
 1407 000a 08BD     		pop	{r3, pc}
 1408              	.LVL89:
 1409              	.L74:
 940:Core/Src/main.c ****     HAL_IncTick();
 1410              		.loc 1 940 5 is_stmt 1 view .LVU397
 1411 000c FFF7FEFF 		bl	HAL_IncTick
 1412              	.LVL90:
 1413              		.loc 1 945 1 is_stmt 0 view .LVU398
 1414 0010 FBE7     		b	.L71
 1415              	.L76:
 1416 0012 00BF     		.align	2
 1417              	.L75:
 1418 0014 00100040 		.word	1073745920
 1419              		.cfi_endproc
 1420              	.LFE264:
 1422              		.section	.text.Error_Handler,"ax",%progbits
 1423              		.align	1
 1424              		.global	Error_Handler
 1425              		.syntax unified
 1426              		.thumb
 1427              		.thumb_func
 1428              		.fpu fpv4-sp-d16
 1430              	Error_Handler:
 1431              	.LFB265:
 946:Core/Src/main.c **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 48


 947:Core/Src/main.c **** /**
 948:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 949:Core/Src/main.c ****   * @retval None
 950:Core/Src/main.c ****   */
 951:Core/Src/main.c **** void Error_Handler(void)
 952:Core/Src/main.c **** {
 1432              		.loc 1 952 1 is_stmt 1 view -0
 1433              		.cfi_startproc
 1434              		@ Volatile: function does not return.
 1435              		@ args = 0, pretend = 0, frame = 0
 1436              		@ frame_needed = 0, uses_anonymous_args = 0
 1437              		@ link register save eliminated.
 953:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 954:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 955:Core/Src/main.c ****   __disable_irq();
 1438              		.loc 1 955 3 view .LVU400
 1439              	.LBB10:
 1440              	.LBI10:
 1441              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 49


  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccYwoJb7.s 			page 50


  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
ARM GAS  /tmp/ccYwoJb7.s 			page 51


 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
ARM GAS  /tmp/ccYwoJb7.s 			page 52


 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  /tmp/ccYwoJb7.s 			page 53


 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/ccYwoJb7.s 			page 54


 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
ARM GAS  /tmp/ccYwoJb7.s 			page 55


 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
ARM GAS  /tmp/ccYwoJb7.s 			page 56


 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccYwoJb7.s 			page 57


 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
ARM GAS  /tmp/ccYwoJb7.s 			page 58


 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
ARM GAS  /tmp/ccYwoJb7.s 			page 59


 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccYwoJb7.s 			page 60


 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
ARM GAS  /tmp/ccYwoJb7.s 			page 61


 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/ccYwoJb7.s 			page 62


 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 63


 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 64


 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccYwoJb7.s 			page 65


 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1442              		.loc 2 960 27 view .LVU401
 1443              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1444              		.loc 2 962 3 view .LVU402
 1445              		.syntax unified
 1446              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1447 0000 72B6     		cpsid i
 1448              	@ 0 "" 2
 1449              		.thumb
 1450              		.syntax unified
 1451              	.L78:
 1452              	.LBE11:
 1453              	.LBE10:
 956:Core/Src/main.c ****   while (1)
 1454              		.loc 1 956 3 discriminator 1 view .LVU403
 957:Core/Src/main.c ****   {
 958:Core/Src/main.c ****   }
 1455              		.loc 1 958 3 discriminator 1 view .LVU404
 956:Core/Src/main.c ****   while (1)
 1456              		.loc 1 956 9 discriminator 1 view .LVU405
 1457 0002 FEE7     		b	.L78
 1458              		.cfi_endproc
 1459              	.LFE265:
 1461              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1462              		.align	1
 1463              		.syntax unified
 1464              		.thumb
 1465              		.thumb_func
 1466              		.fpu fpv4-sp-d16
 1468              	MX_ADC1_Init:
 1469              	.LFB246:
 361:Core/Src/main.c **** 
 1470              		.loc 1 361 1 view -0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 16
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 1474 0000 00B5     		push	{lr}
 1475              		.cfi_def_cfa_offset 4
 1476              		.cfi_offset 14, -4
 1477 0002 85B0     		sub	sp, sp, #20
 1478              		.cfi_def_cfa_offset 24
 367:Core/Src/main.c **** 
 1479              		.loc 1 367 3 view .LVU407
 367:Core/Src/main.c **** 
 1480              		.loc 1 367 26 is_stmt 0 view .LVU408
 1481 0004 0023     		movs	r3, #0
ARM GAS  /tmp/ccYwoJb7.s 			page 66


 1482 0006 0093     		str	r3, [sp]
 1483 0008 0193     		str	r3, [sp, #4]
 1484 000a 0293     		str	r3, [sp, #8]
 1485 000c 0393     		str	r3, [sp, #12]
 375:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1486              		.loc 1 375 3 is_stmt 1 view .LVU409
 375:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1487              		.loc 1 375 18 is_stmt 0 view .LVU410
 1488 000e 2548     		ldr	r0, .L91
 1489 0010 254A     		ldr	r2, .L91+4
 1490 0012 0260     		str	r2, [r0]
 376:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1491              		.loc 1 376 3 is_stmt 1 view .LVU411
 376:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1492              		.loc 1 376 29 is_stmt 0 view .LVU412
 1493 0014 4FF48032 		mov	r2, #65536
 1494 0018 4260     		str	r2, [r0, #4]
 377:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1495              		.loc 1 377 3 is_stmt 1 view .LVU413
 377:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1496              		.loc 1 377 25 is_stmt 0 view .LVU414
 1497 001a 8360     		str	r3, [r0, #8]
 378:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1498              		.loc 1 378 3 is_stmt 1 view .LVU415
 378:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1499              		.loc 1 378 27 is_stmt 0 view .LVU416
 1500 001c 0122     		movs	r2, #1
 1501 001e 0261     		str	r2, [r0, #16]
 379:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1502              		.loc 1 379 3 is_stmt 1 view .LVU417
 379:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1503              		.loc 1 379 33 is_stmt 0 view .LVU418
 1504 0020 0376     		strb	r3, [r0, #24]
 380:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1505              		.loc 1 380 3 is_stmt 1 view .LVU419
 380:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1506              		.loc 1 380 36 is_stmt 0 view .LVU420
 1507 0022 80F82020 		strb	r2, [r0, #32]
 381:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1508              		.loc 1 381 3 is_stmt 1 view .LVU421
 381:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1509              		.loc 1 381 34 is_stmt 0 view .LVU422
 1510 0026 4262     		str	r2, [r0, #36]
 382:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1511              		.loc 1 382 3 is_stmt 1 view .LVU423
 382:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1512              		.loc 1 382 35 is_stmt 0 view .LVU424
 1513 0028 C362     		str	r3, [r0, #44]
 383:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1514              		.loc 1 383 3 is_stmt 1 view .LVU425
 383:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1515              		.loc 1 383 31 is_stmt 0 view .LVU426
 1516 002a 2049     		ldr	r1, .L91+8
 1517 002c 8162     		str	r1, [r0, #40]
 384:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1518              		.loc 1 384 3 is_stmt 1 view .LVU427
 384:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
ARM GAS  /tmp/ccYwoJb7.s 			page 67


 1519              		.loc 1 384 24 is_stmt 0 view .LVU428
 1520 002e C360     		str	r3, [r0, #12]
 385:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1521              		.loc 1 385 3 is_stmt 1 view .LVU429
 385:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1522              		.loc 1 385 30 is_stmt 0 view .LVU430
 1523 0030 0421     		movs	r1, #4
 1524 0032 C161     		str	r1, [r0, #28]
 386:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1525              		.loc 1 386 3 is_stmt 1 view .LVU431
 386:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1526              		.loc 1 386 36 is_stmt 0 view .LVU432
 1527 0034 80F83030 		strb	r3, [r0, #48]
 387:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1528              		.loc 1 387 3 is_stmt 1 view .LVU433
 387:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1529              		.loc 1 387 27 is_stmt 0 view .LVU434
 1530 0038 4261     		str	r2, [r0, #20]
 388:Core/Src/main.c ****   {
 1531              		.loc 1 388 3 is_stmt 1 view .LVU435
 388:Core/Src/main.c ****   {
 1532              		.loc 1 388 7 is_stmt 0 view .LVU436
 1533 003a FFF7FEFF 		bl	HAL_ADC_Init
 1534              	.LVL91:
 388:Core/Src/main.c ****   {
 1535              		.loc 1 388 6 view .LVU437
 1536 003e 38BB     		cbnz	r0, .L86
 395:Core/Src/main.c ****   sConfig.Rank = 1;
 1537              		.loc 1 395 3 is_stmt 1 view .LVU438
 395:Core/Src/main.c ****   sConfig.Rank = 1;
 1538              		.loc 1 395 19 is_stmt 0 view .LVU439
 1539 0040 0023     		movs	r3, #0
 1540 0042 0093     		str	r3, [sp]
 396:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1541              		.loc 1 396 3 is_stmt 1 view .LVU440
 396:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1542              		.loc 1 396 16 is_stmt 0 view .LVU441
 1543 0044 0122     		movs	r2, #1
 1544 0046 0192     		str	r2, [sp, #4]
 397:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1545              		.loc 1 397 3 is_stmt 1 view .LVU442
 397:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1546              		.loc 1 397 24 is_stmt 0 view .LVU443
 1547 0048 0293     		str	r3, [sp, #8]
 398:Core/Src/main.c ****   {
 1548              		.loc 1 398 3 is_stmt 1 view .LVU444
 398:Core/Src/main.c ****   {
 1549              		.loc 1 398 7 is_stmt 0 view .LVU445
 1550 004a 6946     		mov	r1, sp
 1551 004c 1548     		ldr	r0, .L91
 1552 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1553              	.LVL92:
 398:Core/Src/main.c ****   {
 1554              		.loc 1 398 6 view .LVU446
 1555 0052 F8B9     		cbnz	r0, .L87
 405:Core/Src/main.c ****   sConfig.Rank = 2;
 1556              		.loc 1 405 3 is_stmt 1 view .LVU447
ARM GAS  /tmp/ccYwoJb7.s 			page 68


 405:Core/Src/main.c ****   sConfig.Rank = 2;
 1557              		.loc 1 405 19 is_stmt 0 view .LVU448
 1558 0054 0123     		movs	r3, #1
 1559 0056 0093     		str	r3, [sp]
 406:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1560              		.loc 1 406 3 is_stmt 1 view .LVU449
 406:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1561              		.loc 1 406 16 is_stmt 0 view .LVU450
 1562 0058 0223     		movs	r3, #2
 1563 005a 0193     		str	r3, [sp, #4]
 407:Core/Src/main.c ****   {
 1564              		.loc 1 407 3 is_stmt 1 view .LVU451
 407:Core/Src/main.c ****   {
 1565              		.loc 1 407 7 is_stmt 0 view .LVU452
 1566 005c 6946     		mov	r1, sp
 1567 005e 1148     		ldr	r0, .L91
 1568 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1569              	.LVL93:
 407:Core/Src/main.c ****   {
 1570              		.loc 1 407 6 view .LVU453
 1571 0064 C0B9     		cbnz	r0, .L88
 414:Core/Src/main.c ****   sConfig.Rank = 3;
 1572              		.loc 1 414 3 is_stmt 1 view .LVU454
 414:Core/Src/main.c ****   sConfig.Rank = 3;
 1573              		.loc 1 414 19 is_stmt 0 view .LVU455
 1574 0066 0423     		movs	r3, #4
 1575 0068 0093     		str	r3, [sp]
 415:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1576              		.loc 1 415 3 is_stmt 1 view .LVU456
 415:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1577              		.loc 1 415 16 is_stmt 0 view .LVU457
 1578 006a 0323     		movs	r3, #3
 1579 006c 0193     		str	r3, [sp, #4]
 416:Core/Src/main.c ****   {
 1580              		.loc 1 416 3 is_stmt 1 view .LVU458
 416:Core/Src/main.c ****   {
 1581              		.loc 1 416 7 is_stmt 0 view .LVU459
 1582 006e 6946     		mov	r1, sp
 1583 0070 0C48     		ldr	r0, .L91
 1584 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1585              	.LVL94:
 416:Core/Src/main.c ****   {
 1586              		.loc 1 416 6 view .LVU460
 1587 0076 88B9     		cbnz	r0, .L89
 423:Core/Src/main.c ****   sConfig.Rank = 4;
 1588              		.loc 1 423 3 is_stmt 1 view .LVU461
 423:Core/Src/main.c ****   sConfig.Rank = 4;
 1589              		.loc 1 423 19 is_stmt 0 view .LVU462
 1590 0078 0823     		movs	r3, #8
 1591 007a 0093     		str	r3, [sp]
 424:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1592              		.loc 1 424 3 is_stmt 1 view .LVU463
 424:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1593              		.loc 1 424 16 is_stmt 0 view .LVU464
 1594 007c 0423     		movs	r3, #4
 1595 007e 0193     		str	r3, [sp, #4]
 425:Core/Src/main.c ****   {
ARM GAS  /tmp/ccYwoJb7.s 			page 69


 1596              		.loc 1 425 3 is_stmt 1 view .LVU465
 425:Core/Src/main.c ****   {
 1597              		.loc 1 425 7 is_stmt 0 view .LVU466
 1598 0080 6946     		mov	r1, sp
 1599 0082 0848     		ldr	r0, .L91
 1600 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1601              	.LVL95:
 425:Core/Src/main.c ****   {
 1602              		.loc 1 425 6 view .LVU467
 1603 0088 50B9     		cbnz	r0, .L90
 433:Core/Src/main.c **** 
 1604              		.loc 1 433 1 view .LVU468
 1605 008a 05B0     		add	sp, sp, #20
 1606              		.cfi_remember_state
 1607              		.cfi_def_cfa_offset 4
 1608              		@ sp needed
 1609 008c 5DF804FB 		ldr	pc, [sp], #4
 1610              	.L86:
 1611              		.cfi_restore_state
 390:Core/Src/main.c ****   }
 1612              		.loc 1 390 5 is_stmt 1 view .LVU469
 1613 0090 FFF7FEFF 		bl	Error_Handler
 1614              	.LVL96:
 1615              	.L87:
 400:Core/Src/main.c ****   }
 1616              		.loc 1 400 5 view .LVU470
 1617 0094 FFF7FEFF 		bl	Error_Handler
 1618              	.LVL97:
 1619              	.L88:
 409:Core/Src/main.c ****   }
 1620              		.loc 1 409 5 view .LVU471
 1621 0098 FFF7FEFF 		bl	Error_Handler
 1622              	.LVL98:
 1623              	.L89:
 418:Core/Src/main.c ****   }
 1624              		.loc 1 418 5 view .LVU472
 1625 009c FFF7FEFF 		bl	Error_Handler
 1626              	.LVL99:
 1627              	.L90:
 427:Core/Src/main.c ****   }
 1628              		.loc 1 427 5 view .LVU473
 1629 00a0 FFF7FEFF 		bl	Error_Handler
 1630              	.LVL100:
 1631              	.L92:
 1632              		.align	2
 1633              	.L91:
 1634 00a4 00000000 		.word	.LANCHOR7
 1635 00a8 00200140 		.word	1073815552
 1636 00ac 0100000F 		.word	251658241
 1637              		.cfi_endproc
 1638              	.LFE246:
 1640              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1641              		.align	1
 1642              		.syntax unified
 1643              		.thumb
 1644              		.thumb_func
 1645              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccYwoJb7.s 			page 70


 1647              	MX_I2C1_Init:
 1648              	.LFB247:
 441:Core/Src/main.c **** 
 1649              		.loc 1 441 1 view -0
 1650              		.cfi_startproc
 1651              		@ args = 0, pretend = 0, frame = 0
 1652              		@ frame_needed = 0, uses_anonymous_args = 0
 1653 0000 08B5     		push	{r3, lr}
 1654              		.cfi_def_cfa_offset 8
 1655              		.cfi_offset 3, -8
 1656              		.cfi_offset 14, -4
 450:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1657              		.loc 1 450 3 view .LVU475
 450:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1658              		.loc 1 450 18 is_stmt 0 view .LVU476
 1659 0002 0A48     		ldr	r0, .L97
 1660 0004 0A4B     		ldr	r3, .L97+4
 1661 0006 0360     		str	r3, [r0]
 451:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1662              		.loc 1 451 3 is_stmt 1 view .LVU477
 451:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1663              		.loc 1 451 25 is_stmt 0 view .LVU478
 1664 0008 0A4B     		ldr	r3, .L97+8
 1665 000a 4360     		str	r3, [r0, #4]
 452:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1666              		.loc 1 452 3 is_stmt 1 view .LVU479
 452:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1667              		.loc 1 452 24 is_stmt 0 view .LVU480
 1668 000c 0023     		movs	r3, #0
 1669 000e 8360     		str	r3, [r0, #8]
 453:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1670              		.loc 1 453 3 is_stmt 1 view .LVU481
 453:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1671              		.loc 1 453 26 is_stmt 0 view .LVU482
 1672 0010 C360     		str	r3, [r0, #12]
 454:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1673              		.loc 1 454 3 is_stmt 1 view .LVU483
 454:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1674              		.loc 1 454 29 is_stmt 0 view .LVU484
 1675 0012 4FF48042 		mov	r2, #16384
 1676 0016 0261     		str	r2, [r0, #16]
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1677              		.loc 1 455 3 is_stmt 1 view .LVU485
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1678              		.loc 1 455 30 is_stmt 0 view .LVU486
 1679 0018 4361     		str	r3, [r0, #20]
 456:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1680              		.loc 1 456 3 is_stmt 1 view .LVU487
 456:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1681              		.loc 1 456 26 is_stmt 0 view .LVU488
 1682 001a 8361     		str	r3, [r0, #24]
 457:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1683              		.loc 1 457 3 is_stmt 1 view .LVU489
 457:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1684              		.loc 1 457 30 is_stmt 0 view .LVU490
 1685 001c C361     		str	r3, [r0, #28]
 458:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
ARM GAS  /tmp/ccYwoJb7.s 			page 71


 1686              		.loc 1 458 3 is_stmt 1 view .LVU491
 458:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1687              		.loc 1 458 28 is_stmt 0 view .LVU492
 1688 001e 0362     		str	r3, [r0, #32]
 459:Core/Src/main.c ****   {
 1689              		.loc 1 459 3 is_stmt 1 view .LVU493
 459:Core/Src/main.c ****   {
 1690              		.loc 1 459 7 is_stmt 0 view .LVU494
 1691 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1692              	.LVL101:
 459:Core/Src/main.c ****   {
 1693              		.loc 1 459 6 view .LVU495
 1694 0024 00B9     		cbnz	r0, .L96
 467:Core/Src/main.c **** 
 1695              		.loc 1 467 1 view .LVU496
 1696 0026 08BD     		pop	{r3, pc}
 1697              	.L96:
 461:Core/Src/main.c ****   }
 1698              		.loc 1 461 5 is_stmt 1 view .LVU497
 1699 0028 FFF7FEFF 		bl	Error_Handler
 1700              	.LVL102:
 1701              	.L98:
 1702              		.align	2
 1703              	.L97:
 1704 002c 00000000 		.word	.LANCHOR5
 1705 0030 00540040 		.word	1073763328
 1706 0034 A0860100 		.word	100000
 1707              		.cfi_endproc
 1708              	.LFE247:
 1710              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1711              		.align	1
 1712              		.syntax unified
 1713              		.thumb
 1714              		.thumb_func
 1715              		.fpu fpv4-sp-d16
 1717              	MX_USART2_UART_Init:
 1718              	.LFB249:
 509:Core/Src/main.c **** 
 1719              		.loc 1 509 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723 0000 08B5     		push	{r3, lr}
 1724              		.cfi_def_cfa_offset 8
 1725              		.cfi_offset 3, -8
 1726              		.cfi_offset 14, -4
 518:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1727              		.loc 1 518 3 view .LVU499
 518:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1728              		.loc 1 518 19 is_stmt 0 view .LVU500
 1729 0002 0A48     		ldr	r0, .L103
 1730 0004 0A4B     		ldr	r3, .L103+4
 1731 0006 0360     		str	r3, [r0]
 519:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1732              		.loc 1 519 3 is_stmt 1 view .LVU501
 519:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1733              		.loc 1 519 24 is_stmt 0 view .LVU502
ARM GAS  /tmp/ccYwoJb7.s 			page 72


 1734 0008 4FF4E133 		mov	r3, #115200
 1735 000c 4360     		str	r3, [r0, #4]
 520:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1736              		.loc 1 520 3 is_stmt 1 view .LVU503
 520:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1737              		.loc 1 520 26 is_stmt 0 view .LVU504
 1738 000e 0023     		movs	r3, #0
 1739 0010 8360     		str	r3, [r0, #8]
 521:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1740              		.loc 1 521 3 is_stmt 1 view .LVU505
 521:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1741              		.loc 1 521 24 is_stmt 0 view .LVU506
 1742 0012 C360     		str	r3, [r0, #12]
 522:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1743              		.loc 1 522 3 is_stmt 1 view .LVU507
 522:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1744              		.loc 1 522 22 is_stmt 0 view .LVU508
 1745 0014 0361     		str	r3, [r0, #16]
 523:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1746              		.loc 1 523 3 is_stmt 1 view .LVU509
 523:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1747              		.loc 1 523 20 is_stmt 0 view .LVU510
 1748 0016 0C22     		movs	r2, #12
 1749 0018 4261     		str	r2, [r0, #20]
 524:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1750              		.loc 1 524 3 is_stmt 1 view .LVU511
 524:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1751              		.loc 1 524 25 is_stmt 0 view .LVU512
 1752 001a 8361     		str	r3, [r0, #24]
 525:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1753              		.loc 1 525 3 is_stmt 1 view .LVU513
 525:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1754              		.loc 1 525 28 is_stmt 0 view .LVU514
 1755 001c C361     		str	r3, [r0, #28]
 526:Core/Src/main.c ****   {
 1756              		.loc 1 526 3 is_stmt 1 view .LVU515
 526:Core/Src/main.c ****   {
 1757              		.loc 1 526 7 is_stmt 0 view .LVU516
 1758 001e FFF7FEFF 		bl	HAL_UART_Init
 1759              	.LVL103:
 526:Core/Src/main.c ****   {
 1760              		.loc 1 526 6 view .LVU517
 1761 0022 00B9     		cbnz	r0, .L102
 534:Core/Src/main.c **** 
 1762              		.loc 1 534 1 view .LVU518
 1763 0024 08BD     		pop	{r3, pc}
 1764              	.L102:
 528:Core/Src/main.c ****   }
 1765              		.loc 1 528 5 is_stmt 1 view .LVU519
 1766 0026 FFF7FEFF 		bl	Error_Handler
 1767              	.LVL104:
 1768              	.L104:
 1769 002a 00BF     		.align	2
 1770              	.L103:
 1771 002c 00000000 		.word	.LANCHOR12
 1772 0030 00440040 		.word	1073759232
 1773              		.cfi_endproc
ARM GAS  /tmp/ccYwoJb7.s 			page 73


 1774              	.LFE249:
 1776              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1777              		.align	1
 1778              		.syntax unified
 1779              		.thumb
 1780              		.thumb_func
 1781              		.fpu fpv4-sp-d16
 1783              	MX_I2C2_Init:
 1784              	.LFB248:
 475:Core/Src/main.c **** 
 1785              		.loc 1 475 1 view -0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789 0000 08B5     		push	{r3, lr}
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 3, -8
 1792              		.cfi_offset 14, -4
 484:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1793              		.loc 1 484 3 view .LVU521
 484:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1794              		.loc 1 484 18 is_stmt 0 view .LVU522
 1795 0002 0A48     		ldr	r0, .L109
 1796 0004 0A4B     		ldr	r3, .L109+4
 1797 0006 0360     		str	r3, [r0]
 485:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1798              		.loc 1 485 3 is_stmt 1 view .LVU523
 485:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1799              		.loc 1 485 25 is_stmt 0 view .LVU524
 1800 0008 0A4B     		ldr	r3, .L109+8
 1801 000a 4360     		str	r3, [r0, #4]
 486:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1802              		.loc 1 486 3 is_stmt 1 view .LVU525
 486:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1803              		.loc 1 486 24 is_stmt 0 view .LVU526
 1804 000c 0023     		movs	r3, #0
 1805 000e 8360     		str	r3, [r0, #8]
 487:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1806              		.loc 1 487 3 is_stmt 1 view .LVU527
 487:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1807              		.loc 1 487 26 is_stmt 0 view .LVU528
 1808 0010 C360     		str	r3, [r0, #12]
 488:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1809              		.loc 1 488 3 is_stmt 1 view .LVU529
 488:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1810              		.loc 1 488 29 is_stmt 0 view .LVU530
 1811 0012 4FF48042 		mov	r2, #16384
 1812 0016 0261     		str	r2, [r0, #16]
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1813              		.loc 1 489 3 is_stmt 1 view .LVU531
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1814              		.loc 1 489 30 is_stmt 0 view .LVU532
 1815 0018 4361     		str	r3, [r0, #20]
 490:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1816              		.loc 1 490 3 is_stmt 1 view .LVU533
 490:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1817              		.loc 1 490 26 is_stmt 0 view .LVU534
ARM GAS  /tmp/ccYwoJb7.s 			page 74


 1818 001a 8361     		str	r3, [r0, #24]
 491:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1819              		.loc 1 491 3 is_stmt 1 view .LVU535
 491:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1820              		.loc 1 491 30 is_stmt 0 view .LVU536
 1821 001c C361     		str	r3, [r0, #28]
 492:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1822              		.loc 1 492 3 is_stmt 1 view .LVU537
 492:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1823              		.loc 1 492 28 is_stmt 0 view .LVU538
 1824 001e 0362     		str	r3, [r0, #32]
 493:Core/Src/main.c ****   {
 1825              		.loc 1 493 3 is_stmt 1 view .LVU539
 493:Core/Src/main.c ****   {
 1826              		.loc 1 493 7 is_stmt 0 view .LVU540
 1827 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1828              	.LVL105:
 493:Core/Src/main.c ****   {
 1829              		.loc 1 493 6 view .LVU541
 1830 0024 00B9     		cbnz	r0, .L108
 501:Core/Src/main.c **** 
 1831              		.loc 1 501 1 view .LVU542
 1832 0026 08BD     		pop	{r3, pc}
 1833              	.L108:
 495:Core/Src/main.c ****   }
 1834              		.loc 1 495 5 is_stmt 1 view .LVU543
 1835 0028 FFF7FEFF 		bl	Error_Handler
 1836              	.LVL106:
 1837              	.L110:
 1838              		.align	2
 1839              	.L109:
 1840 002c 00000000 		.word	.LANCHOR13
 1841 0030 00580040 		.word	1073764352
 1842 0034 A0860100 		.word	100000
 1843              		.cfi_endproc
 1844              	.LFE248:
 1846              		.section	.text.SystemClock_Config,"ax",%progbits
 1847              		.align	1
 1848              		.global	SystemClock_Config
 1849              		.syntax unified
 1850              		.thumb
 1851              		.thumb_func
 1852              		.fpu fpv4-sp-d16
 1854              	SystemClock_Config:
 1855              	.LFB245:
 313:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1856              		.loc 1 313 1 view -0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 80
 1859              		@ frame_needed = 0, uses_anonymous_args = 0
 1860 0000 00B5     		push	{lr}
 1861              		.cfi_def_cfa_offset 4
 1862              		.cfi_offset 14, -4
 1863 0002 95B0     		sub	sp, sp, #84
 1864              		.cfi_def_cfa_offset 88
 314:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1865              		.loc 1 314 3 view .LVU545
ARM GAS  /tmp/ccYwoJb7.s 			page 75


 314:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1866              		.loc 1 314 22 is_stmt 0 view .LVU546
 1867 0004 3422     		movs	r2, #52
 1868 0006 0021     		movs	r1, #0
 1869 0008 07A8     		add	r0, sp, #28
 1870 000a FFF7FEFF 		bl	memset
 1871              	.LVL107:
 315:Core/Src/main.c **** 
 1872              		.loc 1 315 3 is_stmt 1 view .LVU547
 315:Core/Src/main.c **** 
 1873              		.loc 1 315 22 is_stmt 0 view .LVU548
 1874 000e 0023     		movs	r3, #0
 1875 0010 0293     		str	r3, [sp, #8]
 1876 0012 0393     		str	r3, [sp, #12]
 1877 0014 0493     		str	r3, [sp, #16]
 1878 0016 0593     		str	r3, [sp, #20]
 1879 0018 0693     		str	r3, [sp, #24]
 319:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1880              		.loc 1 319 3 is_stmt 1 view .LVU549
 1881              	.LBB12:
 319:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1882              		.loc 1 319 3 view .LVU550
 1883 001a 0093     		str	r3, [sp]
 319:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1884              		.loc 1 319 3 view .LVU551
 1885 001c 1F4A     		ldr	r2, .L117
 1886 001e 116C     		ldr	r1, [r2, #64]
 1887 0020 41F08051 		orr	r1, r1, #268435456
 1888 0024 1164     		str	r1, [r2, #64]
 319:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1889              		.loc 1 319 3 view .LVU552
 1890 0026 126C     		ldr	r2, [r2, #64]
 1891 0028 02F08052 		and	r2, r2, #268435456
 1892 002c 0092     		str	r2, [sp]
 319:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1893              		.loc 1 319 3 view .LVU553
 1894 002e 009A     		ldr	r2, [sp]
 1895              	.LBE12:
 319:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1896              		.loc 1 319 3 view .LVU554
 320:Core/Src/main.c **** 
 1897              		.loc 1 320 3 view .LVU555
 1898              	.LBB13:
 320:Core/Src/main.c **** 
 1899              		.loc 1 320 3 view .LVU556
 1900 0030 0193     		str	r3, [sp, #4]
 320:Core/Src/main.c **** 
 1901              		.loc 1 320 3 view .LVU557
 1902 0032 1B49     		ldr	r1, .L117+4
 1903 0034 0A68     		ldr	r2, [r1]
 1904 0036 22F44042 		bic	r2, r2, #49152
 1905 003a 42F48042 		orr	r2, r2, #16384
 1906 003e 0A60     		str	r2, [r1]
 320:Core/Src/main.c **** 
 1907              		.loc 1 320 3 view .LVU558
 1908 0040 0A68     		ldr	r2, [r1]
 1909 0042 02F44042 		and	r2, r2, #49152
ARM GAS  /tmp/ccYwoJb7.s 			page 76


 1910 0046 0192     		str	r2, [sp, #4]
 320:Core/Src/main.c **** 
 1911              		.loc 1 320 3 view .LVU559
 1912 0048 019A     		ldr	r2, [sp, #4]
 1913              	.LBE13:
 320:Core/Src/main.c **** 
 1914              		.loc 1 320 3 view .LVU560
 325:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1915              		.loc 1 325 3 view .LVU561
 325:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1916              		.loc 1 325 36 is_stmt 0 view .LVU562
 1917 004a 0222     		movs	r2, #2
 1918 004c 0792     		str	r2, [sp, #28]
 326:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1919              		.loc 1 326 3 is_stmt 1 view .LVU563
 326:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1920              		.loc 1 326 30 is_stmt 0 view .LVU564
 1921 004e 0121     		movs	r1, #1
 1922 0050 0A91     		str	r1, [sp, #40]
 327:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1923              		.loc 1 327 3 is_stmt 1 view .LVU565
 327:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1924              		.loc 1 327 41 is_stmt 0 view .LVU566
 1925 0052 1021     		movs	r1, #16
 1926 0054 0B91     		str	r1, [sp, #44]
 328:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1927              		.loc 1 328 3 is_stmt 1 view .LVU567
 328:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1928              		.loc 1 328 34 is_stmt 0 view .LVU568
 1929 0056 0D92     		str	r2, [sp, #52]
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1930              		.loc 1 329 3 is_stmt 1 view .LVU569
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1931              		.loc 1 329 35 is_stmt 0 view .LVU570
 1932 0058 0E93     		str	r3, [sp, #56]
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1933              		.loc 1 330 3 is_stmt 1 view .LVU571
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1934              		.loc 1 330 30 is_stmt 0 view .LVU572
 1935 005a 0F91     		str	r1, [sp, #60]
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1936              		.loc 1 331 3 is_stmt 1 view .LVU573
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1937              		.loc 1 331 30 is_stmt 0 view .LVU574
 1938 005c 4FF4A873 		mov	r3, #336
 1939 0060 1093     		str	r3, [sp, #64]
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1940              		.loc 1 332 3 is_stmt 1 view .LVU575
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1941              		.loc 1 332 30 is_stmt 0 view .LVU576
 1942 0062 0423     		movs	r3, #4
 1943 0064 1193     		str	r3, [sp, #68]
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1944              		.loc 1 333 3 is_stmt 1 view .LVU577
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1945              		.loc 1 333 30 is_stmt 0 view .LVU578
 1946 0066 1292     		str	r2, [sp, #72]
ARM GAS  /tmp/ccYwoJb7.s 			page 77


 334:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1947              		.loc 1 334 3 is_stmt 1 view .LVU579
 334:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1948              		.loc 1 334 30 is_stmt 0 view .LVU580
 1949 0068 1392     		str	r2, [sp, #76]
 335:Core/Src/main.c ****   {
 1950              		.loc 1 335 3 is_stmt 1 view .LVU581
 335:Core/Src/main.c ****   {
 1951              		.loc 1 335 7 is_stmt 0 view .LVU582
 1952 006a 07A8     		add	r0, sp, #28
 1953 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1954              	.LVL108:
 335:Core/Src/main.c ****   {
 1955              		.loc 1 335 6 view .LVU583
 1956 0070 80B9     		cbnz	r0, .L115
 342:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1957              		.loc 1 342 3 is_stmt 1 view .LVU584
 342:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1958              		.loc 1 342 31 is_stmt 0 view .LVU585
 1959 0072 0F23     		movs	r3, #15
 1960 0074 0293     		str	r3, [sp, #8]
 344:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1961              		.loc 1 344 3 is_stmt 1 view .LVU586
 344:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1962              		.loc 1 344 34 is_stmt 0 view .LVU587
 1963 0076 0221     		movs	r1, #2
 1964 0078 0391     		str	r1, [sp, #12]
 345:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1965              		.loc 1 345 3 is_stmt 1 view .LVU588
 345:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1966              		.loc 1 345 35 is_stmt 0 view .LVU589
 1967 007a 0023     		movs	r3, #0
 1968 007c 0493     		str	r3, [sp, #16]
 346:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1969              		.loc 1 346 3 is_stmt 1 view .LVU590
 346:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1970              		.loc 1 346 36 is_stmt 0 view .LVU591
 1971 007e 4FF48052 		mov	r2, #4096
 1972 0082 0592     		str	r2, [sp, #20]
 347:Core/Src/main.c **** 
 1973              		.loc 1 347 3 is_stmt 1 view .LVU592
 347:Core/Src/main.c **** 
 1974              		.loc 1 347 36 is_stmt 0 view .LVU593
 1975 0084 0693     		str	r3, [sp, #24]
 349:Core/Src/main.c ****   {
 1976              		.loc 1 349 3 is_stmt 1 view .LVU594
 349:Core/Src/main.c ****   {
 1977              		.loc 1 349 7 is_stmt 0 view .LVU595
 1978 0086 02A8     		add	r0, sp, #8
 1979 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1980              	.LVL109:
 349:Core/Src/main.c ****   {
 1981              		.loc 1 349 6 view .LVU596
 1982 008c 20B9     		cbnz	r0, .L116
 353:Core/Src/main.c **** 
 1983              		.loc 1 353 1 view .LVU597
 1984 008e 15B0     		add	sp, sp, #84
ARM GAS  /tmp/ccYwoJb7.s 			page 78


 1985              		.cfi_remember_state
 1986              		.cfi_def_cfa_offset 4
 1987              		@ sp needed
 1988 0090 5DF804FB 		ldr	pc, [sp], #4
 1989              	.L115:
 1990              		.cfi_restore_state
 337:Core/Src/main.c ****   }
 1991              		.loc 1 337 5 is_stmt 1 view .LVU598
 1992 0094 FFF7FEFF 		bl	Error_Handler
 1993              	.LVL110:
 1994              	.L116:
 351:Core/Src/main.c ****   }
 1995              		.loc 1 351 5 view .LVU599
 1996 0098 FFF7FEFF 		bl	Error_Handler
 1997              	.LVL111:
 1998              	.L118:
 1999              		.align	2
 2000              	.L117:
 2001 009c 00380240 		.word	1073887232
 2002 00a0 00700040 		.word	1073770496
 2003              		.cfi_endproc
 2004              	.LFE245:
 2006              		.section	.text.main,"ax",%progbits
 2007              		.align	1
 2008              		.global	main
 2009              		.syntax unified
 2010              		.thumb
 2011              		.thumb_func
 2012              		.fpu fpv4-sp-d16
 2014              	main:
 2015              	.LFB244:
 193:Core/Src/main.c **** 
 2016              		.loc 1 193 1 view -0
 2017              		.cfi_startproc
 2018              		@ Volatile: function does not return.
 2019              		@ args = 0, pretend = 0, frame = 256
 2020              		@ frame_needed = 0, uses_anonymous_args = 0
 2021 0000 00B5     		push	{lr}
 2022              		.cfi_def_cfa_offset 4
 2023              		.cfi_offset 14, -4
 2024 0002 C1B0     		sub	sp, sp, #260
 2025              		.cfi_def_cfa_offset 264
 202:Core/Src/main.c **** 
 2026              		.loc 1 202 3 view .LVU601
 2027 0004 FFF7FEFF 		bl	HAL_Init
 2028              	.LVL112:
 209:Core/Src/main.c **** 
 2029              		.loc 1 209 3 view .LVU602
 2030 0008 FFF7FEFF 		bl	SystemClock_Config
 2031              	.LVL113:
 216:Core/Src/main.c ****   MX_ADC1_Init();
 2032              		.loc 1 216 3 view .LVU603
 2033 000c FFF7FEFF 		bl	MX_GPIO_Init
 2034              	.LVL114:
 217:Core/Src/main.c ****   MX_I2C1_Init();
 2035              		.loc 1 217 3 view .LVU604
 2036 0010 FFF7FEFF 		bl	MX_ADC1_Init
ARM GAS  /tmp/ccYwoJb7.s 			page 79


 2037              	.LVL115:
 218:Core/Src/main.c ****   MX_USART2_UART_Init();
 2038              		.loc 1 218 3 view .LVU605
 2039 0014 FFF7FEFF 		bl	MX_I2C1_Init
 2040              	.LVL116:
 219:Core/Src/main.c ****   MX_I2C2_Init();
 2041              		.loc 1 219 3 view .LVU606
 2042 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 2043              	.LVL117:
 220:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2044              		.loc 1 220 3 view .LVU607
 2045 001c FFF7FEFF 		bl	MX_I2C2_Init
 2046              	.LVL118:
 227:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 2047              		.loc 1 227 3 view .LVU608
 2048 0020 0025     		movs	r5, #0
 2049 0022 3E95     		str	r5, [sp, #248]
 2050 0024 3F95     		str	r5, [sp, #252]
 228:Core/Src/main.c **** 
 2051              		.loc 1 228 3 view .LVU609
 228:Core/Src/main.c **** 
 2052              		.loc 1 228 22 is_stmt 0 view .LVU610
 2053 0026 3EA8     		add	r0, sp, #248
 2054 0028 FFF7FEFF 		bl	osMutexCreate
 2055              	.LVL119:
 228:Core/Src/main.c **** 
 2056              		.loc 1 228 20 view .LVU611
 2057 002c 534B     		ldr	r3, .L122
 2058 002e 1860     		str	r0, [r3]
 244:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 2059              		.loc 1 244 3 is_stmt 1 view .LVU612
 2060 0030 534C     		ldr	r4, .L122+4
 2061 0032 0DF1E80C 		add	ip, sp, #232
 2062 0036 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2063 003a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 245:Core/Src/main.c **** 
 2064              		.loc 1 245 3 view .LVU613
 245:Core/Src/main.c **** 
 2065              		.loc 1 245 29 is_stmt 0 view .LVU614
 2066 003e 2946     		mov	r1, r5
 2067 0040 6046     		mov	r0, ip
 2068 0042 FFF7FEFF 		bl	osMessageCreate
 2069              	.LVL120:
 245:Core/Src/main.c **** 
 2070              		.loc 1 245 27 view .LVU615
 2071 0046 4F4B     		ldr	r3, .L122+8
 2072 0048 1860     		str	r0, [r3]
 248:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 2073              		.loc 1 248 3 is_stmt 1 view .LVU616
 2074 004a 0DF1D80C 		add	ip, sp, #216
 2075 004e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2076 0052 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 249:Core/Src/main.c **** 
 2077              		.loc 1 249 3 view .LVU617
 249:Core/Src/main.c **** 
 2078              		.loc 1 249 29 is_stmt 0 view .LVU618
 2079 0056 2946     		mov	r1, r5
ARM GAS  /tmp/ccYwoJb7.s 			page 80


 2080 0058 6046     		mov	r0, ip
 2081 005a FFF7FEFF 		bl	osMessageCreate
 2082              	.LVL121:
 249:Core/Src/main.c **** 
 2083              		.loc 1 249 27 view .LVU619
 2084 005e 4A4B     		ldr	r3, .L122+12
 2085 0060 1860     		str	r0, [r3]
 252:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 2086              		.loc 1 252 3 is_stmt 1 view .LVU620
 2087 0062 0DF1C80C 		add	ip, sp, #200
 2088 0066 04F11003 		add	r3, r4, #16
 2089 006a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2090 006c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 253:Core/Src/main.c **** 
 2091              		.loc 1 253 3 view .LVU621
 253:Core/Src/main.c **** 
 2092              		.loc 1 253 25 is_stmt 0 view .LVU622
 2093 0070 2946     		mov	r1, r5
 2094 0072 6046     		mov	r0, ip
 2095 0074 FFF7FEFF 		bl	osMessageCreate
 2096              	.LVL122:
 253:Core/Src/main.c **** 
 2097              		.loc 1 253 23 view .LVU623
 2098 0078 444B     		ldr	r3, .L122+16
 2099 007a 1860     		str	r0, [r3]
 261:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 2100              		.loc 1 261 3 is_stmt 1 view .LVU624
 2101 007c 0DF1AC0C 		add	ip, sp, #172
 2102 0080 04F1200E 		add	lr, r4, #32
 2103 0084 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2104 0088 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2105 008c 9EE80700 		ldm	lr, {r0, r1, r2}
 2106 0090 8CE80700 		stm	ip, {r0, r1, r2}
 262:Core/Src/main.c **** 
 2107              		.loc 1 262 3 view .LVU625
 262:Core/Src/main.c **** 
 2108              		.loc 1 262 23 is_stmt 0 view .LVU626
 2109 0094 2946     		mov	r1, r5
 2110 0096 2BA8     		add	r0, sp, #172
 2111 0098 FFF7FEFF 		bl	osThreadCreate
 2112              	.LVL123:
 262:Core/Src/main.c **** 
 2113              		.loc 1 262 21 view .LVU627
 2114 009c 3C4B     		ldr	r3, .L122+20
 2115 009e 1860     		str	r0, [r3]
 265:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 2116              		.loc 1 265 3 is_stmt 1 view .LVU628
 2117 00a0 0DF1900C 		add	ip, sp, #144
 2118 00a4 04F13C0E 		add	lr, r4, #60
 2119 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2120 00ac ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2121 00b0 9EE80700 		ldm	lr, {r0, r1, r2}
 2122 00b4 8CE80700 		stm	ip, {r0, r1, r2}
 266:Core/Src/main.c **** 
 2123              		.loc 1 266 3 view .LVU629
 266:Core/Src/main.c **** 
 2124              		.loc 1 266 24 is_stmt 0 view .LVU630
ARM GAS  /tmp/ccYwoJb7.s 			page 81


 2125 00b8 2946     		mov	r1, r5
 2126 00ba 24A8     		add	r0, sp, #144
 2127 00bc FFF7FEFF 		bl	osThreadCreate
 2128              	.LVL124:
 266:Core/Src/main.c **** 
 2129              		.loc 1 266 22 view .LVU631
 2130 00c0 344B     		ldr	r3, .L122+24
 2131 00c2 1860     		str	r0, [r3]
 269:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 2132              		.loc 1 269 3 is_stmt 1 view .LVU632
 2133 00c4 0DF1740C 		add	ip, sp, #116
 2134 00c8 04F1580E 		add	lr, r4, #88
 2135 00cc BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2136 00d0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2137 00d4 9EE80700 		ldm	lr, {r0, r1, r2}
 2138 00d8 8CE80700 		stm	ip, {r0, r1, r2}
 270:Core/Src/main.c **** 
 2139              		.loc 1 270 3 view .LVU633
 270:Core/Src/main.c **** 
 2140              		.loc 1 270 25 is_stmt 0 view .LVU634
 2141 00dc 2946     		mov	r1, r5
 2142 00de 1DA8     		add	r0, sp, #116
 2143 00e0 FFF7FEFF 		bl	osThreadCreate
 2144              	.LVL125:
 270:Core/Src/main.c **** 
 2145              		.loc 1 270 23 view .LVU635
 2146 00e4 2C4B     		ldr	r3, .L122+28
 2147 00e6 1860     		str	r0, [r3]
 273:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 2148              		.loc 1 273 3 is_stmt 1 view .LVU636
 2149 00e8 0DF1580C 		add	ip, sp, #88
 2150 00ec 04F1740E 		add	lr, r4, #116
 2151 00f0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2152 00f4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2153 00f8 9EE80700 		ldm	lr, {r0, r1, r2}
 2154 00fc 8CE80700 		stm	ip, {r0, r1, r2}
 274:Core/Src/main.c **** 
 2155              		.loc 1 274 3 view .LVU637
 274:Core/Src/main.c **** 
 2156              		.loc 1 274 26 is_stmt 0 view .LVU638
 2157 0100 2946     		mov	r1, r5
 2158 0102 16A8     		add	r0, sp, #88
 2159 0104 FFF7FEFF 		bl	osThreadCreate
 2160              	.LVL126:
 274:Core/Src/main.c **** 
 2161              		.loc 1 274 24 view .LVU639
 2162 0108 244B     		ldr	r3, .L122+32
 2163 010a 1860     		str	r0, [r3]
 277:Core/Src/main.c ****   EmergencyStopTaskHandle = osThreadCreate(osThread(EmergencyStopTask), NULL);
 2164              		.loc 1 277 3 is_stmt 1 view .LVU640
 2165 010c 0DF13C0C 		add	ip, sp, #60
 2166 0110 04F1900E 		add	lr, r4, #144
 2167 0114 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2168 0118 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2169 011c 9EE80700 		ldm	lr, {r0, r1, r2}
 2170 0120 8CE80700 		stm	ip, {r0, r1, r2}
 278:Core/Src/main.c **** 
ARM GAS  /tmp/ccYwoJb7.s 			page 82


 2171              		.loc 1 278 3 view .LVU641
 278:Core/Src/main.c **** 
 2172              		.loc 1 278 29 is_stmt 0 view .LVU642
 2173 0124 2946     		mov	r1, r5
 2174 0126 0FA8     		add	r0, sp, #60
 2175 0128 FFF7FEFF 		bl	osThreadCreate
 2176              	.LVL127:
 278:Core/Src/main.c **** 
 2177              		.loc 1 278 27 view .LVU643
 2178 012c 1C4B     		ldr	r3, .L122+36
 2179 012e 1860     		str	r0, [r3]
 281:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 2180              		.loc 1 281 3 is_stmt 1 view .LVU644
 2181 0130 0DF1200C 		add	ip, sp, #32
 2182 0134 04F1AC0E 		add	lr, r4, #172
 2183 0138 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2184 013c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2185 0140 9EE80700 		ldm	lr, {r0, r1, r2}
 2186 0144 8CE80700 		stm	ip, {r0, r1, r2}
 282:Core/Src/main.c **** 
 2187              		.loc 1 282 3 view .LVU645
 282:Core/Src/main.c **** 
 2188              		.loc 1 282 28 is_stmt 0 view .LVU646
 2189 0148 2946     		mov	r1, r5
 2190 014a 08A8     		add	r0, sp, #32
 2191 014c FFF7FEFF 		bl	osThreadCreate
 2192              	.LVL128:
 282:Core/Src/main.c **** 
 2193              		.loc 1 282 26 view .LVU647
 2194 0150 144B     		ldr	r3, .L122+40
 2195 0152 1860     		str	r0, [r3]
 285:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 2196              		.loc 1 285 3 is_stmt 1 view .LVU648
 2197 0154 0DF1040C 		add	ip, sp, #4
 2198 0158 C834     		adds	r4, r4, #200
 2199 015a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2200 015c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2201 0160 94E80700 		ldm	r4, {r0, r1, r2}
 2202 0164 8CE80700 		stm	ip, {r0, r1, r2}
 286:Core/Src/main.c **** 
 2203              		.loc 1 286 3 view .LVU649
 286:Core/Src/main.c **** 
 2204              		.loc 1 286 24 is_stmt 0 view .LVU650
 2205 0168 2946     		mov	r1, r5
 2206 016a 01A8     		add	r0, sp, #4
 2207 016c FFF7FEFF 		bl	osThreadCreate
 2208              	.LVL129:
 286:Core/Src/main.c **** 
 2209              		.loc 1 286 22 view .LVU651
 2210 0170 0D4B     		ldr	r3, .L122+44
 2211 0172 1860     		str	r0, [r3]
 293:Core/Src/main.c **** 
 2212              		.loc 1 293 3 is_stmt 1 view .LVU652
 2213 0174 FFF7FEFF 		bl	osKernelStart
 2214              	.LVL130:
 2215              	.L120:
 299:Core/Src/main.c ****   {
ARM GAS  /tmp/ccYwoJb7.s 			page 83


 2216              		.loc 1 299 3 discriminator 1 view .LVU653
 304:Core/Src/main.c ****   /* USER CODE END 3 */
 2217              		.loc 1 304 3 discriminator 1 view .LVU654
 299:Core/Src/main.c ****   {
 2218              		.loc 1 299 9 discriminator 1 view .LVU655
 2219 0178 FEE7     		b	.L120
 2220              	.L123:
 2221 017a 00BF     		.align	2
 2222              	.L122:
 2223 017c 00000000 		.word	.LANCHOR14
 2224 0180 00000000 		.word	.LANCHOR15
 2225 0184 00000000 		.word	.LANCHOR2
 2226 0188 00000000 		.word	.LANCHOR4
 2227 018c 00000000 		.word	.LANCHOR16
 2228 0190 00000000 		.word	.LANCHOR17
 2229 0194 00000000 		.word	.LANCHOR18
 2230 0198 00000000 		.word	.LANCHOR19
 2231 019c 00000000 		.word	.LANCHOR20
 2232 01a0 00000000 		.word	.LANCHOR21
 2233 01a4 00000000 		.word	.LANCHOR22
 2234 01a8 00000000 		.word	.LANCHOR23
 2235              		.cfi_endproc
 2236              	.LFE244:
 2238              		.global	StateMutexHandle
 2239              		.global	LCDPrintQueueHandle
 2240              		.global	MotorControlQueueHandle
 2241              		.global	MiniBotInputQueueHandle
 2242              		.global	LCDPrintTaskHandle
 2243              		.global	MotorControlTaskHandle
 2244              		.global	EmergencyStopTaskHandle
 2245              		.global	ApplicationFSMHandle
 2246              		.global	MiniBotInputsHandle
 2247              		.global	BlinkLEDTaskHandle
 2248              		.global	defaultTaskHandle
 2249              		.global	huart2
 2250              		.global	hi2c2
 2251              		.global	hi2c1
 2252              		.global	hadc1
 2253              		.global	state
 2254              		.global	MappedServoAngle
 2255              		.global	tempFailedToPostMessage
 2256              		.global	MotorControl_Qdata_Buf
 2257              		.global	Temp_Qdata_Buf
 2258              		.global	MiniBot_Qdata_Buf
 2259              		.global	PotRawValue
 2260              		.global	Qdata
 2261              		.section	.rodata
 2262              		.align	2
 2263              		.set	.LANCHOR15,. + 0
 2264              	.LC0:
 2265 0000 10000000 		.word	16
 2266 0004 34000000 		.word	52
 2267 0008 00000000 		.word	0
 2268 000c 00000000 		.word	0
 2269              	.LC1:
 2270 0010 10000000 		.word	16
 2271 0014 02000000 		.word	2
ARM GAS  /tmp/ccYwoJb7.s 			page 84


 2272 0018 00000000 		.word	0
 2273 001c 00000000 		.word	0
 2274              	.LC16:
 2275 0020 00000000 		.word	.LC2
 2276 0024 00000000 		.word	StartDefaultTask
 2277 0028 0000     		.short	0
 2278 002a 0000     		.space	2
 2279 002c 00000000 		.word	0
 2280 0030 80000000 		.word	128
 2281 0034 00000000 		.word	0
 2282 0038 00000000 		.word	0
 2283              	.LC17:
 2284 003c 0C000000 		.word	.LC4
 2285 0040 00000000 		.word	BlinkLEDTaskEntry
 2286 0044 0000     		.short	0
 2287 0046 0000     		.space	2
 2288 0048 00000000 		.word	0
 2289 004c 80000000 		.word	128
 2290 0050 00000000 		.word	0
 2291 0054 00000000 		.word	0
 2292              	.LC18:
 2293 0058 1C000000 		.word	.LC6
 2294 005c 00000000 		.word	MiniBotInputsEntry
 2295 0060 0000     		.short	0
 2296 0062 0000     		.space	2
 2297 0064 00000000 		.word	0
 2298 0068 00020000 		.word	512
 2299 006c 00000000 		.word	0
 2300 0070 00000000 		.word	0
 2301              	.LC19:
 2302 0074 2C000000 		.word	.LC8
 2303 0078 00000000 		.word	ApplicationFSMEntry
 2304 007c 0200     		.short	2
 2305 007e 0000     		.space	2
 2306 0080 00000000 		.word	0
 2307 0084 00020000 		.word	512
 2308 0088 00000000 		.word	0
 2309 008c 00000000 		.word	0
 2310              	.LC20:
 2311 0090 3C000000 		.word	.LC10
 2312 0094 00000000 		.word	EmergencyStopTaskEntry
 2313 0098 0000     		.short	0
 2314 009a 0000     		.space	2
 2315 009c 00000000 		.word	0
 2316 00a0 80000000 		.word	128
 2317 00a4 00000000 		.word	0
 2318 00a8 00000000 		.word	0
 2319              	.LC21:
 2320 00ac 50000000 		.word	.LC12
 2321 00b0 00000000 		.word	MotorControlTaskEntry
 2322 00b4 0000     		.short	0
 2323 00b6 0000     		.space	2
 2324 00b8 00000000 		.word	0
 2325 00bc 00020000 		.word	512
 2326 00c0 00000000 		.word	0
 2327 00c4 00000000 		.word	0
 2328              	.LC22:
ARM GAS  /tmp/ccYwoJb7.s 			page 85


 2329 00c8 64000000 		.word	.LC14
 2330 00cc 00000000 		.word	LCDPrintTaskEntry
 2331 00d0 0000     		.short	0
 2332 00d2 0000     		.space	2
 2333 00d4 00000000 		.word	0
 2334 00d8 80000000 		.word	128
 2335 00dc 00000000 		.word	0
 2336 00e0 00000000 		.word	0
 2337              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 2338              		.align	2
 2339              		.set	.LANCHOR20,. + 0
 2342              	ApplicationFSMHandle:
 2343 0000 00000000 		.space	4
 2344              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 2345              		.align	2
 2346              		.set	.LANCHOR18,. + 0
 2349              	BlinkLEDTaskHandle:
 2350 0000 00000000 		.space	4
 2351              		.section	.bss.EmergencyStopTaskHandle,"aw",%nobits
 2352              		.align	2
 2353              		.set	.LANCHOR21,. + 0
 2356              	EmergencyStopTaskHandle:
 2357 0000 00000000 		.space	4
 2358              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 2359              		.align	2
 2360              		.set	.LANCHOR16,. + 0
 2363              	LCDPrintQueueHandle:
 2364 0000 00000000 		.space	4
 2365              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 2366              		.align	2
 2367              		.set	.LANCHOR23,. + 0
 2370              	LCDPrintTaskHandle:
 2371 0000 00000000 		.space	4
 2372              		.section	.bss.MappedServoAngle,"aw",%nobits
 2373              		.align	2
 2374              		.set	.LANCHOR10,. + 0
 2377              	MappedServoAngle:
 2378 0000 00000000 		.space	8
 2378      00000000 
 2379              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 2380              		.align	2
 2381              		.set	.LANCHOR2,. + 0
 2384              	MiniBotInputQueueHandle:
 2385 0000 00000000 		.space	4
 2386              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 2387              		.align	2
 2388              		.set	.LANCHOR19,. + 0
 2391              	MiniBotInputsHandle:
 2392 0000 00000000 		.space	4
 2393              		.section	.bss.MiniBot_Qdata_Buf,"aw",%nobits
 2394              		.align	2
 2395              		.set	.LANCHOR1,. + 0
 2398              	MiniBot_Qdata_Buf:
 2399 0000 00000000 		.space	52
 2399      00000000 
 2399      00000000 
 2399      00000000 
ARM GAS  /tmp/ccYwoJb7.s 			page 86


 2399      00000000 
 2400              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
 2401              		.align	2
 2402              		.set	.LANCHOR4,. + 0
 2405              	MotorControlQueueHandle:
 2406 0000 00000000 		.space	4
 2407              		.section	.bss.MotorControlTaskHandle,"aw",%nobits
 2408              		.align	2
 2409              		.set	.LANCHOR22,. + 0
 2412              	MotorControlTaskHandle:
 2413 0000 00000000 		.space	4
 2414              		.section	.bss.MotorControl_Qdata_Buf,"aw",%nobits
 2415              		.align	2
 2416              		.set	.LANCHOR11,. + 0
 2419              	MotorControl_Qdata_Buf:
 2420 0000 00000000 		.space	52
 2420      00000000 
 2420      00000000 
 2420      00000000 
 2420      00000000 
 2421              		.section	.bss.PotRawValue,"aw",%nobits
 2422              		.align	2
 2423              		.set	.LANCHOR8,. + 0
 2426              	PotRawValue:
 2427 0000 00000000 		.space	16
 2427      00000000 
 2427      00000000 
 2427      00000000 
 2428              		.section	.bss.Qdata,"aw",%nobits
 2429              		.align	2
 2430              		.set	.LANCHOR6,. + 0
 2433              	Qdata:
 2434 0000 00000000 		.space	52
 2434      00000000 
 2434      00000000 
 2434      00000000 
 2434      00000000 
 2435              		.section	.bss.StateMutexHandle,"aw",%nobits
 2436              		.align	2
 2437              		.set	.LANCHOR14,. + 0
 2440              	StateMutexHandle:
 2441 0000 00000000 		.space	4
 2442              		.section	.bss.Temp_Qdata_Buf,"aw",%nobits
 2443              		.align	2
 2444              		.set	.LANCHOR3,. + 0
 2447              	Temp_Qdata_Buf:
 2448 0000 00000000 		.space	52
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2449              		.section	.bss.defaultTaskHandle,"aw",%nobits
 2450              		.align	2
 2451              		.set	.LANCHOR17,. + 0
 2454              	defaultTaskHandle:
 2455 0000 00000000 		.space	4
 2456              		.section	.bss.hadc1,"aw",%nobits
ARM GAS  /tmp/ccYwoJb7.s 			page 87


 2457              		.align	2
 2458              		.set	.LANCHOR7,. + 0
 2461              	hadc1:
 2462 0000 00000000 		.space	72
 2462      00000000 
 2462      00000000 
 2462      00000000 
 2462      00000000 
 2463              		.section	.bss.hi2c1,"aw",%nobits
 2464              		.align	2
 2465              		.set	.LANCHOR5,. + 0
 2468              	hi2c1:
 2469 0000 00000000 		.space	84
 2469      00000000 
 2469      00000000 
 2469      00000000 
 2469      00000000 
 2470              		.section	.bss.hi2c2,"aw",%nobits
 2471              		.align	2
 2472              		.set	.LANCHOR13,. + 0
 2475              	hi2c2:
 2476 0000 00000000 		.space	84
 2476      00000000 
 2476      00000000 
 2476      00000000 
 2476      00000000 
 2477              		.section	.bss.huart2,"aw",%nobits
 2478              		.align	2
 2479              		.set	.LANCHOR12,. + 0
 2482              	huart2:
 2483 0000 00000000 		.space	72
 2483      00000000 
 2483      00000000 
 2483      00000000 
 2483      00000000 
 2484              		.section	.bss.state,"aw",%nobits
 2485              		.set	.LANCHOR0,. + 0
 2488              	state:
 2489 0000 00       		.space	1
 2490              		.section	.bss.tempFailedToPostMessage,"aw",%nobits
 2491              		.set	.LANCHOR9,. + 0
 2494              	tempFailedToPostMessage:
 2495 0000 00       		.space	1
 2496              		.text
 2497              	.Letext0:
 2498              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2499              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2500              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2501              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2502              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2503              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2504              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2505              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2506              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2507              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2508              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2509              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
ARM GAS  /tmp/ccYwoJb7.s 			page 88


 2510              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2511              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2512              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2513              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2514              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2515              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2516              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2517              		.file 22 "Core/Inc/pca9685.h"
 2518              		.file 23 "<built-in>"
ARM GAS  /tmp/ccYwoJb7.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccYwoJb7.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccYwoJb7.s:40     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccYwoJb7.s:47     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccYwoJb7.s:231    .text.MX_GPIO_Init:00000000000000d8 $d
     /tmp/ccYwoJb7.s:239    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccYwoJb7.s:246    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccYwoJb7.s:277    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccYwoJb7.s:282    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccYwoJb7.s:289    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccYwoJb7.s:324    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccYwoJb7.s:329    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/ccYwoJb7.s:336    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/ccYwoJb7.s:362    .text.EmergencyStopTaskEntry:0000000000000000 $t
     /tmp/ccYwoJb7.s:369    .text.EmergencyStopTaskEntry:0000000000000000 EmergencyStopTaskEntry
     /tmp/ccYwoJb7.s:401    .text.EmergencyStopTaskEntry:0000000000000014 $d
     /tmp/ccYwoJb7.s:406    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccYwoJb7.s:413    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccYwoJb7.s:552    .text.ApplicationFSMEntry:00000000000000b8 $d
     /tmp/ccYwoJb7.s:561    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccYwoJb7.s:568    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccYwoJb7.s:648    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccYwoJb7.s:653    .text.ServoDriverInit:0000000000000000 $t
     /tmp/ccYwoJb7.s:660    .text.ServoDriverInit:0000000000000000 ServoDriverInit
     /tmp/ccYwoJb7.s:731    .text.ServoDriverInit:0000000000000060 $d
     /tmp/ccYwoJb7.s:736    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccYwoJb7.s:743    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccYwoJb7.s:833    .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccYwoJb7.s:840    .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccYwoJb7.s:922    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccYwoJb7.s:929    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccYwoJb7.s:1105   .text.MiniBotInputsEntry:00000000000000c0 $d
     /tmp/ccYwoJb7.s:1116   .text.MAP:0000000000000000 $t
     /tmp/ccYwoJb7.s:1123   .text.MAP:0000000000000000 MAP
     /tmp/ccYwoJb7.s:1153   .text.MoveServo:0000000000000000 $t
     /tmp/ccYwoJb7.s:1160   .text.MoveServo:0000000000000000 MoveServo
     /tmp/ccYwoJb7.s:1305   .text.MoveServo:00000000000000c4 $d
     /tmp/ccYwoJb7.s:1310   .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/ccYwoJb7.s:1317   .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/ccYwoJb7.s:1372   .text.MotorControlTaskEntry:0000000000000034 $d
     /tmp/ccYwoJb7.s:1378   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccYwoJb7.s:1385   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccYwoJb7.s:1418   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccYwoJb7.s:1423   .text.Error_Handler:0000000000000000 $t
     /tmp/ccYwoJb7.s:1430   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccYwoJb7.s:1462   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccYwoJb7.s:1468   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccYwoJb7.s:1634   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccYwoJb7.s:1641   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccYwoJb7.s:1647   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccYwoJb7.s:1704   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccYwoJb7.s:1711   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccYwoJb7.s:1717   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccYwoJb7.s:1771   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccYwoJb7.s:1777   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccYwoJb7.s:1783   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
ARM GAS  /tmp/ccYwoJb7.s 			page 90


     /tmp/ccYwoJb7.s:1840   .text.MX_I2C2_Init:000000000000002c $d
     /tmp/ccYwoJb7.s:1847   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccYwoJb7.s:1854   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccYwoJb7.s:2001   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccYwoJb7.s:2007   .text.main:0000000000000000 $t
     /tmp/ccYwoJb7.s:2014   .text.main:0000000000000000 main
     /tmp/ccYwoJb7.s:2223   .text.main:000000000000017c $d
     /tmp/ccYwoJb7.s:2440   .bss.StateMutexHandle:0000000000000000 StateMutexHandle
     /tmp/ccYwoJb7.s:2363   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/ccYwoJb7.s:2405   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/ccYwoJb7.s:2384   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccYwoJb7.s:2370   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/ccYwoJb7.s:2412   .bss.MotorControlTaskHandle:0000000000000000 MotorControlTaskHandle
     /tmp/ccYwoJb7.s:2356   .bss.EmergencyStopTaskHandle:0000000000000000 EmergencyStopTaskHandle
     /tmp/ccYwoJb7.s:2342   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccYwoJb7.s:2391   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccYwoJb7.s:2349   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccYwoJb7.s:2454   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccYwoJb7.s:2482   .bss.huart2:0000000000000000 huart2
     /tmp/ccYwoJb7.s:2475   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccYwoJb7.s:2468   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccYwoJb7.s:2461   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccYwoJb7.s:2488   .bss.state:0000000000000000 state
     /tmp/ccYwoJb7.s:2377   .bss.MappedServoAngle:0000000000000000 MappedServoAngle
     /tmp/ccYwoJb7.s:2494   .bss.tempFailedToPostMessage:0000000000000000 tempFailedToPostMessage
     /tmp/ccYwoJb7.s:2419   .bss.MotorControl_Qdata_Buf:0000000000000000 MotorControl_Qdata_Buf
     /tmp/ccYwoJb7.s:2447   .bss.Temp_Qdata_Buf:0000000000000000 Temp_Qdata_Buf
     /tmp/ccYwoJb7.s:2398   .bss.MiniBot_Qdata_Buf:0000000000000000 MiniBot_Qdata_Buf
     /tmp/ccYwoJb7.s:2426   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccYwoJb7.s:2433   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccYwoJb7.s:2262   .rodata:0000000000000000 $d
     /tmp/ccYwoJb7.s:2338   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2345   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2352   .bss.EmergencyStopTaskHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2359   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2366   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2373   .bss.MappedServoAngle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2380   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2387   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2394   .bss.MiniBot_Qdata_Buf:0000000000000000 $d
     /tmp/ccYwoJb7.s:2401   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2408   .bss.MotorControlTaskHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2415   .bss.MotorControl_Qdata_Buf:0000000000000000 $d
     /tmp/ccYwoJb7.s:2422   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccYwoJb7.s:2429   .bss.Qdata:0000000000000000 $d
     /tmp/ccYwoJb7.s:2436   .bss.StateMutexHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2443   .bss.Temp_Qdata_Buf:0000000000000000 $d
     /tmp/ccYwoJb7.s:2450   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccYwoJb7.s:2457   .bss.hadc1:0000000000000000 $d
     /tmp/ccYwoJb7.s:2464   .bss.hi2c1:0000000000000000 $d
     /tmp/ccYwoJb7.s:2471   .bss.hi2c2:0000000000000000 $d
     /tmp/ccYwoJb7.s:2478   .bss.huart2:0000000000000000 $d
     /tmp/ccYwoJb7.s:2489   .bss.state:0000000000000000 $d
     /tmp/ccYwoJb7.s:2495   .bss.tempFailedToPostMessage:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
ARM GAS  /tmp/ccYwoJb7.s 			page 91


HAL_GPIO_Init
osDelay
HAL_GPIO_ReadPin
xQueueReceive
xQueueGenericSend
PCA9685_Init
PCA9685_SetServoAngle
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
