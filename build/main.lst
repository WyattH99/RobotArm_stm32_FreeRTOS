ARM GAS  /tmp/cczhJEmm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 4D6F746F 		.ascii	"MotorControlTask\000"
  29      72436F6E 
  29      74726F6C 
  29      5461736B 
  29      00
  30 004d 000000   		.align	2
  31              	.LC12:
  32 0050 4C434450 		.ascii	"LCDPrintTask\000"
  32      72696E74 
  32      5461736B 
  32      00
  33              		.text
  34              	.Ltext0:
  35              		.cfi_sections	.debug_frame
  36              		.section	.text.MX_GPIO_Init,"ax",%progbits
  37              		.align	1
  38              		.arch armv7e-m
  39              		.syntax unified
ARM GAS  /tmp/cczhJEmm.s 			page 2


  40              		.thumb
  41              		.thumb_func
  42              		.fpu fpv4-sp-d16
  44              	MX_GPIO_Init:
  45              	.LFB251:
  46              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** #include "I2C_LCD.h"
  29:Core/Src/main.c **** #include "I2C_LCD_cfg.h"
  30:Core/Src/main.c **** #include "Util.h"
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /*
  38:Core/Src/main.c ****  * MiniBot Structures
  39:Core/Src/main.c ****  */
  40:Core/Src/main.c **** typedef struct{
  41:Core/Src/main.c **** 	uint8_t  PotNum;
  42:Core/Src/main.c **** 	uint32_t PotMin;
  43:Core/Src/main.c **** 	uint32_t PotMax;
  44:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  45:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** typedef struct{
  48:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  49:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  50:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  51:Core/Src/main.c **** 
ARM GAS  /tmp/cczhJEmm.s 			page 3


  52:Core/Src/main.c **** typedef struct{
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  54:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  55:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  56:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  57:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  58:Core/Src/main.c **** } MiniBot_Config_t;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** typedef struct{
  61:Core/Src/main.c **** 	uint32_t BasePotValue;
  62:Core/Src/main.c **** 	uint32_t BasePotMin;
  63:Core/Src/main.c **** 	uint32_t BasePotMax;
  64:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  65:Core/Src/main.c **** 	uint32_t ShoulderPotMin;
  66:Core/Src/main.c **** 	uint32_t ShoulderPotMax;
  67:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  68:Core/Src/main.c **** 	uint32_t ElbowPotMin;
  69:Core/Src/main.c **** 	uint32_t ElbowPotMax;
  70:Core/Src/main.c **** 	uint32_t WristPotValue;
  71:Core/Src/main.c **** 	uint32_t WristPotMin;
  72:Core/Src/main.c **** 	uint32_t WristPotMax;
  73:Core/Src/main.c **** 	uint8_t  GripperValue;
  74:Core/Src/main.c **** } MiniBot_Qdata;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  77:Core/Src/main.c **** uint32_t PotRawValue[4];
  78:Core/Src/main.c **** volatile MiniBot_Qdata MiniBot_Qdata_Buf;
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /*
  82:Core/Src/main.c ****  * MegaBot Structures
  83:Core/Src/main.c ****  */
  84:Core/Src/main.c **** typedef struct{
  85:Core/Src/main.c **** 	uint8_t  ServoNum;
  86:Core/Src/main.c **** 	uint16_t ServoMin;
  87:Core/Src/main.c **** 	uint16_t ServoMax;
  88:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  89:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** typedef struct{
  92:Core/Src/main.c **** 	uint8_t  ServoNum;
  93:Core/Src/main.c **** 	uint16_t ServoMin;
  94:Core/Src/main.c **** 	uint16_t ServoMax;
  95:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  96:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** typedef struct{
  99:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
 100:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
 101:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
 102:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
 103:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
 104:Core/Src/main.c **** } MegaBot_Config_t;
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** volatile MiniBot_Qdata Temp_Qdata_Buf;
 107:Core/Src/main.c **** volatile MiniBot_Qdata MotorControl_Qdata_Buf;
 108:Core/Src/main.c **** 
ARM GAS  /tmp/cczhJEmm.s 			page 4


 109:Core/Src/main.c **** uint8_t tempFailedToPostMessage = 0;
 110:Core/Src/main.c **** uint16_t MappedServoAngle[4];
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** enum State{
 114:Core/Src/main.c ****   Init,
 115:Core/Src/main.c ****   Ready,
 116:Core/Src/main.c ****   Running,
 117:Core/Src/main.c ****   EmergencyStop
 118:Core/Src/main.c **** };
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** volatile enum State state = Init;
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* USER CODE END PTD */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 125:Core/Src/main.c **** /* USER CODE BEGIN PD */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* USER CODE END PD */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 130:Core/Src/main.c **** /* USER CODE BEGIN PM */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /* USER CODE END PM */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 135:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 138:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** UART_HandleTypeDef huart2;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** osThreadId defaultTaskHandle;
 143:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 144:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 145:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 146:Core/Src/main.c **** osThreadId MotorControlTaskHandle;
 147:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 148:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 149:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 150:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 151:Core/Src/main.c **** osMutexId StateMutexHandle;
 152:Core/Src/main.c **** /* USER CODE BEGIN PV */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /* USER CODE END PV */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 157:Core/Src/main.c **** void SystemClock_Config(void);
 158:Core/Src/main.c **** static void MX_GPIO_Init(void);
 159:Core/Src/main.c **** static void MX_ADC1_Init(void);
 160:Core/Src/main.c **** static void MX_I2C1_Init(void);
 161:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 162:Core/Src/main.c **** static void MX_I2C2_Init(void);
 163:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 164:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 165:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
ARM GAS  /tmp/cczhJEmm.s 			page 5


 166:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 167:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 168:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 173:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot);
 174:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot);
 179:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** /* USER CODE END PFP */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 184:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 187:Core/Src/main.c **** {
 188:Core/Src/main.c ****   state = EmergencyStop;
 189:Core/Src/main.c **** }
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** /* USER CODE END 0 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** /**
 195:Core/Src/main.c ****   * @brief  The application entry point.
 196:Core/Src/main.c ****   * @retval int
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c **** int main(void)
 199:Core/Src/main.c **** {
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* USER CODE END 1 */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 208:Core/Src/main.c ****   HAL_Init();
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END Init */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* Configure the system clock */
 215:Core/Src/main.c ****   SystemClock_Config();
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE END SysInit */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* Initialize all configured peripherals */
 222:Core/Src/main.c ****   MX_GPIO_Init();
ARM GAS  /tmp/cczhJEmm.s 			page 6


 223:Core/Src/main.c ****   MX_ADC1_Init();
 224:Core/Src/main.c ****   MX_I2C1_Init();
 225:Core/Src/main.c ****   MX_USART2_UART_Init();
 226:Core/Src/main.c ****   MX_I2C2_Init();
 227:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE END 2 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* Create the mutex(es) */
 232:Core/Src/main.c ****   /* definition and creation of StateMutex */
 233:Core/Src/main.c ****   osMutexDef(StateMutex);
 234:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 237:Core/Src/main.c ****   /* add mutexes, ... */
 238:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 241:Core/Src/main.c ****   /* add semaphores, ... */
 242:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 245:Core/Src/main.c ****   /* start timers, add new ones, ... */
 246:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* Create the queue(s) */
 249:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 250:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 251:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 254:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, MiniBot_Qdata);
 255:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 258:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, enum State);
 259:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 262:Core/Src/main.c ****   /* add queues, ... */
 263:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* Create the thread(s) */
 266:Core/Src/main.c ****   /* definition and creation of defaultTask */
 267:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 268:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 271:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityNormal, 0, 128);
 272:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 275:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 512);
 276:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 279:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityHigh, 0, 512);
ARM GAS  /tmp/cczhJEmm.s 			page 7


 280:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* definition and creation of MotorControlTask */
 283:Core/Src/main.c ****   osThreadDef(MotorControlTask, MotorControlTaskEntry, osPriorityNormal, 0, 512);
 284:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 287:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 288:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 291:Core/Src/main.c ****   /* add threads, ... */
 292:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /* Start scheduler */
 295:Core/Src/main.c ****   osKernelStart();
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* Infinite loop */
 300:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 301:Core/Src/main.c ****   while (1)
 302:Core/Src/main.c ****   {
 303:Core/Src/main.c ****     /* USER CODE END WHILE */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 306:Core/Src/main.c ****   }
 307:Core/Src/main.c ****   /* USER CODE END 3 */
 308:Core/Src/main.c **** }
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** /**
 311:Core/Src/main.c ****   * @brief System Clock Configuration
 312:Core/Src/main.c ****   * @retval None
 313:Core/Src/main.c ****   */
 314:Core/Src/main.c **** void SystemClock_Config(void)
 315:Core/Src/main.c **** {
 316:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 317:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 320:Core/Src/main.c ****   */
 321:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 325:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 326:Core/Src/main.c ****   */
 327:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
ARM GAS  /tmp/cczhJEmm.s 			page 8


 337:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 338:Core/Src/main.c ****   {
 339:Core/Src/main.c ****     Error_Handler();
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 343:Core/Src/main.c ****   */
 344:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 345:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 346:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 347:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c **** }
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** /**
 358:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 359:Core/Src/main.c ****   * @param None
 360:Core/Src/main.c ****   * @retval None
 361:Core/Src/main.c ****   */
 362:Core/Src/main.c **** static void MX_ADC1_Init(void)
 363:Core/Src/main.c **** {
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 376:Core/Src/main.c ****   */
 377:Core/Src/main.c ****   hadc1.Instance = ADC1;
 378:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 379:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 380:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 381:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 382:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 383:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 386:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 387:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 388:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 389:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 390:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 391:Core/Src/main.c ****   {
 392:Core/Src/main.c ****     Error_Handler();
 393:Core/Src/main.c ****   }
ARM GAS  /tmp/cczhJEmm.s 			page 9


 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 396:Core/Src/main.c ****   */
 397:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 398:Core/Src/main.c ****   sConfig.Rank = 1;
 399:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 401:Core/Src/main.c ****   {
 402:Core/Src/main.c ****     Error_Handler();
 403:Core/Src/main.c ****   }
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 406:Core/Src/main.c ****   */
 407:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 408:Core/Src/main.c ****   sConfig.Rank = 2;
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 410:Core/Src/main.c ****   {
 411:Core/Src/main.c ****     Error_Handler();
 412:Core/Src/main.c ****   }
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 415:Core/Src/main.c ****   */
 416:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 417:Core/Src/main.c ****   sConfig.Rank = 3;
 418:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 419:Core/Src/main.c ****   {
 420:Core/Src/main.c ****     Error_Handler();
 421:Core/Src/main.c ****   }
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 424:Core/Src/main.c ****   */
 425:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 426:Core/Src/main.c ****   sConfig.Rank = 4;
 427:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 428:Core/Src/main.c ****   {
 429:Core/Src/main.c ****     Error_Handler();
 430:Core/Src/main.c ****   }
 431:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** }
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** /**
 438:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 439:Core/Src/main.c ****   * @param None
 440:Core/Src/main.c ****   * @retval None
 441:Core/Src/main.c ****   */
 442:Core/Src/main.c **** static void MX_I2C1_Init(void)
 443:Core/Src/main.c **** {
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 450:Core/Src/main.c **** 
ARM GAS  /tmp/cczhJEmm.s 			page 10


 451:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 452:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 453:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 454:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 456:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 457:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 458:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 459:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 460:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 461:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 462:Core/Src/main.c ****   {
 463:Core/Src/main.c ****     Error_Handler();
 464:Core/Src/main.c ****   }
 465:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 466:Core/Src/main.c **** 
 467:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** }
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** /**
 472:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 473:Core/Src/main.c ****   * @param None
 474:Core/Src/main.c ****   * @retval None
 475:Core/Src/main.c ****   */
 476:Core/Src/main.c **** static void MX_I2C2_Init(void)
 477:Core/Src/main.c **** {
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 486:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 487:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 488:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 490:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 491:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 492:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 493:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 494:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 495:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 496:Core/Src/main.c ****   {
 497:Core/Src/main.c ****     Error_Handler();
 498:Core/Src/main.c ****   }
 499:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** }
 504:Core/Src/main.c **** 
 505:Core/Src/main.c **** /**
 506:Core/Src/main.c ****   * @brief USART2 Initialization Function
 507:Core/Src/main.c ****   * @param None
ARM GAS  /tmp/cczhJEmm.s 			page 11


 508:Core/Src/main.c ****   * @retval None
 509:Core/Src/main.c ****   */
 510:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 511:Core/Src/main.c **** {
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 520:Core/Src/main.c ****   huart2.Instance = USART2;
 521:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 522:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 523:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 524:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 525:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 526:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 527:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 529:Core/Src/main.c ****   {
 530:Core/Src/main.c ****     Error_Handler();
 531:Core/Src/main.c ****   }
 532:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 535:Core/Src/main.c **** 
 536:Core/Src/main.c **** }
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** /**
 539:Core/Src/main.c ****   * @brief GPIO Initialization Function
 540:Core/Src/main.c ****   * @param None
 541:Core/Src/main.c ****   * @retval None
 542:Core/Src/main.c ****   */
 543:Core/Src/main.c **** static void MX_GPIO_Init(void)
 544:Core/Src/main.c **** {
  47              		.loc 1 544 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 40
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  52              		.cfi_def_cfa_offset 24
  53              		.cfi_offset 4, -24
  54              		.cfi_offset 5, -20
  55              		.cfi_offset 6, -16
  56              		.cfi_offset 7, -12
  57              		.cfi_offset 8, -8
  58              		.cfi_offset 14, -4
  59 0004 8AB0     		sub	sp, sp, #40
  60              		.cfi_def_cfa_offset 64
 545:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  61              		.loc 1 545 3 view .LVU1
  62              		.loc 1 545 20 is_stmt 0 view .LVU2
  63 0006 0024     		movs	r4, #0
  64 0008 0594     		str	r4, [sp, #20]
  65 000a 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/cczhJEmm.s 			page 12


  66 000c 0794     		str	r4, [sp, #28]
  67 000e 0894     		str	r4, [sp, #32]
  68 0010 0994     		str	r4, [sp, #36]
 546:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 547:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 550:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  69              		.loc 1 550 3 is_stmt 1 view .LVU3
  70              	.LBB4:
  71              		.loc 1 550 3 view .LVU4
  72 0012 0194     		str	r4, [sp, #4]
  73              		.loc 1 550 3 view .LVU5
  74 0014 344B     		ldr	r3, .L3
  75 0016 1A6B     		ldr	r2, [r3, #48]
  76 0018 42F00402 		orr	r2, r2, #4
  77 001c 1A63     		str	r2, [r3, #48]
  78              		.loc 1 550 3 view .LVU6
  79 001e 1A6B     		ldr	r2, [r3, #48]
  80 0020 02F00402 		and	r2, r2, #4
  81 0024 0192     		str	r2, [sp, #4]
  82              		.loc 1 550 3 view .LVU7
  83 0026 019A     		ldr	r2, [sp, #4]
  84              	.LBE4:
  85              		.loc 1 550 3 view .LVU8
 551:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  86              		.loc 1 551 3 view .LVU9
  87              	.LBB5:
  88              		.loc 1 551 3 view .LVU10
  89 0028 0294     		str	r4, [sp, #8]
  90              		.loc 1 551 3 view .LVU11
  91 002a 1A6B     		ldr	r2, [r3, #48]
  92 002c 42F08002 		orr	r2, r2, #128
  93 0030 1A63     		str	r2, [r3, #48]
  94              		.loc 1 551 3 view .LVU12
  95 0032 1A6B     		ldr	r2, [r3, #48]
  96 0034 02F08002 		and	r2, r2, #128
  97 0038 0292     		str	r2, [sp, #8]
  98              		.loc 1 551 3 view .LVU13
  99 003a 029A     		ldr	r2, [sp, #8]
 100              	.LBE5:
 101              		.loc 1 551 3 view .LVU14
 552:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 102              		.loc 1 552 3 view .LVU15
 103              	.LBB6:
 104              		.loc 1 552 3 view .LVU16
 105 003c 0394     		str	r4, [sp, #12]
 106              		.loc 1 552 3 view .LVU17
 107 003e 1A6B     		ldr	r2, [r3, #48]
 108 0040 42F00102 		orr	r2, r2, #1
 109 0044 1A63     		str	r2, [r3, #48]
 110              		.loc 1 552 3 view .LVU18
 111 0046 1A6B     		ldr	r2, [r3, #48]
 112 0048 02F00102 		and	r2, r2, #1
 113 004c 0392     		str	r2, [sp, #12]
 114              		.loc 1 552 3 view .LVU19
 115 004e 039A     		ldr	r2, [sp, #12]
ARM GAS  /tmp/cczhJEmm.s 			page 13


 116              	.LBE6:
 117              		.loc 1 552 3 view .LVU20
 553:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 118              		.loc 1 553 3 view .LVU21
 119              	.LBB7:
 120              		.loc 1 553 3 view .LVU22
 121 0050 0494     		str	r4, [sp, #16]
 122              		.loc 1 553 3 view .LVU23
 123 0052 1A6B     		ldr	r2, [r3, #48]
 124 0054 42F00202 		orr	r2, r2, #2
 125 0058 1A63     		str	r2, [r3, #48]
 126              		.loc 1 553 3 view .LVU24
 127 005a 1B6B     		ldr	r3, [r3, #48]
 128 005c 03F00203 		and	r3, r3, #2
 129 0060 0493     		str	r3, [sp, #16]
 130              		.loc 1 553 3 view .LVU25
 131 0062 049B     		ldr	r3, [sp, #16]
 132              	.LBE7:
 133              		.loc 1 553 3 view .LVU26
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 556:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 134              		.loc 1 556 3 view .LVU27
 135 0064 214E     		ldr	r6, .L3+4
 136 0066 2246     		mov	r2, r4
 137 0068 2021     		movs	r1, #32
 138 006a 3046     		mov	r0, r6
 139 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 140              	.LVL0:
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 559:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 141              		.loc 1 559 3 view .LVU28
 142              		.loc 1 559 23 is_stmt 0 view .LVU29
 143 0070 4FF40053 		mov	r3, #8192
 144 0074 0593     		str	r3, [sp, #20]
 560:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 145              		.loc 1 560 3 is_stmt 1 view .LVU30
 146              		.loc 1 560 24 is_stmt 0 view .LVU31
 147 0076 4FF40418 		mov	r8, #2162688
 148 007a CDF81880 		str	r8, [sp, #24]
 561:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 149              		.loc 1 561 3 is_stmt 1 view .LVU32
 150              		.loc 1 561 24 is_stmt 0 view .LVU33
 151 007e 0794     		str	r4, [sp, #28]
 562:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 152              		.loc 1 562 3 is_stmt 1 view .LVU34
 153 0080 05A9     		add	r1, sp, #20
 154 0082 1B48     		ldr	r0, .L3+8
 155 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL1:
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 565:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 157              		.loc 1 565 3 view .LVU35
 158              		.loc 1 565 23 is_stmt 0 view .LVU36
 159 0088 2027     		movs	r7, #32
ARM GAS  /tmp/cczhJEmm.s 			page 14


 160 008a 0597     		str	r7, [sp, #20]
 566:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 161              		.loc 1 566 3 is_stmt 1 view .LVU37
 162              		.loc 1 566 24 is_stmt 0 view .LVU38
 163 008c 0125     		movs	r5, #1
 164 008e 0695     		str	r5, [sp, #24]
 567:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 165              		.loc 1 567 3 is_stmt 1 view .LVU39
 166              		.loc 1 567 24 is_stmt 0 view .LVU40
 167 0090 0794     		str	r4, [sp, #28]
 568:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 168              		.loc 1 568 3 is_stmt 1 view .LVU41
 169              		.loc 1 568 25 is_stmt 0 view .LVU42
 170 0092 0894     		str	r4, [sp, #32]
 569:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 171              		.loc 1 569 3 is_stmt 1 view .LVU43
 172 0094 05A9     		add	r1, sp, #20
 173 0096 3046     		mov	r0, r6
 174 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 175              	.LVL2:
 570:Core/Src/main.c **** 
 571:Core/Src/main.c ****   /*Configure GPIO pin : EmergencyStopBtn_Pin */
 572:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin;
 176              		.loc 1 572 3 view .LVU44
 177              		.loc 1 572 23 is_stmt 0 view .LVU45
 178 009c 4FF48073 		mov	r3, #256
 179 00a0 0593     		str	r3, [sp, #20]
 573:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 180              		.loc 1 573 3 is_stmt 1 view .LVU46
 181              		.loc 1 573 24 is_stmt 0 view .LVU47
 182 00a2 CDF81880 		str	r8, [sp, #24]
 574:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 183              		.loc 1 574 3 is_stmt 1 view .LVU48
 184              		.loc 1 574 24 is_stmt 0 view .LVU49
 185 00a6 0795     		str	r5, [sp, #28]
 575:Core/Src/main.c ****   HAL_GPIO_Init(EmergencyStopBtn_GPIO_Port, &GPIO_InitStruct);
 186              		.loc 1 575 3 is_stmt 1 view .LVU50
 187 00a8 05A9     		add	r1, sp, #20
 188 00aa 3046     		mov	r0, r6
 189 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 190              	.LVL3:
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 578:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 191              		.loc 1 578 3 view .LVU51
 192              		.loc 1 578 23 is_stmt 0 view .LVU52
 193 00b0 4FF40073 		mov	r3, #512
 194 00b4 0593     		str	r3, [sp, #20]
 579:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 195              		.loc 1 579 3 is_stmt 1 view .LVU53
 196              		.loc 1 579 24 is_stmt 0 view .LVU54
 197 00b6 0694     		str	r4, [sp, #24]
 580:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 198              		.loc 1 580 3 is_stmt 1 view .LVU55
 199              		.loc 1 580 24 is_stmt 0 view .LVU56
 200 00b8 0795     		str	r5, [sp, #28]
 581:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/cczhJEmm.s 			page 15


 201              		.loc 1 581 3 is_stmt 1 view .LVU57
 202 00ba 05A9     		add	r1, sp, #20
 203 00bc 3046     		mov	r0, r6
 204 00be FFF7FEFF 		bl	HAL_GPIO_Init
 205              	.LVL4:
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 584:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 206              		.loc 1 584 3 view .LVU58
 207              		.loc 1 584 23 is_stmt 0 view .LVU59
 208 00c2 0597     		str	r7, [sp, #20]
 585:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 209              		.loc 1 585 3 is_stmt 1 view .LVU60
 210              		.loc 1 585 24 is_stmt 0 view .LVU61
 211 00c4 0694     		str	r4, [sp, #24]
 586:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 212              		.loc 1 586 3 is_stmt 1 view .LVU62
 213              		.loc 1 586 24 is_stmt 0 view .LVU63
 214 00c6 0795     		str	r5, [sp, #28]
 587:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 215              		.loc 1 587 3 is_stmt 1 view .LVU64
 216 00c8 05A9     		add	r1, sp, #20
 217 00ca 0A48     		ldr	r0, .L3+12
 218 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 219              	.LVL5:
 588:Core/Src/main.c **** 
 589:Core/Src/main.c ****   /* EXTI interrupt init*/
 590:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 220              		.loc 1 590 3 view .LVU65
 221 00d0 2246     		mov	r2, r4
 222 00d2 0521     		movs	r1, #5
 223 00d4 1720     		movs	r0, #23
 224 00d6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 225              	.LVL6:
 591:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 226              		.loc 1 591 3 view .LVU66
 227 00da 1720     		movs	r0, #23
 228 00dc FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 229              	.LVL7:
 592:Core/Src/main.c **** 
 593:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 594:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 595:Core/Src/main.c **** }
 230              		.loc 1 595 1 is_stmt 0 view .LVU67
 231 00e0 0AB0     		add	sp, sp, #40
 232              		.cfi_def_cfa_offset 24
 233              		@ sp needed
 234 00e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 235              	.L4:
 236 00e6 00BF     		.align	2
 237              	.L3:
 238 00e8 00380240 		.word	1073887232
 239 00ec 00000240 		.word	1073872896
 240 00f0 00080240 		.word	1073874944
 241 00f4 00040240 		.word	1073873920
 242              		.cfi_endproc
 243              	.LFE251:
ARM GAS  /tmp/cczhJEmm.s 			page 16


 245              		.section	.text.StartDefaultTask,"ax",%progbits
 246              		.align	1
 247              		.global	StartDefaultTask
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	StartDefaultTask:
 254              	.LFB258:
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 598:Core/Src/main.c **** 
 599:Core/Src/main.c **** 
 600:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 601:Core/Src/main.c **** 	// Configure Each of the joints
 602:Core/Src/main.c **** 
 603:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 604:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 605:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 606:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 607:Core/Src/main.c **** 
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 609:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 610:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 611:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 612:Core/Src/main.c **** 
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 614:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 615:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 616:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 617:Core/Src/main.c **** 
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 619:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 620:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 621:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 622:Core/Src/main.c **** 
 623:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 624:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 625:Core/Src/main.c **** }
 626:Core/Src/main.c **** 
 627:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot){
 628:Core/Src/main.c ****   // Configure Each of the joints
 629:Core/Src/main.c ****   MegaBot->Base.ServoNum = 0;
 630:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 631:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 632:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 633:Core/Src/main.c **** 
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoNum = 1;
 635:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 636:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 637:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 638:Core/Src/main.c **** 
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoNum = 2;
 640:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 641:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 642:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 643:Core/Src/main.c **** 
ARM GAS  /tmp/cczhJEmm.s 			page 17


 644:Core/Src/main.c ****   MegaBot->Wrist.ServoNum = 3;
 645:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 646:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 647:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 648:Core/Src/main.c **** 
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoNum = 4;
 650:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 651:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 652:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 653:Core/Src/main.c **** 
 654:Core/Src/main.c ****   ServoDriverInit(MegaBot);
 655:Core/Src/main.c **** }
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot){
 658:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 663:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 664:Core/Src/main.c **** }
 665:Core/Src/main.c **** 
 666:Core/Src/main.c **** 
 667:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 668:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 669:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 670:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 671:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 672:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 673:Core/Src/main.c ****     }else{
 674:Core/Src/main.c ****       *QPotData = PotRawValue;
 675:Core/Src/main.c ****     }
 676:Core/Src/main.c ****     if(Joint->PotInvertRange){
 677:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 678:Core/Src/main.c ****     }
 679:Core/Src/main.c ****   }
 680:Core/Src/main.c **** }
 681:Core/Src/main.c **** 
 682:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot){
 683:Core/Src/main.c ****   // MAP each of the angles
 684:Core/Src/main.c ****   // Send each of new Joints angle
 685:Core/Src/main.c ****   // uint16_t MappedServoAngle;
 686:Core/Src/main.c ****   // Base
 687:Core/Src/main.c ****   MappedServoAngle[0] = MAP(MiniBot->BasePotValue, MiniBot->BasePotMin, MiniBot->BasePotMax, MegaBo
 688:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 689:Core/Src/main.c ****   // Shoulder
 690:Core/Src/main.c ****   MappedServoAngle[1] = MAP(MiniBot->ShoulderPotValue, MiniBot->ShoulderPotMin, MiniBot->ShoulderPo
 691:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 692:Core/Src/main.c ****   // Elbow
 693:Core/Src/main.c ****   MappedServoAngle[2] = MAP(MiniBot->ElbowPotValue, MiniBot->ElbowPotMin, MiniBot->ElbowPotMax, Meg
 694:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 695:Core/Src/main.c ****   // Wrist
 696:Core/Src/main.c ****   MappedServoAngle[3] = MAP(MiniBot->WristPotValue, MiniBot->WristPotMin, MiniBot->WristPotMax, Meg
 697:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 698:Core/Src/main.c ****   // Gripper
 699:Core/Src/main.c ****   if(MiniBot->GripperValue){
 700:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
ARM GAS  /tmp/cczhJEmm.s 			page 18


 701:Core/Src/main.c ****   }else{
 702:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMax);
 703:Core/Src/main.c ****   }
 704:Core/Src/main.c **** }
 705:Core/Src/main.c **** 
 706:Core/Src/main.c **** // Used to map the Potentiometer Range (0-4096) to the Servo Range (0-180)
 707:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 708:Core/Src/main.c **** {
 709:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 710:Core/Src/main.c **** }
 711:Core/Src/main.c **** 
 712:Core/Src/main.c **** 
 713:Core/Src/main.c **** /* USER CODE END 4 */
 714:Core/Src/main.c **** 
 715:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 716:Core/Src/main.c **** /**
 717:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 718:Core/Src/main.c ****   * @param  argument: Not used
 719:Core/Src/main.c ****   * @retval None
 720:Core/Src/main.c ****   */
 721:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 722:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 723:Core/Src/main.c **** {
 255              		.loc 1 723 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ Volatile: function does not return.
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL8:
 261              		.loc 1 723 1 is_stmt 0 view .LVU69
 262 0000 08B5     		push	{r3, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 3, -8
 265              		.cfi_offset 14, -4
 266              	.LVL9:
 267              	.L6:
 724:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 725:Core/Src/main.c ****   /* Infinite loop */
 726:Core/Src/main.c ****   for(;;)
 268              		.loc 1 726 3 is_stmt 1 discriminator 1 view .LVU70
 727:Core/Src/main.c ****   {
 728:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 269              		.loc 1 728 5 discriminator 1 view .LVU71
 270 0002 0022     		movs	r2, #0
 271 0004 2021     		movs	r1, #32
 272 0006 0448     		ldr	r0, .L8
 273 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 274              	.LVL10:
 729:Core/Src/main.c ****     osDelay(1000);
 275              		.loc 1 729 5 discriminator 1 view .LVU72
 276 000c 4FF47A70 		mov	r0, #1000
 277 0010 FFF7FEFF 		bl	osDelay
 278              	.LVL11:
 726:Core/Src/main.c ****   {
 279              		.loc 1 726 8 discriminator 1 view .LVU73
 280 0014 F5E7     		b	.L6
 281              	.L9:
ARM GAS  /tmp/cczhJEmm.s 			page 19


 282 0016 00BF     		.align	2
 283              	.L8:
 284 0018 00000240 		.word	1073872896
 285              		.cfi_endproc
 286              	.LFE258:
 288              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 289              		.align	1
 290              		.global	BlinkLEDTaskEntry
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	BlinkLEDTaskEntry:
 297              	.LFB259:
 730:Core/Src/main.c ****   }
 731:Core/Src/main.c ****   /* USER CODE END 5 */
 732:Core/Src/main.c **** }
 733:Core/Src/main.c **** 
 734:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 735:Core/Src/main.c **** /**
 736:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 737:Core/Src/main.c **** * @param argument: Not used
 738:Core/Src/main.c **** * @retval None
 739:Core/Src/main.c **** */
 740:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 741:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 742:Core/Src/main.c **** {
 298              		.loc 1 742 1 view -0
 299              		.cfi_startproc
 300              		@ Volatile: function does not return.
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL12:
 304              		.loc 1 742 1 is_stmt 0 view .LVU75
 305 0000 08B5     		push	{r3, lr}
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 3, -8
 308              		.cfi_offset 14, -4
 309              	.LVL13:
 310              	.L11:
 743:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 744:Core/Src/main.c ****   /* Infinite loop */
 745:Core/Src/main.c ****   for(;;)
 311              		.loc 1 745 3 is_stmt 1 discriminator 1 view .LVU76
 746:Core/Src/main.c ****   {
 747:Core/Src/main.c ****     
 748:Core/Src/main.c ****     osDelay(500);
 312              		.loc 1 748 5 discriminator 1 view .LVU77
 313 0002 4FF4FA70 		mov	r0, #500
 314 0006 FFF7FEFF 		bl	osDelay
 315              	.LVL14:
 749:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 316              		.loc 1 749 5 discriminator 1 view .LVU78
 317 000a 0122     		movs	r2, #1
 318 000c 2021     		movs	r1, #32
 319 000e 0448     		ldr	r0, .L13
 320 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/cczhJEmm.s 			page 20


 321              	.LVL15:
 750:Core/Src/main.c ****     osDelay(500);
 322              		.loc 1 750 5 discriminator 1 view .LVU79
 323 0014 4FF4FA70 		mov	r0, #500
 324 0018 FFF7FEFF 		bl	osDelay
 325              	.LVL16:
 745:Core/Src/main.c ****   {
 326              		.loc 1 745 8 discriminator 1 view .LVU80
 327 001c F1E7     		b	.L11
 328              	.L14:
 329 001e 00BF     		.align	2
 330              	.L13:
 331 0020 00000240 		.word	1073872896
 332              		.cfi_endproc
 333              	.LFE259:
 335              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 336              		.align	1
 337              		.global	ApplicationFSMEntry
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu fpv4-sp-d16
 343              	ApplicationFSMEntry:
 344              	.LFB261:
 751:Core/Src/main.c ****   }
 752:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 753:Core/Src/main.c **** }
 754:Core/Src/main.c **** 
 755:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 756:Core/Src/main.c **** /**
 757:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 758:Core/Src/main.c **** * @param argument: Not used
 759:Core/Src/main.c **** * @retval None
 760:Core/Src/main.c **** */
 761:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 762:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 763:Core/Src/main.c **** {
 764:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 765:Core/Src/main.c **** 
 766:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 767:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   Qdata.BasePotMax = MiniBot.Base.PotMax;
 770:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 771:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 772:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 773:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 774:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 775:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 776:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 777:Core/Src/main.c ****   
 778:Core/Src/main.c **** 
 779:Core/Src/main.c **** 	/* Infinite loop */
 780:Core/Src/main.c **** 	for(;;)
 781:Core/Src/main.c **** 	{
 782:Core/Src/main.c ****     for(uint8_t i=0; i<4; i++){
 783:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
ARM GAS  /tmp/cczhJEmm.s 			page 21


 784:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 785:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 786:Core/Src/main.c ****     }
 787:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 788:Core/Src/main.c **** 
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 790:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 791:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 792:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 793:Core/Src/main.c **** 
 794:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 795:Core/Src/main.c ****     
 796:Core/Src/main.c ****     if(MiniBotInputQueueHandle != 0){
 797:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 798:Core/Src/main.c ****         // failed to post message
 799:Core/Src/main.c ****         tempFailedToPostMessage = 1;
 800:Core/Src/main.c ****       }
 801:Core/Src/main.c ****     }
 802:Core/Src/main.c ****   
 803:Core/Src/main.c **** 
 804:Core/Src/main.c ****     osDelay(1);
 805:Core/Src/main.c **** 	}
 806:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 807:Core/Src/main.c **** }
 808:Core/Src/main.c **** 
 809:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 810:Core/Src/main.c **** /**
 811:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 812:Core/Src/main.c **** * @param argument: Not used
 813:Core/Src/main.c **** * @retval None
 814:Core/Src/main.c **** */
 815:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 816:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 817:Core/Src/main.c **** {
 345              		.loc 1 817 1 view -0
 346              		.cfi_startproc
 347              		@ Volatile: function does not return.
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              	.LVL17:
 351              		.loc 1 817 1 is_stmt 0 view .LVU82
 352 0000 08B5     		push	{r3, lr}
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 3, -8
 355              		.cfi_offset 14, -4
 356 0002 3AE0     		b	.L21
 357              	.LVL18:
 358              	.L17:
 818:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 819:Core/Src/main.c **** 
 820:Core/Src/main.c ****   // enum State state = Init;
 821:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 822:Core/Src/main.c **** 
 823:Core/Src/main.c ****   /* Infinite loop */
 824:Core/Src/main.c ****   for(;;)
 825:Core/Src/main.c ****   {
 826:Core/Src/main.c ****     if(xQueueSend(LCDPrintQueueHandle, (void*)&state, portMAX_DELAY) != pdPASS){
ARM GAS  /tmp/cczhJEmm.s 			page 22


 827:Core/Src/main.c ****       // failed to post message
 828:Core/Src/main.c ****       tempFailedToPostMessage = 1;
 829:Core/Src/main.c ****     }
 830:Core/Src/main.c ****     if(state == Init){
 831:Core/Src/main.c ****       state = Ready;
 832:Core/Src/main.c ****       
 833:Core/Src/main.c ****     }else if(state == Ready){
 359              		.loc 1 833 11 is_stmt 1 view .LVU83
 360              		.loc 1 833 20 is_stmt 0 view .LVU84
 361 0004 304B     		ldr	r3, .L24
 362 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0008 DBB2     		uxtb	r3, r3
 364              		.loc 1 833 13 view .LVU85
 365 000a 012B     		cmp	r3, #1
 366 000c 25D0     		beq	.L23
 834:Core/Src/main.c ****       if(!HAL_GPIO_ReadPin(GripperButton_GPIO_Port, GripperButton_Pin)){
 835:Core/Src/main.c ****         osDelay(200);
 836:Core/Src/main.c ****         state = Running;
 837:Core/Src/main.c ****       }
 838:Core/Src/main.c **** 
 839:Core/Src/main.c ****     }else if(state == Running){
 367              		.loc 1 839 11 is_stmt 1 view .LVU86
 368              		.loc 1 839 20 is_stmt 0 view .LVU87
 369 000e 2E4B     		ldr	r3, .L24
 370 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 371 0012 DBB2     		uxtb	r3, r3
 372              		.loc 1 839 13 view .LVU88
 373 0014 022B     		cmp	r3, #2
 374 0016 44D1     		bne	.L18
 840:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 841:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 375              		.loc 1 841 7 is_stmt 1 view .LVU89
 376              		.loc 1 841 10 is_stmt 0 view .LVU90
 377 0018 4FF0FF32 		mov	r2, #-1
 378 001c 2B49     		ldr	r1, .L24+4
 379 001e 2C4B     		ldr	r3, .L24+8
 380 0020 1868     		ldr	r0, [r3]
 381 0022 FFF7FEFF 		bl	xQueueReceive
 382              	.LVL19:
 383              		.loc 1 841 9 view .LVU91
 384 0026 0128     		cmp	r0, #1
 385 0028 3BD1     		bne	.L18
 842:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 386              		.loc 1 842 9 is_stmt 1 view .LVU92
 387              		.loc 1 842 24 is_stmt 0 view .LVU93
 388 002a 2A4D     		ldr	r5, .L24+12
 389 002c AC46     		mov	ip, r5
 390 002e 274C     		ldr	r4, .L24+4
 391 0030 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 392 0032 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 393 0036 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 394 0038 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 395 003c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 396 003e ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 397 0042 2368     		ldr	r3, [r4]
 398 0044 CCF80030 		str	r3, [ip]
 843:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
ARM GAS  /tmp/cczhJEmm.s 			page 23


 399              		.loc 1 843 9 is_stmt 1 view .LVU94
 400 0048 0023     		movs	r3, #0
 401 004a 4FF0FF32 		mov	r2, #-1
 402 004e 2946     		mov	r1, r5
 403 0050 2148     		ldr	r0, .L24+16
 404 0052 0068     		ldr	r0, [r0]
 405 0054 FFF7FEFF 		bl	xQueueGenericSend
 406              	.LVL20:
 407 0058 23E0     		b	.L18
 408              	.L23:
 834:Core/Src/main.c ****         osDelay(200);
 409              		.loc 1 834 7 view .LVU95
 834:Core/Src/main.c ****         osDelay(200);
 410              		.loc 1 834 11 is_stmt 0 view .LVU96
 411 005a 4FF40071 		mov	r1, #512
 412 005e 1F48     		ldr	r0, .L24+20
 413 0060 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 414              	.LVL21:
 834:Core/Src/main.c ****         osDelay(200);
 415              		.loc 1 834 9 view .LVU97
 416 0064 E8B9     		cbnz	r0, .L18
 835:Core/Src/main.c ****         state = Running;
 417              		.loc 1 835 9 is_stmt 1 view .LVU98
 418 0066 C820     		movs	r0, #200
 419 0068 FFF7FEFF 		bl	osDelay
 420              	.LVL22:
 836:Core/Src/main.c ****       }
 421              		.loc 1 836 9 view .LVU99
 836:Core/Src/main.c ****       }
 422              		.loc 1 836 15 is_stmt 0 view .LVU100
 423 006c 164B     		ldr	r3, .L24
 424 006e 0222     		movs	r2, #2
 425 0070 1A70     		strb	r2, [r3]
 426 0072 16E0     		b	.L18
 427              	.L20:
 844:Core/Src/main.c ****       }
 845:Core/Src/main.c ****       
 846:Core/Src/main.c ****     }
 847:Core/Src/main.c ****     
 848:Core/Src/main.c ****     if(state == EmergencyStop){
 849:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 850:Core/Src/main.c ****       if(!HAL_GPIO_ReadPin(ResetBtn_GPIO_Port, ResetBtn_Pin)){
 851:Core/Src/main.c ****         osDelay(200);
 852:Core/Src/main.c ****         state = Ready;
 853:Core/Src/main.c ****       }
 854:Core/Src/main.c ****     }
 855:Core/Src/main.c **** 
 856:Core/Src/main.c **** 
 857:Core/Src/main.c **** 
 858:Core/Src/main.c ****     osDelay(1);
 428              		.loc 1 858 5 is_stmt 1 view .LVU101
 429 0074 0120     		movs	r0, #1
 430 0076 FFF7FEFF 		bl	osDelay
 431              	.LVL23:
 824:Core/Src/main.c ****   {
 432              		.loc 1 824 8 view .LVU102
 433              	.L21:
ARM GAS  /tmp/cczhJEmm.s 			page 24


 824:Core/Src/main.c ****   {
 434              		.loc 1 824 3 view .LVU103
 826:Core/Src/main.c ****       // failed to post message
 435              		.loc 1 826 5 view .LVU104
 826:Core/Src/main.c ****       // failed to post message
 436              		.loc 1 826 8 is_stmt 0 view .LVU105
 437 007a 0023     		movs	r3, #0
 438 007c 4FF0FF32 		mov	r2, #-1
 439 0080 1149     		ldr	r1, .L24
 440 0082 1748     		ldr	r0, .L24+24
 441 0084 0068     		ldr	r0, [r0]
 442 0086 FFF7FEFF 		bl	xQueueGenericSend
 443              	.LVL24:
 826:Core/Src/main.c ****       // failed to post message
 444              		.loc 1 826 7 view .LVU106
 445 008a 0128     		cmp	r0, #1
 446 008c 02D0     		beq	.L16
 828:Core/Src/main.c ****     }
 447              		.loc 1 828 7 is_stmt 1 view .LVU107
 828:Core/Src/main.c ****     }
 448              		.loc 1 828 31 is_stmt 0 view .LVU108
 449 008e 154B     		ldr	r3, .L24+28
 450 0090 0122     		movs	r2, #1
 451 0092 1A70     		strb	r2, [r3]
 452              	.L16:
 830:Core/Src/main.c ****       state = Ready;
 453              		.loc 1 830 5 is_stmt 1 view .LVU109
 830:Core/Src/main.c ****       state = Ready;
 454              		.loc 1 830 14 is_stmt 0 view .LVU110
 455 0094 0C4B     		ldr	r3, .L24
 456 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 830:Core/Src/main.c ****       state = Ready;
 457              		.loc 1 830 7 view .LVU111
 458 0098 002B     		cmp	r3, #0
 459 009a B3D1     		bne	.L17
 831:Core/Src/main.c ****       
 460              		.loc 1 831 7 is_stmt 1 view .LVU112
 831:Core/Src/main.c ****       
 461              		.loc 1 831 13 is_stmt 0 view .LVU113
 462 009c 0A4B     		ldr	r3, .L24
 463 009e 0122     		movs	r2, #1
 464 00a0 1A70     		strb	r2, [r3]
 465              	.L18:
 848:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 466              		.loc 1 848 5 is_stmt 1 view .LVU114
 848:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 467              		.loc 1 848 14 is_stmt 0 view .LVU115
 468 00a2 094B     		ldr	r3, .L24
 469 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 470 00a6 DBB2     		uxtb	r3, r3
 848:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 471              		.loc 1 848 7 view .LVU116
 472 00a8 032B     		cmp	r3, #3
 473 00aa E3D1     		bne	.L20
 850:Core/Src/main.c ****         osDelay(200);
 474              		.loc 1 850 7 is_stmt 1 view .LVU117
 850:Core/Src/main.c ****         osDelay(200);
ARM GAS  /tmp/cczhJEmm.s 			page 25


 475              		.loc 1 850 11 is_stmt 0 view .LVU118
 476 00ac 2021     		movs	r1, #32
 477 00ae 0E48     		ldr	r0, .L24+32
 478 00b0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 479              	.LVL25:
 850:Core/Src/main.c ****         osDelay(200);
 480              		.loc 1 850 9 view .LVU119
 481 00b4 0028     		cmp	r0, #0
 482 00b6 DDD1     		bne	.L20
 851:Core/Src/main.c ****         state = Ready;
 483              		.loc 1 851 9 is_stmt 1 view .LVU120
 484 00b8 C820     		movs	r0, #200
 485 00ba FFF7FEFF 		bl	osDelay
 486              	.LVL26:
 852:Core/Src/main.c ****       }
 487              		.loc 1 852 9 view .LVU121
 852:Core/Src/main.c ****       }
 488              		.loc 1 852 15 is_stmt 0 view .LVU122
 489 00be 024B     		ldr	r3, .L24
 490 00c0 0122     		movs	r2, #1
 491 00c2 1A70     		strb	r2, [r3]
 492 00c4 D6E7     		b	.L20
 493              	.L25:
 494 00c6 00BF     		.align	2
 495              	.L24:
 496 00c8 00000000 		.word	.LANCHOR0
 497 00cc 00000000 		.word	.LANCHOR3
 498 00d0 00000000 		.word	.LANCHOR4
 499 00d4 00000000 		.word	.LANCHOR5
 500 00d8 00000000 		.word	.LANCHOR6
 501 00dc 00000240 		.word	1073872896
 502 00e0 00000000 		.word	.LANCHOR1
 503 00e4 00000000 		.word	.LANCHOR2
 504 00e8 00040240 		.word	1073873920
 505              		.cfi_endproc
 506              	.LFE261:
 508              		.section	.rodata.LCDPrintTaskEntry.str1.4,"aMS",%progbits,1
 509              		.align	2
 510              	.LC14:
 511 0000 54657374 		.ascii	"Test\000"
 511      00
 512 0005 000000   		.align	2
 513              	.LC15:
 514 0008 49324320 		.ascii	"I2C LCD\000"
 514      4C434400 
 515              		.align	2
 516              	.LC16:
 517 0010 496E6974 		.ascii	"Initializing\000"
 517      69616C69 
 517      7A696E67 
 517      00
 518 001d 000000   		.align	2
 519              	.LC17:
 520 0020 506C6561 		.ascii	"Please Wait\000"
 520      73652057 
 520      61697400 
 521              		.align	2
ARM GAS  /tmp/cczhJEmm.s 			page 26


 522              	.LC18:
 523 002c 52656164 		.ascii	"Ready\000"
 523      7900
 524 0032 0000     		.align	2
 525              	.LC19:
 526 0034 50726573 		.ascii	"Press Gripper\000"
 526      73204772 
 526      69707065 
 526      7200
 527 0042 0000     		.align	2
 528              	.LC20:
 529 0044 52756E6E 		.ascii	"Running\000"
 529      696E6700 
 530              		.align	2
 531              	.LC21:
 532 004c 456D6572 		.ascii	"Emergency Stop!\000"
 532      67656E63 
 532      79205374 
 532      6F702100 
 533              		.align	2
 534              	.LC22:
 535 005c 50726573 		.ascii	"Press Reset Button\000"
 535      73205265 
 535      73657420 
 535      42757474 
 535      6F6E00
 536              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 537              		.align	1
 538              		.global	LCDPrintTaskEntry
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 542              		.fpu fpv4-sp-d16
 544              	LCDPrintTaskEntry:
 545              	.LVL27:
 546              	.LFB263:
 859:Core/Src/main.c ****   }
 860:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 861:Core/Src/main.c **** }
 862:Core/Src/main.c **** 
 863:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 864:Core/Src/main.c **** /**
 865:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 866:Core/Src/main.c **** * @param argument: Not used
 867:Core/Src/main.c **** * @retval None
 868:Core/Src/main.c **** */
 869:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 870:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
 871:Core/Src/main.c **** {
 872:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 873:Core/Src/main.c **** 
 874:Core/Src/main.c ****   MegaBot_Config_t MegaBot;
 875:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 876:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 877:Core/Src/main.c **** 
 878:Core/Src/main.c **** 
 879:Core/Src/main.c ****   /* Infinite loop */
ARM GAS  /tmp/cczhJEmm.s 			page 27


 880:Core/Src/main.c ****   for(;;)
 881:Core/Src/main.c ****   {
 882:Core/Src/main.c **** 
 883:Core/Src/main.c ****     if(xQueueReceive(MotorControlQueueHandle, (void*)&MotorControl_Qdata_Buf, portMAX_DELAY) == pdP
 884:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 885:Core/Src/main.c ****     }
 886:Core/Src/main.c **** 
 887:Core/Src/main.c **** 
 888:Core/Src/main.c **** 
 889:Core/Src/main.c ****     osDelay(1);
 890:Core/Src/main.c ****   }
 891:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 892:Core/Src/main.c **** }
 893:Core/Src/main.c **** 
 894:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 895:Core/Src/main.c **** /**
 896:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 897:Core/Src/main.c **** * @param argument: Not used
 898:Core/Src/main.c **** * @retval None
 899:Core/Src/main.c **** */
 900:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 901:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 902:Core/Src/main.c **** {
 547              		.loc 1 902 1 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		.loc 1 902 1 is_stmt 0 view .LVU124
 552 0000 10B5     		push	{r4, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 4, -8
 555              		.cfi_offset 14, -4
 556 0002 82B0     		sub	sp, sp, #8
 557              		.cfi_def_cfa_offset 16
 903:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 904:Core/Src/main.c **** 
 905:Core/Src/main.c ****   I2C_LCD_Init(I2C_LCD_1);
 558              		.loc 1 905 3 is_stmt 1 view .LVU125
 559 0004 0020     		movs	r0, #0
 560              	.LVL28:
 561              		.loc 1 905 3 is_stmt 0 view .LVU126
 562 0006 FFF7FEFF 		bl	I2C_LCD_Init
 563              	.LVL29:
 906:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 564              		.loc 1 906 3 is_stmt 1 view .LVU127
 565 000a 0022     		movs	r2, #0
 566 000c 1146     		mov	r1, r2
 567 000e 1046     		mov	r0, r2
 568 0010 FFF7FEFF 		bl	I2C_LCD_SetCursor
 569              	.LVL30:
 907:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "Test");
 570              		.loc 1 907 3 view .LVU128
 571 0014 3C49     		ldr	r1, .L37
 572 0016 0020     		movs	r0, #0
 573 0018 FFF7FEFF 		bl	I2C_LCD_WriteString
 574              	.LVL31:
 908:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
ARM GAS  /tmp/cczhJEmm.s 			page 28


 575              		.loc 1 908 3 view .LVU129
 576 001c 0122     		movs	r2, #1
 577 001e 0021     		movs	r1, #0
 578 0020 0846     		mov	r0, r1
 579 0022 FFF7FEFF 		bl	I2C_LCD_SetCursor
 580              	.LVL32:
 909:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 581              		.loc 1 909 3 view .LVU130
 582 0026 3949     		ldr	r1, .L37+4
 583 0028 0020     		movs	r0, #0
 584 002a FFF7FEFF 		bl	I2C_LCD_WriteString
 585              	.LVL33:
 910:Core/Src/main.c **** 
 911:Core/Src/main.c ****   enum State CurrentState;
 586              		.loc 1 911 3 view .LVU131
 912:Core/Src/main.c ****   enum State LastState = Init;
 587              		.loc 1 912 3 view .LVU132
 588              		.loc 1 912 14 is_stmt 0 view .LVU133
 589 002e 0024     		movs	r4, #0
 590 0030 16E0     		b	.L32
 591              	.LVL34:
 592              	.L34:
 913:Core/Src/main.c **** 
 914:Core/Src/main.c ****   /* Infinite loop */
 915:Core/Src/main.c ****   for(;;)
 916:Core/Src/main.c ****   {
 917:Core/Src/main.c **** 
 918:Core/Src/main.c ****     if(xQueueReceive(LCDPrintQueueHandle, (void*)&CurrentState, portMAX_DELAY) == pdPASS){
 919:Core/Src/main.c ****       if(LastState != CurrentState){
 920:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 921:Core/Src/main.c ****         if(CurrentState == Init){
 922:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 593              		.loc 1 922 9 is_stmt 1 view .LVU134
 594 0032 0022     		movs	r2, #0
 595 0034 1146     		mov	r1, r2
 596 0036 1046     		mov	r0, r2
 597 0038 FFF7FEFF 		bl	I2C_LCD_SetCursor
 598              	.LVL35:
 923:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Initializing");
 599              		.loc 1 923 9 view .LVU135
 600 003c 3449     		ldr	r1, .L37+8
 601 003e 0020     		movs	r0, #0
 602 0040 FFF7FEFF 		bl	I2C_LCD_WriteString
 603              	.LVL36:
 924:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 604              		.loc 1 924 9 view .LVU136
 605 0044 0122     		movs	r2, #1
 606 0046 0021     		movs	r1, #0
 607 0048 0846     		mov	r0, r1
 608 004a FFF7FEFF 		bl	I2C_LCD_SetCursor
 609              	.LVL37:
 925:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Please Wait");
 610              		.loc 1 925 9 view .LVU137
 611 004e 3149     		ldr	r1, .L37+12
 612 0050 0020     		movs	r0, #0
 613 0052 FFF7FEFF 		bl	I2C_LCD_WriteString
 614              	.LVL38:
ARM GAS  /tmp/cczhJEmm.s 			page 29


 615              	.L29:
 926:Core/Src/main.c **** 
 927:Core/Src/main.c ****         }else if(CurrentState == Ready){
 928:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 929:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Ready");
 930:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 931:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Gripper");
 932:Core/Src/main.c **** 
 933:Core/Src/main.c ****         }else if(CurrentState == Running){
 934:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 935:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Running");
 936:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 937:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 938:Core/Src/main.c **** 
 939:Core/Src/main.c ****         }else if(CurrentState == EmergencyStop){
 940:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 941:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Emergency Stop!");
 942:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 943:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Reset Button");
 944:Core/Src/main.c **** 
 945:Core/Src/main.c ****         }
 946:Core/Src/main.c ****         LastState = CurrentState;
 616              		.loc 1 946 9 view .LVU138
 617              		.loc 1 946 19 is_stmt 0 view .LVU139
 618 0056 9DF80740 		ldrb	r4, [sp, #7]	@ zero_extendqisi2
 619              	.LVL39:
 620              	.L27:
 947:Core/Src/main.c ****       }
 948:Core/Src/main.c ****     }
 949:Core/Src/main.c **** 
 950:Core/Src/main.c ****     osDelay(1);
 621              		.loc 1 950 5 is_stmt 1 view .LVU140
 622 005a 0120     		movs	r0, #1
 623 005c FFF7FEFF 		bl	osDelay
 624              	.LVL40:
 915:Core/Src/main.c ****   {
 625              		.loc 1 915 8 view .LVU141
 626              	.L32:
 915:Core/Src/main.c ****   {
 627              		.loc 1 915 3 view .LVU142
 918:Core/Src/main.c ****       if(LastState != CurrentState){
 628              		.loc 1 918 5 view .LVU143
 918:Core/Src/main.c ****       if(LastState != CurrentState){
 629              		.loc 1 918 8 is_stmt 0 view .LVU144
 630 0060 4FF0FF32 		mov	r2, #-1
 631 0064 0DF10701 		add	r1, sp, #7
 632 0068 2B4B     		ldr	r3, .L37+16
 633 006a 1868     		ldr	r0, [r3]
 634 006c FFF7FEFF 		bl	xQueueReceive
 635              	.LVL41:
 918:Core/Src/main.c ****       if(LastState != CurrentState){
 636              		.loc 1 918 7 view .LVU145
 637 0070 0128     		cmp	r0, #1
 638 0072 F2D1     		bne	.L27
 919:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 639              		.loc 1 919 7 is_stmt 1 view .LVU146
 919:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
ARM GAS  /tmp/cczhJEmm.s 			page 30


 640              		.loc 1 919 20 is_stmt 0 view .LVU147
 641 0074 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 919:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 642              		.loc 1 919 9 view .LVU148
 643 0078 A342     		cmp	r3, r4
 644 007a EED0     		beq	.L27
 920:Core/Src/main.c ****         if(CurrentState == Init){
 645              		.loc 1 920 9 is_stmt 1 view .LVU149
 646 007c 0020     		movs	r0, #0
 647 007e FFF7FEFF 		bl	I2C_LCD_Clear
 648              	.LVL42:
 921:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 649              		.loc 1 921 9 view .LVU150
 921:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 650              		.loc 1 921 25 is_stmt 0 view .LVU151
 651 0082 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 921:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 652              		.loc 1 921 11 view .LVU152
 653 0086 002B     		cmp	r3, #0
 654 0088 D3D0     		beq	.L34
 927:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 655              		.loc 1 927 15 is_stmt 1 view .LVU153
 927:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 656              		.loc 1 927 17 is_stmt 0 view .LVU154
 657 008a 012B     		cmp	r3, #1
 658 008c 16D0     		beq	.L35
 933:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 659              		.loc 1 933 15 is_stmt 1 view .LVU155
 933:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 660              		.loc 1 933 17 is_stmt 0 view .LVU156
 661 008e 022B     		cmp	r3, #2
 662 0090 27D0     		beq	.L36
 939:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 663              		.loc 1 939 15 is_stmt 1 view .LVU157
 939:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 664              		.loc 1 939 17 is_stmt 0 view .LVU158
 665 0092 032B     		cmp	r3, #3
 666 0094 DFD1     		bne	.L29
 940:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Emergency Stop!");
 667              		.loc 1 940 9 is_stmt 1 view .LVU159
 668 0096 0022     		movs	r2, #0
 669 0098 1146     		mov	r1, r2
 670 009a 1046     		mov	r0, r2
 671 009c FFF7FEFF 		bl	I2C_LCD_SetCursor
 672              	.LVL43:
 941:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 673              		.loc 1 941 9 view .LVU160
 674 00a0 1E49     		ldr	r1, .L37+20
 675 00a2 0020     		movs	r0, #0
 676 00a4 FFF7FEFF 		bl	I2C_LCD_WriteString
 677              	.LVL44:
 942:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Reset Button");
 678              		.loc 1 942 9 view .LVU161
 679 00a8 0122     		movs	r2, #1
 680 00aa 0021     		movs	r1, #0
 681 00ac 0846     		mov	r0, r1
 682 00ae FFF7FEFF 		bl	I2C_LCD_SetCursor
ARM GAS  /tmp/cczhJEmm.s 			page 31


 683              	.LVL45:
 943:Core/Src/main.c **** 
 684              		.loc 1 943 9 view .LVU162
 685 00b2 1B49     		ldr	r1, .L37+24
 686 00b4 0020     		movs	r0, #0
 687 00b6 FFF7FEFF 		bl	I2C_LCD_WriteString
 688              	.LVL46:
 689 00ba CCE7     		b	.L29
 690              	.L35:
 928:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Ready");
 691              		.loc 1 928 9 view .LVU163
 692 00bc 0022     		movs	r2, #0
 693 00be 1146     		mov	r1, r2
 694 00c0 1046     		mov	r0, r2
 695 00c2 FFF7FEFF 		bl	I2C_LCD_SetCursor
 696              	.LVL47:
 929:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 697              		.loc 1 929 9 view .LVU164
 698 00c6 1749     		ldr	r1, .L37+28
 699 00c8 0020     		movs	r0, #0
 700 00ca FFF7FEFF 		bl	I2C_LCD_WriteString
 701              	.LVL48:
 930:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Gripper");
 702              		.loc 1 930 9 view .LVU165
 703 00ce 0122     		movs	r2, #1
 704 00d0 0021     		movs	r1, #0
 705 00d2 0846     		mov	r0, r1
 706 00d4 FFF7FEFF 		bl	I2C_LCD_SetCursor
 707              	.LVL49:
 931:Core/Src/main.c **** 
 708              		.loc 1 931 9 view .LVU166
 709 00d8 1349     		ldr	r1, .L37+32
 710 00da 0020     		movs	r0, #0
 711 00dc FFF7FEFF 		bl	I2C_LCD_WriteString
 712              	.LVL50:
 713 00e0 B9E7     		b	.L29
 714              	.L36:
 934:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Running");
 715              		.loc 1 934 9 view .LVU167
 716 00e2 0022     		movs	r2, #0
 717 00e4 1146     		mov	r1, r2
 718 00e6 1046     		mov	r0, r2
 719 00e8 FFF7FEFF 		bl	I2C_LCD_SetCursor
 720              	.LVL51:
 935:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 721              		.loc 1 935 9 view .LVU168
 722 00ec 0F49     		ldr	r1, .L37+36
 723 00ee 0020     		movs	r0, #0
 724 00f0 FFF7FEFF 		bl	I2C_LCD_WriteString
 725              	.LVL52:
 936:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 726              		.loc 1 936 9 view .LVU169
 727 00f4 0122     		movs	r2, #1
 728 00f6 0021     		movs	r1, #0
 729 00f8 0846     		mov	r0, r1
 730 00fa FFF7FEFF 		bl	I2C_LCD_SetCursor
 731              	.LVL53:
ARM GAS  /tmp/cczhJEmm.s 			page 32


 937:Core/Src/main.c **** 
 732              		.loc 1 937 9 view .LVU170
 733 00fe 0349     		ldr	r1, .L37+4
 734 0100 0020     		movs	r0, #0
 735 0102 FFF7FEFF 		bl	I2C_LCD_WriteString
 736              	.LVL54:
 737 0106 A6E7     		b	.L29
 738              	.L38:
 739              		.align	2
 740              	.L37:
 741 0108 00000000 		.word	.LC14
 742 010c 08000000 		.word	.LC15
 743 0110 10000000 		.word	.LC16
 744 0114 20000000 		.word	.LC17
 745 0118 00000000 		.word	.LANCHOR1
 746 011c 4C000000 		.word	.LC21
 747 0120 5C000000 		.word	.LC22
 748 0124 2C000000 		.word	.LC18
 749 0128 34000000 		.word	.LC19
 750 012c 44000000 		.word	.LC20
 751              		.cfi_endproc
 752              	.LFE263:
 754              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 755              		.align	1
 756              		.global	HAL_GPIO_EXTI_Callback
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 760              		.fpu fpv4-sp-d16
 762              	HAL_GPIO_EXTI_Callback:
 763              	.LVL55:
 764              	.LFB244:
 187:Core/Src/main.c ****   state = EmergencyStop;
 765              		.loc 1 187 1 view -0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 188:Core/Src/main.c **** }
 770              		.loc 1 188 3 view .LVU172
 188:Core/Src/main.c **** }
 771              		.loc 1 188 9 is_stmt 0 view .LVU173
 772 0000 014B     		ldr	r3, .L40
 773 0002 0322     		movs	r2, #3
 774 0004 1A70     		strb	r2, [r3]
 189:Core/Src/main.c **** 
 775              		.loc 1 189 1 view .LVU174
 776 0006 7047     		bx	lr
 777              	.L41:
 778              		.align	2
 779              	.L40:
 780 0008 00000000 		.word	.LANCHOR0
 781              		.cfi_endproc
 782              	.LFE244:
 784              		.section	.text.MiniBotInit,"ax",%progbits
 785              		.align	1
 786              		.global	MiniBotInit
ARM GAS  /tmp/cczhJEmm.s 			page 33


 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv4-sp-d16
 792              	MiniBotInit:
 793              	.LVL56:
 794              	.LFB252:
 600:Core/Src/main.c **** 	// Configure Each of the joints
 795              		.loc 1 600 44 is_stmt 1 view -0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 600:Core/Src/main.c **** 	// Configure Each of the joints
 799              		.loc 1 600 44 is_stmt 0 view .LVU176
 800 0000 00B5     		push	{lr}
 801              		.cfi_def_cfa_offset 4
 802              		.cfi_offset 14, -4
 603:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 803              		.loc 1 603 4 is_stmt 1 view .LVU177
 603:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 804              		.loc 1 603 25 is_stmt 0 view .LVU178
 805 0002 0023     		movs	r3, #0
 806 0004 0370     		strb	r3, [r0]
 604:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 807              		.loc 1 604 4 is_stmt 1 view .LVU179
 604:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 808              		.loc 1 604 25 is_stmt 0 view .LVU180
 809 0006 4FF44872 		mov	r2, #800
 810 000a 4260     		str	r2, [r0, #4]
 605:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 811              		.loc 1 605 4 is_stmt 1 view .LVU181
 605:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 812              		.loc 1 605 25 is_stmt 0 view .LVU182
 813 000c 40F64851 		movw	r1, #3400
 814 0010 8160     		str	r1, [r0, #8]
 606:Core/Src/main.c **** 
 815              		.loc 1 606 4 is_stmt 1 view .LVU183
 606:Core/Src/main.c **** 
 816              		.loc 1 606 33 is_stmt 0 view .LVU184
 817 0012 0373     		strb	r3, [r0, #12]
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 818              		.loc 1 608 4 is_stmt 1 view .LVU185
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 819              		.loc 1 608 29 is_stmt 0 view .LVU186
 820 0014 4FF0010C 		mov	ip, #1
 821 0018 80F810C0 		strb	ip, [r0, #16]
 609:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 822              		.loc 1 609 4 is_stmt 1 view .LVU187
 609:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 823              		.loc 1 609 29 is_stmt 0 view .LVU188
 824 001c 4FF41672 		mov	r2, #600
 825 0020 4261     		str	r2, [r0, #20]
 610:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 826              		.loc 1 610 4 is_stmt 1 view .LVU189
 610:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 827              		.loc 1 610 29 is_stmt 0 view .LVU190
 828 0022 8161     		str	r1, [r0, #24]
ARM GAS  /tmp/cczhJEmm.s 			page 34


 611:Core/Src/main.c **** 
 829              		.loc 1 611 4 is_stmt 1 view .LVU191
 611:Core/Src/main.c **** 
 830              		.loc 1 611 37 is_stmt 0 view .LVU192
 831 0024 0377     		strb	r3, [r0, #28]
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 832              		.loc 1 613 4 is_stmt 1 view .LVU193
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 833              		.loc 1 613 26 is_stmt 0 view .LVU194
 834 0026 4FF0020E 		mov	lr, #2
 835 002a 80F820E0 		strb	lr, [r0, #32]
 614:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 836              		.loc 1 614 4 is_stmt 1 view .LVU195
 614:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 837              		.loc 1 614 26 is_stmt 0 view .LVU196
 838 002e 4262     		str	r2, [r0, #36]
 615:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 839              		.loc 1 615 4 is_stmt 1 view .LVU197
 615:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 840              		.loc 1 615 26 is_stmt 0 view .LVU198
 841 0030 8162     		str	r1, [r0, #40]
 616:Core/Src/main.c **** 
 842              		.loc 1 616 4 is_stmt 1 view .LVU199
 616:Core/Src/main.c **** 
 843              		.loc 1 616 34 is_stmt 0 view .LVU200
 844 0032 80F82C30 		strb	r3, [r0, #44]
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 845              		.loc 1 618 4 is_stmt 1 view .LVU201
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 846              		.loc 1 618 26 is_stmt 0 view .LVU202
 847 0036 0323     		movs	r3, #3
 848 0038 80F83030 		strb	r3, [r0, #48]
 619:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 849              		.loc 1 619 4 is_stmt 1 view .LVU203
 619:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 850              		.loc 1 619 26 is_stmt 0 view .LVU204
 851 003c 4263     		str	r2, [r0, #52]
 620:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 852              		.loc 1 620 4 is_stmt 1 view .LVU205
 620:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 853              		.loc 1 620 26 is_stmt 0 view .LVU206
 854 003e 4FF44863 		mov	r3, #3200
 855 0042 8363     		str	r3, [r0, #56]
 621:Core/Src/main.c **** 
 856              		.loc 1 621 4 is_stmt 1 view .LVU207
 621:Core/Src/main.c **** 
 857              		.loc 1 621 34 is_stmt 0 view .LVU208
 858 0044 80F83CC0 		strb	ip, [r0, #60]
 623:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 859              		.loc 1 623 4 is_stmt 1 view .LVU209
 623:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 860              		.loc 1 623 27 is_stmt 0 view .LVU210
 861 0048 034B     		ldr	r3, .L44
 862 004a 0364     		str	r3, [r0, #64]
 624:Core/Src/main.c **** }
 863              		.loc 1 624 4 is_stmt 1 view .LVU211
 624:Core/Src/main.c **** }
ARM GAS  /tmp/cczhJEmm.s 			page 35


 864              		.loc 1 624 30 is_stmt 0 view .LVU212
 865 004c 4FF40073 		mov	r3, #512
 866 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 625:Core/Src/main.c **** 
 867              		.loc 1 625 1 view .LVU213
 868 0054 5DF804FB 		ldr	pc, [sp], #4
 869              	.L45:
 870              		.align	2
 871              	.L44:
 872 0058 00000240 		.word	1073872896
 873              		.cfi_endproc
 874              	.LFE252:
 876              		.section	.text.ServoDriverInit,"ax",%progbits
 877              		.align	1
 878              		.global	ServoDriverInit
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 882              		.fpu fpv4-sp-d16
 884              	ServoDriverInit:
 885              	.LVL57:
 886              	.LFB254:
 657:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 887              		.loc 1 657 48 is_stmt 1 view -0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 0
 890              		@ frame_needed = 0, uses_anonymous_args = 0
 657:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 891              		.loc 1 657 48 is_stmt 0 view .LVU215
 892 0000 10B5     		push	{r4, lr}
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 4, -8
 895              		.cfi_offset 14, -4
 896 0002 0446     		mov	r4, r0
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 897              		.loc 1 658 3 is_stmt 1 view .LVU216
 898 0004 1648     		ldr	r0, .L48
 899              	.LVL58:
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 900              		.loc 1 658 3 is_stmt 0 view .LVU217
 901 0006 FFF7FEFF 		bl	PCA9685_Init
 902              	.LVL59:
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 903              		.loc 1 659 3 is_stmt 1 view .LVU218
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 904              		.loc 1 659 62 is_stmt 0 view .LVU219
 905 000a E388     		ldrh	r3, [r4, #6]
 906 000c 00EE103A 		vmov	s0, r3	@ int
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 907              		.loc 1 659 3 view .LVU220
 908 0010 B8EE400A 		vcvt.f32.u32	s0, s0
 909 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 910 0016 FFF7FEFF 		bl	PCA9685_SetServoAngle
 911              	.LVL60:
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 912              		.loc 1 660 3 is_stmt 1 view .LVU221
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
ARM GAS  /tmp/cczhJEmm.s 			page 36


 913              		.loc 1 660 70 is_stmt 0 view .LVU222
 914 001a E389     		ldrh	r3, [r4, #14]
 915 001c 00EE103A 		vmov	s0, r3	@ int
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 916              		.loc 1 660 3 view .LVU223
 917 0020 B8EE400A 		vcvt.f32.u32	s0, s0
 918 0024 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 919 0026 FFF7FEFF 		bl	PCA9685_SetServoAngle
 920              	.LVL61:
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 921              		.loc 1 661 3 is_stmt 1 view .LVU224
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 922              		.loc 1 661 64 is_stmt 0 view .LVU225
 923 002a E38A     		ldrh	r3, [r4, #22]
 924 002c 00EE103A 		vmov	s0, r3	@ int
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 925              		.loc 1 661 3 view .LVU226
 926 0030 B8EE400A 		vcvt.f32.u32	s0, s0
 927 0034 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 928 0036 FFF7FEFF 		bl	PCA9685_SetServoAngle
 929              	.LVL62:
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 930              		.loc 1 662 3 is_stmt 1 view .LVU227
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 931              		.loc 1 662 64 is_stmt 0 view .LVU228
 932 003a E38B     		ldrh	r3, [r4, #30]
 933 003c 00EE103A 		vmov	s0, r3	@ int
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 934              		.loc 1 662 3 view .LVU229
 935 0040 B8EE400A 		vcvt.f32.u32	s0, s0
 936 0044 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 937 0046 FFF7FEFF 		bl	PCA9685_SetServoAngle
 938              	.LVL63:
 663:Core/Src/main.c **** }
 939              		.loc 1 663 3 is_stmt 1 view .LVU230
 663:Core/Src/main.c **** }
 940              		.loc 1 663 68 is_stmt 0 view .LVU231
 941 004a E38C     		ldrh	r3, [r4, #38]
 942 004c 00EE103A 		vmov	s0, r3	@ int
 663:Core/Src/main.c **** }
 943              		.loc 1 663 3 view .LVU232
 944 0050 B8EE400A 		vcvt.f32.u32	s0, s0
 945 0054 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 946 0058 FFF7FEFF 		bl	PCA9685_SetServoAngle
 947              	.LVL64:
 664:Core/Src/main.c **** 
 948              		.loc 1 664 1 view .LVU233
 949 005c 10BD     		pop	{r4, pc}
 950              	.LVL65:
 951              	.L49:
 664:Core/Src/main.c **** 
 952              		.loc 1 664 1 view .LVU234
 953 005e 00BF     		.align	2
 954              	.L48:
 955 0060 00000000 		.word	.LANCHOR7
 956              		.cfi_endproc
 957              	.LFE254:
ARM GAS  /tmp/cczhJEmm.s 			page 37


 959              		.section	.text.MegaBotInit,"ax",%progbits
 960              		.align	1
 961              		.global	MegaBotInit
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 965              		.fpu fpv4-sp-d16
 967              	MegaBotInit:
 968              	.LVL66:
 969              	.LFB253:
 627:Core/Src/main.c ****   // Configure Each of the joints
 970              		.loc 1 627 44 is_stmt 1 view -0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 627:Core/Src/main.c ****   // Configure Each of the joints
 974              		.loc 1 627 44 is_stmt 0 view .LVU236
 975 0000 08B5     		push	{r3, lr}
 976              		.cfi_def_cfa_offset 8
 977              		.cfi_offset 3, -8
 978              		.cfi_offset 14, -4
 629:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 979              		.loc 1 629 3 is_stmt 1 view .LVU237
 629:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 980              		.loc 1 629 26 is_stmt 0 view .LVU238
 981 0002 0022     		movs	r2, #0
 982 0004 0270     		strb	r2, [r0]
 630:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 983              		.loc 1 630 3 is_stmt 1 view .LVU239
 630:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 984              		.loc 1 630 26 is_stmt 0 view .LVU240
 985 0006 4280     		strh	r2, [r0, #2]	@ movhi
 631:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 986              		.loc 1 631 3 is_stmt 1 view .LVU241
 631:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 987              		.loc 1 631 26 is_stmt 0 view .LVU242
 988 0008 B421     		movs	r1, #180
 989 000a 8180     		strh	r1, [r0, #4]	@ movhi
 632:Core/Src/main.c **** 
 990              		.loc 1 632 3 is_stmt 1 view .LVU243
 632:Core/Src/main.c **** 
 991              		.loc 1 632 32 is_stmt 0 view .LVU244
 992 000c 4FF05A0C 		mov	ip, #90
 993 0010 A0F806C0 		strh	ip, [r0, #6]	@ movhi
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 994              		.loc 1 634 3 is_stmt 1 view .LVU245
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 995              		.loc 1 634 30 is_stmt 0 view .LVU246
 996 0014 4FF0010E 		mov	lr, #1
 997 0018 80F808E0 		strb	lr, [r0, #8]
 635:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 998              		.loc 1 635 3 is_stmt 1 view .LVU247
 635:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 999              		.loc 1 635 30 is_stmt 0 view .LVU248
 1000 001c 4281     		strh	r2, [r0, #10]	@ movhi
 636:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 1001              		.loc 1 636 3 is_stmt 1 view .LVU249
ARM GAS  /tmp/cczhJEmm.s 			page 38


 636:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 1002              		.loc 1 636 30 is_stmt 0 view .LVU250
 1003 001e 8181     		strh	r1, [r0, #12]	@ movhi
 637:Core/Src/main.c **** 
 1004              		.loc 1 637 3 is_stmt 1 view .LVU251
 637:Core/Src/main.c **** 
 1005              		.loc 1 637 36 is_stmt 0 view .LVU252
 1006 0020 C281     		strh	r2, [r0, #14]	@ movhi
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 1007              		.loc 1 639 3 is_stmt 1 view .LVU253
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 1008              		.loc 1 639 27 is_stmt 0 view .LVU254
 1009 0022 4FF0020E 		mov	lr, #2
 1010 0026 80F810E0 		strb	lr, [r0, #16]
 640:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 1011              		.loc 1 640 3 is_stmt 1 view .LVU255
 640:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 1012              		.loc 1 640 27 is_stmt 0 view .LVU256
 1013 002a 4FF0320E 		mov	lr, #50
 1014 002e A0F812E0 		strh	lr, [r0, #18]	@ movhi
 641:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 1015              		.loc 1 641 3 is_stmt 1 view .LVU257
 641:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 1016              		.loc 1 641 27 is_stmt 0 view .LVU258
 1017 0032 8182     		strh	r1, [r0, #20]	@ movhi
 642:Core/Src/main.c **** 
 1018              		.loc 1 642 3 is_stmt 1 view .LVU259
 642:Core/Src/main.c **** 
 1019              		.loc 1 642 33 is_stmt 0 view .LVU260
 1020 0034 C182     		strh	r1, [r0, #22]	@ movhi
 644:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 1021              		.loc 1 644 3 is_stmt 1 view .LVU261
 644:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 1022              		.loc 1 644 27 is_stmt 0 view .LVU262
 1023 0036 4FF0030E 		mov	lr, #3
 1024 003a 80F818E0 		strb	lr, [r0, #24]
 645:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 1025              		.loc 1 645 3 is_stmt 1 view .LVU263
 645:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 1026              		.loc 1 645 27 is_stmt 0 view .LVU264
 1027 003e 4283     		strh	r2, [r0, #26]	@ movhi
 646:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 1028              		.loc 1 646 3 is_stmt 1 view .LVU265
 646:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 1029              		.loc 1 646 27 is_stmt 0 view .LVU266
 1030 0040 8183     		strh	r1, [r0, #28]	@ movhi
 647:Core/Src/main.c **** 
 1031              		.loc 1 647 3 is_stmt 1 view .LVU267
 647:Core/Src/main.c **** 
 1032              		.loc 1 647 33 is_stmt 0 view .LVU268
 1033 0042 A0F81EC0 		strh	ip, [r0, #30]	@ movhi
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 1034              		.loc 1 649 3 is_stmt 1 view .LVU269
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 1035              		.loc 1 649 29 is_stmt 0 view .LVU270
 1036 0046 0421     		movs	r1, #4
 1037 0048 80F82010 		strb	r1, [r0, #32]
ARM GAS  /tmp/cczhJEmm.s 			page 39


 650:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 1038              		.loc 1 650 3 is_stmt 1 view .LVU271
 650:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 1039              		.loc 1 650 29 is_stmt 0 view .LVU272
 1040 004c 4284     		strh	r2, [r0, #34]	@ movhi
 651:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 1041              		.loc 1 651 3 is_stmt 1 view .LVU273
 651:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 1042              		.loc 1 651 29 is_stmt 0 view .LVU274
 1043 004e 4621     		movs	r1, #70
 1044 0050 8184     		strh	r1, [r0, #36]	@ movhi
 652:Core/Src/main.c **** 
 1045              		.loc 1 652 3 is_stmt 1 view .LVU275
 652:Core/Src/main.c **** 
 1046              		.loc 1 652 35 is_stmt 0 view .LVU276
 1047 0052 C284     		strh	r2, [r0, #38]	@ movhi
 654:Core/Src/main.c **** }
 1048              		.loc 1 654 3 is_stmt 1 view .LVU277
 1049 0054 FFF7FEFF 		bl	ServoDriverInit
 1050              	.LVL67:
 655:Core/Src/main.c **** 
 1051              		.loc 1 655 1 is_stmt 0 view .LVU278
 1052 0058 08BD     		pop	{r3, pc}
 1053              		.cfi_endproc
 1054              	.LFE253:
 1056              		.section	.text.QPotDataUpdate,"ax",%progbits
 1057              		.align	1
 1058              		.global	QPotDataUpdate
 1059              		.syntax unified
 1060              		.thumb
 1061              		.thumb_func
 1062              		.fpu fpv4-sp-d16
 1064              	QPotDataUpdate:
 1065              	.LVL68:
 1066              	.LFB255:
 667:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 1067              		.loc 1 667 111 is_stmt 1 view -0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              		@ link register save eliminated.
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1072              		.loc 1 668 3 view .LVU280
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1073              		.loc 1 668 20 is_stmt 0 view .LVU281
 1074 0000 1368     		ldr	r3, [r2]
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1075              		.loc 1 668 30 view .LVU282
 1076 0002 0A33     		adds	r3, r3, #10
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1077              		.loc 1 668 5 view .LVU283
 1078 0004 8342     		cmp	r3, r0
 1079 0006 03D3     		bcc	.L53
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1080              		.loc 1 668 52 discriminator 1 view .LVU284
 1081 0008 1368     		ldr	r3, [r2]
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
ARM GAS  /tmp/cczhJEmm.s 			page 40


 1082              		.loc 1 668 62 discriminator 1 view .LVU285
 1083 000a 0A3B     		subs	r3, r3, #10
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1084              		.loc 1 668 35 discriminator 1 view .LVU286
 1085 000c 8342     		cmp	r3, r0
 1086 000e 0CD9     		bls	.L52
 1087              	.L53:
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1088              		.loc 1 669 5 is_stmt 1 view .LVU287
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1089              		.loc 1 669 27 is_stmt 0 view .LVU288
 1090 0010 8B68     		ldr	r3, [r1, #8]
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1091              		.loc 1 669 7 view .LVU289
 1092 0012 8342     		cmp	r3, r0
 1093 0014 0AD2     		bcs	.L55
 670:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1094              		.loc 1 670 7 is_stmt 1 view .LVU290
 670:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1095              		.loc 1 670 24 is_stmt 0 view .LVU291
 1096 0016 8B68     		ldr	r3, [r1, #8]
 670:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1097              		.loc 1 670 17 view .LVU292
 1098 0018 1360     		str	r3, [r2]
 1099              	.L56:
 676:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1100              		.loc 1 676 5 is_stmt 1 view .LVU293
 676:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1101              		.loc 1 676 13 is_stmt 0 view .LVU294
 1102 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 676:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1103              		.loc 1 676 7 view .LVU295
 1104 001c 2BB1     		cbz	r3, .L52
 677:Core/Src/main.c ****     }
 1105              		.loc 1 677 7 is_stmt 1 view .LVU296
 677:Core/Src/main.c ****     }
 1106              		.loc 1 677 24 is_stmt 0 view .LVU297
 1107 001e 8B68     		ldr	r3, [r1, #8]
 677:Core/Src/main.c ****     }
 1108              		.loc 1 677 35 view .LVU298
 1109 0020 1068     		ldr	r0, [r2]
 1110              	.LVL69:
 677:Core/Src/main.c ****     }
 1111              		.loc 1 677 33 view .LVU299
 1112 0022 1B1A     		subs	r3, r3, r0
 677:Core/Src/main.c ****     }
 1113              		.loc 1 677 52 view .LVU300
 1114 0024 4968     		ldr	r1, [r1, #4]
 1115              	.LVL70:
 677:Core/Src/main.c ****     }
 1116              		.loc 1 677 45 view .LVU301
 1117 0026 0B44     		add	r3, r3, r1
 677:Core/Src/main.c ****     }
 1118              		.loc 1 677 17 view .LVU302
 1119 0028 1360     		str	r3, [r2]
 1120              	.L52:
 680:Core/Src/main.c **** 
ARM GAS  /tmp/cczhJEmm.s 			page 41


 1121              		.loc 1 680 1 view .LVU303
 1122 002a 7047     		bx	lr
 1123              	.LVL71:
 1124              	.L55:
 671:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1125              		.loc 1 671 11 is_stmt 1 view .LVU304
 671:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1126              		.loc 1 671 33 is_stmt 0 view .LVU305
 1127 002c 4B68     		ldr	r3, [r1, #4]
 671:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1128              		.loc 1 671 13 view .LVU306
 1129 002e 8342     		cmp	r3, r0
 1130 0030 02D9     		bls	.L57
 672:Core/Src/main.c ****     }else{
 1131              		.loc 1 672 7 is_stmt 1 view .LVU307
 672:Core/Src/main.c ****     }else{
 1132              		.loc 1 672 24 is_stmt 0 view .LVU308
 1133 0032 4B68     		ldr	r3, [r1, #4]
 672:Core/Src/main.c ****     }else{
 1134              		.loc 1 672 17 view .LVU309
 1135 0034 1360     		str	r3, [r2]
 1136 0036 F0E7     		b	.L56
 1137              	.L57:
 674:Core/Src/main.c ****     }
 1138              		.loc 1 674 7 is_stmt 1 view .LVU310
 674:Core/Src/main.c ****     }
 1139              		.loc 1 674 17 is_stmt 0 view .LVU311
 1140 0038 1060     		str	r0, [r2]
 1141 003a EEE7     		b	.L56
 1142              		.cfi_endproc
 1143              	.LFE255:
 1145              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 1146              		.align	1
 1147              		.global	MiniBotInputsEntry
 1148              		.syntax unified
 1149              		.thumb
 1150              		.thumb_func
 1151              		.fpu fpv4-sp-d16
 1153              	MiniBotInputsEntry:
 1154              	.LVL72:
 1155              	.LFB260:
 763:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1156              		.loc 1 763 1 is_stmt 1 view -0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 72
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 763:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1160              		.loc 1 763 1 is_stmt 0 view .LVU313
 1161 0000 30B5     		push	{r4, r5, lr}
 1162              		.cfi_def_cfa_offset 12
 1163              		.cfi_offset 4, -12
 1164              		.cfi_offset 5, -8
 1165              		.cfi_offset 14, -4
 1166 0002 93B0     		sub	sp, sp, #76
 1167              		.cfi_def_cfa_offset 88
 766:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 1168              		.loc 1 766 2 is_stmt 1 view .LVU314
ARM GAS  /tmp/cczhJEmm.s 			page 42


 767:Core/Src/main.c **** 
 1169              		.loc 1 767 2 view .LVU315
 1170 0004 6846     		mov	r0, sp
 1171              	.LVL73:
 767:Core/Src/main.c **** 
 1172              		.loc 1 767 2 is_stmt 0 view .LVU316
 1173 0006 FFF7FEFF 		bl	MiniBotInit
 1174              	.LVL74:
 769:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 1175              		.loc 1 769 3 is_stmt 1 view .LVU317
 769:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 1176              		.loc 1 769 20 is_stmt 0 view .LVU318
 1177 000a 2D4B     		ldr	r3, .L64
 1178 000c 029A     		ldr	r2, [sp, #8]
 1179 000e 9A60     		str	r2, [r3, #8]
 770:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1180              		.loc 1 770 3 is_stmt 1 view .LVU319
 770:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1181              		.loc 1 770 34 is_stmt 0 view .LVU320
 1182 0010 019A     		ldr	r2, [sp, #4]
 770:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1183              		.loc 1 770 20 view .LVU321
 1184 0012 5A60     		str	r2, [r3, #4]
 771:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1185              		.loc 1 771 3 is_stmt 1 view .LVU322
 771:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1186              		.loc 1 771 42 is_stmt 0 view .LVU323
 1187 0014 069A     		ldr	r2, [sp, #24]
 771:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1188              		.loc 1 771 24 view .LVU324
 1189 0016 5A61     		str	r2, [r3, #20]
 772:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1190              		.loc 1 772 3 is_stmt 1 view .LVU325
 772:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1191              		.loc 1 772 42 is_stmt 0 view .LVU326
 1192 0018 059A     		ldr	r2, [sp, #20]
 772:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1193              		.loc 1 772 24 view .LVU327
 1194 001a 1A61     		str	r2, [r3, #16]
 773:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1195              		.loc 1 773 3 is_stmt 1 view .LVU328
 773:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1196              		.loc 1 773 36 is_stmt 0 view .LVU329
 1197 001c 0A9A     		ldr	r2, [sp, #40]
 773:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1198              		.loc 1 773 21 view .LVU330
 1199 001e 1A62     		str	r2, [r3, #32]
 774:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1200              		.loc 1 774 3 is_stmt 1 view .LVU331
 774:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1201              		.loc 1 774 36 is_stmt 0 view .LVU332
 1202 0020 099A     		ldr	r2, [sp, #36]
 774:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1203              		.loc 1 774 21 view .LVU333
 1204 0022 DA61     		str	r2, [r3, #28]
 775:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1205              		.loc 1 775 3 is_stmt 1 view .LVU334
ARM GAS  /tmp/cczhJEmm.s 			page 43


 775:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1206              		.loc 1 775 36 is_stmt 0 view .LVU335
 1207 0024 0E9A     		ldr	r2, [sp, #56]
 775:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1208              		.loc 1 775 21 view .LVU336
 1209 0026 DA62     		str	r2, [r3, #44]
 776:Core/Src/main.c ****   
 1210              		.loc 1 776 3 is_stmt 1 view .LVU337
 776:Core/Src/main.c ****   
 1211              		.loc 1 776 36 is_stmt 0 view .LVU338
 1212 0028 0D9A     		ldr	r2, [sp, #52]
 776:Core/Src/main.c ****   
 1213              		.loc 1 776 21 view .LVU339
 1214 002a 9A62     		str	r2, [r3, #40]
 1215 002c 45E0     		b	.L62
 1216              	.LVL75:
 1217              	.L60:
 1218              	.LBB8:
 783:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 1219              		.loc 1 783 7 is_stmt 1 discriminator 3 view .LVU340
 1220 002e 254D     		ldr	r5, .L64+4
 1221 0030 2846     		mov	r0, r5
 1222 0032 FFF7FEFF 		bl	HAL_ADC_Start
 1223              	.LVL76:
 784:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 1224              		.loc 1 784 7 discriminator 3 view .LVU341
 1225 0036 0121     		movs	r1, #1
 1226 0038 2846     		mov	r0, r5
 1227 003a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1228              	.LVL77:
 785:Core/Src/main.c ****     }
 1229              		.loc 1 785 7 discriminator 3 view .LVU342
 785:Core/Src/main.c ****     }
 1230              		.loc 1 785 24 is_stmt 0 discriminator 3 view .LVU343
 1231 003e 2846     		mov	r0, r5
 1232 0040 FFF7FEFF 		bl	HAL_ADC_GetValue
 1233              	.LVL78:
 785:Core/Src/main.c ****     }
 1234              		.loc 1 785 22 discriminator 3 view .LVU344
 1235 0044 204B     		ldr	r3, .L64+8
 1236 0046 43F82400 		str	r0, [r3, r4, lsl #2]
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1237              		.loc 1 782 27 is_stmt 1 discriminator 3 view .LVU345
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1238              		.loc 1 782 28 is_stmt 0 discriminator 3 view .LVU346
 1239 004a 0134     		adds	r4, r4, #1
 1240              	.LVL79:
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1241              		.loc 1 782 28 discriminator 3 view .LVU347
 1242 004c E4B2     		uxtb	r4, r4
 1243              	.LVL80:
 1244              	.L59:
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1245              		.loc 1 782 22 is_stmt 1 discriminator 1 view .LVU348
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1246              		.loc 1 782 5 is_stmt 0 discriminator 1 view .LVU349
 1247 004e 032C     		cmp	r4, #3
ARM GAS  /tmp/cczhJEmm.s 			page 44


 1248 0050 EDD9     		bls	.L60
 1249              	.LBE8:
 787:Core/Src/main.c **** 
 1250              		.loc 1 787 5 is_stmt 1 view .LVU350
 1251 0052 1C48     		ldr	r0, .L64+4
 1252 0054 FFF7FEFF 		bl	HAL_ADC_Stop
 1253              	.LVL81:
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1254              		.loc 1 789 5 view .LVU351
 1255 0058 194C     		ldr	r4, .L64
 1256              	.LVL82:
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1257              		.loc 1 789 5 is_stmt 0 view .LVU352
 1258 005a 1B4D     		ldr	r5, .L64+8
 1259 005c 2246     		mov	r2, r4
 1260 005e 6946     		mov	r1, sp
 1261 0060 2868     		ldr	r0, [r5]
 1262 0062 FFF7FEFF 		bl	QPotDataUpdate
 1263              	.LVL83:
 790:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 1264              		.loc 1 790 5 is_stmt 1 view .LVU353
 1265 0066 04F10C02 		add	r2, r4, #12
 1266 006a 04A9     		add	r1, sp, #16
 1267 006c 6868     		ldr	r0, [r5, #4]
 1268 006e FFF7FEFF 		bl	QPotDataUpdate
 1269              	.LVL84:
 791:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 1270              		.loc 1 791 5 view .LVU354
 1271 0072 04F11802 		add	r2, r4, #24
 1272 0076 08A9     		add	r1, sp, #32
 1273 0078 A868     		ldr	r0, [r5, #8]
 1274 007a FFF7FEFF 		bl	QPotDataUpdate
 1275              	.LVL85:
 792:Core/Src/main.c **** 
 1276              		.loc 1 792 5 view .LVU355
 1277 007e 04F12402 		add	r2, r4, #36
 1278 0082 0CA9     		add	r1, sp, #48
 1279 0084 E868     		ldr	r0, [r5, #12]
 1280 0086 FFF7FEFF 		bl	QPotDataUpdate
 1281              	.LVL86:
 794:Core/Src/main.c ****     
 1282              		.loc 1 794 5 view .LVU356
 794:Core/Src/main.c ****     
 1283              		.loc 1 794 35 is_stmt 0 view .LVU357
 1284 008a 4FF40071 		mov	r1, #512
 1285 008e 0F48     		ldr	r0, .L64+12
 1286 0090 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1287              	.LVL87:
 794:Core/Src/main.c ****     
 1288              		.loc 1 794 24 view .LVU358
 1289 0094 84F83000 		strb	r0, [r4, #48]
 796:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1290              		.loc 1 796 5 is_stmt 1 view .LVU359
 796:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1291              		.loc 1 796 32 is_stmt 0 view .LVU360
 1292 0098 0D4B     		ldr	r3, .L64+16
 1293 009a 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cczhJEmm.s 			page 45


 796:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1294              		.loc 1 796 7 view .LVU361
 1295 009c 50B1     		cbz	r0, .L61
 797:Core/Src/main.c ****         // failed to post message
 1296              		.loc 1 797 7 is_stmt 1 view .LVU362
 797:Core/Src/main.c ****         // failed to post message
 1297              		.loc 1 797 10 is_stmt 0 view .LVU363
 1298 009e 0023     		movs	r3, #0
 1299 00a0 4FF0FF32 		mov	r2, #-1
 1300 00a4 2146     		mov	r1, r4
 1301 00a6 FFF7FEFF 		bl	xQueueGenericSend
 1302              	.LVL88:
 797:Core/Src/main.c ****         // failed to post message
 1303              		.loc 1 797 9 view .LVU364
 1304 00aa 0128     		cmp	r0, #1
 1305 00ac 02D0     		beq	.L61
 799:Core/Src/main.c ****       }
 1306              		.loc 1 799 9 is_stmt 1 view .LVU365
 799:Core/Src/main.c ****       }
 1307              		.loc 1 799 33 is_stmt 0 view .LVU366
 1308 00ae 094B     		ldr	r3, .L64+20
 1309 00b0 0122     		movs	r2, #1
 1310 00b2 1A70     		strb	r2, [r3]
 1311              	.L61:
 804:Core/Src/main.c **** 	}
 1312              		.loc 1 804 5 is_stmt 1 view .LVU367
 1313 00b4 0120     		movs	r0, #1
 1314 00b6 FFF7FEFF 		bl	osDelay
 1315              	.LVL89:
 780:Core/Src/main.c **** 	{
 1316              		.loc 1 780 7 view .LVU368
 1317              	.L62:
 780:Core/Src/main.c **** 	{
 1318              		.loc 1 780 2 view .LVU369
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1319              		.loc 1 782 5 view .LVU370
 1320              	.LBB9:
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1321              		.loc 1 782 9 view .LVU371
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1322              		.loc 1 782 17 is_stmt 0 view .LVU372
 1323 00ba 0024     		movs	r4, #0
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1324              		.loc 1 782 5 view .LVU373
 1325 00bc C7E7     		b	.L59
 1326              	.L65:
 1327 00be 00BF     		.align	2
 1328              	.L64:
 1329 00c0 00000000 		.word	.LANCHOR8
 1330 00c4 00000000 		.word	.LANCHOR9
 1331 00c8 00000000 		.word	.LANCHOR10
 1332 00cc 00000240 		.word	1073872896
 1333 00d0 00000000 		.word	.LANCHOR4
 1334 00d4 00000000 		.word	.LANCHOR2
 1335              	.LBE9:
 1336              		.cfi_endproc
 1337              	.LFE260:
ARM GAS  /tmp/cczhJEmm.s 			page 46


 1339              		.section	.text.MAP,"ax",%progbits
 1340              		.align	1
 1341              		.global	MAP
 1342              		.syntax unified
 1343              		.thumb
 1344              		.thumb_func
 1345              		.fpu fpv4-sp-d16
 1347              	MAP:
 1348              	.LVL90:
 1349              	.LFB257:
 708:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 1350              		.loc 1 708 1 is_stmt 1 view -0
 1351              		.cfi_startproc
 1352              		@ args = 4, pretend = 0, frame = 0
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              		@ link register save eliminated.
 709:Core/Src/main.c **** }
 1355              		.loc 1 709 5 view .LVU375
 709:Core/Src/main.c **** }
 1356              		.loc 1 709 24 is_stmt 0 view .LVU376
 1357 0000 A0EB010C 		sub	ip, r0, r1
 709:Core/Src/main.c **** }
 1358              		.loc 1 709 51 view .LVU377
 1359 0004 0098     		ldr	r0, [sp]
 1360              	.LVL91:
 709:Core/Src/main.c **** }
 1361              		.loc 1 709 51 view .LVU378
 1362 0006 C01A     		subs	r0, r0, r3
 709:Core/Src/main.c **** }
 1363              		.loc 1 709 37 view .LVU379
 1364 0008 00FB0CFC 		mul	ip, r0, ip
 709:Core/Src/main.c **** }
 1365              		.loc 1 709 79 view .LVU380
 1366 000c 511A     		subs	r1, r2, r1
 1367              	.LVL92:
 709:Core/Src/main.c **** }
 1368              		.loc 1 709 66 view .LVU381
 1369 000e BCFBF1FC 		udiv	ip, ip, r1
 710:Core/Src/main.c **** 
 1370              		.loc 1 710 1 view .LVU382
 1371 0012 0CEB0300 		add	r0, ip, r3
 1372 0016 7047     		bx	lr
 1373              		.cfi_endproc
 1374              	.LFE257:
 1376              		.section	.text.MoveServo,"ax",%progbits
 1377              		.align	1
 1378              		.global	MoveServo
 1379              		.syntax unified
 1380              		.thumb
 1381              		.thumb_func
 1382              		.fpu fpv4-sp-d16
 1384              	MoveServo:
 1385              	.LVL93:
 1386              	.LFB256:
 682:Core/Src/main.c ****   // MAP each of the angles
 1387              		.loc 1 682 75 is_stmt 1 view -0
 1388              		.cfi_startproc
ARM GAS  /tmp/cczhJEmm.s 			page 47


 1389              		@ args = 0, pretend = 0, frame = 0
 1390              		@ frame_needed = 0, uses_anonymous_args = 0
 682:Core/Src/main.c ****   // MAP each of the angles
 1391              		.loc 1 682 75 is_stmt 0 view .LVU384
 1392 0000 70B5     		push	{r4, r5, r6, lr}
 1393              		.cfi_def_cfa_offset 16
 1394              		.cfi_offset 4, -16
 1395              		.cfi_offset 5, -12
 1396              		.cfi_offset 6, -8
 1397              		.cfi_offset 14, -4
 1398 0002 82B0     		sub	sp, sp, #8
 1399              		.cfi_def_cfa_offset 24
 1400 0004 0446     		mov	r4, r0
 1401 0006 0D46     		mov	r5, r1
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1402              		.loc 1 687 3 is_stmt 1 view .LVU385
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1403              		.loc 1 687 25 is_stmt 0 view .LVU386
 1404 0008 0868     		ldr	r0, [r1]
 1405              	.LVL94:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1406              		.loc 1 687 25 view .LVU387
 1407 000a 4968     		ldr	r1, [r1, #4]
 1408              	.LVL95:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1409              		.loc 1 687 25 view .LVU388
 1410 000c AA68     		ldr	r2, [r5, #8]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1411              		.loc 1 687 131 view .LVU389
 1412 000e A388     		ldrh	r3, [r4, #4]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1413              		.loc 1 687 25 view .LVU390
 1414 0010 0093     		str	r3, [sp]
 1415 0012 6388     		ldrh	r3, [r4, #2]
 1416 0014 FFF7FEFF 		bl	MAP
 1417              	.LVL96:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1418              		.loc 1 687 23 view .LVU391
 1419 0018 80B2     		uxth	r0, r0
 1420 001a 2A4E     		ldr	r6, .L71
 1421 001c 3080     		strh	r0, [r6]	@ movhi
 688:Core/Src/main.c ****   // Shoulder
 1422              		.loc 1 688 3 is_stmt 1 view .LVU392
 1423 001e 07EE900A 		vmov	s15, r0	@ int
 1424 0022 B8EE670A 		vcvt.f32.u32	s0, s15
 1425 0026 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1426 0028 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1427              	.LVL97:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1428              		.loc 1 690 3 view .LVU393
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1429              		.loc 1 690 25 is_stmt 0 view .LVU394
 1430 002c E868     		ldr	r0, [r5, #12]
 1431 002e 2969     		ldr	r1, [r5, #16]
 1432 0030 6A69     		ldr	r2, [r5, #20]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1433              		.loc 1 690 151 view .LVU395
ARM GAS  /tmp/cczhJEmm.s 			page 48


 1434 0032 A389     		ldrh	r3, [r4, #12]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1435              		.loc 1 690 25 view .LVU396
 1436 0034 0093     		str	r3, [sp]
 1437 0036 6389     		ldrh	r3, [r4, #10]
 1438 0038 FFF7FEFF 		bl	MAP
 1439              	.LVL98:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1440              		.loc 1 690 23 view .LVU397
 1441 003c 80B2     		uxth	r0, r0
 1442 003e 7080     		strh	r0, [r6, #2]	@ movhi
 691:Core/Src/main.c ****   // Elbow
 1443              		.loc 1 691 3 is_stmt 1 view .LVU398
 1444 0040 07EE900A 		vmov	s15, r0	@ int
 1445 0044 B8EE670A 		vcvt.f32.u32	s0, s15
 1446 0048 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 1447 004a FFF7FEFF 		bl	PCA9685_SetServoAngle
 1448              	.LVL99:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1449              		.loc 1 693 3 view .LVU399
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1450              		.loc 1 693 25 is_stmt 0 view .LVU400
 1451 004e A869     		ldr	r0, [r5, #24]
 1452 0050 E969     		ldr	r1, [r5, #28]
 1453 0052 2A6A     		ldr	r2, [r5, #32]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1454              		.loc 1 693 136 view .LVU401
 1455 0054 A38A     		ldrh	r3, [r4, #20]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1456              		.loc 1 693 25 view .LVU402
 1457 0056 0093     		str	r3, [sp]
 1458 0058 638A     		ldrh	r3, [r4, #18]
 1459 005a FFF7FEFF 		bl	MAP
 1460              	.LVL100:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1461              		.loc 1 693 23 view .LVU403
 1462 005e 80B2     		uxth	r0, r0
 1463 0060 B080     		strh	r0, [r6, #4]	@ movhi
 694:Core/Src/main.c ****   // Wrist
 1464              		.loc 1 694 3 is_stmt 1 view .LVU404
 1465 0062 07EE900A 		vmov	s15, r0	@ int
 1466 0066 B8EE670A 		vcvt.f32.u32	s0, s15
 1467 006a 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 1468 006c FFF7FEFF 		bl	PCA9685_SetServoAngle
 1469              	.LVL101:
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1470              		.loc 1 696 3 view .LVU405
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1471              		.loc 1 696 25 is_stmt 0 view .LVU406
 1472 0070 686A     		ldr	r0, [r5, #36]
 1473 0072 A96A     		ldr	r1, [r5, #40]
 1474 0074 EA6A     		ldr	r2, [r5, #44]
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1475              		.loc 1 696 136 view .LVU407
 1476 0076 A38B     		ldrh	r3, [r4, #28]
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1477              		.loc 1 696 25 view .LVU408
ARM GAS  /tmp/cczhJEmm.s 			page 49


 1478 0078 0093     		str	r3, [sp]
 1479 007a 638B     		ldrh	r3, [r4, #26]
 1480 007c FFF7FEFF 		bl	MAP
 1481              	.LVL102:
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1482              		.loc 1 696 23 view .LVU409
 1483 0080 80B2     		uxth	r0, r0
 1484 0082 F080     		strh	r0, [r6, #6]	@ movhi
 697:Core/Src/main.c ****   // Gripper
 1485              		.loc 1 697 3 is_stmt 1 view .LVU410
 1486 0084 07EE900A 		vmov	s15, r0	@ int
 1487 0088 B8EE670A 		vcvt.f32.u32	s0, s15
 1488 008c 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 1489 008e FFF7FEFF 		bl	PCA9685_SetServoAngle
 1490              	.LVL103:
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1491              		.loc 1 699 3 view .LVU411
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1492              		.loc 1 699 13 is_stmt 0 view .LVU412
 1493 0092 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1494              		.loc 1 699 5 view .LVU413
 1495 0096 53B1     		cbz	r3, .L68
 700:Core/Src/main.c ****   }else{
 1496              		.loc 1 700 5 is_stmt 1 view .LVU414
 700:Core/Src/main.c ****   }else{
 1497              		.loc 1 700 70 is_stmt 0 view .LVU415
 1498 0098 638C     		ldrh	r3, [r4, #34]
 1499 009a 00EE103A 		vmov	s0, r3	@ int
 700:Core/Src/main.c ****   }else{
 1500              		.loc 1 700 5 view .LVU416
 1501 009e B8EE400A 		vcvt.f32.u32	s0, s0
 1502 00a2 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1503 00a6 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1504              	.LVL104:
 1505              	.L67:
 704:Core/Src/main.c **** 
 1506              		.loc 1 704 1 view .LVU417
 1507 00aa 02B0     		add	sp, sp, #8
 1508              		.cfi_remember_state
 1509              		.cfi_def_cfa_offset 16
 1510              		@ sp needed
 1511 00ac 70BD     		pop	{r4, r5, r6, pc}
 1512              	.LVL105:
 1513              	.L68:
 1514              		.cfi_restore_state
 702:Core/Src/main.c ****   }
 1515              		.loc 1 702 5 is_stmt 1 view .LVU418
 702:Core/Src/main.c ****   }
 1516              		.loc 1 702 70 is_stmt 0 view .LVU419
 1517 00ae A38C     		ldrh	r3, [r4, #36]
 1518 00b0 00EE103A 		vmov	s0, r3	@ int
 702:Core/Src/main.c ****   }
 1519              		.loc 1 702 5 view .LVU420
 1520 00b4 B8EE400A 		vcvt.f32.u32	s0, s0
 1521 00b8 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1522 00bc FFF7FEFF 		bl	PCA9685_SetServoAngle
ARM GAS  /tmp/cczhJEmm.s 			page 50


 1523              	.LVL106:
 704:Core/Src/main.c **** 
 1524              		.loc 1 704 1 view .LVU421
 1525 00c0 F3E7     		b	.L67
 1526              	.L72:
 1527 00c2 00BF     		.align	2
 1528              	.L71:
 1529 00c4 00000000 		.word	.LANCHOR11
 1530              		.cfi_endproc
 1531              	.LFE256:
 1533              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 1534              		.align	1
 1535              		.global	MotorControlTaskEntry
 1536              		.syntax unified
 1537              		.thumb
 1538              		.thumb_func
 1539              		.fpu fpv4-sp-d16
 1541              	MotorControlTaskEntry:
 1542              	.LVL107:
 1543              	.LFB262:
 871:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1544              		.loc 1 871 1 is_stmt 1 view -0
 1545              		.cfi_startproc
 1546              		@ Volatile: function does not return.
 1547              		@ args = 0, pretend = 0, frame = 40
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
 871:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1549              		.loc 1 871 1 is_stmt 0 view .LVU423
 1550 0000 00B5     		push	{lr}
 1551              		.cfi_def_cfa_offset 4
 1552              		.cfi_offset 14, -4
 1553 0002 8BB0     		sub	sp, sp, #44
 1554              		.cfi_def_cfa_offset 48
 874:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 1555              		.loc 1 874 3 is_stmt 1 view .LVU424
 875:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1556              		.loc 1 875 3 view .LVU425
 1557 0004 6846     		mov	r0, sp
 1558              	.LVL108:
 875:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1559              		.loc 1 875 3 is_stmt 0 view .LVU426
 1560 0006 FFF7FEFF 		bl	MegaBotInit
 1561              	.LVL109:
 876:Core/Src/main.c **** 
 1562              		.loc 1 876 3 is_stmt 1 view .LVU427
 1563 000a 6846     		mov	r0, sp
 1564 000c FFF7FEFF 		bl	ServoDriverInit
 1565              	.LVL110:
 1566 0010 06E0     		b	.L75
 1567              	.L77:
 884:Core/Src/main.c ****     }
 1568              		.loc 1 884 7 view .LVU428
 1569 0012 0849     		ldr	r1, .L78
 1570 0014 6846     		mov	r0, sp
 1571 0016 FFF7FEFF 		bl	MoveServo
 1572              	.LVL111:
 1573              	.L74:
ARM GAS  /tmp/cczhJEmm.s 			page 51


 889:Core/Src/main.c ****   }
 1574              		.loc 1 889 5 view .LVU429
 1575 001a 0120     		movs	r0, #1
 1576 001c FFF7FEFF 		bl	osDelay
 1577              	.LVL112:
 880:Core/Src/main.c ****   {
 1578              		.loc 1 880 8 view .LVU430
 1579              	.L75:
 880:Core/Src/main.c ****   {
 1580              		.loc 1 880 3 view .LVU431
 883:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1581              		.loc 1 883 5 view .LVU432
 883:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1582              		.loc 1 883 8 is_stmt 0 view .LVU433
 1583 0020 4FF0FF32 		mov	r2, #-1
 1584 0024 0349     		ldr	r1, .L78
 1585 0026 044B     		ldr	r3, .L78+4
 1586 0028 1868     		ldr	r0, [r3]
 1587 002a FFF7FEFF 		bl	xQueueReceive
 1588              	.LVL113:
 883:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1589              		.loc 1 883 7 view .LVU434
 1590 002e 0128     		cmp	r0, #1
 1591 0030 EFD0     		beq	.L77
 1592 0032 F2E7     		b	.L74
 1593              	.L79:
 1594              		.align	2
 1595              	.L78:
 1596 0034 00000000 		.word	.LANCHOR12
 1597 0038 00000000 		.word	.LANCHOR6
 1598              		.cfi_endproc
 1599              	.LFE262:
 1601              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1602              		.align	1
 1603              		.global	HAL_TIM_PeriodElapsedCallback
 1604              		.syntax unified
 1605              		.thumb
 1606              		.thumb_func
 1607              		.fpu fpv4-sp-d16
 1609              	HAL_TIM_PeriodElapsedCallback:
 1610              	.LVL114:
 1611              	.LFB264:
 951:Core/Src/main.c ****   }
 952:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 953:Core/Src/main.c **** }
 954:Core/Src/main.c **** 
 955:Core/Src/main.c **** /**
 956:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 957:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 958:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 959:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 960:Core/Src/main.c ****   * @param  htim : TIM handle
 961:Core/Src/main.c ****   * @retval None
 962:Core/Src/main.c ****   */
 963:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 964:Core/Src/main.c **** {
 1612              		.loc 1 964 1 is_stmt 1 view -0
ARM GAS  /tmp/cczhJEmm.s 			page 52


 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 0
 1615              		@ frame_needed = 0, uses_anonymous_args = 0
 1616              		.loc 1 964 1 is_stmt 0 view .LVU436
 1617 0000 08B5     		push	{r3, lr}
 1618              		.cfi_def_cfa_offset 8
 1619              		.cfi_offset 3, -8
 1620              		.cfi_offset 14, -4
 965:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 966:Core/Src/main.c **** 
 967:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 968:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1621              		.loc 1 968 3 is_stmt 1 view .LVU437
 1622              		.loc 1 968 11 is_stmt 0 view .LVU438
 1623 0002 0268     		ldr	r2, [r0]
 1624              		.loc 1 968 6 view .LVU439
 1625 0004 034B     		ldr	r3, .L84
 1626 0006 9A42     		cmp	r2, r3
 1627 0008 00D0     		beq	.L83
 1628              	.LVL115:
 1629              	.L80:
 969:Core/Src/main.c ****     HAL_IncTick();
 970:Core/Src/main.c ****   }
 971:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 972:Core/Src/main.c **** 
 973:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 974:Core/Src/main.c **** }
 1630              		.loc 1 974 1 view .LVU440
 1631 000a 08BD     		pop	{r3, pc}
 1632              	.LVL116:
 1633              	.L83:
 969:Core/Src/main.c ****     HAL_IncTick();
 1634              		.loc 1 969 5 is_stmt 1 view .LVU441
 1635 000c FFF7FEFF 		bl	HAL_IncTick
 1636              	.LVL117:
 1637              		.loc 1 974 1 is_stmt 0 view .LVU442
 1638 0010 FBE7     		b	.L80
 1639              	.L85:
 1640 0012 00BF     		.align	2
 1641              	.L84:
 1642 0014 00100040 		.word	1073745920
 1643              		.cfi_endproc
 1644              	.LFE264:
 1646              		.section	.text.Error_Handler,"ax",%progbits
 1647              		.align	1
 1648              		.global	Error_Handler
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1652              		.fpu fpv4-sp-d16
 1654              	Error_Handler:
 1655              	.LFB265:
 975:Core/Src/main.c **** 
 976:Core/Src/main.c **** /**
 977:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 978:Core/Src/main.c ****   * @retval None
 979:Core/Src/main.c ****   */
ARM GAS  /tmp/cczhJEmm.s 			page 53


 980:Core/Src/main.c **** void Error_Handler(void)
 981:Core/Src/main.c **** {
 1656              		.loc 1 981 1 is_stmt 1 view -0
 1657              		.cfi_startproc
 1658              		@ Volatile: function does not return.
 1659              		@ args = 0, pretend = 0, frame = 0
 1660              		@ frame_needed = 0, uses_anonymous_args = 0
 1661              		@ link register save eliminated.
 982:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 983:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 984:Core/Src/main.c ****   __disable_irq();
 1662              		.loc 1 984 3 view .LVU444
 1663              	.LBB10:
 1664              	.LBI10:
 1665              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cczhJEmm.s 			page 54


  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/cczhJEmm.s 			page 55


 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cczhJEmm.s 			page 56


 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
ARM GAS  /tmp/cczhJEmm.s 			page 57


 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cczhJEmm.s 			page 58


 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cczhJEmm.s 			page 59


 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
ARM GAS  /tmp/cczhJEmm.s 			page 60


 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
ARM GAS  /tmp/cczhJEmm.s 			page 61


 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/cczhJEmm.s 			page 62


 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
ARM GAS  /tmp/cczhJEmm.s 			page 63


 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  /tmp/cczhJEmm.s 			page 64


 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
ARM GAS  /tmp/cczhJEmm.s 			page 65


 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
ARM GAS  /tmp/cczhJEmm.s 			page 66


 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cczhJEmm.s 			page 67


 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  /tmp/cczhJEmm.s 			page 68


 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cczhJEmm.s 			page 69


 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cczhJEmm.s 			page 70


 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1666              		.loc 2 960 27 view .LVU445
 1667              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1668              		.loc 2 962 3 view .LVU446
 1669              		.syntax unified
 1670              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1671 0000 72B6     		cpsid i
 1672              	@ 0 "" 2
 1673              		.thumb
 1674              		.syntax unified
 1675              	.L87:
 1676              	.LBE11:
 1677              	.LBE10:
 985:Core/Src/main.c ****   while (1)
 1678              		.loc 1 985 3 discriminator 1 view .LVU447
 986:Core/Src/main.c ****   {
 987:Core/Src/main.c ****   }
 1679              		.loc 1 987 3 discriminator 1 view .LVU448
 985:Core/Src/main.c ****   while (1)
 1680              		.loc 1 985 9 discriminator 1 view .LVU449
 1681 0002 FEE7     		b	.L87
 1682              		.cfi_endproc
 1683              	.LFE265:
 1685              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1686              		.align	1
 1687              		.syntax unified
 1688              		.thumb
 1689              		.thumb_func
 1690              		.fpu fpv4-sp-d16
 1692              	MX_ADC1_Init:
 1693              	.LFB247:
 363:Core/Src/main.c **** 
 1694              		.loc 1 363 1 view -0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 16
 1697              		@ frame_needed = 0, uses_anonymous_args = 0
 1698 0000 00B5     		push	{lr}
 1699              		.cfi_def_cfa_offset 4
 1700              		.cfi_offset 14, -4
 1701 0002 85B0     		sub	sp, sp, #20
 1702              		.cfi_def_cfa_offset 24
 369:Core/Src/main.c **** 
 1703              		.loc 1 369 3 view .LVU451
 369:Core/Src/main.c **** 
 1704              		.loc 1 369 26 is_stmt 0 view .LVU452
 1705 0004 0023     		movs	r3, #0
 1706 0006 0093     		str	r3, [sp]
 1707 0008 0193     		str	r3, [sp, #4]
 1708 000a 0293     		str	r3, [sp, #8]
 1709 000c 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/cczhJEmm.s 			page 71


 377:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1710              		.loc 1 377 3 is_stmt 1 view .LVU453
 377:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1711              		.loc 1 377 18 is_stmt 0 view .LVU454
 1712 000e 2548     		ldr	r0, .L100
 1713 0010 254A     		ldr	r2, .L100+4
 1714 0012 0260     		str	r2, [r0]
 378:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1715              		.loc 1 378 3 is_stmt 1 view .LVU455
 378:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1716              		.loc 1 378 29 is_stmt 0 view .LVU456
 1717 0014 4FF48032 		mov	r2, #65536
 1718 0018 4260     		str	r2, [r0, #4]
 379:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1719              		.loc 1 379 3 is_stmt 1 view .LVU457
 379:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1720              		.loc 1 379 25 is_stmt 0 view .LVU458
 1721 001a 8360     		str	r3, [r0, #8]
 380:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1722              		.loc 1 380 3 is_stmt 1 view .LVU459
 380:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1723              		.loc 1 380 27 is_stmt 0 view .LVU460
 1724 001c 0122     		movs	r2, #1
 1725 001e 0261     		str	r2, [r0, #16]
 381:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1726              		.loc 1 381 3 is_stmt 1 view .LVU461
 381:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1727              		.loc 1 381 33 is_stmt 0 view .LVU462
 1728 0020 0376     		strb	r3, [r0, #24]
 382:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1729              		.loc 1 382 3 is_stmt 1 view .LVU463
 382:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1730              		.loc 1 382 36 is_stmt 0 view .LVU464
 1731 0022 80F82020 		strb	r2, [r0, #32]
 383:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1732              		.loc 1 383 3 is_stmt 1 view .LVU465
 383:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1733              		.loc 1 383 34 is_stmt 0 view .LVU466
 1734 0026 4262     		str	r2, [r0, #36]
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1735              		.loc 1 384 3 is_stmt 1 view .LVU467
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1736              		.loc 1 384 35 is_stmt 0 view .LVU468
 1737 0028 C362     		str	r3, [r0, #44]
 385:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1738              		.loc 1 385 3 is_stmt 1 view .LVU469
 385:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1739              		.loc 1 385 31 is_stmt 0 view .LVU470
 1740 002a 2049     		ldr	r1, .L100+8
 1741 002c 8162     		str	r1, [r0, #40]
 386:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1742              		.loc 1 386 3 is_stmt 1 view .LVU471
 386:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1743              		.loc 1 386 24 is_stmt 0 view .LVU472
 1744 002e C360     		str	r3, [r0, #12]
 387:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1745              		.loc 1 387 3 is_stmt 1 view .LVU473
ARM GAS  /tmp/cczhJEmm.s 			page 72


 387:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1746              		.loc 1 387 30 is_stmt 0 view .LVU474
 1747 0030 0421     		movs	r1, #4
 1748 0032 C161     		str	r1, [r0, #28]
 388:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1749              		.loc 1 388 3 is_stmt 1 view .LVU475
 388:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1750              		.loc 1 388 36 is_stmt 0 view .LVU476
 1751 0034 80F83030 		strb	r3, [r0, #48]
 389:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1752              		.loc 1 389 3 is_stmt 1 view .LVU477
 389:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1753              		.loc 1 389 27 is_stmt 0 view .LVU478
 1754 0038 4261     		str	r2, [r0, #20]
 390:Core/Src/main.c ****   {
 1755              		.loc 1 390 3 is_stmt 1 view .LVU479
 390:Core/Src/main.c ****   {
 1756              		.loc 1 390 7 is_stmt 0 view .LVU480
 1757 003a FFF7FEFF 		bl	HAL_ADC_Init
 1758              	.LVL118:
 390:Core/Src/main.c ****   {
 1759              		.loc 1 390 6 view .LVU481
 1760 003e 38BB     		cbnz	r0, .L95
 397:Core/Src/main.c ****   sConfig.Rank = 1;
 1761              		.loc 1 397 3 is_stmt 1 view .LVU482
 397:Core/Src/main.c ****   sConfig.Rank = 1;
 1762              		.loc 1 397 19 is_stmt 0 view .LVU483
 1763 0040 0023     		movs	r3, #0
 1764 0042 0093     		str	r3, [sp]
 398:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1765              		.loc 1 398 3 is_stmt 1 view .LVU484
 398:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1766              		.loc 1 398 16 is_stmt 0 view .LVU485
 1767 0044 0122     		movs	r2, #1
 1768 0046 0192     		str	r2, [sp, #4]
 399:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1769              		.loc 1 399 3 is_stmt 1 view .LVU486
 399:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1770              		.loc 1 399 24 is_stmt 0 view .LVU487
 1771 0048 0293     		str	r3, [sp, #8]
 400:Core/Src/main.c ****   {
 1772              		.loc 1 400 3 is_stmt 1 view .LVU488
 400:Core/Src/main.c ****   {
 1773              		.loc 1 400 7 is_stmt 0 view .LVU489
 1774 004a 6946     		mov	r1, sp
 1775 004c 1548     		ldr	r0, .L100
 1776 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1777              	.LVL119:
 400:Core/Src/main.c ****   {
 1778              		.loc 1 400 6 view .LVU490
 1779 0052 F8B9     		cbnz	r0, .L96
 407:Core/Src/main.c ****   sConfig.Rank = 2;
 1780              		.loc 1 407 3 is_stmt 1 view .LVU491
 407:Core/Src/main.c ****   sConfig.Rank = 2;
 1781              		.loc 1 407 19 is_stmt 0 view .LVU492
 1782 0054 0123     		movs	r3, #1
 1783 0056 0093     		str	r3, [sp]
ARM GAS  /tmp/cczhJEmm.s 			page 73


 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1784              		.loc 1 408 3 is_stmt 1 view .LVU493
 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1785              		.loc 1 408 16 is_stmt 0 view .LVU494
 1786 0058 0223     		movs	r3, #2
 1787 005a 0193     		str	r3, [sp, #4]
 409:Core/Src/main.c ****   {
 1788              		.loc 1 409 3 is_stmt 1 view .LVU495
 409:Core/Src/main.c ****   {
 1789              		.loc 1 409 7 is_stmt 0 view .LVU496
 1790 005c 6946     		mov	r1, sp
 1791 005e 1148     		ldr	r0, .L100
 1792 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1793              	.LVL120:
 409:Core/Src/main.c ****   {
 1794              		.loc 1 409 6 view .LVU497
 1795 0064 C0B9     		cbnz	r0, .L97
 416:Core/Src/main.c ****   sConfig.Rank = 3;
 1796              		.loc 1 416 3 is_stmt 1 view .LVU498
 416:Core/Src/main.c ****   sConfig.Rank = 3;
 1797              		.loc 1 416 19 is_stmt 0 view .LVU499
 1798 0066 0423     		movs	r3, #4
 1799 0068 0093     		str	r3, [sp]
 417:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1800              		.loc 1 417 3 is_stmt 1 view .LVU500
 417:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1801              		.loc 1 417 16 is_stmt 0 view .LVU501
 1802 006a 0323     		movs	r3, #3
 1803 006c 0193     		str	r3, [sp, #4]
 418:Core/Src/main.c ****   {
 1804              		.loc 1 418 3 is_stmt 1 view .LVU502
 418:Core/Src/main.c ****   {
 1805              		.loc 1 418 7 is_stmt 0 view .LVU503
 1806 006e 6946     		mov	r1, sp
 1807 0070 0C48     		ldr	r0, .L100
 1808 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1809              	.LVL121:
 418:Core/Src/main.c ****   {
 1810              		.loc 1 418 6 view .LVU504
 1811 0076 88B9     		cbnz	r0, .L98
 425:Core/Src/main.c ****   sConfig.Rank = 4;
 1812              		.loc 1 425 3 is_stmt 1 view .LVU505
 425:Core/Src/main.c ****   sConfig.Rank = 4;
 1813              		.loc 1 425 19 is_stmt 0 view .LVU506
 1814 0078 0823     		movs	r3, #8
 1815 007a 0093     		str	r3, [sp]
 426:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1816              		.loc 1 426 3 is_stmt 1 view .LVU507
 426:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1817              		.loc 1 426 16 is_stmt 0 view .LVU508
 1818 007c 0423     		movs	r3, #4
 1819 007e 0193     		str	r3, [sp, #4]
 427:Core/Src/main.c ****   {
 1820              		.loc 1 427 3 is_stmt 1 view .LVU509
 427:Core/Src/main.c ****   {
 1821              		.loc 1 427 7 is_stmt 0 view .LVU510
 1822 0080 6946     		mov	r1, sp
ARM GAS  /tmp/cczhJEmm.s 			page 74


 1823 0082 0848     		ldr	r0, .L100
 1824 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1825              	.LVL122:
 427:Core/Src/main.c ****   {
 1826              		.loc 1 427 6 view .LVU511
 1827 0088 50B9     		cbnz	r0, .L99
 435:Core/Src/main.c **** 
 1828              		.loc 1 435 1 view .LVU512
 1829 008a 05B0     		add	sp, sp, #20
 1830              		.cfi_remember_state
 1831              		.cfi_def_cfa_offset 4
 1832              		@ sp needed
 1833 008c 5DF804FB 		ldr	pc, [sp], #4
 1834              	.L95:
 1835              		.cfi_restore_state
 392:Core/Src/main.c ****   }
 1836              		.loc 1 392 5 is_stmt 1 view .LVU513
 1837 0090 FFF7FEFF 		bl	Error_Handler
 1838              	.LVL123:
 1839              	.L96:
 402:Core/Src/main.c ****   }
 1840              		.loc 1 402 5 view .LVU514
 1841 0094 FFF7FEFF 		bl	Error_Handler
 1842              	.LVL124:
 1843              	.L97:
 411:Core/Src/main.c ****   }
 1844              		.loc 1 411 5 view .LVU515
 1845 0098 FFF7FEFF 		bl	Error_Handler
 1846              	.LVL125:
 1847              	.L98:
 420:Core/Src/main.c ****   }
 1848              		.loc 1 420 5 view .LVU516
 1849 009c FFF7FEFF 		bl	Error_Handler
 1850              	.LVL126:
 1851              	.L99:
 429:Core/Src/main.c ****   }
 1852              		.loc 1 429 5 view .LVU517
 1853 00a0 FFF7FEFF 		bl	Error_Handler
 1854              	.LVL127:
 1855              	.L101:
 1856              		.align	2
 1857              	.L100:
 1858 00a4 00000000 		.word	.LANCHOR9
 1859 00a8 00200140 		.word	1073815552
 1860 00ac 0100000F 		.word	251658241
 1861              		.cfi_endproc
 1862              	.LFE247:
 1864              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1865              		.align	1
 1866              		.syntax unified
 1867              		.thumb
 1868              		.thumb_func
 1869              		.fpu fpv4-sp-d16
 1871              	MX_I2C1_Init:
 1872              	.LFB248:
 443:Core/Src/main.c **** 
 1873              		.loc 1 443 1 view -0
ARM GAS  /tmp/cczhJEmm.s 			page 75


 1874              		.cfi_startproc
 1875              		@ args = 0, pretend = 0, frame = 0
 1876              		@ frame_needed = 0, uses_anonymous_args = 0
 1877 0000 08B5     		push	{r3, lr}
 1878              		.cfi_def_cfa_offset 8
 1879              		.cfi_offset 3, -8
 1880              		.cfi_offset 14, -4
 452:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1881              		.loc 1 452 3 view .LVU519
 452:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1882              		.loc 1 452 18 is_stmt 0 view .LVU520
 1883 0002 0A48     		ldr	r0, .L106
 1884 0004 0A4B     		ldr	r3, .L106+4
 1885 0006 0360     		str	r3, [r0]
 453:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1886              		.loc 1 453 3 is_stmt 1 view .LVU521
 453:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1887              		.loc 1 453 25 is_stmt 0 view .LVU522
 1888 0008 0A4B     		ldr	r3, .L106+8
 1889 000a 4360     		str	r3, [r0, #4]
 454:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1890              		.loc 1 454 3 is_stmt 1 view .LVU523
 454:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1891              		.loc 1 454 24 is_stmt 0 view .LVU524
 1892 000c 0023     		movs	r3, #0
 1893 000e 8360     		str	r3, [r0, #8]
 455:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1894              		.loc 1 455 3 is_stmt 1 view .LVU525
 455:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1895              		.loc 1 455 26 is_stmt 0 view .LVU526
 1896 0010 C360     		str	r3, [r0, #12]
 456:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1897              		.loc 1 456 3 is_stmt 1 view .LVU527
 456:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1898              		.loc 1 456 29 is_stmt 0 view .LVU528
 1899 0012 4FF48042 		mov	r2, #16384
 1900 0016 0261     		str	r2, [r0, #16]
 457:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1901              		.loc 1 457 3 is_stmt 1 view .LVU529
 457:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1902              		.loc 1 457 30 is_stmt 0 view .LVU530
 1903 0018 4361     		str	r3, [r0, #20]
 458:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1904              		.loc 1 458 3 is_stmt 1 view .LVU531
 458:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1905              		.loc 1 458 26 is_stmt 0 view .LVU532
 1906 001a 8361     		str	r3, [r0, #24]
 459:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1907              		.loc 1 459 3 is_stmt 1 view .LVU533
 459:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1908              		.loc 1 459 30 is_stmt 0 view .LVU534
 1909 001c C361     		str	r3, [r0, #28]
 460:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1910              		.loc 1 460 3 is_stmt 1 view .LVU535
 460:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1911              		.loc 1 460 28 is_stmt 0 view .LVU536
 1912 001e 0362     		str	r3, [r0, #32]
ARM GAS  /tmp/cczhJEmm.s 			page 76


 461:Core/Src/main.c ****   {
 1913              		.loc 1 461 3 is_stmt 1 view .LVU537
 461:Core/Src/main.c ****   {
 1914              		.loc 1 461 7 is_stmt 0 view .LVU538
 1915 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1916              	.LVL128:
 461:Core/Src/main.c ****   {
 1917              		.loc 1 461 6 view .LVU539
 1918 0024 00B9     		cbnz	r0, .L105
 469:Core/Src/main.c **** 
 1919              		.loc 1 469 1 view .LVU540
 1920 0026 08BD     		pop	{r3, pc}
 1921              	.L105:
 463:Core/Src/main.c ****   }
 1922              		.loc 1 463 5 is_stmt 1 view .LVU541
 1923 0028 FFF7FEFF 		bl	Error_Handler
 1924              	.LVL129:
 1925              	.L107:
 1926              		.align	2
 1927              	.L106:
 1928 002c 00000000 		.word	.LANCHOR7
 1929 0030 00540040 		.word	1073763328
 1930 0034 A0860100 		.word	100000
 1931              		.cfi_endproc
 1932              	.LFE248:
 1934              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1935              		.align	1
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu fpv4-sp-d16
 1941              	MX_USART2_UART_Init:
 1942              	.LFB250:
 511:Core/Src/main.c **** 
 1943              		.loc 1 511 1 view -0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 1947 0000 08B5     		push	{r3, lr}
 1948              		.cfi_def_cfa_offset 8
 1949              		.cfi_offset 3, -8
 1950              		.cfi_offset 14, -4
 520:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1951              		.loc 1 520 3 view .LVU543
 520:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1952              		.loc 1 520 19 is_stmt 0 view .LVU544
 1953 0002 0A48     		ldr	r0, .L112
 1954 0004 0A4B     		ldr	r3, .L112+4
 1955 0006 0360     		str	r3, [r0]
 521:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1956              		.loc 1 521 3 is_stmt 1 view .LVU545
 521:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1957              		.loc 1 521 24 is_stmt 0 view .LVU546
 1958 0008 4FF4E133 		mov	r3, #115200
 1959 000c 4360     		str	r3, [r0, #4]
 522:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1960              		.loc 1 522 3 is_stmt 1 view .LVU547
ARM GAS  /tmp/cczhJEmm.s 			page 77


 522:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1961              		.loc 1 522 26 is_stmt 0 view .LVU548
 1962 000e 0023     		movs	r3, #0
 1963 0010 8360     		str	r3, [r0, #8]
 523:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1964              		.loc 1 523 3 is_stmt 1 view .LVU549
 523:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1965              		.loc 1 523 24 is_stmt 0 view .LVU550
 1966 0012 C360     		str	r3, [r0, #12]
 524:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1967              		.loc 1 524 3 is_stmt 1 view .LVU551
 524:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1968              		.loc 1 524 22 is_stmt 0 view .LVU552
 1969 0014 0361     		str	r3, [r0, #16]
 525:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1970              		.loc 1 525 3 is_stmt 1 view .LVU553
 525:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1971              		.loc 1 525 20 is_stmt 0 view .LVU554
 1972 0016 0C22     		movs	r2, #12
 1973 0018 4261     		str	r2, [r0, #20]
 526:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1974              		.loc 1 526 3 is_stmt 1 view .LVU555
 526:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1975              		.loc 1 526 25 is_stmt 0 view .LVU556
 1976 001a 8361     		str	r3, [r0, #24]
 527:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1977              		.loc 1 527 3 is_stmt 1 view .LVU557
 527:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1978              		.loc 1 527 28 is_stmt 0 view .LVU558
 1979 001c C361     		str	r3, [r0, #28]
 528:Core/Src/main.c ****   {
 1980              		.loc 1 528 3 is_stmt 1 view .LVU559
 528:Core/Src/main.c ****   {
 1981              		.loc 1 528 7 is_stmt 0 view .LVU560
 1982 001e FFF7FEFF 		bl	HAL_UART_Init
 1983              	.LVL130:
 528:Core/Src/main.c ****   {
 1984              		.loc 1 528 6 view .LVU561
 1985 0022 00B9     		cbnz	r0, .L111
 536:Core/Src/main.c **** 
 1986              		.loc 1 536 1 view .LVU562
 1987 0024 08BD     		pop	{r3, pc}
 1988              	.L111:
 530:Core/Src/main.c ****   }
 1989              		.loc 1 530 5 is_stmt 1 view .LVU563
 1990 0026 FFF7FEFF 		bl	Error_Handler
 1991              	.LVL131:
 1992              	.L113:
 1993 002a 00BF     		.align	2
 1994              	.L112:
 1995 002c 00000000 		.word	.LANCHOR13
 1996 0030 00440040 		.word	1073759232
 1997              		.cfi_endproc
 1998              	.LFE250:
 2000              		.section	.text.MX_I2C2_Init,"ax",%progbits
 2001              		.align	1
 2002              		.syntax unified
ARM GAS  /tmp/cczhJEmm.s 			page 78


 2003              		.thumb
 2004              		.thumb_func
 2005              		.fpu fpv4-sp-d16
 2007              	MX_I2C2_Init:
 2008              	.LFB249:
 477:Core/Src/main.c **** 
 2009              		.loc 1 477 1 view -0
 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 0
 2012              		@ frame_needed = 0, uses_anonymous_args = 0
 2013 0000 08B5     		push	{r3, lr}
 2014              		.cfi_def_cfa_offset 8
 2015              		.cfi_offset 3, -8
 2016              		.cfi_offset 14, -4
 486:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 2017              		.loc 1 486 3 view .LVU565
 486:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 2018              		.loc 1 486 18 is_stmt 0 view .LVU566
 2019 0002 0A48     		ldr	r0, .L118
 2020 0004 0A4B     		ldr	r3, .L118+4
 2021 0006 0360     		str	r3, [r0]
 487:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 2022              		.loc 1 487 3 is_stmt 1 view .LVU567
 487:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 2023              		.loc 1 487 25 is_stmt 0 view .LVU568
 2024 0008 0A4B     		ldr	r3, .L118+8
 2025 000a 4360     		str	r3, [r0, #4]
 488:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 2026              		.loc 1 488 3 is_stmt 1 view .LVU569
 488:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 2027              		.loc 1 488 24 is_stmt 0 view .LVU570
 2028 000c 0023     		movs	r3, #0
 2029 000e 8360     		str	r3, [r0, #8]
 489:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 2030              		.loc 1 489 3 is_stmt 1 view .LVU571
 489:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 2031              		.loc 1 489 26 is_stmt 0 view .LVU572
 2032 0010 C360     		str	r3, [r0, #12]
 490:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 2033              		.loc 1 490 3 is_stmt 1 view .LVU573
 490:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 2034              		.loc 1 490 29 is_stmt 0 view .LVU574
 2035 0012 4FF48042 		mov	r2, #16384
 2036 0016 0261     		str	r2, [r0, #16]
 491:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 2037              		.loc 1 491 3 is_stmt 1 view .LVU575
 491:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 2038              		.loc 1 491 30 is_stmt 0 view .LVU576
 2039 0018 4361     		str	r3, [r0, #20]
 492:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 2040              		.loc 1 492 3 is_stmt 1 view .LVU577
 492:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 2041              		.loc 1 492 26 is_stmt 0 view .LVU578
 2042 001a 8361     		str	r3, [r0, #24]
 493:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 2043              		.loc 1 493 3 is_stmt 1 view .LVU579
 493:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
ARM GAS  /tmp/cczhJEmm.s 			page 79


 2044              		.loc 1 493 30 is_stmt 0 view .LVU580
 2045 001c C361     		str	r3, [r0, #28]
 494:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2046              		.loc 1 494 3 is_stmt 1 view .LVU581
 494:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2047              		.loc 1 494 28 is_stmt 0 view .LVU582
 2048 001e 0362     		str	r3, [r0, #32]
 495:Core/Src/main.c ****   {
 2049              		.loc 1 495 3 is_stmt 1 view .LVU583
 495:Core/Src/main.c ****   {
 2050              		.loc 1 495 7 is_stmt 0 view .LVU584
 2051 0020 FFF7FEFF 		bl	HAL_I2C_Init
 2052              	.LVL132:
 495:Core/Src/main.c ****   {
 2053              		.loc 1 495 6 view .LVU585
 2054 0024 00B9     		cbnz	r0, .L117
 503:Core/Src/main.c **** 
 2055              		.loc 1 503 1 view .LVU586
 2056 0026 08BD     		pop	{r3, pc}
 2057              	.L117:
 497:Core/Src/main.c ****   }
 2058              		.loc 1 497 5 is_stmt 1 view .LVU587
 2059 0028 FFF7FEFF 		bl	Error_Handler
 2060              	.LVL133:
 2061              	.L119:
 2062              		.align	2
 2063              	.L118:
 2064 002c 00000000 		.word	.LANCHOR14
 2065 0030 00580040 		.word	1073764352
 2066 0034 A0860100 		.word	100000
 2067              		.cfi_endproc
 2068              	.LFE249:
 2070              		.section	.text.SystemClock_Config,"ax",%progbits
 2071              		.align	1
 2072              		.global	SystemClock_Config
 2073              		.syntax unified
 2074              		.thumb
 2075              		.thumb_func
 2076              		.fpu fpv4-sp-d16
 2078              	SystemClock_Config:
 2079              	.LFB246:
 315:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2080              		.loc 1 315 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 80
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 2084 0000 00B5     		push	{lr}
 2085              		.cfi_def_cfa_offset 4
 2086              		.cfi_offset 14, -4
 2087 0002 95B0     		sub	sp, sp, #84
 2088              		.cfi_def_cfa_offset 88
 316:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2089              		.loc 1 316 3 view .LVU589
 316:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2090              		.loc 1 316 22 is_stmt 0 view .LVU590
 2091 0004 3422     		movs	r2, #52
 2092 0006 0021     		movs	r1, #0
ARM GAS  /tmp/cczhJEmm.s 			page 80


 2093 0008 07A8     		add	r0, sp, #28
 2094 000a FFF7FEFF 		bl	memset
 2095              	.LVL134:
 317:Core/Src/main.c **** 
 2096              		.loc 1 317 3 is_stmt 1 view .LVU591
 317:Core/Src/main.c **** 
 2097              		.loc 1 317 22 is_stmt 0 view .LVU592
 2098 000e 0023     		movs	r3, #0
 2099 0010 0293     		str	r3, [sp, #8]
 2100 0012 0393     		str	r3, [sp, #12]
 2101 0014 0493     		str	r3, [sp, #16]
 2102 0016 0593     		str	r3, [sp, #20]
 2103 0018 0693     		str	r3, [sp, #24]
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2104              		.loc 1 321 3 is_stmt 1 view .LVU593
 2105              	.LBB12:
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2106              		.loc 1 321 3 view .LVU594
 2107 001a 0093     		str	r3, [sp]
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2108              		.loc 1 321 3 view .LVU595
 2109 001c 1F4A     		ldr	r2, .L126
 2110 001e 116C     		ldr	r1, [r2, #64]
 2111 0020 41F08051 		orr	r1, r1, #268435456
 2112 0024 1164     		str	r1, [r2, #64]
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2113              		.loc 1 321 3 view .LVU596
 2114 0026 126C     		ldr	r2, [r2, #64]
 2115 0028 02F08052 		and	r2, r2, #268435456
 2116 002c 0092     		str	r2, [sp]
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2117              		.loc 1 321 3 view .LVU597
 2118 002e 009A     		ldr	r2, [sp]
 2119              	.LBE12:
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2120              		.loc 1 321 3 view .LVU598
 322:Core/Src/main.c **** 
 2121              		.loc 1 322 3 view .LVU599
 2122              	.LBB13:
 322:Core/Src/main.c **** 
 2123              		.loc 1 322 3 view .LVU600
 2124 0030 0193     		str	r3, [sp, #4]
 322:Core/Src/main.c **** 
 2125              		.loc 1 322 3 view .LVU601
 2126 0032 1B49     		ldr	r1, .L126+4
 2127 0034 0A68     		ldr	r2, [r1]
 2128 0036 22F44042 		bic	r2, r2, #49152
 2129 003a 42F48042 		orr	r2, r2, #16384
 2130 003e 0A60     		str	r2, [r1]
 322:Core/Src/main.c **** 
 2131              		.loc 1 322 3 view .LVU602
 2132 0040 0A68     		ldr	r2, [r1]
 2133 0042 02F44042 		and	r2, r2, #49152
 2134 0046 0192     		str	r2, [sp, #4]
 322:Core/Src/main.c **** 
 2135              		.loc 1 322 3 view .LVU603
 2136 0048 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/cczhJEmm.s 			page 81


 2137              	.LBE13:
 322:Core/Src/main.c **** 
 2138              		.loc 1 322 3 view .LVU604
 327:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2139              		.loc 1 327 3 view .LVU605
 327:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2140              		.loc 1 327 36 is_stmt 0 view .LVU606
 2141 004a 0222     		movs	r2, #2
 2142 004c 0792     		str	r2, [sp, #28]
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2143              		.loc 1 328 3 is_stmt 1 view .LVU607
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2144              		.loc 1 328 30 is_stmt 0 view .LVU608
 2145 004e 0121     		movs	r1, #1
 2146 0050 0A91     		str	r1, [sp, #40]
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2147              		.loc 1 329 3 is_stmt 1 view .LVU609
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2148              		.loc 1 329 41 is_stmt 0 view .LVU610
 2149 0052 1021     		movs	r1, #16
 2150 0054 0B91     		str	r1, [sp, #44]
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2151              		.loc 1 330 3 is_stmt 1 view .LVU611
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2152              		.loc 1 330 34 is_stmt 0 view .LVU612
 2153 0056 0D92     		str	r2, [sp, #52]
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 2154              		.loc 1 331 3 is_stmt 1 view .LVU613
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 2155              		.loc 1 331 35 is_stmt 0 view .LVU614
 2156 0058 0E93     		str	r3, [sp, #56]
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 2157              		.loc 1 332 3 is_stmt 1 view .LVU615
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 2158              		.loc 1 332 30 is_stmt 0 view .LVU616
 2159 005a 0F91     		str	r1, [sp, #60]
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 2160              		.loc 1 333 3 is_stmt 1 view .LVU617
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 2161              		.loc 1 333 30 is_stmt 0 view .LVU618
 2162 005c 4FF4A873 		mov	r3, #336
 2163 0060 1093     		str	r3, [sp, #64]
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 2164              		.loc 1 334 3 is_stmt 1 view .LVU619
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 2165              		.loc 1 334 30 is_stmt 0 view .LVU620
 2166 0062 0423     		movs	r3, #4
 2167 0064 1193     		str	r3, [sp, #68]
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 2168              		.loc 1 335 3 is_stmt 1 view .LVU621
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 2169              		.loc 1 335 30 is_stmt 0 view .LVU622
 2170 0066 1292     		str	r2, [sp, #72]
 336:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2171              		.loc 1 336 3 is_stmt 1 view .LVU623
 336:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2172              		.loc 1 336 30 is_stmt 0 view .LVU624
ARM GAS  /tmp/cczhJEmm.s 			page 82


 2173 0068 1392     		str	r2, [sp, #76]
 337:Core/Src/main.c ****   {
 2174              		.loc 1 337 3 is_stmt 1 view .LVU625
 337:Core/Src/main.c ****   {
 2175              		.loc 1 337 7 is_stmt 0 view .LVU626
 2176 006a 07A8     		add	r0, sp, #28
 2177 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2178              	.LVL135:
 337:Core/Src/main.c ****   {
 2179              		.loc 1 337 6 view .LVU627
 2180 0070 80B9     		cbnz	r0, .L124
 344:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2181              		.loc 1 344 3 is_stmt 1 view .LVU628
 344:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2182              		.loc 1 344 31 is_stmt 0 view .LVU629
 2183 0072 0F23     		movs	r3, #15
 2184 0074 0293     		str	r3, [sp, #8]
 346:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2185              		.loc 1 346 3 is_stmt 1 view .LVU630
 346:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2186              		.loc 1 346 34 is_stmt 0 view .LVU631
 2187 0076 0221     		movs	r1, #2
 2188 0078 0391     		str	r1, [sp, #12]
 347:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2189              		.loc 1 347 3 is_stmt 1 view .LVU632
 347:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2190              		.loc 1 347 35 is_stmt 0 view .LVU633
 2191 007a 0023     		movs	r3, #0
 2192 007c 0493     		str	r3, [sp, #16]
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2193              		.loc 1 348 3 is_stmt 1 view .LVU634
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2194              		.loc 1 348 36 is_stmt 0 view .LVU635
 2195 007e 4FF48052 		mov	r2, #4096
 2196 0082 0592     		str	r2, [sp, #20]
 349:Core/Src/main.c **** 
 2197              		.loc 1 349 3 is_stmt 1 view .LVU636
 349:Core/Src/main.c **** 
 2198              		.loc 1 349 36 is_stmt 0 view .LVU637
 2199 0084 0693     		str	r3, [sp, #24]
 351:Core/Src/main.c ****   {
 2200              		.loc 1 351 3 is_stmt 1 view .LVU638
 351:Core/Src/main.c ****   {
 2201              		.loc 1 351 7 is_stmt 0 view .LVU639
 2202 0086 02A8     		add	r0, sp, #8
 2203 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2204              	.LVL136:
 351:Core/Src/main.c ****   {
 2205              		.loc 1 351 6 view .LVU640
 2206 008c 20B9     		cbnz	r0, .L125
 355:Core/Src/main.c **** 
 2207              		.loc 1 355 1 view .LVU641
 2208 008e 15B0     		add	sp, sp, #84
 2209              		.cfi_remember_state
 2210              		.cfi_def_cfa_offset 4
 2211              		@ sp needed
 2212 0090 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cczhJEmm.s 			page 83


 2213              	.L124:
 2214              		.cfi_restore_state
 339:Core/Src/main.c ****   }
 2215              		.loc 1 339 5 is_stmt 1 view .LVU642
 2216 0094 FFF7FEFF 		bl	Error_Handler
 2217              	.LVL137:
 2218              	.L125:
 353:Core/Src/main.c ****   }
 2219              		.loc 1 353 5 view .LVU643
 2220 0098 FFF7FEFF 		bl	Error_Handler
 2221              	.LVL138:
 2222              	.L127:
 2223              		.align	2
 2224              	.L126:
 2225 009c 00380240 		.word	1073887232
 2226 00a0 00700040 		.word	1073770496
 2227              		.cfi_endproc
 2228              	.LFE246:
 2230              		.section	.text.main,"ax",%progbits
 2231              		.align	1
 2232              		.global	main
 2233              		.syntax unified
 2234              		.thumb
 2235              		.thumb_func
 2236              		.fpu fpv4-sp-d16
 2238              	main:
 2239              	.LFB245:
 199:Core/Src/main.c **** 
 2240              		.loc 1 199 1 view -0
 2241              		.cfi_startproc
 2242              		@ Volatile: function does not return.
 2243              		@ args = 0, pretend = 0, frame = 224
 2244              		@ frame_needed = 0, uses_anonymous_args = 0
 2245 0000 00B5     		push	{lr}
 2246              		.cfi_def_cfa_offset 4
 2247              		.cfi_offset 14, -4
 2248 0002 B9B0     		sub	sp, sp, #228
 2249              		.cfi_def_cfa_offset 232
 208:Core/Src/main.c **** 
 2250              		.loc 1 208 3 view .LVU645
 2251 0004 FFF7FEFF 		bl	HAL_Init
 2252              	.LVL139:
 215:Core/Src/main.c **** 
 2253              		.loc 1 215 3 view .LVU646
 2254 0008 FFF7FEFF 		bl	SystemClock_Config
 2255              	.LVL140:
 222:Core/Src/main.c ****   MX_ADC1_Init();
 2256              		.loc 1 222 3 view .LVU647
 2257 000c FFF7FEFF 		bl	MX_GPIO_Init
 2258              	.LVL141:
 223:Core/Src/main.c ****   MX_I2C1_Init();
 2259              		.loc 1 223 3 view .LVU648
 2260 0010 FFF7FEFF 		bl	MX_ADC1_Init
 2261              	.LVL142:
 224:Core/Src/main.c ****   MX_USART2_UART_Init();
 2262              		.loc 1 224 3 view .LVU649
 2263 0014 FFF7FEFF 		bl	MX_I2C1_Init
ARM GAS  /tmp/cczhJEmm.s 			page 84


 2264              	.LVL143:
 225:Core/Src/main.c ****   MX_I2C2_Init();
 2265              		.loc 1 225 3 view .LVU650
 2266 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 2267              	.LVL144:
 226:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2268              		.loc 1 226 3 view .LVU651
 2269 001c FFF7FEFF 		bl	MX_I2C2_Init
 2270              	.LVL145:
 233:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 2271              		.loc 1 233 3 view .LVU652
 2272 0020 0025     		movs	r5, #0
 2273 0022 3695     		str	r5, [sp, #216]
 2274 0024 3795     		str	r5, [sp, #220]
 234:Core/Src/main.c **** 
 2275              		.loc 1 234 3 view .LVU653
 234:Core/Src/main.c **** 
 2276              		.loc 1 234 22 is_stmt 0 view .LVU654
 2277 0026 36A8     		add	r0, sp, #216
 2278 0028 FFF7FEFF 		bl	osMutexCreate
 2279              	.LVL146:
 234:Core/Src/main.c **** 
 2280              		.loc 1 234 20 view .LVU655
 2281 002c 494B     		ldr	r3, .L131
 2282 002e 1860     		str	r0, [r3]
 250:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 2283              		.loc 1 250 3 is_stmt 1 view .LVU656
 2284 0030 494C     		ldr	r4, .L131+4
 2285 0032 0DF1C80C 		add	ip, sp, #200
 2286 0036 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2287 003a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 251:Core/Src/main.c **** 
 2288              		.loc 1 251 3 view .LVU657
 251:Core/Src/main.c **** 
 2289              		.loc 1 251 29 is_stmt 0 view .LVU658
 2290 003e 2946     		mov	r1, r5
 2291 0040 6046     		mov	r0, ip
 2292 0042 FFF7FEFF 		bl	osMessageCreate
 2293              	.LVL147:
 251:Core/Src/main.c **** 
 2294              		.loc 1 251 27 view .LVU659
 2295 0046 454B     		ldr	r3, .L131+8
 2296 0048 1860     		str	r0, [r3]
 254:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 2297              		.loc 1 254 3 is_stmt 1 view .LVU660
 2298 004a 0DF1B80C 		add	ip, sp, #184
 2299 004e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2300 0052 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 255:Core/Src/main.c **** 
 2301              		.loc 1 255 3 view .LVU661
 255:Core/Src/main.c **** 
 2302              		.loc 1 255 29 is_stmt 0 view .LVU662
 2303 0056 2946     		mov	r1, r5
 2304 0058 6046     		mov	r0, ip
 2305 005a FFF7FEFF 		bl	osMessageCreate
 2306              	.LVL148:
 255:Core/Src/main.c **** 
ARM GAS  /tmp/cczhJEmm.s 			page 85


 2307              		.loc 1 255 27 view .LVU663
 2308 005e 404B     		ldr	r3, .L131+12
 2309 0060 1860     		str	r0, [r3]
 258:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 2310              		.loc 1 258 3 is_stmt 1 view .LVU664
 2311 0062 0DF1A80C 		add	ip, sp, #168
 2312 0066 04F11003 		add	r3, r4, #16
 2313 006a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2314 006c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 259:Core/Src/main.c **** 
 2315              		.loc 1 259 3 view .LVU665
 259:Core/Src/main.c **** 
 2316              		.loc 1 259 25 is_stmt 0 view .LVU666
 2317 0070 2946     		mov	r1, r5
 2318 0072 6046     		mov	r0, ip
 2319 0074 FFF7FEFF 		bl	osMessageCreate
 2320              	.LVL149:
 259:Core/Src/main.c **** 
 2321              		.loc 1 259 23 view .LVU667
 2322 0078 3A4B     		ldr	r3, .L131+16
 2323 007a 1860     		str	r0, [r3]
 267:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 2324              		.loc 1 267 3 is_stmt 1 view .LVU668
 2325 007c 0DF18C0C 		add	ip, sp, #140
 2326 0080 04F1200E 		add	lr, r4, #32
 2327 0084 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2328 0088 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2329 008c 9EE80700 		ldm	lr, {r0, r1, r2}
 2330 0090 8CE80700 		stm	ip, {r0, r1, r2}
 268:Core/Src/main.c **** 
 2331              		.loc 1 268 3 view .LVU669
 268:Core/Src/main.c **** 
 2332              		.loc 1 268 23 is_stmt 0 view .LVU670
 2333 0094 2946     		mov	r1, r5
 2334 0096 23A8     		add	r0, sp, #140
 2335 0098 FFF7FEFF 		bl	osThreadCreate
 2336              	.LVL150:
 268:Core/Src/main.c **** 
 2337              		.loc 1 268 21 view .LVU671
 2338 009c 324B     		ldr	r3, .L131+20
 2339 009e 1860     		str	r0, [r3]
 271:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 2340              		.loc 1 271 3 is_stmt 1 view .LVU672
 2341 00a0 0DF1700C 		add	ip, sp, #112
 2342 00a4 04F13C0E 		add	lr, r4, #60
 2343 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2344 00ac ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2345 00b0 9EE80700 		ldm	lr, {r0, r1, r2}
 2346 00b4 8CE80700 		stm	ip, {r0, r1, r2}
 272:Core/Src/main.c **** 
 2347              		.loc 1 272 3 view .LVU673
 272:Core/Src/main.c **** 
 2348              		.loc 1 272 24 is_stmt 0 view .LVU674
 2349 00b8 2946     		mov	r1, r5
 2350 00ba 1CA8     		add	r0, sp, #112
 2351 00bc FFF7FEFF 		bl	osThreadCreate
 2352              	.LVL151:
ARM GAS  /tmp/cczhJEmm.s 			page 86


 272:Core/Src/main.c **** 
 2353              		.loc 1 272 22 view .LVU675
 2354 00c0 2A4B     		ldr	r3, .L131+24
 2355 00c2 1860     		str	r0, [r3]
 275:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 2356              		.loc 1 275 3 is_stmt 1 view .LVU676
 2357 00c4 0DF1540C 		add	ip, sp, #84
 2358 00c8 04F1580E 		add	lr, r4, #88
 2359 00cc BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2360 00d0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2361 00d4 9EE80700 		ldm	lr, {r0, r1, r2}
 2362 00d8 8CE80700 		stm	ip, {r0, r1, r2}
 276:Core/Src/main.c **** 
 2363              		.loc 1 276 3 view .LVU677
 276:Core/Src/main.c **** 
 2364              		.loc 1 276 25 is_stmt 0 view .LVU678
 2365 00dc 2946     		mov	r1, r5
 2366 00de 15A8     		add	r0, sp, #84
 2367 00e0 FFF7FEFF 		bl	osThreadCreate
 2368              	.LVL152:
 276:Core/Src/main.c **** 
 2369              		.loc 1 276 23 view .LVU679
 2370 00e4 224B     		ldr	r3, .L131+28
 2371 00e6 1860     		str	r0, [r3]
 279:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 2372              		.loc 1 279 3 is_stmt 1 view .LVU680
 2373 00e8 0DF1380C 		add	ip, sp, #56
 2374 00ec 04F1740E 		add	lr, r4, #116
 2375 00f0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2376 00f4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2377 00f8 9EE80700 		ldm	lr, {r0, r1, r2}
 2378 00fc 8CE80700 		stm	ip, {r0, r1, r2}
 280:Core/Src/main.c **** 
 2379              		.loc 1 280 3 view .LVU681
 280:Core/Src/main.c **** 
 2380              		.loc 1 280 26 is_stmt 0 view .LVU682
 2381 0100 2946     		mov	r1, r5
 2382 0102 0EA8     		add	r0, sp, #56
 2383 0104 FFF7FEFF 		bl	osThreadCreate
 2384              	.LVL153:
 280:Core/Src/main.c **** 
 2385              		.loc 1 280 24 view .LVU683
 2386 0108 1A4B     		ldr	r3, .L131+32
 2387 010a 1860     		str	r0, [r3]
 283:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 2388              		.loc 1 283 3 is_stmt 1 view .LVU684
 2389 010c 0DF11C0C 		add	ip, sp, #28
 2390 0110 04F1900E 		add	lr, r4, #144
 2391 0114 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2392 0118 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2393 011c 9EE80700 		ldm	lr, {r0, r1, r2}
 2394 0120 8CE80700 		stm	ip, {r0, r1, r2}
 284:Core/Src/main.c **** 
 2395              		.loc 1 284 3 view .LVU685
 284:Core/Src/main.c **** 
 2396              		.loc 1 284 28 is_stmt 0 view .LVU686
 2397 0124 2946     		mov	r1, r5
ARM GAS  /tmp/cczhJEmm.s 			page 87


 2398 0126 07A8     		add	r0, sp, #28
 2399 0128 FFF7FEFF 		bl	osThreadCreate
 2400              	.LVL154:
 284:Core/Src/main.c **** 
 2401              		.loc 1 284 26 view .LVU687
 2402 012c 124B     		ldr	r3, .L131+36
 2403 012e 1860     		str	r0, [r3]
 287:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 2404              		.loc 1 287 3 is_stmt 1 view .LVU688
 2405 0130 EC46     		mov	ip, sp
 2406 0132 AC34     		adds	r4, r4, #172
 2407 0134 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2408 0136 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2409 013a 94E80700 		ldm	r4, {r0, r1, r2}
 2410 013e 8CE80700 		stm	ip, {r0, r1, r2}
 288:Core/Src/main.c **** 
 2411              		.loc 1 288 3 view .LVU689
 288:Core/Src/main.c **** 
 2412              		.loc 1 288 24 is_stmt 0 view .LVU690
 2413 0142 2946     		mov	r1, r5
 2414 0144 6846     		mov	r0, sp
 2415 0146 FFF7FEFF 		bl	osThreadCreate
 2416              	.LVL155:
 288:Core/Src/main.c **** 
 2417              		.loc 1 288 22 view .LVU691
 2418 014a 0C4B     		ldr	r3, .L131+40
 2419 014c 1860     		str	r0, [r3]
 295:Core/Src/main.c **** 
 2420              		.loc 1 295 3 is_stmt 1 view .LVU692
 2421 014e FFF7FEFF 		bl	osKernelStart
 2422              	.LVL156:
 2423              	.L129:
 301:Core/Src/main.c ****   {
 2424              		.loc 1 301 3 discriminator 1 view .LVU693
 306:Core/Src/main.c ****   /* USER CODE END 3 */
 2425              		.loc 1 306 3 discriminator 1 view .LVU694
 301:Core/Src/main.c ****   {
 2426              		.loc 1 301 9 discriminator 1 view .LVU695
 2427 0152 FEE7     		b	.L129
 2428              	.L132:
 2429              		.align	2
 2430              	.L131:
 2431 0154 00000000 		.word	.LANCHOR15
 2432 0158 00000000 		.word	.LANCHOR16
 2433 015c 00000000 		.word	.LANCHOR4
 2434 0160 00000000 		.word	.LANCHOR6
 2435 0164 00000000 		.word	.LANCHOR1
 2436 0168 00000000 		.word	.LANCHOR17
 2437 016c 00000000 		.word	.LANCHOR18
 2438 0170 00000000 		.word	.LANCHOR19
 2439 0174 00000000 		.word	.LANCHOR20
 2440 0178 00000000 		.word	.LANCHOR21
 2441 017c 00000000 		.word	.LANCHOR22
 2442              		.cfi_endproc
 2443              	.LFE245:
 2445              		.global	StateMutexHandle
 2446              		.global	LCDPrintQueueHandle
ARM GAS  /tmp/cczhJEmm.s 			page 88


 2447              		.global	MotorControlQueueHandle
 2448              		.global	MiniBotInputQueueHandle
 2449              		.global	LCDPrintTaskHandle
 2450              		.global	MotorControlTaskHandle
 2451              		.global	ApplicationFSMHandle
 2452              		.global	MiniBotInputsHandle
 2453              		.global	BlinkLEDTaskHandle
 2454              		.global	defaultTaskHandle
 2455              		.global	huart2
 2456              		.global	hi2c2
 2457              		.global	hi2c1
 2458              		.global	hadc1
 2459              		.global	state
 2460              		.global	MappedServoAngle
 2461              		.global	tempFailedToPostMessage
 2462              		.global	MotorControl_Qdata_Buf
 2463              		.global	Temp_Qdata_Buf
 2464              		.global	MiniBot_Qdata_Buf
 2465              		.global	PotRawValue
 2466              		.global	Qdata
 2467              		.section	.rodata
 2468              		.align	2
 2469              		.set	.LANCHOR16,. + 0
 2470              	.LC0:
 2471 0000 10000000 		.word	16
 2472 0004 34000000 		.word	52
 2473 0008 00000000 		.word	0
 2474 000c 00000000 		.word	0
 2475              	.LC1:
 2476 0010 10000000 		.word	16
 2477 0014 01000000 		.word	1
 2478 0018 00000000 		.word	0
 2479 001c 00000000 		.word	0
 2480              	.LC23:
 2481 0020 00000000 		.word	.LC2
 2482 0024 00000000 		.word	StartDefaultTask
 2483 0028 0000     		.short	0
 2484 002a 0000     		.space	2
 2485 002c 00000000 		.word	0
 2486 0030 80000000 		.word	128
 2487 0034 00000000 		.word	0
 2488 0038 00000000 		.word	0
 2489              	.LC24:
 2490 003c 0C000000 		.word	.LC4
 2491 0040 00000000 		.word	BlinkLEDTaskEntry
 2492 0044 0000     		.short	0
 2493 0046 0000     		.space	2
 2494 0048 00000000 		.word	0
 2495 004c 80000000 		.word	128
 2496 0050 00000000 		.word	0
 2497 0054 00000000 		.word	0
 2498              	.LC25:
 2499 0058 1C000000 		.word	.LC6
 2500 005c 00000000 		.word	MiniBotInputsEntry
 2501 0060 0000     		.short	0
 2502 0062 0000     		.space	2
 2503 0064 00000000 		.word	0
ARM GAS  /tmp/cczhJEmm.s 			page 89


 2504 0068 00020000 		.word	512
 2505 006c 00000000 		.word	0
 2506 0070 00000000 		.word	0
 2507              	.LC26:
 2508 0074 2C000000 		.word	.LC8
 2509 0078 00000000 		.word	ApplicationFSMEntry
 2510 007c 0200     		.short	2
 2511 007e 0000     		.space	2
 2512 0080 00000000 		.word	0
 2513 0084 00020000 		.word	512
 2514 0088 00000000 		.word	0
 2515 008c 00000000 		.word	0
 2516              	.LC27:
 2517 0090 3C000000 		.word	.LC10
 2518 0094 00000000 		.word	MotorControlTaskEntry
 2519 0098 0000     		.short	0
 2520 009a 0000     		.space	2
 2521 009c 00000000 		.word	0
 2522 00a0 00020000 		.word	512
 2523 00a4 00000000 		.word	0
 2524 00a8 00000000 		.word	0
 2525              	.LC28:
 2526 00ac 50000000 		.word	.LC12
 2527 00b0 00000000 		.word	LCDPrintTaskEntry
 2528 00b4 0000     		.short	0
 2529 00b6 0000     		.space	2
 2530 00b8 00000000 		.word	0
 2531 00bc 80000000 		.word	128
 2532 00c0 00000000 		.word	0
 2533 00c4 00000000 		.word	0
 2534              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 2535              		.align	2
 2536              		.set	.LANCHOR20,. + 0
 2539              	ApplicationFSMHandle:
 2540 0000 00000000 		.space	4
 2541              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 2542              		.align	2
 2543              		.set	.LANCHOR18,. + 0
 2546              	BlinkLEDTaskHandle:
 2547 0000 00000000 		.space	4
 2548              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 2549              		.align	2
 2550              		.set	.LANCHOR1,. + 0
 2553              	LCDPrintQueueHandle:
 2554 0000 00000000 		.space	4
 2555              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 2556              		.align	2
 2557              		.set	.LANCHOR22,. + 0
 2560              	LCDPrintTaskHandle:
 2561 0000 00000000 		.space	4
 2562              		.section	.bss.MappedServoAngle,"aw",%nobits
 2563              		.align	2
 2564              		.set	.LANCHOR11,. + 0
 2567              	MappedServoAngle:
 2568 0000 00000000 		.space	8
 2568      00000000 
 2569              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
ARM GAS  /tmp/cczhJEmm.s 			page 90


 2570              		.align	2
 2571              		.set	.LANCHOR4,. + 0
 2574              	MiniBotInputQueueHandle:
 2575 0000 00000000 		.space	4
 2576              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 2577              		.align	2
 2578              		.set	.LANCHOR19,. + 0
 2581              	MiniBotInputsHandle:
 2582 0000 00000000 		.space	4
 2583              		.section	.bss.MiniBot_Qdata_Buf,"aw",%nobits
 2584              		.align	2
 2585              		.set	.LANCHOR3,. + 0
 2588              	MiniBot_Qdata_Buf:
 2589 0000 00000000 		.space	52
 2589      00000000 
 2589      00000000 
 2589      00000000 
 2589      00000000 
 2590              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
 2591              		.align	2
 2592              		.set	.LANCHOR6,. + 0
 2595              	MotorControlQueueHandle:
 2596 0000 00000000 		.space	4
 2597              		.section	.bss.MotorControlTaskHandle,"aw",%nobits
 2598              		.align	2
 2599              		.set	.LANCHOR21,. + 0
 2602              	MotorControlTaskHandle:
 2603 0000 00000000 		.space	4
 2604              		.section	.bss.MotorControl_Qdata_Buf,"aw",%nobits
 2605              		.align	2
 2606              		.set	.LANCHOR12,. + 0
 2609              	MotorControl_Qdata_Buf:
 2610 0000 00000000 		.space	52
 2610      00000000 
 2610      00000000 
 2610      00000000 
 2610      00000000 
 2611              		.section	.bss.PotRawValue,"aw",%nobits
 2612              		.align	2
 2613              		.set	.LANCHOR10,. + 0
 2616              	PotRawValue:
 2617 0000 00000000 		.space	16
 2617      00000000 
 2617      00000000 
 2617      00000000 
 2618              		.section	.bss.Qdata,"aw",%nobits
 2619              		.align	2
 2620              		.set	.LANCHOR8,. + 0
 2623              	Qdata:
 2624 0000 00000000 		.space	52
 2624      00000000 
 2624      00000000 
 2624      00000000 
 2624      00000000 
 2625              		.section	.bss.StateMutexHandle,"aw",%nobits
 2626              		.align	2
 2627              		.set	.LANCHOR15,. + 0
ARM GAS  /tmp/cczhJEmm.s 			page 91


 2630              	StateMutexHandle:
 2631 0000 00000000 		.space	4
 2632              		.section	.bss.Temp_Qdata_Buf,"aw",%nobits
 2633              		.align	2
 2634              		.set	.LANCHOR5,. + 0
 2637              	Temp_Qdata_Buf:
 2638 0000 00000000 		.space	52
 2638      00000000 
 2638      00000000 
 2638      00000000 
 2638      00000000 
 2639              		.section	.bss.defaultTaskHandle,"aw",%nobits
 2640              		.align	2
 2641              		.set	.LANCHOR17,. + 0
 2644              	defaultTaskHandle:
 2645 0000 00000000 		.space	4
 2646              		.section	.bss.hadc1,"aw",%nobits
 2647              		.align	2
 2648              		.set	.LANCHOR9,. + 0
 2651              	hadc1:
 2652 0000 00000000 		.space	72
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2653              		.section	.bss.hi2c1,"aw",%nobits
 2654              		.align	2
 2655              		.set	.LANCHOR7,. + 0
 2658              	hi2c1:
 2659 0000 00000000 		.space	84
 2659      00000000 
 2659      00000000 
 2659      00000000 
 2659      00000000 
 2660              		.section	.bss.hi2c2,"aw",%nobits
 2661              		.align	2
 2662              		.set	.LANCHOR14,. + 0
 2665              	hi2c2:
 2666 0000 00000000 		.space	84
 2666      00000000 
 2666      00000000 
 2666      00000000 
 2666      00000000 
 2667              		.section	.bss.huart2,"aw",%nobits
 2668              		.align	2
 2669              		.set	.LANCHOR13,. + 0
 2672              	huart2:
 2673 0000 00000000 		.space	72
 2673      00000000 
 2673      00000000 
 2673      00000000 
 2673      00000000 
 2674              		.section	.bss.state,"aw",%nobits
 2675              		.set	.LANCHOR0,. + 0
 2678              	state:
 2679 0000 00       		.space	1
 2680              		.section	.bss.tempFailedToPostMessage,"aw",%nobits
ARM GAS  /tmp/cczhJEmm.s 			page 92


 2681              		.set	.LANCHOR2,. + 0
 2684              	tempFailedToPostMessage:
 2685 0000 00       		.space	1
 2686              		.text
 2687              	.Letext0:
 2688              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2689              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2690              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2691              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2692              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2693              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2694              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2695              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2696              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2697              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2698              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2699              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2700              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2701              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2702              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2703              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2704              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2705              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2706              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2707              		.file 22 "Core/Inc/I2C_LCD.h"
 2708              		.file 23 "Core/Inc/pca9685.h"
 2709              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2710              		.file 25 "<built-in>"
ARM GAS  /tmp/cczhJEmm.s 			page 93


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cczhJEmm.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/cczhJEmm.s:37     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cczhJEmm.s:44     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cczhJEmm.s:238    .text.MX_GPIO_Init:00000000000000e8 $d
     /tmp/cczhJEmm.s:246    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cczhJEmm.s:253    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cczhJEmm.s:284    .text.StartDefaultTask:0000000000000018 $d
     /tmp/cczhJEmm.s:289    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/cczhJEmm.s:296    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/cczhJEmm.s:331    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/cczhJEmm.s:336    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/cczhJEmm.s:343    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/cczhJEmm.s:496    .text.ApplicationFSMEntry:00000000000000c8 $d
     /tmp/cczhJEmm.s:509    .rodata.LCDPrintTaskEntry.str1.4:0000000000000000 $d
     /tmp/cczhJEmm.s:537    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/cczhJEmm.s:544    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/cczhJEmm.s:741    .text.LCDPrintTaskEntry:0000000000000108 $d
     /tmp/cczhJEmm.s:755    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cczhJEmm.s:762    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/cczhJEmm.s:780    .text.HAL_GPIO_EXTI_Callback:0000000000000008 $d
     /tmp/cczhJEmm.s:785    .text.MiniBotInit:0000000000000000 $t
     /tmp/cczhJEmm.s:792    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/cczhJEmm.s:872    .text.MiniBotInit:0000000000000058 $d
     /tmp/cczhJEmm.s:877    .text.ServoDriverInit:0000000000000000 $t
     /tmp/cczhJEmm.s:884    .text.ServoDriverInit:0000000000000000 ServoDriverInit
     /tmp/cczhJEmm.s:955    .text.ServoDriverInit:0000000000000060 $d
     /tmp/cczhJEmm.s:960    .text.MegaBotInit:0000000000000000 $t
     /tmp/cczhJEmm.s:967    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/cczhJEmm.s:1057   .text.QPotDataUpdate:0000000000000000 $t
     /tmp/cczhJEmm.s:1064   .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/cczhJEmm.s:1146   .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/cczhJEmm.s:1153   .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/cczhJEmm.s:1329   .text.MiniBotInputsEntry:00000000000000c0 $d
     /tmp/cczhJEmm.s:1340   .text.MAP:0000000000000000 $t
     /tmp/cczhJEmm.s:1347   .text.MAP:0000000000000000 MAP
     /tmp/cczhJEmm.s:1377   .text.MoveServo:0000000000000000 $t
     /tmp/cczhJEmm.s:1384   .text.MoveServo:0000000000000000 MoveServo
     /tmp/cczhJEmm.s:1529   .text.MoveServo:00000000000000c4 $d
     /tmp/cczhJEmm.s:1534   .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/cczhJEmm.s:1541   .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/cczhJEmm.s:1596   .text.MotorControlTaskEntry:0000000000000034 $d
     /tmp/cczhJEmm.s:1602   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cczhJEmm.s:1609   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cczhJEmm.s:1642   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/cczhJEmm.s:1647   .text.Error_Handler:0000000000000000 $t
     /tmp/cczhJEmm.s:1654   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cczhJEmm.s:1686   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cczhJEmm.s:1692   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cczhJEmm.s:1858   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/cczhJEmm.s:1865   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cczhJEmm.s:1871   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cczhJEmm.s:1928   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/cczhJEmm.s:1935   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cczhJEmm.s:1941   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cczhJEmm.s:1995   .text.MX_USART2_UART_Init:000000000000002c $d
ARM GAS  /tmp/cczhJEmm.s 			page 94


     /tmp/cczhJEmm.s:2001   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/cczhJEmm.s:2007   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/cczhJEmm.s:2064   .text.MX_I2C2_Init:000000000000002c $d
     /tmp/cczhJEmm.s:2071   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cczhJEmm.s:2078   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cczhJEmm.s:2225   .text.SystemClock_Config:000000000000009c $d
     /tmp/cczhJEmm.s:2231   .text.main:0000000000000000 $t
     /tmp/cczhJEmm.s:2238   .text.main:0000000000000000 main
     /tmp/cczhJEmm.s:2431   .text.main:0000000000000154 $d
     /tmp/cczhJEmm.s:2630   .bss.StateMutexHandle:0000000000000000 StateMutexHandle
     /tmp/cczhJEmm.s:2553   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/cczhJEmm.s:2595   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/cczhJEmm.s:2574   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/cczhJEmm.s:2560   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/cczhJEmm.s:2602   .bss.MotorControlTaskHandle:0000000000000000 MotorControlTaskHandle
     /tmp/cczhJEmm.s:2539   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/cczhJEmm.s:2581   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/cczhJEmm.s:2546   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/cczhJEmm.s:2644   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/cczhJEmm.s:2672   .bss.huart2:0000000000000000 huart2
     /tmp/cczhJEmm.s:2665   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/cczhJEmm.s:2658   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/cczhJEmm.s:2651   .bss.hadc1:0000000000000000 hadc1
     /tmp/cczhJEmm.s:2678   .bss.state:0000000000000000 state
     /tmp/cczhJEmm.s:2567   .bss.MappedServoAngle:0000000000000000 MappedServoAngle
     /tmp/cczhJEmm.s:2684   .bss.tempFailedToPostMessage:0000000000000000 tempFailedToPostMessage
     /tmp/cczhJEmm.s:2609   .bss.MotorControl_Qdata_Buf:0000000000000000 MotorControl_Qdata_Buf
     /tmp/cczhJEmm.s:2637   .bss.Temp_Qdata_Buf:0000000000000000 Temp_Qdata_Buf
     /tmp/cczhJEmm.s:2588   .bss.MiniBot_Qdata_Buf:0000000000000000 MiniBot_Qdata_Buf
     /tmp/cczhJEmm.s:2616   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/cczhJEmm.s:2623   .bss.Qdata:0000000000000000 Qdata
     /tmp/cczhJEmm.s:2468   .rodata:0000000000000000 $d
     /tmp/cczhJEmm.s:2535   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2542   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2549   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2556   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2563   .bss.MappedServoAngle:0000000000000000 $d
     /tmp/cczhJEmm.s:2570   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2577   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2584   .bss.MiniBot_Qdata_Buf:0000000000000000 $d
     /tmp/cczhJEmm.s:2591   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2598   .bss.MotorControlTaskHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2605   .bss.MotorControl_Qdata_Buf:0000000000000000 $d
     /tmp/cczhJEmm.s:2612   .bss.PotRawValue:0000000000000000 $d
     /tmp/cczhJEmm.s:2619   .bss.Qdata:0000000000000000 $d
     /tmp/cczhJEmm.s:2626   .bss.StateMutexHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2633   .bss.Temp_Qdata_Buf:0000000000000000 $d
     /tmp/cczhJEmm.s:2640   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/cczhJEmm.s:2647   .bss.hadc1:0000000000000000 $d
     /tmp/cczhJEmm.s:2654   .bss.hi2c1:0000000000000000 $d
     /tmp/cczhJEmm.s:2661   .bss.hi2c2:0000000000000000 $d
     /tmp/cczhJEmm.s:2668   .bss.huart2:0000000000000000 $d
     /tmp/cczhJEmm.s:2679   .bss.state:0000000000000000 $d
     /tmp/cczhJEmm.s:2685   .bss.tempFailedToPostMessage:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
ARM GAS  /tmp/cczhJEmm.s 			page 95


HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
xQueueReceive
xQueueGenericSend
HAL_GPIO_ReadPin
I2C_LCD_Init
I2C_LCD_SetCursor
I2C_LCD_WriteString
I2C_LCD_Clear
PCA9685_Init
PCA9685_SetServoAngle
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
