ARM GAS  /tmp/ccSjts31.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC1:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC3:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC5:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC7:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27              		.text
  28              	.Ltext0:
  29              		.cfi_sections	.debug_frame
  30              		.section	.text.MX_GPIO_Init,"ax",%progbits
  31              		.align	1
  32              		.arch armv7e-m
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  36              		.fpu fpv4-sp-d16
  38              	MX_GPIO_Init:
  39              	.LFB250:
  40              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
ARM GAS  /tmp/ccSjts31.s 			page 2


   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint32_t PotMin;
  40:Core/Src/main.c **** 	uint32_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  60:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  61:Core/Src/main.c **** 	uint32_t WristPotValue;
  62:Core/Src/main.c **** 	uint8_t  GripperValue;
  63:Core/Src/main.c **** } MiniBot_Qdata;
  64:Core/Src/main.c **** 
ARM GAS  /tmp/ccSjts31.s 			page 3


  65:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  66:Core/Src/main.c **** uint32_t PotRawValue[4];
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /*
  70:Core/Src/main.c ****  * MegaBot Structures
  71:Core/Src/main.c ****  */
  72:Core/Src/main.c **** typedef struct{
  73:Core/Src/main.c **** 	uint8_t  ServoNum;
  74:Core/Src/main.c **** 	uint16_t ServoMin;
  75:Core/Src/main.c **** 	uint16_t ServoMax;
  76:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  77:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** typedef struct{
  80:Core/Src/main.c **** 	uint8_t  ServoNum;
  81:Core/Src/main.c **** 	uint16_t ServoMin;
  82:Core/Src/main.c **** 	uint16_t ServoMax;
  83:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  84:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** typedef struct{
  87:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  88:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
  89:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  90:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
  91:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
  92:Core/Src/main.c **** } MegaBot_Config_t;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** enum State{
  96:Core/Src/main.c ****   Init,
  97:Core/Src/main.c ****   Ready,
  98:Core/Src/main.c ****   Running,
  99:Core/Src/main.c ****   EmergencyStop
 100:Core/Src/main.c **** };
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** volatile enum State state = Init;
 103:Core/Src/main.c **** volatile MiniBot_Qdata minibot_data;
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PTD */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 108:Core/Src/main.c **** /* USER CODE BEGIN PD */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* USER CODE END PD */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 113:Core/Src/main.c **** /* USER CODE BEGIN PM */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /* USER CODE END PM */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 118:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 119:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
ARM GAS  /tmp/ccSjts31.s 			page 4


 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** UART_HandleTypeDef huart2;
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** osThreadId defaultTaskHandle;
 126:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 127:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 128:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 129:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 130:Core/Src/main.c **** /* USER CODE BEGIN PV */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /* USER CODE END PV */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 135:Core/Src/main.c **** void SystemClock_Config(void);
 136:Core/Src/main.c **** static void MX_GPIO_Init(void);
 137:Core/Src/main.c **** static void MX_DMA_Init(void);
 138:Core/Src/main.c **** static void MX_ADC1_Init(void);
 139:Core/Src/main.c **** static void MX_I2C1_Init(void);
 140:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 141:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 142:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 143:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
 144:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 145:Core/Src/main.c **** 
 146:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 147:Core/Src/main.c **** 
 148:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 149:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot);
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, MiniBot_Joint_Config_t *Joint, uint32_t *QPotData);
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /* USER CODE END PFP */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 156:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** /* USER CODE END 0 */
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** /**
 162:Core/Src/main.c ****   * @brief  The application entry point.
 163:Core/Src/main.c ****   * @retval int
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c **** int main(void)
 166:Core/Src/main.c **** {
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE END 1 */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 175:Core/Src/main.c ****   HAL_Init();
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 178:Core/Src/main.c **** 
ARM GAS  /tmp/ccSjts31.s 			page 5


 179:Core/Src/main.c ****   /* USER CODE END Init */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* Configure the system clock */
 182:Core/Src/main.c ****   SystemClock_Config();
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE END SysInit */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* Initialize all configured peripherals */
 189:Core/Src/main.c ****   MX_GPIO_Init();
 190:Core/Src/main.c ****   MX_DMA_Init();
 191:Core/Src/main.c ****   MX_ADC1_Init();
 192:Core/Src/main.c ****   MX_I2C1_Init();
 193:Core/Src/main.c ****   MX_USART2_UART_Init();
 194:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END 2 */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 199:Core/Src/main.c ****   /* add mutexes, ... */
 200:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 203:Core/Src/main.c ****   /* add semaphores, ... */
 204:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 207:Core/Src/main.c ****   /* start timers, add new ones, ... */
 208:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* Create the queue(s) */
 211:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 212:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 213:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 216:Core/Src/main.c ****   /* add queues, ... */
 217:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* Create the thread(s) */
 220:Core/Src/main.c ****   /* definition and creation of defaultTask */
 221:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 222:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 225:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityLow, 0, 128);
 226:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 229:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 128);
 230:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 233:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityNormal, 0, 128);
 234:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 235:Core/Src/main.c **** 
ARM GAS  /tmp/ccSjts31.s 			page 6


 236:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 237:Core/Src/main.c ****   /* add threads, ... */
 238:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* Start scheduler */
 241:Core/Src/main.c ****   osKernelStart();
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* Infinite loop */
 246:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 247:Core/Src/main.c ****   while (1)
 248:Core/Src/main.c ****   {
 249:Core/Src/main.c ****     /* USER CODE END WHILE */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 252:Core/Src/main.c ****   }
 253:Core/Src/main.c ****   /* USER CODE END 3 */
 254:Core/Src/main.c **** }
 255:Core/Src/main.c **** 
 256:Core/Src/main.c **** /**
 257:Core/Src/main.c ****   * @brief System Clock Configuration
 258:Core/Src/main.c ****   * @retval None
 259:Core/Src/main.c ****   */
 260:Core/Src/main.c **** void SystemClock_Config(void)
 261:Core/Src/main.c **** {
 262:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 263:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 266:Core/Src/main.c ****   */
 267:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 268:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 271:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 272:Core/Src/main.c ****   */
 273:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 274:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 275:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 282:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 283:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 289:Core/Src/main.c ****   */
 290:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 291:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 292:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
ARM GAS  /tmp/ccSjts31.s 			page 7


 293:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 298:Core/Src/main.c ****   {
 299:Core/Src/main.c ****     Error_Handler();
 300:Core/Src/main.c ****   }
 301:Core/Src/main.c **** }
 302:Core/Src/main.c **** 
 303:Core/Src/main.c **** /**
 304:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 305:Core/Src/main.c ****   * @param None
 306:Core/Src/main.c ****   * @retval None
 307:Core/Src/main.c ****   */
 308:Core/Src/main.c **** static void MX_ADC1_Init(void)
 309:Core/Src/main.c **** {
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 316:Core/Src/main.c **** 
 317:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 322:Core/Src/main.c ****   */
 323:Core/Src/main.c ****   hadc1.Instance = ADC1;
 324:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 325:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 326:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 327:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 328:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 329:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 330:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 331:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 332:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 333:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 334:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 335:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 341:Core/Src/main.c ****   */
 342:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 343:Core/Src/main.c ****   sConfig.Rank = 1;
 344:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 345:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 346:Core/Src/main.c ****   {
 347:Core/Src/main.c ****     Error_Handler();
 348:Core/Src/main.c ****   }
 349:Core/Src/main.c **** 
ARM GAS  /tmp/ccSjts31.s 			page 8


 350:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 351:Core/Src/main.c ****   */
 352:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 353:Core/Src/main.c ****   sConfig.Rank = 2;
 354:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 355:Core/Src/main.c ****   {
 356:Core/Src/main.c ****     Error_Handler();
 357:Core/Src/main.c ****   }
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 360:Core/Src/main.c ****   */
 361:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 362:Core/Src/main.c ****   sConfig.Rank = 3;
 363:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 364:Core/Src/main.c ****   {
 365:Core/Src/main.c ****     Error_Handler();
 366:Core/Src/main.c ****   }
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 369:Core/Src/main.c ****   */
 370:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 371:Core/Src/main.c ****   sConfig.Rank = 4;
 372:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 373:Core/Src/main.c ****   {
 374:Core/Src/main.c ****     Error_Handler();
 375:Core/Src/main.c ****   }
 376:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** }
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** /**
 383:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 384:Core/Src/main.c ****   * @param None
 385:Core/Src/main.c ****   * @retval None
 386:Core/Src/main.c ****   */
 387:Core/Src/main.c **** static void MX_I2C1_Init(void)
 388:Core/Src/main.c **** {
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 397:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 398:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 399:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 400:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 401:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 402:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 403:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 404:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 405:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 406:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
ARM GAS  /tmp/ccSjts31.s 			page 9


 407:Core/Src/main.c ****   {
 408:Core/Src/main.c ****     Error_Handler();
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c **** }
 415:Core/Src/main.c **** 
 416:Core/Src/main.c **** /**
 417:Core/Src/main.c ****   * @brief USART2 Initialization Function
 418:Core/Src/main.c ****   * @param None
 419:Core/Src/main.c ****   * @retval None
 420:Core/Src/main.c ****   */
 421:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 422:Core/Src/main.c **** {
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 431:Core/Src/main.c ****   huart2.Instance = USART2;
 432:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 433:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 434:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 435:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 436:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 437:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 438:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 439:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 440:Core/Src/main.c ****   {
 441:Core/Src/main.c ****     Error_Handler();
 442:Core/Src/main.c ****   }
 443:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c **** }
 448:Core/Src/main.c **** 
 449:Core/Src/main.c **** /**
 450:Core/Src/main.c ****   * Enable DMA controller clock
 451:Core/Src/main.c ****   */
 452:Core/Src/main.c **** static void MX_DMA_Init(void)
 453:Core/Src/main.c **** {
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****   /* DMA controller clock enable */
 456:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 457:Core/Src/main.c **** 
 458:Core/Src/main.c ****   /* DMA interrupt init */
 459:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 460:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 461:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 462:Core/Src/main.c **** 
 463:Core/Src/main.c **** }
ARM GAS  /tmp/ccSjts31.s 			page 10


 464:Core/Src/main.c **** 
 465:Core/Src/main.c **** /**
 466:Core/Src/main.c ****   * @brief GPIO Initialization Function
 467:Core/Src/main.c ****   * @param None
 468:Core/Src/main.c ****   * @retval None
 469:Core/Src/main.c ****   */
 470:Core/Src/main.c **** static void MX_GPIO_Init(void)
 471:Core/Src/main.c **** {
  41              		.loc 1 471 1 view -0
  42              		.cfi_startproc
  43              		@ args = 0, pretend = 0, frame = 40
  44              		@ frame_needed = 0, uses_anonymous_args = 0
  45 0000 70B5     		push	{r4, r5, r6, lr}
  46              		.cfi_def_cfa_offset 16
  47              		.cfi_offset 4, -16
  48              		.cfi_offset 5, -12
  49              		.cfi_offset 6, -8
  50              		.cfi_offset 14, -4
  51 0002 8AB0     		sub	sp, sp, #40
  52              		.cfi_def_cfa_offset 56
 472:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  53              		.loc 1 472 3 view .LVU1
  54              		.loc 1 472 20 is_stmt 0 view .LVU2
  55 0004 0024     		movs	r4, #0
  56 0006 0594     		str	r4, [sp, #20]
  57 0008 0694     		str	r4, [sp, #24]
  58 000a 0794     		str	r4, [sp, #28]
  59 000c 0894     		str	r4, [sp, #32]
  60 000e 0994     		str	r4, [sp, #36]
 473:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 474:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 477:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  61              		.loc 1 477 3 is_stmt 1 view .LVU3
  62              	.LBB4:
  63              		.loc 1 477 3 view .LVU4
  64 0010 0194     		str	r4, [sp, #4]
  65              		.loc 1 477 3 view .LVU5
  66 0012 274B     		ldr	r3, .L3
  67 0014 1A6B     		ldr	r2, [r3, #48]
  68 0016 42F00402 		orr	r2, r2, #4
  69 001a 1A63     		str	r2, [r3, #48]
  70              		.loc 1 477 3 view .LVU6
  71 001c 1A6B     		ldr	r2, [r3, #48]
  72 001e 02F00402 		and	r2, r2, #4
  73 0022 0192     		str	r2, [sp, #4]
  74              		.loc 1 477 3 view .LVU7
  75 0024 019A     		ldr	r2, [sp, #4]
  76              	.LBE4:
  77              		.loc 1 477 3 view .LVU8
 478:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  78              		.loc 1 478 3 view .LVU9
  79              	.LBB5:
  80              		.loc 1 478 3 view .LVU10
  81 0026 0294     		str	r4, [sp, #8]
  82              		.loc 1 478 3 view .LVU11
ARM GAS  /tmp/ccSjts31.s 			page 11


  83 0028 1A6B     		ldr	r2, [r3, #48]
  84 002a 42F08002 		orr	r2, r2, #128
  85 002e 1A63     		str	r2, [r3, #48]
  86              		.loc 1 478 3 view .LVU12
  87 0030 1A6B     		ldr	r2, [r3, #48]
  88 0032 02F08002 		and	r2, r2, #128
  89 0036 0292     		str	r2, [sp, #8]
  90              		.loc 1 478 3 view .LVU13
  91 0038 029A     		ldr	r2, [sp, #8]
  92              	.LBE5:
  93              		.loc 1 478 3 view .LVU14
 479:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  94              		.loc 1 479 3 view .LVU15
  95              	.LBB6:
  96              		.loc 1 479 3 view .LVU16
  97 003a 0394     		str	r4, [sp, #12]
  98              		.loc 1 479 3 view .LVU17
  99 003c 1A6B     		ldr	r2, [r3, #48]
 100 003e 42F00102 		orr	r2, r2, #1
 101 0042 1A63     		str	r2, [r3, #48]
 102              		.loc 1 479 3 view .LVU18
 103 0044 1A6B     		ldr	r2, [r3, #48]
 104 0046 02F00102 		and	r2, r2, #1
 105 004a 0392     		str	r2, [sp, #12]
 106              		.loc 1 479 3 view .LVU19
 107 004c 039A     		ldr	r2, [sp, #12]
 108              	.LBE6:
 109              		.loc 1 479 3 view .LVU20
 480:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 110              		.loc 1 480 3 view .LVU21
 111              	.LBB7:
 112              		.loc 1 480 3 view .LVU22
 113 004e 0494     		str	r4, [sp, #16]
 114              		.loc 1 480 3 view .LVU23
 115 0050 1A6B     		ldr	r2, [r3, #48]
 116 0052 42F00202 		orr	r2, r2, #2
 117 0056 1A63     		str	r2, [r3, #48]
 118              		.loc 1 480 3 view .LVU24
 119 0058 1B6B     		ldr	r3, [r3, #48]
 120 005a 03F00203 		and	r3, r3, #2
 121 005e 0493     		str	r3, [sp, #16]
 122              		.loc 1 480 3 view .LVU25
 123 0060 049B     		ldr	r3, [sp, #16]
 124              	.LBE7:
 125              		.loc 1 480 3 view .LVU26
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 483:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 126              		.loc 1 483 3 view .LVU27
 127 0062 144D     		ldr	r5, .L3+4
 128 0064 2246     		mov	r2, r4
 129 0066 2021     		movs	r1, #32
 130 0068 2846     		mov	r0, r5
 131 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 132              	.LVL0:
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
ARM GAS  /tmp/ccSjts31.s 			page 12


 486:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 133              		.loc 1 486 3 view .LVU28
 134              		.loc 1 486 23 is_stmt 0 view .LVU29
 135 006e 4FF40053 		mov	r3, #8192
 136 0072 0593     		str	r3, [sp, #20]
 487:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 137              		.loc 1 487 3 is_stmt 1 view .LVU30
 138              		.loc 1 487 24 is_stmt 0 view .LVU31
 139 0074 4FF40413 		mov	r3, #2162688
 140 0078 0693     		str	r3, [sp, #24]
 488:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 141              		.loc 1 488 3 is_stmt 1 view .LVU32
 142              		.loc 1 488 24 is_stmt 0 view .LVU33
 143 007a 0794     		str	r4, [sp, #28]
 489:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 144              		.loc 1 489 3 is_stmt 1 view .LVU34
 145 007c 05A9     		add	r1, sp, #20
 146 007e 0E48     		ldr	r0, .L3+8
 147 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 148              	.LVL1:
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 492:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 149              		.loc 1 492 3 view .LVU35
 150              		.loc 1 492 23 is_stmt 0 view .LVU36
 151 0084 2023     		movs	r3, #32
 152 0086 0593     		str	r3, [sp, #20]
 493:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 153              		.loc 1 493 3 is_stmt 1 view .LVU37
 154              		.loc 1 493 24 is_stmt 0 view .LVU38
 155 0088 0126     		movs	r6, #1
 156 008a 0696     		str	r6, [sp, #24]
 494:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 157              		.loc 1 494 3 is_stmt 1 view .LVU39
 158              		.loc 1 494 24 is_stmt 0 view .LVU40
 159 008c 0794     		str	r4, [sp, #28]
 495:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 160              		.loc 1 495 3 is_stmt 1 view .LVU41
 161              		.loc 1 495 25 is_stmt 0 view .LVU42
 162 008e 0894     		str	r4, [sp, #32]
 496:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 163              		.loc 1 496 3 is_stmt 1 view .LVU43
 164 0090 05A9     		add	r1, sp, #20
 165 0092 2846     		mov	r0, r5
 166 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 167              	.LVL2:
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 499:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 168              		.loc 1 499 3 view .LVU44
 169              		.loc 1 499 23 is_stmt 0 view .LVU45
 170 0098 4FF40073 		mov	r3, #512
 171 009c 0593     		str	r3, [sp, #20]
 500:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 172              		.loc 1 500 3 is_stmt 1 view .LVU46
 173              		.loc 1 500 24 is_stmt 0 view .LVU47
 174 009e 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccSjts31.s 			page 13


 501:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 175              		.loc 1 501 3 is_stmt 1 view .LVU48
 176              		.loc 1 501 24 is_stmt 0 view .LVU49
 177 00a0 0796     		str	r6, [sp, #28]
 502:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 178              		.loc 1 502 3 is_stmt 1 view .LVU50
 179 00a2 05A9     		add	r1, sp, #20
 180 00a4 2846     		mov	r0, r5
 181 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 182              	.LVL3:
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 505:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 506:Core/Src/main.c **** }
 183              		.loc 1 506 1 is_stmt 0 view .LVU51
 184 00aa 0AB0     		add	sp, sp, #40
 185              		.cfi_def_cfa_offset 16
 186              		@ sp needed
 187 00ac 70BD     		pop	{r4, r5, r6, pc}
 188              	.L4:
 189 00ae 00BF     		.align	2
 190              	.L3:
 191 00b0 00380240 		.word	1073887232
 192 00b4 00000240 		.word	1073872896
 193 00b8 00080240 		.word	1073874944
 194              		.cfi_endproc
 195              	.LFE250:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	MX_DMA_Init:
 205              	.LFB249:
 453:Core/Src/main.c **** 
 206              		.loc 1 453 1 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              		.cfi_def_cfa_offset 4
 212              		.cfi_offset 14, -4
 213 0002 83B0     		sub	sp, sp, #12
 214              		.cfi_def_cfa_offset 16
 456:Core/Src/main.c **** 
 215              		.loc 1 456 3 view .LVU53
 216              	.LBB8:
 456:Core/Src/main.c **** 
 217              		.loc 1 456 3 view .LVU54
 218 0004 0022     		movs	r2, #0
 219 0006 0192     		str	r2, [sp, #4]
 456:Core/Src/main.c **** 
 220              		.loc 1 456 3 view .LVU55
 221 0008 094B     		ldr	r3, .L7
 222 000a 196B     		ldr	r1, [r3, #48]
 223 000c 41F48001 		orr	r1, r1, #4194304
ARM GAS  /tmp/ccSjts31.s 			page 14


 224 0010 1963     		str	r1, [r3, #48]
 456:Core/Src/main.c **** 
 225              		.loc 1 456 3 view .LVU56
 226 0012 1B6B     		ldr	r3, [r3, #48]
 227 0014 03F48003 		and	r3, r3, #4194304
 228 0018 0193     		str	r3, [sp, #4]
 456:Core/Src/main.c **** 
 229              		.loc 1 456 3 view .LVU57
 230 001a 019B     		ldr	r3, [sp, #4]
 231              	.LBE8:
 456:Core/Src/main.c **** 
 232              		.loc 1 456 3 view .LVU58
 460:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 233              		.loc 1 460 3 view .LVU59
 234 001c 0521     		movs	r1, #5
 235 001e 3820     		movs	r0, #56
 236 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 237              	.LVL4:
 461:Core/Src/main.c **** 
 238              		.loc 1 461 3 view .LVU60
 239 0024 3820     		movs	r0, #56
 240 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 241              	.LVL5:
 463:Core/Src/main.c **** 
 242              		.loc 1 463 1 is_stmt 0 view .LVU61
 243 002a 03B0     		add	sp, sp, #12
 244              		.cfi_def_cfa_offset 4
 245              		@ sp needed
 246 002c 5DF804FB 		ldr	pc, [sp], #4
 247              	.L8:
 248              		.align	2
 249              	.L7:
 250 0030 00380240 		.word	1073887232
 251              		.cfi_endproc
 252              	.LFE249:
 254              		.section	.text.StartDefaultTask,"ax",%progbits
 255              		.align	1
 256              		.global	StartDefaultTask
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 260              		.fpu fpv4-sp-d16
 262              	StartDefaultTask:
 263              	.LFB254:
 507:Core/Src/main.c **** 
 508:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 509:Core/Src/main.c **** 
 510:Core/Src/main.c **** 
 511:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 512:Core/Src/main.c **** 	// Configure Each of the joints
 513:Core/Src/main.c **** 
 514:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 515:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 516:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 517:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
ARM GAS  /tmp/ccSjts31.s 			page 15


 520:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 521:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 522:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 523:Core/Src/main.c **** 
 524:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 525:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 526:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 527:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 528:Core/Src/main.c **** 
 529:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 530:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 531:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 532:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 533:Core/Src/main.c **** 
 534:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 535:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 536:Core/Src/main.c **** }
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot){
 539:Core/Src/main.c **** 
 540:Core/Src/main.c **** }
 541:Core/Src/main.c **** 
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, MiniBot_Joint_Config_t *Joint, uint32_t *QPotData){
 544:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 545:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 546:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 547:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 548:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 549:Core/Src/main.c ****     }else{
 550:Core/Src/main.c ****       *QPotData = PotRawValue;
 551:Core/Src/main.c ****     }
 552:Core/Src/main.c ****     if(Joint->PotInvertRange){
 553:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 554:Core/Src/main.c ****     }
 555:Core/Src/main.c ****   }
 556:Core/Src/main.c **** }
 557:Core/Src/main.c **** 
 558:Core/Src/main.c **** 
 559:Core/Src/main.c **** 
 560:Core/Src/main.c **** /* USER CODE END 4 */
 561:Core/Src/main.c **** 
 562:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 563:Core/Src/main.c **** /**
 564:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 565:Core/Src/main.c ****   * @param  argument: Not used
 566:Core/Src/main.c ****   * @retval None
 567:Core/Src/main.c ****   */
 568:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 569:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 570:Core/Src/main.c **** {
 264              		.loc 1 570 1 is_stmt 1 view -0
 265              		.cfi_startproc
 266              		@ Volatile: function does not return.
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              	.LVL6:
ARM GAS  /tmp/ccSjts31.s 			page 16


 270              		.loc 1 570 1 is_stmt 0 view .LVU63
 271 0000 08B5     		push	{r3, lr}
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 3, -8
 274              		.cfi_offset 14, -4
 275              	.LVL7:
 276              	.L10:
 571:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 572:Core/Src/main.c ****   /* Infinite loop */
 573:Core/Src/main.c ****   for(;;)
 277              		.loc 1 573 3 is_stmt 1 discriminator 1 view .LVU64
 574:Core/Src/main.c ****   {
 575:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 278              		.loc 1 575 5 discriminator 1 view .LVU65
 279 0002 0022     		movs	r2, #0
 280 0004 2021     		movs	r1, #32
 281 0006 0448     		ldr	r0, .L12
 282 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 283              	.LVL8:
 576:Core/Src/main.c ****     osDelay(1000);
 284              		.loc 1 576 5 discriminator 1 view .LVU66
 285 000c 4FF47A70 		mov	r0, #1000
 286 0010 FFF7FEFF 		bl	osDelay
 287              	.LVL9:
 573:Core/Src/main.c ****   {
 288              		.loc 1 573 8 discriminator 1 view .LVU67
 289 0014 F5E7     		b	.L10
 290              	.L13:
 291 0016 00BF     		.align	2
 292              	.L12:
 293 0018 00000240 		.word	1073872896
 294              		.cfi_endproc
 295              	.LFE254:
 297              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 298              		.align	1
 299              		.global	BlinkLEDTaskEntry
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu fpv4-sp-d16
 305              	BlinkLEDTaskEntry:
 306              	.LFB255:
 577:Core/Src/main.c ****   }
 578:Core/Src/main.c ****   /* USER CODE END 5 */
 579:Core/Src/main.c **** }
 580:Core/Src/main.c **** 
 581:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 582:Core/Src/main.c **** /**
 583:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 584:Core/Src/main.c **** * @param argument: Not used
 585:Core/Src/main.c **** * @retval None
 586:Core/Src/main.c **** */
 587:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 588:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 589:Core/Src/main.c **** {
 307              		.loc 1 589 1 view -0
 308              		.cfi_startproc
ARM GAS  /tmp/ccSjts31.s 			page 17


 309              		@ Volatile: function does not return.
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              	.LVL10:
 313              		.loc 1 589 1 is_stmt 0 view .LVU69
 314 0000 08B5     		push	{r3, lr}
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 3, -8
 317              		.cfi_offset 14, -4
 318              	.LVL11:
 319              	.L15:
 590:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 591:Core/Src/main.c ****   /* Infinite loop */
 592:Core/Src/main.c ****   for(;;)
 320              		.loc 1 592 3 is_stmt 1 discriminator 1 view .LVU70
 593:Core/Src/main.c ****   {
 594:Core/Src/main.c ****     
 595:Core/Src/main.c ****     osDelay(500);
 321              		.loc 1 595 5 discriminator 1 view .LVU71
 322 0002 4FF4FA70 		mov	r0, #500
 323 0006 FFF7FEFF 		bl	osDelay
 324              	.LVL12:
 596:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 325              		.loc 1 596 5 discriminator 1 view .LVU72
 326 000a 0122     		movs	r2, #1
 327 000c 2021     		movs	r1, #32
 328 000e 0448     		ldr	r0, .L17
 329 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 330              	.LVL13:
 597:Core/Src/main.c ****     osDelay(500);
 331              		.loc 1 597 5 discriminator 1 view .LVU73
 332 0014 4FF4FA70 		mov	r0, #500
 333 0018 FFF7FEFF 		bl	osDelay
 334              	.LVL14:
 592:Core/Src/main.c ****   {
 335              		.loc 1 592 8 discriminator 1 view .LVU74
 336 001c F1E7     		b	.L15
 337              	.L18:
 338 001e 00BF     		.align	2
 339              	.L17:
 340 0020 00000240 		.word	1073872896
 341              		.cfi_endproc
 342              	.LFE255:
 344              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 345              		.align	1
 346              		.global	ApplicationFSMEntry
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu fpv4-sp-d16
 352              	ApplicationFSMEntry:
 353              	.LFB257:
 598:Core/Src/main.c ****   }
 599:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 600:Core/Src/main.c **** }
 601:Core/Src/main.c **** 
 602:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
ARM GAS  /tmp/ccSjts31.s 			page 18


 603:Core/Src/main.c **** /**
 604:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 605:Core/Src/main.c **** * @param argument: Not used
 606:Core/Src/main.c **** * @retval None
 607:Core/Src/main.c **** */
 608:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 609:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 610:Core/Src/main.c **** {
 611:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 612:Core/Src/main.c **** 
 613:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 614:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 615:Core/Src/main.c **** 
 616:Core/Src/main.c ****   
 617:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, PotRawValue, 4);
 618:Core/Src/main.c **** 
 619:Core/Src/main.c **** 	/* Infinite loop */
 620:Core/Src/main.c **** 	for(;;)
 621:Core/Src/main.c **** 	{
 622:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 623:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 624:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 625:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 626:Core/Src/main.c **** 
 627:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 628:Core/Src/main.c ****     
 629:Core/Src/main.c ****     xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, 10);
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****     osDelay(1);
 632:Core/Src/main.c **** 	}
 633:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 634:Core/Src/main.c **** }
 635:Core/Src/main.c **** 
 636:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 637:Core/Src/main.c **** /**
 638:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 639:Core/Src/main.c **** * @param argument: Not used
 640:Core/Src/main.c **** * @retval None
 641:Core/Src/main.c **** */
 642:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 643:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 644:Core/Src/main.c **** {
 354              		.loc 1 644 1 view -0
 355              		.cfi_startproc
 356              		@ Volatile: function does not return.
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359              	.LVL15:
 360              		.loc 1 644 1 is_stmt 0 view .LVU76
 361 0000 08B5     		push	{r3, lr}
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 3, -8
 364              		.cfi_offset 14, -4
 365 0002 0BE0     		b	.L23
 366              	.LVL16:
 367              	.L20:
 645:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
ARM GAS  /tmp/ccSjts31.s 			page 19


 646:Core/Src/main.c **** 
 647:Core/Src/main.c ****   // enum State state = Init;
 648:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 649:Core/Src/main.c **** 
 650:Core/Src/main.c ****   /* Infinite loop */
 651:Core/Src/main.c ****   for(;;)
 652:Core/Src/main.c ****   {
 653:Core/Src/main.c ****     if(state == Init){
 654:Core/Src/main.c ****       state = Ready;
 655:Core/Src/main.c **** 
 656:Core/Src/main.c ****     }else if(state == Ready){
 368              		.loc 1 656 11 is_stmt 1 view .LVU77
 369              		.loc 1 656 20 is_stmt 0 view .LVU78
 370 0004 104B     		ldr	r3, .L26
 371 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 0008 DBB2     		uxtb	r3, r3
 373              		.loc 1 656 13 view .LVU79
 374 000a 012B     		cmp	r3, #1
 375 000c 0ED0     		beq	.L25
 657:Core/Src/main.c ****       xQueueReceive(MiniBotInputQueueHandle, &minibot_data, 10);
 658:Core/Src/main.c ****       if(minibot_data.GripperValue == '\000'){
 659:Core/Src/main.c ****         state == Running;
 660:Core/Src/main.c ****       }
 661:Core/Src/main.c **** 
 662:Core/Src/main.c ****     }else if(state == Running){
 376              		.loc 1 662 11 is_stmt 1 view .LVU80
 377              		.loc 1 662 20 is_stmt 0 view .LVU81
 378 000e 0E4B     		ldr	r3, .L26
 379 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 380              	.L21:
 663:Core/Src/main.c ****       // Check if the EmergencyStop is pressed
 664:Core/Src/main.c ****       //  if so change the state to Emergency Stop and break out of ifelse
 665:Core/Src/main.c **** 
 666:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 667:Core/Src/main.c **** 
 668:Core/Src/main.c ****     }
 381              		.loc 1 668 5 is_stmt 1 view .LVU82
 669:Core/Src/main.c ****     
 670:Core/Src/main.c ****     if(state == EmergencyStop){
 382              		.loc 1 670 5 view .LVU83
 383              		.loc 1 670 14 is_stmt 0 view .LVU84
 384 0012 0D4B     		ldr	r3, .L26
 385 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 671:Core/Src/main.c ****       // If reset btn is pressed change state to Ready
 672:Core/Src/main.c ****     }
 386              		.loc 1 672 5 is_stmt 1 view .LVU85
 673:Core/Src/main.c **** 
 674:Core/Src/main.c **** 
 675:Core/Src/main.c **** 
 676:Core/Src/main.c ****     osDelay(1);
 387              		.loc 1 676 5 view .LVU86
 388 0016 0120     		movs	r0, #1
 389 0018 FFF7FEFF 		bl	osDelay
 390              	.LVL17:
 651:Core/Src/main.c ****   {
 391              		.loc 1 651 8 view .LVU87
 392              	.L23:
ARM GAS  /tmp/ccSjts31.s 			page 20


 651:Core/Src/main.c ****   {
 393              		.loc 1 651 3 view .LVU88
 653:Core/Src/main.c ****       state = Ready;
 394              		.loc 1 653 5 view .LVU89
 653:Core/Src/main.c ****       state = Ready;
 395              		.loc 1 653 14 is_stmt 0 view .LVU90
 396 001c 0A4B     		ldr	r3, .L26
 397 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 653:Core/Src/main.c ****       state = Ready;
 398              		.loc 1 653 7 view .LVU91
 399 0020 002B     		cmp	r3, #0
 400 0022 EFD1     		bne	.L20
 654:Core/Src/main.c **** 
 401              		.loc 1 654 7 is_stmt 1 view .LVU92
 654:Core/Src/main.c **** 
 402              		.loc 1 654 13 is_stmt 0 view .LVU93
 403 0024 084B     		ldr	r3, .L26
 404 0026 0122     		movs	r2, #1
 405 0028 1A70     		strb	r2, [r3]
 406 002a F2E7     		b	.L21
 407              	.L25:
 657:Core/Src/main.c ****       if(minibot_data.GripperValue == '\000'){
 408              		.loc 1 657 7 is_stmt 1 view .LVU94
 409 002c 074C     		ldr	r4, .L26+4
 410 002e 0A22     		movs	r2, #10
 411 0030 2146     		mov	r1, r4
 412 0032 074B     		ldr	r3, .L26+8
 413 0034 1868     		ldr	r0, [r3]
 414 0036 FFF7FEFF 		bl	xQueueReceive
 415              	.LVL18:
 658:Core/Src/main.c ****         state == Running;
 416              		.loc 1 658 7 view .LVU95
 658:Core/Src/main.c ****         state == Running;
 417              		.loc 1 658 22 is_stmt 0 view .LVU96
 418 003a 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 658:Core/Src/main.c ****         state == Running;
 419              		.loc 1 658 9 view .LVU97
 420 003c 002B     		cmp	r3, #0
 421 003e E8D1     		bne	.L21
 659:Core/Src/main.c ****       }
 422              		.loc 1 659 9 is_stmt 1 view .LVU98
 659:Core/Src/main.c ****       }
 423              		.loc 1 659 15 is_stmt 0 view .LVU99
 424 0040 014B     		ldr	r3, .L26
 425 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 426 0044 E5E7     		b	.L21
 427              	.L27:
 428 0046 00BF     		.align	2
 429              	.L26:
 430 0048 00000000 		.word	.LANCHOR0
 431 004c 00000000 		.word	.LANCHOR1
 432 0050 00000000 		.word	.LANCHOR2
 433              		.cfi_endproc
 434              	.LFE257:
 436              		.section	.text.MiniBotInit,"ax",%progbits
 437              		.align	1
 438              		.global	MiniBotInit
ARM GAS  /tmp/ccSjts31.s 			page 21


 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	MiniBotInit:
 445              	.LVL19:
 446              	.LFB251:
 511:Core/Src/main.c **** 	// Configure Each of the joints
 447              		.loc 1 511 44 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 511:Core/Src/main.c **** 	// Configure Each of the joints
 451              		.loc 1 511 44 is_stmt 0 view .LVU101
 452 0000 00B5     		push	{lr}
 453              		.cfi_def_cfa_offset 4
 454              		.cfi_offset 14, -4
 514:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 455              		.loc 1 514 4 is_stmt 1 view .LVU102
 514:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 456              		.loc 1 514 25 is_stmt 0 view .LVU103
 457 0002 0023     		movs	r3, #0
 458 0004 0370     		strb	r3, [r0]
 515:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 459              		.loc 1 515 4 is_stmt 1 view .LVU104
 515:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 460              		.loc 1 515 25 is_stmt 0 view .LVU105
 461 0006 4FF44872 		mov	r2, #800
 462 000a 4260     		str	r2, [r0, #4]
 516:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 463              		.loc 1 516 4 is_stmt 1 view .LVU106
 516:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 464              		.loc 1 516 25 is_stmt 0 view .LVU107
 465 000c 40F64851 		movw	r1, #3400
 466 0010 8160     		str	r1, [r0, #8]
 517:Core/Src/main.c **** 
 467              		.loc 1 517 4 is_stmt 1 view .LVU108
 517:Core/Src/main.c **** 
 468              		.loc 1 517 33 is_stmt 0 view .LVU109
 469 0012 0373     		strb	r3, [r0, #12]
 519:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 470              		.loc 1 519 4 is_stmt 1 view .LVU110
 519:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 471              		.loc 1 519 29 is_stmt 0 view .LVU111
 472 0014 4FF0010C 		mov	ip, #1
 473 0018 80F810C0 		strb	ip, [r0, #16]
 520:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 474              		.loc 1 520 4 is_stmt 1 view .LVU112
 520:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 475              		.loc 1 520 29 is_stmt 0 view .LVU113
 476 001c 4FF41672 		mov	r2, #600
 477 0020 4261     		str	r2, [r0, #20]
 521:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 478              		.loc 1 521 4 is_stmt 1 view .LVU114
 521:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 479              		.loc 1 521 29 is_stmt 0 view .LVU115
 480 0022 8161     		str	r1, [r0, #24]
ARM GAS  /tmp/ccSjts31.s 			page 22


 522:Core/Src/main.c **** 
 481              		.loc 1 522 4 is_stmt 1 view .LVU116
 522:Core/Src/main.c **** 
 482              		.loc 1 522 37 is_stmt 0 view .LVU117
 483 0024 0377     		strb	r3, [r0, #28]
 524:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 484              		.loc 1 524 4 is_stmt 1 view .LVU118
 524:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 485              		.loc 1 524 26 is_stmt 0 view .LVU119
 486 0026 4FF0020E 		mov	lr, #2
 487 002a 80F820E0 		strb	lr, [r0, #32]
 525:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 488              		.loc 1 525 4 is_stmt 1 view .LVU120
 525:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 489              		.loc 1 525 26 is_stmt 0 view .LVU121
 490 002e 4262     		str	r2, [r0, #36]
 526:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 491              		.loc 1 526 4 is_stmt 1 view .LVU122
 526:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 492              		.loc 1 526 26 is_stmt 0 view .LVU123
 493 0030 8162     		str	r1, [r0, #40]
 527:Core/Src/main.c **** 
 494              		.loc 1 527 4 is_stmt 1 view .LVU124
 527:Core/Src/main.c **** 
 495              		.loc 1 527 34 is_stmt 0 view .LVU125
 496 0032 80F82C30 		strb	r3, [r0, #44]
 529:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 497              		.loc 1 529 4 is_stmt 1 view .LVU126
 529:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 498              		.loc 1 529 26 is_stmt 0 view .LVU127
 499 0036 0323     		movs	r3, #3
 500 0038 80F83030 		strb	r3, [r0, #48]
 530:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 501              		.loc 1 530 4 is_stmt 1 view .LVU128
 530:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 502              		.loc 1 530 26 is_stmt 0 view .LVU129
 503 003c 4263     		str	r2, [r0, #52]
 531:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 504              		.loc 1 531 4 is_stmt 1 view .LVU130
 531:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 505              		.loc 1 531 26 is_stmt 0 view .LVU131
 506 003e 4FF44863 		mov	r3, #3200
 507 0042 8363     		str	r3, [r0, #56]
 532:Core/Src/main.c **** 
 508              		.loc 1 532 4 is_stmt 1 view .LVU132
 532:Core/Src/main.c **** 
 509              		.loc 1 532 34 is_stmt 0 view .LVU133
 510 0044 80F83CC0 		strb	ip, [r0, #60]
 534:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 511              		.loc 1 534 4 is_stmt 1 view .LVU134
 534:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 512              		.loc 1 534 27 is_stmt 0 view .LVU135
 513 0048 034B     		ldr	r3, .L30
 514 004a 0364     		str	r3, [r0, #64]
 535:Core/Src/main.c **** }
 515              		.loc 1 535 4 is_stmt 1 view .LVU136
 535:Core/Src/main.c **** }
ARM GAS  /tmp/ccSjts31.s 			page 23


 516              		.loc 1 535 30 is_stmt 0 view .LVU137
 517 004c 4FF40073 		mov	r3, #512
 518 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 536:Core/Src/main.c **** 
 519              		.loc 1 536 1 view .LVU138
 520 0054 5DF804FB 		ldr	pc, [sp], #4
 521              	.L31:
 522              		.align	2
 523              	.L30:
 524 0058 00000240 		.word	1073872896
 525              		.cfi_endproc
 526              	.LFE251:
 528              		.section	.text.MegaBotInit,"ax",%progbits
 529              		.align	1
 530              		.global	MegaBotInit
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu fpv4-sp-d16
 536              	MegaBotInit:
 537              	.LVL20:
 538              	.LFB252:
 538:Core/Src/main.c **** 
 539              		.loc 1 538 44 is_stmt 1 view -0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 540:Core/Src/main.c **** 
 544              		.loc 1 540 1 view .LVU140
 545 0000 7047     		bx	lr
 546              		.cfi_endproc
 547              	.LFE252:
 549              		.section	.text.QPotDataUpdate,"ax",%progbits
 550              		.align	1
 551              		.global	QPotDataUpdate
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv4-sp-d16
 557              	QPotDataUpdate:
 558              	.LVL21:
 559              	.LFB253:
 543:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 560              		.loc 1 543 93 view -0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 544:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 565              		.loc 1 544 3 view .LVU142
 544:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 566              		.loc 1 544 20 is_stmt 0 view .LVU143
 567 0000 1368     		ldr	r3, [r2]
 544:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 568              		.loc 1 544 30 view .LVU144
 569 0002 03F10A0C 		add	ip, r3, #10
ARM GAS  /tmp/ccSjts31.s 			page 24


 544:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 570              		.loc 1 544 5 view .LVU145
 571 0006 8445     		cmp	ip, r0
 572 0008 02D3     		bcc	.L34
 544:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 573              		.loc 1 544 62 discriminator 1 view .LVU146
 574 000a 0A3B     		subs	r3, r3, #10
 544:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 575              		.loc 1 544 35 discriminator 1 view .LVU147
 576 000c 8342     		cmp	r3, r0
 577 000e 0BD9     		bls	.L33
 578              	.L34:
 545:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 579              		.loc 1 545 5 is_stmt 1 view .LVU148
 545:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 580              		.loc 1 545 27 is_stmt 0 view .LVU149
 581 0010 8B68     		ldr	r3, [r1, #8]
 545:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 582              		.loc 1 545 7 view .LVU150
 583 0012 8342     		cmp	r3, r0
 584 0014 09D2     		bcs	.L36
 546:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 585              		.loc 1 546 7 is_stmt 1 view .LVU151
 546:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 586              		.loc 1 546 17 is_stmt 0 view .LVU152
 587 0016 1360     		str	r3, [r2]
 588              	.L37:
 552:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 589              		.loc 1 552 5 is_stmt 1 view .LVU153
 552:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 590              		.loc 1 552 13 is_stmt 0 view .LVU154
 591 0018 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 552:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 592              		.loc 1 552 7 view .LVU155
 593 001a 2BB1     		cbz	r3, .L33
 553:Core/Src/main.c ****     }
 594              		.loc 1 553 7 is_stmt 1 view .LVU156
 553:Core/Src/main.c ****     }
 595              		.loc 1 553 24 is_stmt 0 view .LVU157
 596 001c 8B68     		ldr	r3, [r1, #8]
 553:Core/Src/main.c ****     }
 597              		.loc 1 553 35 view .LVU158
 598 001e 1068     		ldr	r0, [r2]
 599              	.LVL22:
 553:Core/Src/main.c ****     }
 600              		.loc 1 553 33 view .LVU159
 601 0020 1B1A     		subs	r3, r3, r0
 553:Core/Src/main.c ****     }
 602              		.loc 1 553 52 view .LVU160
 603 0022 4968     		ldr	r1, [r1, #4]
 604              	.LVL23:
 553:Core/Src/main.c ****     }
 605              		.loc 1 553 45 view .LVU161
 606 0024 0B44     		add	r3, r3, r1
 553:Core/Src/main.c ****     }
 607              		.loc 1 553 17 view .LVU162
 608 0026 1360     		str	r3, [r2]
ARM GAS  /tmp/ccSjts31.s 			page 25


 609              	.L33:
 556:Core/Src/main.c **** 
 610              		.loc 1 556 1 view .LVU163
 611 0028 7047     		bx	lr
 612              	.LVL24:
 613              	.L36:
 547:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 614              		.loc 1 547 11 is_stmt 1 view .LVU164
 547:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 615              		.loc 1 547 33 is_stmt 0 view .LVU165
 616 002a 4B68     		ldr	r3, [r1, #4]
 547:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 617              		.loc 1 547 13 view .LVU166
 618 002c 8342     		cmp	r3, r0
 619 002e 01D9     		bls	.L38
 548:Core/Src/main.c ****     }else{
 620              		.loc 1 548 7 is_stmt 1 view .LVU167
 548:Core/Src/main.c ****     }else{
 621              		.loc 1 548 17 is_stmt 0 view .LVU168
 622 0030 1360     		str	r3, [r2]
 623 0032 F1E7     		b	.L37
 624              	.L38:
 550:Core/Src/main.c ****     }
 625              		.loc 1 550 7 is_stmt 1 view .LVU169
 550:Core/Src/main.c ****     }
 626              		.loc 1 550 17 is_stmt 0 view .LVU170
 627 0034 1060     		str	r0, [r2]
 628 0036 EFE7     		b	.L37
 629              		.cfi_endproc
 630              	.LFE253:
 632              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 633              		.align	1
 634              		.global	MiniBotInputsEntry
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu fpv4-sp-d16
 640              	MiniBotInputsEntry:
 641              	.LVL25:
 642              	.LFB256:
 610:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 643              		.loc 1 610 1 is_stmt 1 view -0
 644              		.cfi_startproc
 645              		@ Volatile: function does not return.
 646              		@ args = 0, pretend = 0, frame = 72
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 610:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 648              		.loc 1 610 1 is_stmt 0 view .LVU172
 649 0000 00B5     		push	{lr}
 650              		.cfi_def_cfa_offset 4
 651              		.cfi_offset 14, -4
 652 0002 93B0     		sub	sp, sp, #76
 653              		.cfi_def_cfa_offset 80
 613:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 654              		.loc 1 613 2 is_stmt 1 view .LVU173
 614:Core/Src/main.c **** 
 655              		.loc 1 614 2 view .LVU174
ARM GAS  /tmp/ccSjts31.s 			page 26


 656 0004 6846     		mov	r0, sp
 657              	.LVL26:
 614:Core/Src/main.c **** 
 658              		.loc 1 614 2 is_stmt 0 view .LVU175
 659 0006 FFF7FEFF 		bl	MiniBotInit
 660              	.LVL27:
 617:Core/Src/main.c **** 
 661              		.loc 1 617 3 is_stmt 1 view .LVU176
 662 000a 0422     		movs	r2, #4
 663 000c 1649     		ldr	r1, .L42
 664 000e 1748     		ldr	r0, .L42+4
 665 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 666              	.LVL28:
 667              	.L40:
 620:Core/Src/main.c **** 	{
 668              		.loc 1 620 2 discriminator 1 view .LVU177
 622:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 669              		.loc 1 622 5 discriminator 1 view .LVU178
 670 0014 164C     		ldr	r4, .L42+8
 671 0016 144D     		ldr	r5, .L42
 672 0018 2246     		mov	r2, r4
 673 001a 6946     		mov	r1, sp
 674 001c 2868     		ldr	r0, [r5]
 675 001e FFF7FEFF 		bl	QPotDataUpdate
 676              	.LVL29:
 623:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 677              		.loc 1 623 5 discriminator 1 view .LVU179
 678 0022 221D     		adds	r2, r4, #4
 679 0024 04A9     		add	r1, sp, #16
 680 0026 6868     		ldr	r0, [r5, #4]
 681 0028 FFF7FEFF 		bl	QPotDataUpdate
 682              	.LVL30:
 624:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 683              		.loc 1 624 5 discriminator 1 view .LVU180
 684 002c 04F10802 		add	r2, r4, #8
 685 0030 08A9     		add	r1, sp, #32
 686 0032 A868     		ldr	r0, [r5, #8]
 687 0034 FFF7FEFF 		bl	QPotDataUpdate
 688              	.LVL31:
 625:Core/Src/main.c **** 
 689              		.loc 1 625 5 discriminator 1 view .LVU181
 690 0038 04F10C02 		add	r2, r4, #12
 691 003c 0CA9     		add	r1, sp, #48
 692 003e E868     		ldr	r0, [r5, #12]
 693 0040 FFF7FEFF 		bl	QPotDataUpdate
 694              	.LVL32:
 627:Core/Src/main.c ****     
 695              		.loc 1 627 5 discriminator 1 view .LVU182
 627:Core/Src/main.c ****     
 696              		.loc 1 627 35 is_stmt 0 discriminator 1 view .LVU183
 697 0044 4FF40071 		mov	r1, #512
 698 0048 0A48     		ldr	r0, .L42+12
 699 004a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 700              	.LVL33:
 627:Core/Src/main.c ****     
 701              		.loc 1 627 24 discriminator 1 view .LVU184
 702 004e 2074     		strb	r0, [r4, #16]
ARM GAS  /tmp/ccSjts31.s 			page 27


 629:Core/Src/main.c **** 
 703              		.loc 1 629 5 is_stmt 1 discriminator 1 view .LVU185
 704 0050 0023     		movs	r3, #0
 705 0052 0A22     		movs	r2, #10
 706 0054 2146     		mov	r1, r4
 707 0056 0848     		ldr	r0, .L42+16
 708 0058 0068     		ldr	r0, [r0]
 709 005a FFF7FEFF 		bl	xQueueGenericSend
 710              	.LVL34:
 631:Core/Src/main.c **** 	}
 711              		.loc 1 631 5 discriminator 1 view .LVU186
 712 005e 0120     		movs	r0, #1
 713 0060 FFF7FEFF 		bl	osDelay
 714              	.LVL35:
 620:Core/Src/main.c **** 	{
 715              		.loc 1 620 7 discriminator 1 view .LVU187
 716 0064 D6E7     		b	.L40
 717              	.L43:
 718 0066 00BF     		.align	2
 719              	.L42:
 720 0068 00000000 		.word	.LANCHOR3
 721 006c 00000000 		.word	.LANCHOR4
 722 0070 00000000 		.word	.LANCHOR5
 723 0074 00000240 		.word	1073872896
 724 0078 00000000 		.word	.LANCHOR2
 725              		.cfi_endproc
 726              	.LFE256:
 728              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 729              		.align	1
 730              		.global	HAL_TIM_PeriodElapsedCallback
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv4-sp-d16
 736              	HAL_TIM_PeriodElapsedCallback:
 737              	.LVL36:
 738              	.LFB258:
 677:Core/Src/main.c ****   }
 678:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 679:Core/Src/main.c **** }
 680:Core/Src/main.c **** 
 681:Core/Src/main.c **** /**
 682:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 683:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 684:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 685:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 686:Core/Src/main.c ****   * @param  htim : TIM handle
 687:Core/Src/main.c ****   * @retval None
 688:Core/Src/main.c ****   */
 689:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 690:Core/Src/main.c **** {
 739              		.loc 1 690 1 view -0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		.loc 1 690 1 is_stmt 0 view .LVU189
 744 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccSjts31.s 			page 28


 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 3, -8
 747              		.cfi_offset 14, -4
 691:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 692:Core/Src/main.c **** 
 693:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 694:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 748              		.loc 1 694 3 is_stmt 1 view .LVU190
 749              		.loc 1 694 11 is_stmt 0 view .LVU191
 750 0002 0268     		ldr	r2, [r0]
 751              		.loc 1 694 6 view .LVU192
 752 0004 034B     		ldr	r3, .L48
 753 0006 9A42     		cmp	r2, r3
 754 0008 00D0     		beq	.L47
 755              	.LVL37:
 756              	.L44:
 695:Core/Src/main.c ****     HAL_IncTick();
 696:Core/Src/main.c ****   }
 697:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 698:Core/Src/main.c **** 
 699:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 700:Core/Src/main.c **** }
 757              		.loc 1 700 1 view .LVU193
 758 000a 08BD     		pop	{r3, pc}
 759              	.LVL38:
 760              	.L47:
 695:Core/Src/main.c ****     HAL_IncTick();
 761              		.loc 1 695 5 is_stmt 1 view .LVU194
 762 000c FFF7FEFF 		bl	HAL_IncTick
 763              	.LVL39:
 764              		.loc 1 700 1 is_stmt 0 view .LVU195
 765 0010 FBE7     		b	.L44
 766              	.L49:
 767 0012 00BF     		.align	2
 768              	.L48:
 769 0014 00100040 		.word	1073745920
 770              		.cfi_endproc
 771              	.LFE258:
 773              		.section	.text.Error_Handler,"ax",%progbits
 774              		.align	1
 775              		.global	Error_Handler
 776              		.syntax unified
 777              		.thumb
 778              		.thumb_func
 779              		.fpu fpv4-sp-d16
 781              	Error_Handler:
 782              	.LFB259:
 701:Core/Src/main.c **** 
 702:Core/Src/main.c **** /**
 703:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 704:Core/Src/main.c ****   * @retval None
 705:Core/Src/main.c ****   */
 706:Core/Src/main.c **** void Error_Handler(void)
 707:Core/Src/main.c **** {
 783              		.loc 1 707 1 is_stmt 1 view -0
 784              		.cfi_startproc
 785              		@ Volatile: function does not return.
ARM GAS  /tmp/ccSjts31.s 			page 29


 786              		@ args = 0, pretend = 0, frame = 0
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788              		@ link register save eliminated.
 708:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 709:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 710:Core/Src/main.c ****   __disable_irq();
 789              		.loc 1 710 3 view .LVU197
 790              	.LBB9:
 791              	.LBI9:
 792              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  /tmp/ccSjts31.s 			page 30


  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccSjts31.s 			page 31


 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  /tmp/ccSjts31.s 			page 32


 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccSjts31.s 			page 33


 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccSjts31.s 			page 34


 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSjts31.s 			page 35


 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
ARM GAS  /tmp/ccSjts31.s 			page 36


 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccSjts31.s 			page 37


 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
ARM GAS  /tmp/ccSjts31.s 			page 38


 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccSjts31.s 			page 39


 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
ARM GAS  /tmp/ccSjts31.s 			page 40


 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
ARM GAS  /tmp/ccSjts31.s 			page 41


 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccSjts31.s 			page 42


 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
ARM GAS  /tmp/ccSjts31.s 			page 43


 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/ccSjts31.s 			page 44


 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccSjts31.s 			page 45


 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccSjts31.s 			page 46


 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 793              		.loc 2 960 27 view .LVU198
 794              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 795              		.loc 2 962 3 view .LVU199
 796              		.syntax unified
 797              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 798 0000 72B6     		cpsid i
 799              	@ 0 "" 2
 800              		.thumb
 801              		.syntax unified
 802              	.L51:
 803              	.LBE10:
 804              	.LBE9:
 711:Core/Src/main.c ****   while (1)
 805              		.loc 1 711 3 discriminator 1 view .LVU200
 712:Core/Src/main.c ****   {
 713:Core/Src/main.c ****   }
 806              		.loc 1 713 3 discriminator 1 view .LVU201
 711:Core/Src/main.c ****   while (1)
 807              		.loc 1 711 9 discriminator 1 view .LVU202
 808 0002 FEE7     		b	.L51
 809              		.cfi_endproc
 810              	.LFE259:
 812              		.section	.text.MX_ADC1_Init,"ax",%progbits
 813              		.align	1
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 817              		.fpu fpv4-sp-d16
 819              	MX_ADC1_Init:
 820              	.LFB246:
 309:Core/Src/main.c **** 
 821              		.loc 1 309 1 view -0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 16
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825 0000 00B5     		push	{lr}
 826              		.cfi_def_cfa_offset 4
 827              		.cfi_offset 14, -4
 828 0002 85B0     		sub	sp, sp, #20
 829              		.cfi_def_cfa_offset 24
 315:Core/Src/main.c **** 
 830              		.loc 1 315 3 view .LVU204
 315:Core/Src/main.c **** 
 831              		.loc 1 315 26 is_stmt 0 view .LVU205
 832 0004 0023     		movs	r3, #0
 833 0006 0093     		str	r3, [sp]
 834 0008 0193     		str	r3, [sp, #4]
 835 000a 0293     		str	r3, [sp, #8]
 836 000c 0393     		str	r3, [sp, #12]
 323:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 837              		.loc 1 323 3 is_stmt 1 view .LVU206
 323:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 838              		.loc 1 323 18 is_stmt 0 view .LVU207
 839 000e 2548     		ldr	r0, .L64
ARM GAS  /tmp/ccSjts31.s 			page 47


 840 0010 254A     		ldr	r2, .L64+4
 841 0012 0260     		str	r2, [r0]
 324:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 842              		.loc 1 324 3 is_stmt 1 view .LVU208
 324:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 843              		.loc 1 324 29 is_stmt 0 view .LVU209
 844 0014 4FF48032 		mov	r2, #65536
 845 0018 4260     		str	r2, [r0, #4]
 325:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 846              		.loc 1 325 3 is_stmt 1 view .LVU210
 325:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 847              		.loc 1 325 25 is_stmt 0 view .LVU211
 848 001a 8360     		str	r3, [r0, #8]
 326:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 849              		.loc 1 326 3 is_stmt 1 view .LVU212
 326:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 850              		.loc 1 326 27 is_stmt 0 view .LVU213
 851 001c 0122     		movs	r2, #1
 852 001e 0261     		str	r2, [r0, #16]
 327:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 853              		.loc 1 327 3 is_stmt 1 view .LVU214
 327:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 854              		.loc 1 327 33 is_stmt 0 view .LVU215
 855 0020 0276     		strb	r2, [r0, #24]
 328:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 856              		.loc 1 328 3 is_stmt 1 view .LVU216
 328:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 857              		.loc 1 328 36 is_stmt 0 view .LVU217
 858 0022 80F82030 		strb	r3, [r0, #32]
 329:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 859              		.loc 1 329 3 is_stmt 1 view .LVU218
 329:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 860              		.loc 1 329 35 is_stmt 0 view .LVU219
 861 0026 C362     		str	r3, [r0, #44]
 330:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 862              		.loc 1 330 3 is_stmt 1 view .LVU220
 330:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 863              		.loc 1 330 31 is_stmt 0 view .LVU221
 864 0028 2049     		ldr	r1, .L64+8
 865 002a 8162     		str	r1, [r0, #40]
 331:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 866              		.loc 1 331 3 is_stmt 1 view .LVU222
 331:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 867              		.loc 1 331 24 is_stmt 0 view .LVU223
 868 002c C360     		str	r3, [r0, #12]
 332:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 869              		.loc 1 332 3 is_stmt 1 view .LVU224
 332:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 870              		.loc 1 332 30 is_stmt 0 view .LVU225
 871 002e 0421     		movs	r1, #4
 872 0030 C161     		str	r1, [r0, #28]
 333:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 873              		.loc 1 333 3 is_stmt 1 view .LVU226
 333:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 874              		.loc 1 333 36 is_stmt 0 view .LVU227
 875 0032 80F83020 		strb	r2, [r0, #48]
 334:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
ARM GAS  /tmp/ccSjts31.s 			page 48


 876              		.loc 1 334 3 is_stmt 1 view .LVU228
 334:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 877              		.loc 1 334 27 is_stmt 0 view .LVU229
 878 0036 4361     		str	r3, [r0, #20]
 335:Core/Src/main.c ****   {
 879              		.loc 1 335 3 is_stmt 1 view .LVU230
 335:Core/Src/main.c ****   {
 880              		.loc 1 335 7 is_stmt 0 view .LVU231
 881 0038 FFF7FEFF 		bl	HAL_ADC_Init
 882              	.LVL40:
 335:Core/Src/main.c ****   {
 883              		.loc 1 335 6 view .LVU232
 884 003c 38BB     		cbnz	r0, .L59
 342:Core/Src/main.c ****   sConfig.Rank = 1;
 885              		.loc 1 342 3 is_stmt 1 view .LVU233
 342:Core/Src/main.c ****   sConfig.Rank = 1;
 886              		.loc 1 342 19 is_stmt 0 view .LVU234
 887 003e 0023     		movs	r3, #0
 888 0040 0093     		str	r3, [sp]
 343:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 889              		.loc 1 343 3 is_stmt 1 view .LVU235
 343:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 890              		.loc 1 343 16 is_stmt 0 view .LVU236
 891 0042 0122     		movs	r2, #1
 892 0044 0192     		str	r2, [sp, #4]
 344:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 893              		.loc 1 344 3 is_stmt 1 view .LVU237
 344:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 894              		.loc 1 344 24 is_stmt 0 view .LVU238
 895 0046 0293     		str	r3, [sp, #8]
 345:Core/Src/main.c ****   {
 896              		.loc 1 345 3 is_stmt 1 view .LVU239
 345:Core/Src/main.c ****   {
 897              		.loc 1 345 7 is_stmt 0 view .LVU240
 898 0048 6946     		mov	r1, sp
 899 004a 1648     		ldr	r0, .L64
 900 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 901              	.LVL41:
 345:Core/Src/main.c ****   {
 902              		.loc 1 345 6 view .LVU241
 903 0050 F8B9     		cbnz	r0, .L60
 352:Core/Src/main.c ****   sConfig.Rank = 2;
 904              		.loc 1 352 3 is_stmt 1 view .LVU242
 352:Core/Src/main.c ****   sConfig.Rank = 2;
 905              		.loc 1 352 19 is_stmt 0 view .LVU243
 906 0052 0123     		movs	r3, #1
 907 0054 0093     		str	r3, [sp]
 353:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 908              		.loc 1 353 3 is_stmt 1 view .LVU244
 353:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 909              		.loc 1 353 16 is_stmt 0 view .LVU245
 910 0056 0223     		movs	r3, #2
 911 0058 0193     		str	r3, [sp, #4]
 354:Core/Src/main.c ****   {
 912              		.loc 1 354 3 is_stmt 1 view .LVU246
 354:Core/Src/main.c ****   {
 913              		.loc 1 354 7 is_stmt 0 view .LVU247
ARM GAS  /tmp/ccSjts31.s 			page 49


 914 005a 6946     		mov	r1, sp
 915 005c 1148     		ldr	r0, .L64
 916 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 917              	.LVL42:
 354:Core/Src/main.c ****   {
 918              		.loc 1 354 6 view .LVU248
 919 0062 C0B9     		cbnz	r0, .L61
 361:Core/Src/main.c ****   sConfig.Rank = 3;
 920              		.loc 1 361 3 is_stmt 1 view .LVU249
 361:Core/Src/main.c ****   sConfig.Rank = 3;
 921              		.loc 1 361 19 is_stmt 0 view .LVU250
 922 0064 0423     		movs	r3, #4
 923 0066 0093     		str	r3, [sp]
 362:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 924              		.loc 1 362 3 is_stmt 1 view .LVU251
 362:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 925              		.loc 1 362 16 is_stmt 0 view .LVU252
 926 0068 0323     		movs	r3, #3
 927 006a 0193     		str	r3, [sp, #4]
 363:Core/Src/main.c ****   {
 928              		.loc 1 363 3 is_stmt 1 view .LVU253
 363:Core/Src/main.c ****   {
 929              		.loc 1 363 7 is_stmt 0 view .LVU254
 930 006c 6946     		mov	r1, sp
 931 006e 0D48     		ldr	r0, .L64
 932 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 933              	.LVL43:
 363:Core/Src/main.c ****   {
 934              		.loc 1 363 6 view .LVU255
 935 0074 88B9     		cbnz	r0, .L62
 370:Core/Src/main.c ****   sConfig.Rank = 4;
 936              		.loc 1 370 3 is_stmt 1 view .LVU256
 370:Core/Src/main.c ****   sConfig.Rank = 4;
 937              		.loc 1 370 19 is_stmt 0 view .LVU257
 938 0076 0823     		movs	r3, #8
 939 0078 0093     		str	r3, [sp]
 371:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 940              		.loc 1 371 3 is_stmt 1 view .LVU258
 371:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 941              		.loc 1 371 16 is_stmt 0 view .LVU259
 942 007a 0423     		movs	r3, #4
 943 007c 0193     		str	r3, [sp, #4]
 372:Core/Src/main.c ****   {
 944              		.loc 1 372 3 is_stmt 1 view .LVU260
 372:Core/Src/main.c ****   {
 945              		.loc 1 372 7 is_stmt 0 view .LVU261
 946 007e 6946     		mov	r1, sp
 947 0080 0848     		ldr	r0, .L64
 948 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 949              	.LVL44:
 372:Core/Src/main.c ****   {
 950              		.loc 1 372 6 view .LVU262
 951 0086 50B9     		cbnz	r0, .L63
 380:Core/Src/main.c **** 
 952              		.loc 1 380 1 view .LVU263
 953 0088 05B0     		add	sp, sp, #20
 954              		.cfi_remember_state
ARM GAS  /tmp/ccSjts31.s 			page 50


 955              		.cfi_def_cfa_offset 4
 956              		@ sp needed
 957 008a 5DF804FB 		ldr	pc, [sp], #4
 958              	.L59:
 959              		.cfi_restore_state
 337:Core/Src/main.c ****   }
 960              		.loc 1 337 5 is_stmt 1 view .LVU264
 961 008e FFF7FEFF 		bl	Error_Handler
 962              	.LVL45:
 963              	.L60:
 347:Core/Src/main.c ****   }
 964              		.loc 1 347 5 view .LVU265
 965 0092 FFF7FEFF 		bl	Error_Handler
 966              	.LVL46:
 967              	.L61:
 356:Core/Src/main.c ****   }
 968              		.loc 1 356 5 view .LVU266
 969 0096 FFF7FEFF 		bl	Error_Handler
 970              	.LVL47:
 971              	.L62:
 365:Core/Src/main.c ****   }
 972              		.loc 1 365 5 view .LVU267
 973 009a FFF7FEFF 		bl	Error_Handler
 974              	.LVL48:
 975              	.L63:
 374:Core/Src/main.c ****   }
 976              		.loc 1 374 5 view .LVU268
 977 009e FFF7FEFF 		bl	Error_Handler
 978              	.LVL49:
 979              	.L65:
 980 00a2 00BF     		.align	2
 981              	.L64:
 982 00a4 00000000 		.word	.LANCHOR4
 983 00a8 00200140 		.word	1073815552
 984 00ac 0100000F 		.word	251658241
 985              		.cfi_endproc
 986              	.LFE246:
 988              		.section	.text.MX_I2C1_Init,"ax",%progbits
 989              		.align	1
 990              		.syntax unified
 991              		.thumb
 992              		.thumb_func
 993              		.fpu fpv4-sp-d16
 995              	MX_I2C1_Init:
 996              	.LFB247:
 388:Core/Src/main.c **** 
 997              		.loc 1 388 1 view -0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 0
 1000              		@ frame_needed = 0, uses_anonymous_args = 0
 1001 0000 08B5     		push	{r3, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 3, -8
 1004              		.cfi_offset 14, -4
 397:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1005              		.loc 1 397 3 view .LVU270
 397:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
ARM GAS  /tmp/ccSjts31.s 			page 51


 1006              		.loc 1 397 18 is_stmt 0 view .LVU271
 1007 0002 0A48     		ldr	r0, .L70
 1008 0004 0A4B     		ldr	r3, .L70+4
 1009 0006 0360     		str	r3, [r0]
 398:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1010              		.loc 1 398 3 is_stmt 1 view .LVU272
 398:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1011              		.loc 1 398 25 is_stmt 0 view .LVU273
 1012 0008 0A4B     		ldr	r3, .L70+8
 1013 000a 4360     		str	r3, [r0, #4]
 399:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1014              		.loc 1 399 3 is_stmt 1 view .LVU274
 399:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1015              		.loc 1 399 24 is_stmt 0 view .LVU275
 1016 000c 0023     		movs	r3, #0
 1017 000e 8360     		str	r3, [r0, #8]
 400:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1018              		.loc 1 400 3 is_stmt 1 view .LVU276
 400:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1019              		.loc 1 400 26 is_stmt 0 view .LVU277
 1020 0010 C360     		str	r3, [r0, #12]
 401:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1021              		.loc 1 401 3 is_stmt 1 view .LVU278
 401:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1022              		.loc 1 401 29 is_stmt 0 view .LVU279
 1023 0012 4FF48042 		mov	r2, #16384
 1024 0016 0261     		str	r2, [r0, #16]
 402:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1025              		.loc 1 402 3 is_stmt 1 view .LVU280
 402:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1026              		.loc 1 402 30 is_stmt 0 view .LVU281
 1027 0018 4361     		str	r3, [r0, #20]
 403:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1028              		.loc 1 403 3 is_stmt 1 view .LVU282
 403:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1029              		.loc 1 403 26 is_stmt 0 view .LVU283
 1030 001a 8361     		str	r3, [r0, #24]
 404:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1031              		.loc 1 404 3 is_stmt 1 view .LVU284
 404:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1032              		.loc 1 404 30 is_stmt 0 view .LVU285
 1033 001c C361     		str	r3, [r0, #28]
 405:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1034              		.loc 1 405 3 is_stmt 1 view .LVU286
 405:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1035              		.loc 1 405 28 is_stmt 0 view .LVU287
 1036 001e 0362     		str	r3, [r0, #32]
 406:Core/Src/main.c ****   {
 1037              		.loc 1 406 3 is_stmt 1 view .LVU288
 406:Core/Src/main.c ****   {
 1038              		.loc 1 406 7 is_stmt 0 view .LVU289
 1039 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1040              	.LVL50:
 406:Core/Src/main.c ****   {
 1041              		.loc 1 406 6 view .LVU290
 1042 0024 00B9     		cbnz	r0, .L69
 414:Core/Src/main.c **** 
ARM GAS  /tmp/ccSjts31.s 			page 52


 1043              		.loc 1 414 1 view .LVU291
 1044 0026 08BD     		pop	{r3, pc}
 1045              	.L69:
 408:Core/Src/main.c ****   }
 1046              		.loc 1 408 5 is_stmt 1 view .LVU292
 1047 0028 FFF7FEFF 		bl	Error_Handler
 1048              	.LVL51:
 1049              	.L71:
 1050              		.align	2
 1051              	.L70:
 1052 002c 00000000 		.word	.LANCHOR6
 1053 0030 00540040 		.word	1073763328
 1054 0034 A0860100 		.word	100000
 1055              		.cfi_endproc
 1056              	.LFE247:
 1058              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1059              		.align	1
 1060              		.syntax unified
 1061              		.thumb
 1062              		.thumb_func
 1063              		.fpu fpv4-sp-d16
 1065              	MX_USART2_UART_Init:
 1066              	.LFB248:
 422:Core/Src/main.c **** 
 1067              		.loc 1 422 1 view -0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071 0000 08B5     		push	{r3, lr}
 1072              		.cfi_def_cfa_offset 8
 1073              		.cfi_offset 3, -8
 1074              		.cfi_offset 14, -4
 431:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1075              		.loc 1 431 3 view .LVU294
 431:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1076              		.loc 1 431 19 is_stmt 0 view .LVU295
 1077 0002 0A48     		ldr	r0, .L76
 1078 0004 0A4B     		ldr	r3, .L76+4
 1079 0006 0360     		str	r3, [r0]
 432:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1080              		.loc 1 432 3 is_stmt 1 view .LVU296
 432:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1081              		.loc 1 432 24 is_stmt 0 view .LVU297
 1082 0008 4FF4E133 		mov	r3, #115200
 1083 000c 4360     		str	r3, [r0, #4]
 433:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1084              		.loc 1 433 3 is_stmt 1 view .LVU298
 433:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1085              		.loc 1 433 26 is_stmt 0 view .LVU299
 1086 000e 0023     		movs	r3, #0
 1087 0010 8360     		str	r3, [r0, #8]
 434:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1088              		.loc 1 434 3 is_stmt 1 view .LVU300
 434:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1089              		.loc 1 434 24 is_stmt 0 view .LVU301
 1090 0012 C360     		str	r3, [r0, #12]
 435:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/ccSjts31.s 			page 53


 1091              		.loc 1 435 3 is_stmt 1 view .LVU302
 435:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1092              		.loc 1 435 22 is_stmt 0 view .LVU303
 1093 0014 0361     		str	r3, [r0, #16]
 436:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1094              		.loc 1 436 3 is_stmt 1 view .LVU304
 436:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1095              		.loc 1 436 20 is_stmt 0 view .LVU305
 1096 0016 0C22     		movs	r2, #12
 1097 0018 4261     		str	r2, [r0, #20]
 437:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1098              		.loc 1 437 3 is_stmt 1 view .LVU306
 437:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1099              		.loc 1 437 25 is_stmt 0 view .LVU307
 1100 001a 8361     		str	r3, [r0, #24]
 438:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1101              		.loc 1 438 3 is_stmt 1 view .LVU308
 438:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1102              		.loc 1 438 28 is_stmt 0 view .LVU309
 1103 001c C361     		str	r3, [r0, #28]
 439:Core/Src/main.c ****   {
 1104              		.loc 1 439 3 is_stmt 1 view .LVU310
 439:Core/Src/main.c ****   {
 1105              		.loc 1 439 7 is_stmt 0 view .LVU311
 1106 001e FFF7FEFF 		bl	HAL_UART_Init
 1107              	.LVL52:
 439:Core/Src/main.c ****   {
 1108              		.loc 1 439 6 view .LVU312
 1109 0022 00B9     		cbnz	r0, .L75
 447:Core/Src/main.c **** 
 1110              		.loc 1 447 1 view .LVU313
 1111 0024 08BD     		pop	{r3, pc}
 1112              	.L75:
 441:Core/Src/main.c ****   }
 1113              		.loc 1 441 5 is_stmt 1 view .LVU314
 1114 0026 FFF7FEFF 		bl	Error_Handler
 1115              	.LVL53:
 1116              	.L77:
 1117 002a 00BF     		.align	2
 1118              	.L76:
 1119 002c 00000000 		.word	.LANCHOR7
 1120 0030 00440040 		.word	1073759232
 1121              		.cfi_endproc
 1122              	.LFE248:
 1124              		.section	.text.SystemClock_Config,"ax",%progbits
 1125              		.align	1
 1126              		.global	SystemClock_Config
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1130              		.fpu fpv4-sp-d16
 1132              	SystemClock_Config:
 1133              	.LFB245:
 261:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1134              		.loc 1 261 1 view -0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /tmp/ccSjts31.s 			page 54


 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138 0000 00B5     		push	{lr}
 1139              		.cfi_def_cfa_offset 4
 1140              		.cfi_offset 14, -4
 1141 0002 95B0     		sub	sp, sp, #84
 1142              		.cfi_def_cfa_offset 88
 262:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1143              		.loc 1 262 3 view .LVU316
 262:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1144              		.loc 1 262 22 is_stmt 0 view .LVU317
 1145 0004 3422     		movs	r2, #52
 1146 0006 0021     		movs	r1, #0
 1147 0008 07A8     		add	r0, sp, #28
 1148 000a FFF7FEFF 		bl	memset
 1149              	.LVL54:
 263:Core/Src/main.c **** 
 1150              		.loc 1 263 3 is_stmt 1 view .LVU318
 263:Core/Src/main.c **** 
 1151              		.loc 1 263 22 is_stmt 0 view .LVU319
 1152 000e 0023     		movs	r3, #0
 1153 0010 0293     		str	r3, [sp, #8]
 1154 0012 0393     		str	r3, [sp, #12]
 1155 0014 0493     		str	r3, [sp, #16]
 1156 0016 0593     		str	r3, [sp, #20]
 1157 0018 0693     		str	r3, [sp, #24]
 267:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1158              		.loc 1 267 3 is_stmt 1 view .LVU320
 1159              	.LBB11:
 267:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1160              		.loc 1 267 3 view .LVU321
 1161 001a 0093     		str	r3, [sp]
 267:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1162              		.loc 1 267 3 view .LVU322
 1163 001c 1F4A     		ldr	r2, .L84
 1164 001e 116C     		ldr	r1, [r2, #64]
 1165 0020 41F08051 		orr	r1, r1, #268435456
 1166 0024 1164     		str	r1, [r2, #64]
 267:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1167              		.loc 1 267 3 view .LVU323
 1168 0026 126C     		ldr	r2, [r2, #64]
 1169 0028 02F08052 		and	r2, r2, #268435456
 1170 002c 0092     		str	r2, [sp]
 267:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1171              		.loc 1 267 3 view .LVU324
 1172 002e 009A     		ldr	r2, [sp]
 1173              	.LBE11:
 267:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1174              		.loc 1 267 3 view .LVU325
 268:Core/Src/main.c **** 
 1175              		.loc 1 268 3 view .LVU326
 1176              	.LBB12:
 268:Core/Src/main.c **** 
 1177              		.loc 1 268 3 view .LVU327
 1178 0030 0193     		str	r3, [sp, #4]
 268:Core/Src/main.c **** 
 1179              		.loc 1 268 3 view .LVU328
 1180 0032 1B49     		ldr	r1, .L84+4
ARM GAS  /tmp/ccSjts31.s 			page 55


 1181 0034 0A68     		ldr	r2, [r1]
 1182 0036 22F44042 		bic	r2, r2, #49152
 1183 003a 42F48042 		orr	r2, r2, #16384
 1184 003e 0A60     		str	r2, [r1]
 268:Core/Src/main.c **** 
 1185              		.loc 1 268 3 view .LVU329
 1186 0040 0A68     		ldr	r2, [r1]
 1187 0042 02F44042 		and	r2, r2, #49152
 1188 0046 0192     		str	r2, [sp, #4]
 268:Core/Src/main.c **** 
 1189              		.loc 1 268 3 view .LVU330
 1190 0048 019A     		ldr	r2, [sp, #4]
 1191              	.LBE12:
 268:Core/Src/main.c **** 
 1192              		.loc 1 268 3 view .LVU331
 273:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1193              		.loc 1 273 3 view .LVU332
 273:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1194              		.loc 1 273 36 is_stmt 0 view .LVU333
 1195 004a 0222     		movs	r2, #2
 1196 004c 0792     		str	r2, [sp, #28]
 274:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1197              		.loc 1 274 3 is_stmt 1 view .LVU334
 274:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1198              		.loc 1 274 30 is_stmt 0 view .LVU335
 1199 004e 0121     		movs	r1, #1
 1200 0050 0A91     		str	r1, [sp, #40]
 275:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1201              		.loc 1 275 3 is_stmt 1 view .LVU336
 275:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1202              		.loc 1 275 41 is_stmt 0 view .LVU337
 1203 0052 1021     		movs	r1, #16
 1204 0054 0B91     		str	r1, [sp, #44]
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1205              		.loc 1 276 3 is_stmt 1 view .LVU338
 276:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1206              		.loc 1 276 34 is_stmt 0 view .LVU339
 1207 0056 0D92     		str	r2, [sp, #52]
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1208              		.loc 1 277 3 is_stmt 1 view .LVU340
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1209              		.loc 1 277 35 is_stmt 0 view .LVU341
 1210 0058 0E93     		str	r3, [sp, #56]
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1211              		.loc 1 278 3 is_stmt 1 view .LVU342
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1212              		.loc 1 278 30 is_stmt 0 view .LVU343
 1213 005a 0F91     		str	r1, [sp, #60]
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1214              		.loc 1 279 3 is_stmt 1 view .LVU344
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1215              		.loc 1 279 30 is_stmt 0 view .LVU345
 1216 005c 4FF4A873 		mov	r3, #336
 1217 0060 1093     		str	r3, [sp, #64]
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1218              		.loc 1 280 3 is_stmt 1 view .LVU346
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
ARM GAS  /tmp/ccSjts31.s 			page 56


 1219              		.loc 1 280 30 is_stmt 0 view .LVU347
 1220 0062 0423     		movs	r3, #4
 1221 0064 1193     		str	r3, [sp, #68]
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1222              		.loc 1 281 3 is_stmt 1 view .LVU348
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1223              		.loc 1 281 30 is_stmt 0 view .LVU349
 1224 0066 1292     		str	r2, [sp, #72]
 282:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1225              		.loc 1 282 3 is_stmt 1 view .LVU350
 282:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1226              		.loc 1 282 30 is_stmt 0 view .LVU351
 1227 0068 1392     		str	r2, [sp, #76]
 283:Core/Src/main.c ****   {
 1228              		.loc 1 283 3 is_stmt 1 view .LVU352
 283:Core/Src/main.c ****   {
 1229              		.loc 1 283 7 is_stmt 0 view .LVU353
 1230 006a 07A8     		add	r0, sp, #28
 1231 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1232              	.LVL55:
 283:Core/Src/main.c ****   {
 1233              		.loc 1 283 6 view .LVU354
 1234 0070 80B9     		cbnz	r0, .L82
 290:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1235              		.loc 1 290 3 is_stmt 1 view .LVU355
 290:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1236              		.loc 1 290 31 is_stmt 0 view .LVU356
 1237 0072 0F23     		movs	r3, #15
 1238 0074 0293     		str	r3, [sp, #8]
 292:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1239              		.loc 1 292 3 is_stmt 1 view .LVU357
 292:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1240              		.loc 1 292 34 is_stmt 0 view .LVU358
 1241 0076 0221     		movs	r1, #2
 1242 0078 0391     		str	r1, [sp, #12]
 293:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1243              		.loc 1 293 3 is_stmt 1 view .LVU359
 293:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1244              		.loc 1 293 35 is_stmt 0 view .LVU360
 1245 007a 0023     		movs	r3, #0
 1246 007c 0493     		str	r3, [sp, #16]
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1247              		.loc 1 294 3 is_stmt 1 view .LVU361
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1248              		.loc 1 294 36 is_stmt 0 view .LVU362
 1249 007e 4FF48052 		mov	r2, #4096
 1250 0082 0592     		str	r2, [sp, #20]
 295:Core/Src/main.c **** 
 1251              		.loc 1 295 3 is_stmt 1 view .LVU363
 295:Core/Src/main.c **** 
 1252              		.loc 1 295 36 is_stmt 0 view .LVU364
 1253 0084 0693     		str	r3, [sp, #24]
 297:Core/Src/main.c ****   {
 1254              		.loc 1 297 3 is_stmt 1 view .LVU365
 297:Core/Src/main.c ****   {
 1255              		.loc 1 297 7 is_stmt 0 view .LVU366
 1256 0086 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccSjts31.s 			page 57


 1257 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1258              	.LVL56:
 297:Core/Src/main.c ****   {
 1259              		.loc 1 297 6 view .LVU367
 1260 008c 20B9     		cbnz	r0, .L83
 301:Core/Src/main.c **** 
 1261              		.loc 1 301 1 view .LVU368
 1262 008e 15B0     		add	sp, sp, #84
 1263              		.cfi_remember_state
 1264              		.cfi_def_cfa_offset 4
 1265              		@ sp needed
 1266 0090 5DF804FB 		ldr	pc, [sp], #4
 1267              	.L82:
 1268              		.cfi_restore_state
 285:Core/Src/main.c ****   }
 1269              		.loc 1 285 5 is_stmt 1 view .LVU369
 1270 0094 FFF7FEFF 		bl	Error_Handler
 1271              	.LVL57:
 1272              	.L83:
 299:Core/Src/main.c ****   }
 1273              		.loc 1 299 5 view .LVU370
 1274 0098 FFF7FEFF 		bl	Error_Handler
 1275              	.LVL58:
 1276              	.L85:
 1277              		.align	2
 1278              	.L84:
 1279 009c 00380240 		.word	1073887232
 1280 00a0 00700040 		.word	1073770496
 1281              		.cfi_endproc
 1282              	.LFE245:
 1284              		.section	.text.main,"ax",%progbits
 1285              		.align	1
 1286              		.global	main
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1290              		.fpu fpv4-sp-d16
 1292              	main:
 1293              	.LFB244:
 166:Core/Src/main.c **** 
 1294              		.loc 1 166 1 view -0
 1295              		.cfi_startproc
 1296              		@ Volatile: function does not return.
 1297              		@ args = 0, pretend = 0, frame = 128
 1298              		@ frame_needed = 0, uses_anonymous_args = 0
 1299 0000 00B5     		push	{lr}
 1300              		.cfi_def_cfa_offset 4
 1301              		.cfi_offset 14, -4
 1302 0002 A1B0     		sub	sp, sp, #132
 1303              		.cfi_def_cfa_offset 136
 175:Core/Src/main.c **** 
 1304              		.loc 1 175 3 view .LVU372
 1305 0004 FFF7FEFF 		bl	HAL_Init
 1306              	.LVL59:
 182:Core/Src/main.c **** 
 1307              		.loc 1 182 3 view .LVU373
 1308 0008 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccSjts31.s 			page 58


 1309              	.LVL60:
 189:Core/Src/main.c ****   MX_DMA_Init();
 1310              		.loc 1 189 3 view .LVU374
 1311 000c FFF7FEFF 		bl	MX_GPIO_Init
 1312              	.LVL61:
 190:Core/Src/main.c ****   MX_ADC1_Init();
 1313              		.loc 1 190 3 view .LVU375
 1314 0010 FFF7FEFF 		bl	MX_DMA_Init
 1315              	.LVL62:
 191:Core/Src/main.c ****   MX_I2C1_Init();
 1316              		.loc 1 191 3 view .LVU376
 1317 0014 FFF7FEFF 		bl	MX_ADC1_Init
 1318              	.LVL63:
 192:Core/Src/main.c ****   MX_USART2_UART_Init();
 1319              		.loc 1 192 3 view .LVU377
 1320 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1321              	.LVL64:
 193:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1322              		.loc 1 193 3 view .LVU378
 1323 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1324              	.LVL65:
 212:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 1325              		.loc 1 212 3 view .LVU379
 1326 0020 2B4C     		ldr	r4, .L89
 1327 0022 0DF1700C 		add	ip, sp, #112
 1328 0026 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 1329 002a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 213:Core/Src/main.c **** 
 1330              		.loc 1 213 3 view .LVU380
 213:Core/Src/main.c **** 
 1331              		.loc 1 213 29 is_stmt 0 view .LVU381
 1332 002e 0021     		movs	r1, #0
 1333 0030 6046     		mov	r0, ip
 1334 0032 FFF7FEFF 		bl	osMessageCreate
 1335              	.LVL66:
 213:Core/Src/main.c **** 
 1336              		.loc 1 213 27 view .LVU382
 1337 0036 274B     		ldr	r3, .L89+4
 1338 0038 1860     		str	r0, [r3]
 221:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1339              		.loc 1 221 3 is_stmt 1 view .LVU383
 1340 003a 0DF1540C 		add	ip, sp, #84
 1341 003e 04F1100E 		add	lr, r4, #16
 1342 0042 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1343 0046 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1344 004a 9EE80700 		ldm	lr, {r0, r1, r2}
 1345 004e 8CE80700 		stm	ip, {r0, r1, r2}
 222:Core/Src/main.c **** 
 1346              		.loc 1 222 3 view .LVU384
 222:Core/Src/main.c **** 
 1347              		.loc 1 222 23 is_stmt 0 view .LVU385
 1348 0052 0021     		movs	r1, #0
 1349 0054 15A8     		add	r0, sp, #84
 1350 0056 FFF7FEFF 		bl	osThreadCreate
 1351              	.LVL67:
 222:Core/Src/main.c **** 
 1352              		.loc 1 222 21 view .LVU386
ARM GAS  /tmp/ccSjts31.s 			page 59


 1353 005a 1F4B     		ldr	r3, .L89+8
 1354 005c 1860     		str	r0, [r3]
 225:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 1355              		.loc 1 225 3 is_stmt 1 view .LVU387
 1356 005e 0DF1380C 		add	ip, sp, #56
 1357 0062 04F12C0E 		add	lr, r4, #44
 1358 0066 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1359 006a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1360 006e 9EE80700 		ldm	lr, {r0, r1, r2}
 1361 0072 8CE80700 		stm	ip, {r0, r1, r2}
 226:Core/Src/main.c **** 
 1362              		.loc 1 226 3 view .LVU388
 226:Core/Src/main.c **** 
 1363              		.loc 1 226 24 is_stmt 0 view .LVU389
 1364 0076 0021     		movs	r1, #0
 1365 0078 0EA8     		add	r0, sp, #56
 1366 007a FFF7FEFF 		bl	osThreadCreate
 1367              	.LVL68:
 226:Core/Src/main.c **** 
 1368              		.loc 1 226 22 view .LVU390
 1369 007e 174B     		ldr	r3, .L89+12
 1370 0080 1860     		str	r0, [r3]
 229:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 1371              		.loc 1 229 3 is_stmt 1 view .LVU391
 1372 0082 0DF11C0C 		add	ip, sp, #28
 1373 0086 04F1480E 		add	lr, r4, #72
 1374 008a BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1375 008e ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1376 0092 9EE80700 		ldm	lr, {r0, r1, r2}
 1377 0096 8CE80700 		stm	ip, {r0, r1, r2}
 230:Core/Src/main.c **** 
 1378              		.loc 1 230 3 view .LVU392
 230:Core/Src/main.c **** 
 1379              		.loc 1 230 25 is_stmt 0 view .LVU393
 1380 009a 0021     		movs	r1, #0
 1381 009c 07A8     		add	r0, sp, #28
 1382 009e FFF7FEFF 		bl	osThreadCreate
 1383              	.LVL69:
 230:Core/Src/main.c **** 
 1384              		.loc 1 230 23 view .LVU394
 1385 00a2 0F4B     		ldr	r3, .L89+16
 1386 00a4 1860     		str	r0, [r3]
 233:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 1387              		.loc 1 233 3 is_stmt 1 view .LVU395
 1388 00a6 EE46     		mov	lr, sp
 1389 00a8 04F1640C 		add	ip, r4, #100
 1390 00ac BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1391 00b0 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1392 00b4 9CE80700 		ldm	ip, {r0, r1, r2}
 1393 00b8 8EE80700 		stm	lr, {r0, r1, r2}
 234:Core/Src/main.c **** 
 1394              		.loc 1 234 3 view .LVU396
 234:Core/Src/main.c **** 
 1395              		.loc 1 234 26 is_stmt 0 view .LVU397
 1396 00bc 0021     		movs	r1, #0
 1397 00be 6846     		mov	r0, sp
 1398 00c0 FFF7FEFF 		bl	osThreadCreate
ARM GAS  /tmp/ccSjts31.s 			page 60


 1399              	.LVL70:
 234:Core/Src/main.c **** 
 1400              		.loc 1 234 24 view .LVU398
 1401 00c4 074B     		ldr	r3, .L89+20
 1402 00c6 1860     		str	r0, [r3]
 241:Core/Src/main.c **** 
 1403              		.loc 1 241 3 is_stmt 1 view .LVU399
 1404 00c8 FFF7FEFF 		bl	osKernelStart
 1405              	.LVL71:
 1406              	.L87:
 247:Core/Src/main.c ****   {
 1407              		.loc 1 247 3 discriminator 1 view .LVU400
 252:Core/Src/main.c ****   /* USER CODE END 3 */
 1408              		.loc 1 252 3 discriminator 1 view .LVU401
 247:Core/Src/main.c ****   {
 1409              		.loc 1 247 9 discriminator 1 view .LVU402
 1410 00cc FEE7     		b	.L87
 1411              	.L90:
 1412 00ce 00BF     		.align	2
 1413              	.L89:
 1414 00d0 00000000 		.word	.LANCHOR8
 1415 00d4 00000000 		.word	.LANCHOR2
 1416 00d8 00000000 		.word	.LANCHOR9
 1417 00dc 00000000 		.word	.LANCHOR10
 1418 00e0 00000000 		.word	.LANCHOR11
 1419 00e4 00000000 		.word	.LANCHOR12
 1420              		.cfi_endproc
 1421              	.LFE244:
 1423              		.global	MiniBotInputQueueHandle
 1424              		.global	ApplicationFSMHandle
 1425              		.global	MiniBotInputsHandle
 1426              		.global	BlinkLEDTaskHandle
 1427              		.global	defaultTaskHandle
 1428              		.global	huart2
 1429              		.global	hi2c1
 1430              		.global	hdma_adc1
 1431              		.global	hadc1
 1432              		.global	minibot_data
 1433              		.global	state
 1434              		.global	PotRawValue
 1435              		.global	Qdata
 1436              		.section	.rodata
 1437              		.align	2
 1438              		.set	.LANCHOR8,. + 0
 1439              	.LC0:
 1440 0000 10000000 		.word	16
 1441 0004 14000000 		.word	20
 1442 0008 00000000 		.word	0
 1443 000c 00000000 		.word	0
 1444              	.LC9:
 1445 0010 00000000 		.word	.LC1
 1446 0014 00000000 		.word	StartDefaultTask
 1447 0018 0000     		.short	0
 1448 001a 0000     		.space	2
 1449 001c 00000000 		.word	0
 1450 0020 80000000 		.word	128
 1451 0024 00000000 		.word	0
ARM GAS  /tmp/ccSjts31.s 			page 61


 1452 0028 00000000 		.word	0
 1453              	.LC10:
 1454 002c 0C000000 		.word	.LC3
 1455 0030 00000000 		.word	BlinkLEDTaskEntry
 1456 0034 FEFF     		.short	-2
 1457 0036 0000     		.space	2
 1458 0038 00000000 		.word	0
 1459 003c 80000000 		.word	128
 1460 0040 00000000 		.word	0
 1461 0044 00000000 		.word	0
 1462              	.LC11:
 1463 0048 1C000000 		.word	.LC5
 1464 004c 00000000 		.word	MiniBotInputsEntry
 1465 0050 0000     		.short	0
 1466 0052 0000     		.space	2
 1467 0054 00000000 		.word	0
 1468 0058 80000000 		.word	128
 1469 005c 00000000 		.word	0
 1470 0060 00000000 		.word	0
 1471              	.LC12:
 1472 0064 2C000000 		.word	.LC7
 1473 0068 00000000 		.word	ApplicationFSMEntry
 1474 006c 0000     		.short	0
 1475 006e 0000     		.space	2
 1476 0070 00000000 		.word	0
 1477 0074 80000000 		.word	128
 1478 0078 00000000 		.word	0
 1479 007c 00000000 		.word	0
 1480              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 1481              		.align	2
 1482              		.set	.LANCHOR12,. + 0
 1485              	ApplicationFSMHandle:
 1486 0000 00000000 		.space	4
 1487              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 1488              		.align	2
 1489              		.set	.LANCHOR10,. + 0
 1492              	BlinkLEDTaskHandle:
 1493 0000 00000000 		.space	4
 1494              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 1495              		.align	2
 1496              		.set	.LANCHOR2,. + 0
 1499              	MiniBotInputQueueHandle:
 1500 0000 00000000 		.space	4
 1501              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 1502              		.align	2
 1503              		.set	.LANCHOR11,. + 0
 1506              	MiniBotInputsHandle:
 1507 0000 00000000 		.space	4
 1508              		.section	.bss.PotRawValue,"aw",%nobits
 1509              		.align	2
 1510              		.set	.LANCHOR3,. + 0
 1513              	PotRawValue:
 1514 0000 00000000 		.space	16
 1514      00000000 
 1514      00000000 
 1514      00000000 
 1515              		.section	.bss.Qdata,"aw",%nobits
ARM GAS  /tmp/ccSjts31.s 			page 62


 1516              		.align	2
 1517              		.set	.LANCHOR5,. + 0
 1520              	Qdata:
 1521 0000 00000000 		.space	20
 1521      00000000 
 1521      00000000 
 1521      00000000 
 1521      00000000 
 1522              		.section	.bss.defaultTaskHandle,"aw",%nobits
 1523              		.align	2
 1524              		.set	.LANCHOR9,. + 0
 1527              	defaultTaskHandle:
 1528 0000 00000000 		.space	4
 1529              		.section	.bss.hadc1,"aw",%nobits
 1530              		.align	2
 1531              		.set	.LANCHOR4,. + 0
 1534              	hadc1:
 1535 0000 00000000 		.space	72
 1535      00000000 
 1535      00000000 
 1535      00000000 
 1535      00000000 
 1536              		.section	.bss.hdma_adc1,"aw",%nobits
 1537              		.align	2
 1540              	hdma_adc1:
 1541 0000 00000000 		.space	96
 1541      00000000 
 1541      00000000 
 1541      00000000 
 1541      00000000 
 1542              		.section	.bss.hi2c1,"aw",%nobits
 1543              		.align	2
 1544              		.set	.LANCHOR6,. + 0
 1547              	hi2c1:
 1548 0000 00000000 		.space	84
 1548      00000000 
 1548      00000000 
 1548      00000000 
 1548      00000000 
 1549              		.section	.bss.huart2,"aw",%nobits
 1550              		.align	2
 1551              		.set	.LANCHOR7,. + 0
 1554              	huart2:
 1555 0000 00000000 		.space	72
 1555      00000000 
 1555      00000000 
 1555      00000000 
 1555      00000000 
 1556              		.section	.bss.minibot_data,"aw",%nobits
 1557              		.align	2
 1558              		.set	.LANCHOR1,. + 0
 1561              	minibot_data:
 1562 0000 00000000 		.space	20
 1562      00000000 
 1562      00000000 
 1562      00000000 
 1562      00000000 
ARM GAS  /tmp/ccSjts31.s 			page 63


 1563              		.section	.bss.state,"aw",%nobits
 1564              		.set	.LANCHOR0,. + 0
 1567              	state:
 1568 0000 00       		.space	1
 1569              		.text
 1570              	.Letext0:
 1571              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1572              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1573              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1574              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1575              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1576              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1577              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1578              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1579              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1580              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1581              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1582              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1583              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1584              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1585              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1586              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 1587              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1588              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1589              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1590              		.file 22 "<built-in>"
ARM GAS  /tmp/ccSjts31.s 			page 64


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccSjts31.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccSjts31.s:31     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccSjts31.s:38     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccSjts31.s:191    .text.MX_GPIO_Init:00000000000000b0 $d
     /tmp/ccSjts31.s:198    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccSjts31.s:204    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccSjts31.s:250    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccSjts31.s:255    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccSjts31.s:262    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccSjts31.s:293    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccSjts31.s:298    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccSjts31.s:305    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccSjts31.s:340    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccSjts31.s:345    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccSjts31.s:352    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccSjts31.s:430    .text.ApplicationFSMEntry:0000000000000048 $d
     /tmp/ccSjts31.s:437    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccSjts31.s:444    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccSjts31.s:524    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccSjts31.s:529    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccSjts31.s:536    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccSjts31.s:550    .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccSjts31.s:557    .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccSjts31.s:633    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccSjts31.s:640    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccSjts31.s:720    .text.MiniBotInputsEntry:0000000000000068 $d
     /tmp/ccSjts31.s:729    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccSjts31.s:736    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccSjts31.s:769    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccSjts31.s:774    .text.Error_Handler:0000000000000000 $t
     /tmp/ccSjts31.s:781    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccSjts31.s:813    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccSjts31.s:819    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccSjts31.s:982    .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccSjts31.s:989    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccSjts31.s:995    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccSjts31.s:1052   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccSjts31.s:1059   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccSjts31.s:1065   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccSjts31.s:1119   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccSjts31.s:1125   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccSjts31.s:1132   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccSjts31.s:1279   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccSjts31.s:1285   .text.main:0000000000000000 $t
     /tmp/ccSjts31.s:1292   .text.main:0000000000000000 main
     /tmp/ccSjts31.s:1414   .text.main:00000000000000d0 $d
     /tmp/ccSjts31.s:1499   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccSjts31.s:1485   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccSjts31.s:1506   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccSjts31.s:1492   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccSjts31.s:1527   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccSjts31.s:1554   .bss.huart2:0000000000000000 huart2
     /tmp/ccSjts31.s:1547   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccSjts31.s:1540   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccSjts31.s:1534   .bss.hadc1:0000000000000000 hadc1
ARM GAS  /tmp/ccSjts31.s 			page 65


     /tmp/ccSjts31.s:1561   .bss.minibot_data:0000000000000000 minibot_data
     /tmp/ccSjts31.s:1567   .bss.state:0000000000000000 state
     /tmp/ccSjts31.s:1513   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccSjts31.s:1520   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccSjts31.s:1437   .rodata:0000000000000000 $d
     /tmp/ccSjts31.s:1481   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccSjts31.s:1488   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccSjts31.s:1495   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccSjts31.s:1502   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccSjts31.s:1509   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccSjts31.s:1516   .bss.Qdata:0000000000000000 $d
     /tmp/ccSjts31.s:1523   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccSjts31.s:1530   .bss.hadc1:0000000000000000 $d
     /tmp/ccSjts31.s:1537   .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccSjts31.s:1543   .bss.hi2c1:0000000000000000 $d
     /tmp/ccSjts31.s:1550   .bss.huart2:0000000000000000 $d
     /tmp/ccSjts31.s:1557   .bss.minibot_data:0000000000000000 $d
     /tmp/ccSjts31.s:1568   .bss.state:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
xQueueReceive
HAL_ADC_Start_DMA
HAL_GPIO_ReadPin
xQueueGenericSend
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMessageCreate
osThreadCreate
osKernelStart
