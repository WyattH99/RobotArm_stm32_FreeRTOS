ARM GAS  /tmp/ccADwVa0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 4D6F746F 		.ascii	"MotorControlTask\000"
  29      72436F6E 
  29      74726F6C 
  29      5461736B 
  29      00
  30 004d 000000   		.align	2
  31              	.LC12:
  32 0050 4C434450 		.ascii	"LCDPrintTask\000"
  32      72696E74 
  32      5461736B 
  32      00
  33              		.text
  34              	.Ltext0:
  35              		.cfi_sections	.debug_frame
  36              		.section	.text.MX_GPIO_Init,"ax",%progbits
  37              		.align	1
  38              		.arch armv7e-m
  39              		.syntax unified
ARM GAS  /tmp/ccADwVa0.s 			page 2


  40              		.thumb
  41              		.thumb_func
  42              		.fpu fpv4-sp-d16
  44              	MX_GPIO_Init:
  45              	.LFB251:
  46              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** #include "I2C_LCD.h"
  29:Core/Src/main.c **** #include "I2C_LCD_cfg.h"
  30:Core/Src/main.c **** #include "Util.h"
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /*
  38:Core/Src/main.c ****  * MiniBot Structures
  39:Core/Src/main.c ****  */
  40:Core/Src/main.c **** typedef struct{
  41:Core/Src/main.c **** 	uint8_t  PotNum;
  42:Core/Src/main.c **** 	uint32_t PotMin;
  43:Core/Src/main.c **** 	uint32_t PotMax;
  44:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  45:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** typedef struct{
  48:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  49:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  50:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  51:Core/Src/main.c **** 
ARM GAS  /tmp/ccADwVa0.s 			page 3


  52:Core/Src/main.c **** typedef struct{
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  54:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  55:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  56:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  57:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  58:Core/Src/main.c **** } MiniBot_Config_t;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** typedef struct{
  61:Core/Src/main.c **** 	uint32_t BasePotValue;
  62:Core/Src/main.c **** 	uint32_t BasePotMin;
  63:Core/Src/main.c **** 	uint32_t BasePotMax;
  64:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  65:Core/Src/main.c **** 	uint32_t ShoulderPotMin;
  66:Core/Src/main.c **** 	uint32_t ShoulderPotMax;
  67:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  68:Core/Src/main.c **** 	uint32_t ElbowPotMin;
  69:Core/Src/main.c **** 	uint32_t ElbowPotMax;
  70:Core/Src/main.c **** 	uint32_t WristPotValue;
  71:Core/Src/main.c **** 	uint32_t WristPotMin;
  72:Core/Src/main.c **** 	uint32_t WristPotMax;
  73:Core/Src/main.c **** 	uint8_t  GripperValue;
  74:Core/Src/main.c **** } MiniBot_Qdata;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  77:Core/Src/main.c **** uint32_t PotRawValue[4];
  78:Core/Src/main.c **** volatile MiniBot_Qdata MiniBot_Qdata_Buf;
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /*
  82:Core/Src/main.c ****  * MegaBot Structures
  83:Core/Src/main.c ****  */
  84:Core/Src/main.c **** typedef struct{
  85:Core/Src/main.c **** 	uint8_t  ServoNum;
  86:Core/Src/main.c **** 	uint16_t ServoMin;
  87:Core/Src/main.c **** 	uint16_t ServoMax;
  88:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  89:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** typedef struct{
  92:Core/Src/main.c **** 	uint8_t  ServoNum;
  93:Core/Src/main.c **** 	uint16_t ServoMin;
  94:Core/Src/main.c **** 	uint16_t ServoMax;
  95:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  96:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** typedef struct{
  99:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
 100:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
 101:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
 102:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
 103:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
 104:Core/Src/main.c **** } MegaBot_Config_t;
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** volatile MiniBot_Qdata Temp_Qdata_Buf;
 107:Core/Src/main.c **** volatile MiniBot_Qdata MotorControl_Qdata_Buf;
 108:Core/Src/main.c **** 
ARM GAS  /tmp/ccADwVa0.s 			page 4


 109:Core/Src/main.c **** uint8_t tempFailedToPostMessage = 0;
 110:Core/Src/main.c **** uint16_t MappedServoAngle[4];
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** enum State{
 114:Core/Src/main.c ****   Init,
 115:Core/Src/main.c ****   Ready,
 116:Core/Src/main.c ****   Running,
 117:Core/Src/main.c ****   EmergencyStop
 118:Core/Src/main.c **** };
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** volatile enum State state = Init;
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* USER CODE END PTD */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 125:Core/Src/main.c **** /* USER CODE BEGIN PD */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* USER CODE END PD */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 130:Core/Src/main.c **** /* USER CODE BEGIN PM */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /* USER CODE END PM */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 135:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 138:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** UART_HandleTypeDef huart2;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** osThreadId defaultTaskHandle;
 143:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 144:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 145:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 146:Core/Src/main.c **** osThreadId MotorControlTaskHandle;
 147:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 148:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 149:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 150:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 151:Core/Src/main.c **** osMutexId StateMutexHandle;
 152:Core/Src/main.c **** /* USER CODE BEGIN PV */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /* USER CODE END PV */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 157:Core/Src/main.c **** void SystemClock_Config(void);
 158:Core/Src/main.c **** static void MX_GPIO_Init(void);
 159:Core/Src/main.c **** static void MX_ADC1_Init(void);
 160:Core/Src/main.c **** static void MX_I2C1_Init(void);
 161:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 162:Core/Src/main.c **** static void MX_I2C2_Init(void);
 163:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 164:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 165:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
ARM GAS  /tmp/ccADwVa0.s 			page 5


 166:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 167:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 168:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 173:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot);
 174:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot);
 179:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** /* USER CODE END PFP */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 184:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 187:Core/Src/main.c **** {
 188:Core/Src/main.c ****   state = EmergencyStop;
 189:Core/Src/main.c **** }
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** /* USER CODE END 0 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** /**
 195:Core/Src/main.c ****   * @brief  The application entry point.
 196:Core/Src/main.c ****   * @retval int
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c **** int main(void)
 199:Core/Src/main.c **** {
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* USER CODE END 1 */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 208:Core/Src/main.c ****   HAL_Init();
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END Init */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* Configure the system clock */
 215:Core/Src/main.c ****   SystemClock_Config();
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE END SysInit */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* Initialize all configured peripherals */
 222:Core/Src/main.c ****   MX_GPIO_Init();
ARM GAS  /tmp/ccADwVa0.s 			page 6


 223:Core/Src/main.c ****   MX_ADC1_Init();
 224:Core/Src/main.c ****   MX_I2C1_Init();
 225:Core/Src/main.c ****   MX_USART2_UART_Init();
 226:Core/Src/main.c ****   MX_I2C2_Init();
 227:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE END 2 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* Create the mutex(es) */
 232:Core/Src/main.c ****   /* definition and creation of StateMutex */
 233:Core/Src/main.c ****   osMutexDef(StateMutex);
 234:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 237:Core/Src/main.c ****   /* add mutexes, ... */
 238:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 241:Core/Src/main.c ****   /* add semaphores, ... */
 242:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 245:Core/Src/main.c ****   /* start timers, add new ones, ... */
 246:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* Create the queue(s) */
 249:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 250:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 251:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 254:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, MiniBot_Qdata);
 255:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 258:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, enum State);
 259:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 262:Core/Src/main.c ****   /* add queues, ... */
 263:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* Create the thread(s) */
 266:Core/Src/main.c ****   /* definition and creation of defaultTask */
 267:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 268:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 271:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityNormal, 0, 128);
 272:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 275:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 512);
 276:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 279:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityHigh, 0, 512);
ARM GAS  /tmp/ccADwVa0.s 			page 7


 280:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* definition and creation of MotorControlTask */
 283:Core/Src/main.c ****   osThreadDef(MotorControlTask, MotorControlTaskEntry, osPriorityNormal, 0, 512);
 284:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 287:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 288:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 291:Core/Src/main.c ****   /* add threads, ... */
 292:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /* Start scheduler */
 295:Core/Src/main.c ****   osKernelStart();
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* Infinite loop */
 300:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 301:Core/Src/main.c ****   while (1)
 302:Core/Src/main.c ****   {
 303:Core/Src/main.c ****     /* USER CODE END WHILE */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 306:Core/Src/main.c ****   }
 307:Core/Src/main.c ****   /* USER CODE END 3 */
 308:Core/Src/main.c **** }
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** /**
 311:Core/Src/main.c ****   * @brief System Clock Configuration
 312:Core/Src/main.c ****   * @retval None
 313:Core/Src/main.c ****   */
 314:Core/Src/main.c **** void SystemClock_Config(void)
 315:Core/Src/main.c **** {
 316:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 317:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 320:Core/Src/main.c ****   */
 321:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 325:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 326:Core/Src/main.c ****   */
 327:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
ARM GAS  /tmp/ccADwVa0.s 			page 8


 337:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 338:Core/Src/main.c ****   {
 339:Core/Src/main.c ****     Error_Handler();
 340:Core/Src/main.c ****   }
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 343:Core/Src/main.c ****   */
 344:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 345:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 346:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 347:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c **** }
 356:Core/Src/main.c **** 
 357:Core/Src/main.c **** /**
 358:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 359:Core/Src/main.c ****   * @param None
 360:Core/Src/main.c ****   * @retval None
 361:Core/Src/main.c ****   */
 362:Core/Src/main.c **** static void MX_ADC1_Init(void)
 363:Core/Src/main.c **** {
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 366:Core/Src/main.c **** 
 367:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 376:Core/Src/main.c ****   */
 377:Core/Src/main.c ****   hadc1.Instance = ADC1;
 378:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 379:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 380:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 381:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 382:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 383:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 386:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 387:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 388:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 389:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 390:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 391:Core/Src/main.c ****   {
 392:Core/Src/main.c ****     Error_Handler();
 393:Core/Src/main.c ****   }
ARM GAS  /tmp/ccADwVa0.s 			page 9


 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 396:Core/Src/main.c ****   */
 397:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 398:Core/Src/main.c ****   sConfig.Rank = 1;
 399:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 401:Core/Src/main.c ****   {
 402:Core/Src/main.c ****     Error_Handler();
 403:Core/Src/main.c ****   }
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 406:Core/Src/main.c ****   */
 407:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 408:Core/Src/main.c ****   sConfig.Rank = 2;
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 410:Core/Src/main.c ****   {
 411:Core/Src/main.c ****     Error_Handler();
 412:Core/Src/main.c ****   }
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 415:Core/Src/main.c ****   */
 416:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 417:Core/Src/main.c ****   sConfig.Rank = 3;
 418:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 419:Core/Src/main.c ****   {
 420:Core/Src/main.c ****     Error_Handler();
 421:Core/Src/main.c ****   }
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 424:Core/Src/main.c ****   */
 425:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 426:Core/Src/main.c ****   sConfig.Rank = 4;
 427:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 428:Core/Src/main.c ****   {
 429:Core/Src/main.c ****     Error_Handler();
 430:Core/Src/main.c ****   }
 431:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** }
 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** /**
 438:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 439:Core/Src/main.c ****   * @param None
 440:Core/Src/main.c ****   * @retval None
 441:Core/Src/main.c ****   */
 442:Core/Src/main.c **** static void MX_I2C1_Init(void)
 443:Core/Src/main.c **** {
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 450:Core/Src/main.c **** 
ARM GAS  /tmp/ccADwVa0.s 			page 10


 451:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 452:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 453:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 454:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 456:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 457:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 458:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 459:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 460:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 461:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 462:Core/Src/main.c ****   {
 463:Core/Src/main.c ****     Error_Handler();
 464:Core/Src/main.c ****   }
 465:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 466:Core/Src/main.c **** 
 467:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** }
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** /**
 472:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 473:Core/Src/main.c ****   * @param None
 474:Core/Src/main.c ****   * @retval None
 475:Core/Src/main.c ****   */
 476:Core/Src/main.c **** static void MX_I2C2_Init(void)
 477:Core/Src/main.c **** {
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 486:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 487:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 488:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 490:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 491:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 492:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 493:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 494:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 495:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 496:Core/Src/main.c ****   {
 497:Core/Src/main.c ****     Error_Handler();
 498:Core/Src/main.c ****   }
 499:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 502:Core/Src/main.c **** 
 503:Core/Src/main.c **** }
 504:Core/Src/main.c **** 
 505:Core/Src/main.c **** /**
 506:Core/Src/main.c ****   * @brief USART2 Initialization Function
 507:Core/Src/main.c ****   * @param None
ARM GAS  /tmp/ccADwVa0.s 			page 11


 508:Core/Src/main.c ****   * @retval None
 509:Core/Src/main.c ****   */
 510:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 511:Core/Src/main.c **** {
 512:Core/Src/main.c **** 
 513:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 514:Core/Src/main.c **** 
 515:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 518:Core/Src/main.c **** 
 519:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 520:Core/Src/main.c ****   huart2.Instance = USART2;
 521:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 522:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 523:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 524:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 525:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 526:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 527:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 529:Core/Src/main.c ****   {
 530:Core/Src/main.c ****     Error_Handler();
 531:Core/Src/main.c ****   }
 532:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 535:Core/Src/main.c **** 
 536:Core/Src/main.c **** }
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** /**
 539:Core/Src/main.c ****   * @brief GPIO Initialization Function
 540:Core/Src/main.c ****   * @param None
 541:Core/Src/main.c ****   * @retval None
 542:Core/Src/main.c ****   */
 543:Core/Src/main.c **** static void MX_GPIO_Init(void)
 544:Core/Src/main.c **** {
  47              		.loc 1 544 1 view -0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 40
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  52              		.cfi_def_cfa_offset 24
  53              		.cfi_offset 4, -24
  54              		.cfi_offset 5, -20
  55              		.cfi_offset 6, -16
  56              		.cfi_offset 7, -12
  57              		.cfi_offset 8, -8
  58              		.cfi_offset 14, -4
  59 0004 8AB0     		sub	sp, sp, #40
  60              		.cfi_def_cfa_offset 64
 545:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  61              		.loc 1 545 3 view .LVU1
  62              		.loc 1 545 20 is_stmt 0 view .LVU2
  63 0006 0024     		movs	r4, #0
  64 0008 0594     		str	r4, [sp, #20]
  65 000a 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccADwVa0.s 			page 12


  66 000c 0794     		str	r4, [sp, #28]
  67 000e 0894     		str	r4, [sp, #32]
  68 0010 0994     		str	r4, [sp, #36]
 546:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 547:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 550:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  69              		.loc 1 550 3 is_stmt 1 view .LVU3
  70              	.LBB4:
  71              		.loc 1 550 3 view .LVU4
  72 0012 0194     		str	r4, [sp, #4]
  73              		.loc 1 550 3 view .LVU5
  74 0014 344B     		ldr	r3, .L3
  75 0016 1A6B     		ldr	r2, [r3, #48]
  76 0018 42F00402 		orr	r2, r2, #4
  77 001c 1A63     		str	r2, [r3, #48]
  78              		.loc 1 550 3 view .LVU6
  79 001e 1A6B     		ldr	r2, [r3, #48]
  80 0020 02F00402 		and	r2, r2, #4
  81 0024 0192     		str	r2, [sp, #4]
  82              		.loc 1 550 3 view .LVU7
  83 0026 019A     		ldr	r2, [sp, #4]
  84              	.LBE4:
  85              		.loc 1 550 3 view .LVU8
 551:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  86              		.loc 1 551 3 view .LVU9
  87              	.LBB5:
  88              		.loc 1 551 3 view .LVU10
  89 0028 0294     		str	r4, [sp, #8]
  90              		.loc 1 551 3 view .LVU11
  91 002a 1A6B     		ldr	r2, [r3, #48]
  92 002c 42F08002 		orr	r2, r2, #128
  93 0030 1A63     		str	r2, [r3, #48]
  94              		.loc 1 551 3 view .LVU12
  95 0032 1A6B     		ldr	r2, [r3, #48]
  96 0034 02F08002 		and	r2, r2, #128
  97 0038 0292     		str	r2, [sp, #8]
  98              		.loc 1 551 3 view .LVU13
  99 003a 029A     		ldr	r2, [sp, #8]
 100              	.LBE5:
 101              		.loc 1 551 3 view .LVU14
 552:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 102              		.loc 1 552 3 view .LVU15
 103              	.LBB6:
 104              		.loc 1 552 3 view .LVU16
 105 003c 0394     		str	r4, [sp, #12]
 106              		.loc 1 552 3 view .LVU17
 107 003e 1A6B     		ldr	r2, [r3, #48]
 108 0040 42F00102 		orr	r2, r2, #1
 109 0044 1A63     		str	r2, [r3, #48]
 110              		.loc 1 552 3 view .LVU18
 111 0046 1A6B     		ldr	r2, [r3, #48]
 112 0048 02F00102 		and	r2, r2, #1
 113 004c 0392     		str	r2, [sp, #12]
 114              		.loc 1 552 3 view .LVU19
 115 004e 039A     		ldr	r2, [sp, #12]
ARM GAS  /tmp/ccADwVa0.s 			page 13


 116              	.LBE6:
 117              		.loc 1 552 3 view .LVU20
 553:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 118              		.loc 1 553 3 view .LVU21
 119              	.LBB7:
 120              		.loc 1 553 3 view .LVU22
 121 0050 0494     		str	r4, [sp, #16]
 122              		.loc 1 553 3 view .LVU23
 123 0052 1A6B     		ldr	r2, [r3, #48]
 124 0054 42F00202 		orr	r2, r2, #2
 125 0058 1A63     		str	r2, [r3, #48]
 126              		.loc 1 553 3 view .LVU24
 127 005a 1B6B     		ldr	r3, [r3, #48]
 128 005c 03F00203 		and	r3, r3, #2
 129 0060 0493     		str	r3, [sp, #16]
 130              		.loc 1 553 3 view .LVU25
 131 0062 049B     		ldr	r3, [sp, #16]
 132              	.LBE7:
 133              		.loc 1 553 3 view .LVU26
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 556:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 134              		.loc 1 556 3 view .LVU27
 135 0064 214E     		ldr	r6, .L3+4
 136 0066 2246     		mov	r2, r4
 137 0068 2021     		movs	r1, #32
 138 006a 3046     		mov	r0, r6
 139 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 140              	.LVL0:
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 559:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 141              		.loc 1 559 3 view .LVU28
 142              		.loc 1 559 23 is_stmt 0 view .LVU29
 143 0070 4FF40053 		mov	r3, #8192
 144 0074 0593     		str	r3, [sp, #20]
 560:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 145              		.loc 1 560 3 is_stmt 1 view .LVU30
 146              		.loc 1 560 24 is_stmt 0 view .LVU31
 147 0076 4FF40418 		mov	r8, #2162688
 148 007a CDF81880 		str	r8, [sp, #24]
 561:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 149              		.loc 1 561 3 is_stmt 1 view .LVU32
 150              		.loc 1 561 24 is_stmt 0 view .LVU33
 151 007e 0794     		str	r4, [sp, #28]
 562:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 152              		.loc 1 562 3 is_stmt 1 view .LVU34
 153 0080 05A9     		add	r1, sp, #20
 154 0082 1B48     		ldr	r0, .L3+8
 155 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL1:
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 565:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 157              		.loc 1 565 3 view .LVU35
 158              		.loc 1 565 23 is_stmt 0 view .LVU36
 159 0088 2027     		movs	r7, #32
ARM GAS  /tmp/ccADwVa0.s 			page 14


 160 008a 0597     		str	r7, [sp, #20]
 566:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 161              		.loc 1 566 3 is_stmt 1 view .LVU37
 162              		.loc 1 566 24 is_stmt 0 view .LVU38
 163 008c 0125     		movs	r5, #1
 164 008e 0695     		str	r5, [sp, #24]
 567:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 165              		.loc 1 567 3 is_stmt 1 view .LVU39
 166              		.loc 1 567 24 is_stmt 0 view .LVU40
 167 0090 0794     		str	r4, [sp, #28]
 568:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 168              		.loc 1 568 3 is_stmt 1 view .LVU41
 169              		.loc 1 568 25 is_stmt 0 view .LVU42
 170 0092 0894     		str	r4, [sp, #32]
 569:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 171              		.loc 1 569 3 is_stmt 1 view .LVU43
 172 0094 05A9     		add	r1, sp, #20
 173 0096 3046     		mov	r0, r6
 174 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 175              	.LVL2:
 570:Core/Src/main.c **** 
 571:Core/Src/main.c ****   /*Configure GPIO pin : EmergencyStopBtn_Pin */
 572:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin;
 176              		.loc 1 572 3 view .LVU44
 177              		.loc 1 572 23 is_stmt 0 view .LVU45
 178 009c 4FF48073 		mov	r3, #256
 179 00a0 0593     		str	r3, [sp, #20]
 573:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 180              		.loc 1 573 3 is_stmt 1 view .LVU46
 181              		.loc 1 573 24 is_stmt 0 view .LVU47
 182 00a2 CDF81880 		str	r8, [sp, #24]
 574:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 183              		.loc 1 574 3 is_stmt 1 view .LVU48
 184              		.loc 1 574 24 is_stmt 0 view .LVU49
 185 00a6 0795     		str	r5, [sp, #28]
 575:Core/Src/main.c ****   HAL_GPIO_Init(EmergencyStopBtn_GPIO_Port, &GPIO_InitStruct);
 186              		.loc 1 575 3 is_stmt 1 view .LVU50
 187 00a8 05A9     		add	r1, sp, #20
 188 00aa 3046     		mov	r0, r6
 189 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 190              	.LVL3:
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 578:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 191              		.loc 1 578 3 view .LVU51
 192              		.loc 1 578 23 is_stmt 0 view .LVU52
 193 00b0 4FF40073 		mov	r3, #512
 194 00b4 0593     		str	r3, [sp, #20]
 579:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 195              		.loc 1 579 3 is_stmt 1 view .LVU53
 196              		.loc 1 579 24 is_stmt 0 view .LVU54
 197 00b6 0694     		str	r4, [sp, #24]
 580:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 198              		.loc 1 580 3 is_stmt 1 view .LVU55
 199              		.loc 1 580 24 is_stmt 0 view .LVU56
 200 00b8 0795     		str	r5, [sp, #28]
 581:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/ccADwVa0.s 			page 15


 201              		.loc 1 581 3 is_stmt 1 view .LVU57
 202 00ba 05A9     		add	r1, sp, #20
 203 00bc 3046     		mov	r0, r6
 204 00be FFF7FEFF 		bl	HAL_GPIO_Init
 205              	.LVL4:
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 584:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 206              		.loc 1 584 3 view .LVU58
 207              		.loc 1 584 23 is_stmt 0 view .LVU59
 208 00c2 0597     		str	r7, [sp, #20]
 585:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 209              		.loc 1 585 3 is_stmt 1 view .LVU60
 210              		.loc 1 585 24 is_stmt 0 view .LVU61
 211 00c4 0694     		str	r4, [sp, #24]
 586:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 212              		.loc 1 586 3 is_stmt 1 view .LVU62
 213              		.loc 1 586 24 is_stmt 0 view .LVU63
 214 00c6 0795     		str	r5, [sp, #28]
 587:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 215              		.loc 1 587 3 is_stmt 1 view .LVU64
 216 00c8 05A9     		add	r1, sp, #20
 217 00ca 0A48     		ldr	r0, .L3+12
 218 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 219              	.LVL5:
 588:Core/Src/main.c **** 
 589:Core/Src/main.c ****   /* EXTI interrupt init*/
 590:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 220              		.loc 1 590 3 view .LVU65
 221 00d0 2246     		mov	r2, r4
 222 00d2 0521     		movs	r1, #5
 223 00d4 1720     		movs	r0, #23
 224 00d6 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 225              	.LVL6:
 591:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 226              		.loc 1 591 3 view .LVU66
 227 00da 1720     		movs	r0, #23
 228 00dc FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 229              	.LVL7:
 592:Core/Src/main.c **** 
 593:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 594:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 595:Core/Src/main.c **** }
 230              		.loc 1 595 1 is_stmt 0 view .LVU67
 231 00e0 0AB0     		add	sp, sp, #40
 232              		.cfi_def_cfa_offset 24
 233              		@ sp needed
 234 00e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 235              	.L4:
 236 00e6 00BF     		.align	2
 237              	.L3:
 238 00e8 00380240 		.word	1073887232
 239 00ec 00000240 		.word	1073872896
 240 00f0 00080240 		.word	1073874944
 241 00f4 00040240 		.word	1073873920
 242              		.cfi_endproc
 243              	.LFE251:
ARM GAS  /tmp/ccADwVa0.s 			page 16


 245              		.section	.text.StartDefaultTask,"ax",%progbits
 246              		.align	1
 247              		.global	StartDefaultTask
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.fpu fpv4-sp-d16
 253              	StartDefaultTask:
 254              	.LFB258:
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 598:Core/Src/main.c **** 
 599:Core/Src/main.c **** 
 600:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 601:Core/Src/main.c **** 	// Configure Each of the joints
 602:Core/Src/main.c **** 
 603:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 604:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 605:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 606:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 607:Core/Src/main.c **** 
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 609:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 610:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 611:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 612:Core/Src/main.c **** 
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 614:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 615:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 616:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 617:Core/Src/main.c **** 
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 619:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 620:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 621:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 622:Core/Src/main.c **** 
 623:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 624:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 625:Core/Src/main.c **** }
 626:Core/Src/main.c **** 
 627:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot){
 628:Core/Src/main.c ****   // Configure Each of the joints
 629:Core/Src/main.c ****   MegaBot->Base.ServoNum = 0;
 630:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 631:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 632:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 633:Core/Src/main.c **** 
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoNum = 1;
 635:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 636:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 637:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 638:Core/Src/main.c **** 
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoNum = 2;
 640:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 641:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 642:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 643:Core/Src/main.c **** 
ARM GAS  /tmp/ccADwVa0.s 			page 17


 644:Core/Src/main.c ****   MegaBot->Wrist.ServoNum = 3;
 645:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 646:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 647:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 648:Core/Src/main.c **** 
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoNum = 4;
 650:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 651:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 652:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 653:Core/Src/main.c **** 
 654:Core/Src/main.c ****   ServoDriverInit(MegaBot);
 655:Core/Src/main.c **** }
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot){
 658:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 663:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 664:Core/Src/main.c **** }
 665:Core/Src/main.c **** 
 666:Core/Src/main.c **** 
 667:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 668:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 669:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 670:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 671:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 672:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 673:Core/Src/main.c ****     }else{
 674:Core/Src/main.c ****       *QPotData = PotRawValue;
 675:Core/Src/main.c ****     }
 676:Core/Src/main.c ****     if(Joint->PotInvertRange){
 677:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 678:Core/Src/main.c ****     }
 679:Core/Src/main.c ****   }
 680:Core/Src/main.c **** }
 681:Core/Src/main.c **** 
 682:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot){
 683:Core/Src/main.c ****   // MAP each of the angles
 684:Core/Src/main.c ****   // Send each of new Joints angle
 685:Core/Src/main.c ****   // uint16_t MappedServoAngle;
 686:Core/Src/main.c ****   // Base
 687:Core/Src/main.c ****   MappedServoAngle[0] = MAP(MiniBot->BasePotValue, MiniBot->BasePotMin, MiniBot->BasePotMax, MegaBo
 688:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 689:Core/Src/main.c ****   // Shoulder
 690:Core/Src/main.c ****   MappedServoAngle[1] = MAP(MiniBot->ShoulderPotValue, MiniBot->ShoulderPotMin, MiniBot->ShoulderPo
 691:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 692:Core/Src/main.c ****   // Elbow
 693:Core/Src/main.c ****   MappedServoAngle[2] = MAP(MiniBot->ElbowPotValue, MiniBot->ElbowPotMin, MiniBot->ElbowPotMax, Meg
 694:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 695:Core/Src/main.c ****   // Wrist
 696:Core/Src/main.c ****   MappedServoAngle[3] = MAP(MiniBot->WristPotValue, MiniBot->WristPotMin, MiniBot->WristPotMax, Meg
 697:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 698:Core/Src/main.c ****   // Gripper
 699:Core/Src/main.c ****   if(MiniBot->GripperValue){
 700:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
ARM GAS  /tmp/ccADwVa0.s 			page 18


 701:Core/Src/main.c ****   }else{
 702:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMax);
 703:Core/Src/main.c ****   }
 704:Core/Src/main.c **** }
 705:Core/Src/main.c **** 
 706:Core/Src/main.c **** // Used to map the Potentiometer Range (0-4096) to the Servo Range (0-180)
 707:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 708:Core/Src/main.c **** {
 709:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 710:Core/Src/main.c **** }
 711:Core/Src/main.c **** 
 712:Core/Src/main.c **** 
 713:Core/Src/main.c **** /* USER CODE END 4 */
 714:Core/Src/main.c **** 
 715:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 716:Core/Src/main.c **** /**
 717:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 718:Core/Src/main.c ****   * @param  argument: Not used
 719:Core/Src/main.c ****   * @retval None
 720:Core/Src/main.c ****   */
 721:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 722:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 723:Core/Src/main.c **** {
 255              		.loc 1 723 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ Volatile: function does not return.
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL8:
 261              		.loc 1 723 1 is_stmt 0 view .LVU69
 262 0000 08B5     		push	{r3, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 3, -8
 265              		.cfi_offset 14, -4
 266              	.LVL9:
 267              	.L6:
 724:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 725:Core/Src/main.c ****   /* Infinite loop */
 726:Core/Src/main.c ****   for(;;)
 268              		.loc 1 726 3 is_stmt 1 discriminator 1 view .LVU70
 727:Core/Src/main.c ****   {
 728:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 269              		.loc 1 728 5 discriminator 1 view .LVU71
 270 0002 0022     		movs	r2, #0
 271 0004 2021     		movs	r1, #32
 272 0006 0448     		ldr	r0, .L8
 273 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 274              	.LVL10:
 729:Core/Src/main.c ****     osDelay(1000);
 275              		.loc 1 729 5 discriminator 1 view .LVU72
 276 000c 4FF47A70 		mov	r0, #1000
 277 0010 FFF7FEFF 		bl	osDelay
 278              	.LVL11:
 726:Core/Src/main.c ****   {
 279              		.loc 1 726 8 discriminator 1 view .LVU73
 280 0014 F5E7     		b	.L6
 281              	.L9:
ARM GAS  /tmp/ccADwVa0.s 			page 19


 282 0016 00BF     		.align	2
 283              	.L8:
 284 0018 00000240 		.word	1073872896
 285              		.cfi_endproc
 286              	.LFE258:
 288              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 289              		.align	1
 290              		.global	BlinkLEDTaskEntry
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	BlinkLEDTaskEntry:
 297              	.LFB259:
 730:Core/Src/main.c ****   }
 731:Core/Src/main.c ****   /* USER CODE END 5 */
 732:Core/Src/main.c **** }
 733:Core/Src/main.c **** 
 734:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 735:Core/Src/main.c **** /**
 736:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 737:Core/Src/main.c **** * @param argument: Not used
 738:Core/Src/main.c **** * @retval None
 739:Core/Src/main.c **** */
 740:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 741:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 742:Core/Src/main.c **** {
 298              		.loc 1 742 1 view -0
 299              		.cfi_startproc
 300              		@ Volatile: function does not return.
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL12:
 304              		.loc 1 742 1 is_stmt 0 view .LVU75
 305 0000 08B5     		push	{r3, lr}
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 3, -8
 308              		.cfi_offset 14, -4
 309              	.LVL13:
 310              	.L11:
 743:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 744:Core/Src/main.c ****   /* Infinite loop */
 745:Core/Src/main.c ****   for(;;)
 311              		.loc 1 745 3 is_stmt 1 discriminator 1 view .LVU76
 746:Core/Src/main.c ****   {
 747:Core/Src/main.c ****     
 748:Core/Src/main.c ****     osDelay(500);
 312              		.loc 1 748 5 discriminator 1 view .LVU77
 313 0002 4FF4FA70 		mov	r0, #500
 314 0006 FFF7FEFF 		bl	osDelay
 315              	.LVL14:
 749:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 316              		.loc 1 749 5 discriminator 1 view .LVU78
 317 000a 0122     		movs	r2, #1
 318 000c 2021     		movs	r1, #32
 319 000e 0448     		ldr	r0, .L13
 320 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccADwVa0.s 			page 20


 321              	.LVL15:
 750:Core/Src/main.c ****     osDelay(500);
 322              		.loc 1 750 5 discriminator 1 view .LVU79
 323 0014 4FF4FA70 		mov	r0, #500
 324 0018 FFF7FEFF 		bl	osDelay
 325              	.LVL16:
 745:Core/Src/main.c ****   {
 326              		.loc 1 745 8 discriminator 1 view .LVU80
 327 001c F1E7     		b	.L11
 328              	.L14:
 329 001e 00BF     		.align	2
 330              	.L13:
 331 0020 00000240 		.word	1073872896
 332              		.cfi_endproc
 333              	.LFE259:
 335              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 336              		.align	1
 337              		.global	ApplicationFSMEntry
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu fpv4-sp-d16
 343              	ApplicationFSMEntry:
 344              	.LFB261:
 751:Core/Src/main.c ****   }
 752:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 753:Core/Src/main.c **** }
 754:Core/Src/main.c **** 
 755:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 756:Core/Src/main.c **** /**
 757:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 758:Core/Src/main.c **** * @param argument: Not used
 759:Core/Src/main.c **** * @retval None
 760:Core/Src/main.c **** */
 761:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 762:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 763:Core/Src/main.c **** {
 764:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 765:Core/Src/main.c **** 
 766:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 767:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   Qdata.BasePotMax = MiniBot.Base.PotMax;
 770:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 771:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 772:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 773:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 774:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 775:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 776:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 777:Core/Src/main.c ****   
 778:Core/Src/main.c **** 
 779:Core/Src/main.c **** 	/* Infinite loop */
 780:Core/Src/main.c **** 	for(;;)
 781:Core/Src/main.c **** 	{
 782:Core/Src/main.c ****     for(uint8_t i=0; i<4; i++){
 783:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
ARM GAS  /tmp/ccADwVa0.s 			page 21


 784:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 785:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 786:Core/Src/main.c ****     }
 787:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 788:Core/Src/main.c **** 
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 790:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 791:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 792:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 793:Core/Src/main.c **** 
 794:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 795:Core/Src/main.c ****     
 796:Core/Src/main.c ****     if(MiniBotInputQueueHandle != 0){
 797:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 798:Core/Src/main.c ****         // failed to post message
 799:Core/Src/main.c ****         tempFailedToPostMessage = 1;
 800:Core/Src/main.c ****       }
 801:Core/Src/main.c ****     }
 802:Core/Src/main.c ****   
 803:Core/Src/main.c **** 
 804:Core/Src/main.c ****     osDelay(1);
 805:Core/Src/main.c **** 	}
 806:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 807:Core/Src/main.c **** }
 808:Core/Src/main.c **** 
 809:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 810:Core/Src/main.c **** /**
 811:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 812:Core/Src/main.c **** * @param argument: Not used
 813:Core/Src/main.c **** * @retval None
 814:Core/Src/main.c **** */
 815:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 816:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 817:Core/Src/main.c **** {
 345              		.loc 1 817 1 view -0
 346              		.cfi_startproc
 347              		@ Volatile: function does not return.
 348              		@ args = 0, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              	.LVL17:
 351              		.loc 1 817 1 is_stmt 0 view .LVU82
 352 0000 08B5     		push	{r3, lr}
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 3, -8
 355              		.cfi_offset 14, -4
 356 0002 4FE0     		b	.L21
 357              	.LVL18:
 358              	.L17:
 818:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 819:Core/Src/main.c **** 
 820:Core/Src/main.c ****   // enum State state = Init;
 821:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 822:Core/Src/main.c **** 
 823:Core/Src/main.c ****   /* Infinite loop */
 824:Core/Src/main.c ****   for(;;)
 825:Core/Src/main.c ****   {
 826:Core/Src/main.c ****     if(xQueueSend(LCDPrintQueueHandle, (void*)&state, portMAX_DELAY) != pdPASS){
ARM GAS  /tmp/ccADwVa0.s 			page 22


 827:Core/Src/main.c ****       // failed to post message
 828:Core/Src/main.c ****       tempFailedToPostMessage = 1;
 829:Core/Src/main.c ****     }
 830:Core/Src/main.c ****     if(state == Init){
 831:Core/Src/main.c ****       state = Ready;
 832:Core/Src/main.c ****       
 833:Core/Src/main.c ****     }else if(state == Ready){
 359              		.loc 1 833 11 is_stmt 1 view .LVU83
 360              		.loc 1 833 20 is_stmt 0 view .LVU84
 361 0004 3A4B     		ldr	r3, .L24
 362 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0008 DBB2     		uxtb	r3, r3
 364              		.loc 1 833 13 view .LVU85
 365 000a 012B     		cmp	r3, #1
 366 000c 25D0     		beq	.L23
 834:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 835:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 836:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 837:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 838:Core/Src/main.c ****               state++;
 839:Core/Src/main.c ****             }
 840:Core/Src/main.c ****           }
 841:Core/Src/main.c ****         }
 842:Core/Src/main.c ****       }
 843:Core/Src/main.c **** 
 844:Core/Src/main.c ****     }else if(state == Running){
 367              		.loc 1 844 11 is_stmt 1 view .LVU86
 368              		.loc 1 844 20 is_stmt 0 view .LVU87
 369 000e 384B     		ldr	r3, .L24
 370 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 371 0012 DBB2     		uxtb	r3, r3
 372              		.loc 1 844 13 view .LVU88
 373 0014 022B     		cmp	r3, #2
 374 0016 59D1     		bne	.L18
 845:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 846:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 375              		.loc 1 846 7 is_stmt 1 view .LVU89
 376              		.loc 1 846 10 is_stmt 0 view .LVU90
 377 0018 4FF0FF32 		mov	r2, #-1
 378 001c 3549     		ldr	r1, .L24+4
 379 001e 364B     		ldr	r3, .L24+8
 380 0020 1868     		ldr	r0, [r3]
 381 0022 FFF7FEFF 		bl	xQueueReceive
 382              	.LVL19:
 383              		.loc 1 846 9 view .LVU91
 384 0026 0128     		cmp	r0, #1
 385 0028 50D1     		bne	.L18
 847:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 386              		.loc 1 847 9 is_stmt 1 view .LVU92
 387              		.loc 1 847 24 is_stmt 0 view .LVU93
 388 002a 344D     		ldr	r5, .L24+12
 389 002c AC46     		mov	ip, r5
 390 002e 314C     		ldr	r4, .L24+4
 391 0030 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 392 0032 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 393 0036 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 394 0038 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccADwVa0.s 			page 23


 395 003c 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 396 003e ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 397 0042 2368     		ldr	r3, [r4]
 398 0044 CCF80030 		str	r3, [ip]
 848:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 399              		.loc 1 848 9 is_stmt 1 view .LVU94
 400 0048 0023     		movs	r3, #0
 401 004a 4FF0FF32 		mov	r2, #-1
 402 004e 2946     		mov	r1, r5
 403 0050 2B48     		ldr	r0, .L24+16
 404 0052 0068     		ldr	r0, [r0]
 405 0054 FFF7FEFF 		bl	xQueueGenericSend
 406              	.LVL20:
 407 0058 38E0     		b	.L18
 408              	.L23:
 834:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 409              		.loc 1 834 7 view .LVU95
 834:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 410              		.loc 1 834 10 is_stmt 0 view .LVU96
 411 005a 4FF0FF32 		mov	r2, #-1
 412 005e 2549     		ldr	r1, .L24+4
 413 0060 254B     		ldr	r3, .L24+8
 414 0062 1868     		ldr	r0, [r3]
 415 0064 FFF7FEFF 		bl	xQueueReceive
 416              	.LVL21:
 834:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 417              		.loc 1 834 9 view .LVU97
 418 0068 0128     		cmp	r0, #1
 419 006a 2FD1     		bne	.L18
 835:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 420              		.loc 1 835 9 is_stmt 1 view .LVU98
 835:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 421              		.loc 1 835 29 is_stmt 0 view .LVU99
 422 006c 214B     		ldr	r3, .L24+4
 423 006e 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 835:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 424              		.loc 1 835 11 view .LVU100
 425 0072 5BBB     		cbnz	r3, .L18
 836:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 426              		.loc 1 836 11 is_stmt 1 view .LVU101
 836:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 427              		.loc 1 836 14 is_stmt 0 view .LVU102
 428 0074 4FF0FF32 		mov	r2, #-1
 429 0078 1E49     		ldr	r1, .L24+4
 430 007a 1F4B     		ldr	r3, .L24+8
 431 007c 1868     		ldr	r0, [r3]
 432 007e FFF7FEFF 		bl	xQueueReceive
 433              	.LVL22:
 836:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 434              		.loc 1 836 13 view .LVU103
 435 0082 0128     		cmp	r0, #1
 436 0084 22D1     		bne	.L18
 837:Core/Src/main.c ****               state++;
 437              		.loc 1 837 13 is_stmt 1 view .LVU104
 837:Core/Src/main.c ****               state++;
 438              		.loc 1 837 33 is_stmt 0 view .LVU105
 439 0086 1B4B     		ldr	r3, .L24+4
ARM GAS  /tmp/ccADwVa0.s 			page 24


 440 0088 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 441 008c DBB2     		uxtb	r3, r3
 837:Core/Src/main.c ****               state++;
 442              		.loc 1 837 15 view .LVU106
 443 008e 012B     		cmp	r3, #1
 444 0090 1CD1     		bne	.L18
 838:Core/Src/main.c ****             }
 445              		.loc 1 838 15 is_stmt 1 view .LVU107
 838:Core/Src/main.c ****             }
 446              		.loc 1 838 20 is_stmt 0 view .LVU108
 447 0092 174A     		ldr	r2, .L24
 448 0094 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 449 0096 0133     		adds	r3, r3, #1
 450 0098 DBB2     		uxtb	r3, r3
 451 009a 1370     		strb	r3, [r2]
 452 009c 16E0     		b	.L18
 453              	.L20:
 849:Core/Src/main.c ****       }
 850:Core/Src/main.c ****       
 851:Core/Src/main.c ****     }
 852:Core/Src/main.c ****     
 853:Core/Src/main.c ****     if(state == EmergencyStop){
 854:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 855:Core/Src/main.c ****       if(!HAL_GPIO_ReadPin(ResetBtn_GPIO_Port, ResetBtn_Pin)){
 856:Core/Src/main.c ****         osDelay(200);
 857:Core/Src/main.c ****         state = Ready;
 858:Core/Src/main.c ****       }
 859:Core/Src/main.c ****     }
 860:Core/Src/main.c **** 
 861:Core/Src/main.c **** 
 862:Core/Src/main.c **** 
 863:Core/Src/main.c ****     osDelay(1);
 454              		.loc 1 863 5 is_stmt 1 view .LVU109
 455 009e 0120     		movs	r0, #1
 456 00a0 FFF7FEFF 		bl	osDelay
 457              	.LVL23:
 824:Core/Src/main.c ****   {
 458              		.loc 1 824 8 view .LVU110
 459              	.L21:
 824:Core/Src/main.c ****   {
 460              		.loc 1 824 3 view .LVU111
 826:Core/Src/main.c ****       // failed to post message
 461              		.loc 1 826 5 view .LVU112
 826:Core/Src/main.c ****       // failed to post message
 462              		.loc 1 826 8 is_stmt 0 view .LVU113
 463 00a4 0023     		movs	r3, #0
 464 00a6 4FF0FF32 		mov	r2, #-1
 465 00aa 1149     		ldr	r1, .L24
 466 00ac 1548     		ldr	r0, .L24+20
 467 00ae 0068     		ldr	r0, [r0]
 468 00b0 FFF7FEFF 		bl	xQueueGenericSend
 469              	.LVL24:
 826:Core/Src/main.c ****       // failed to post message
 470              		.loc 1 826 7 view .LVU114
 471 00b4 0128     		cmp	r0, #1
 472 00b6 02D0     		beq	.L16
 828:Core/Src/main.c ****     }
ARM GAS  /tmp/ccADwVa0.s 			page 25


 473              		.loc 1 828 7 is_stmt 1 view .LVU115
 828:Core/Src/main.c ****     }
 474              		.loc 1 828 31 is_stmt 0 view .LVU116
 475 00b8 134B     		ldr	r3, .L24+24
 476 00ba 0122     		movs	r2, #1
 477 00bc 1A70     		strb	r2, [r3]
 478              	.L16:
 830:Core/Src/main.c ****       state = Ready;
 479              		.loc 1 830 5 is_stmt 1 view .LVU117
 830:Core/Src/main.c ****       state = Ready;
 480              		.loc 1 830 14 is_stmt 0 view .LVU118
 481 00be 0C4B     		ldr	r3, .L24
 482 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 830:Core/Src/main.c ****       state = Ready;
 483              		.loc 1 830 7 view .LVU119
 484 00c2 002B     		cmp	r3, #0
 485 00c4 9ED1     		bne	.L17
 831:Core/Src/main.c ****       
 486              		.loc 1 831 7 is_stmt 1 view .LVU120
 831:Core/Src/main.c ****       
 487              		.loc 1 831 13 is_stmt 0 view .LVU121
 488 00c6 0A4B     		ldr	r3, .L24
 489 00c8 0122     		movs	r2, #1
 490 00ca 1A70     		strb	r2, [r3]
 491              	.L18:
 853:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 492              		.loc 1 853 5 is_stmt 1 view .LVU122
 853:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 493              		.loc 1 853 14 is_stmt 0 view .LVU123
 494 00cc 084B     		ldr	r3, .L24
 495 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 496 00d0 DBB2     		uxtb	r3, r3
 853:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 497              		.loc 1 853 7 view .LVU124
 498 00d2 032B     		cmp	r3, #3
 499 00d4 E3D1     		bne	.L20
 855:Core/Src/main.c ****         osDelay(200);
 500              		.loc 1 855 7 is_stmt 1 view .LVU125
 855:Core/Src/main.c ****         osDelay(200);
 501              		.loc 1 855 11 is_stmt 0 view .LVU126
 502 00d6 2021     		movs	r1, #32
 503 00d8 0C48     		ldr	r0, .L24+28
 504 00da FFF7FEFF 		bl	HAL_GPIO_ReadPin
 505              	.LVL25:
 855:Core/Src/main.c ****         osDelay(200);
 506              		.loc 1 855 9 view .LVU127
 507 00de 0028     		cmp	r0, #0
 508 00e0 DDD1     		bne	.L20
 856:Core/Src/main.c ****         state = Ready;
 509              		.loc 1 856 9 is_stmt 1 view .LVU128
 510 00e2 C820     		movs	r0, #200
 511 00e4 FFF7FEFF 		bl	osDelay
 512              	.LVL26:
 857:Core/Src/main.c ****       }
 513              		.loc 1 857 9 view .LVU129
 857:Core/Src/main.c ****       }
 514              		.loc 1 857 15 is_stmt 0 view .LVU130
ARM GAS  /tmp/ccADwVa0.s 			page 26


 515 00e8 014B     		ldr	r3, .L24
 516 00ea 0122     		movs	r2, #1
 517 00ec 1A70     		strb	r2, [r3]
 518 00ee D6E7     		b	.L20
 519              	.L25:
 520              		.align	2
 521              	.L24:
 522 00f0 00000000 		.word	.LANCHOR0
 523 00f4 00000000 		.word	.LANCHOR3
 524 00f8 00000000 		.word	.LANCHOR4
 525 00fc 00000000 		.word	.LANCHOR5
 526 0100 00000000 		.word	.LANCHOR6
 527 0104 00000000 		.word	.LANCHOR1
 528 0108 00000000 		.word	.LANCHOR2
 529 010c 00040240 		.word	1073873920
 530              		.cfi_endproc
 531              	.LFE261:
 533              		.section	.rodata.LCDPrintTaskEntry.str1.4,"aMS",%progbits,1
 534              		.align	2
 535              	.LC14:
 536 0000 54657374 		.ascii	"Test\000"
 536      00
 537 0005 000000   		.align	2
 538              	.LC15:
 539 0008 49324320 		.ascii	"I2C LCD\000"
 539      4C434400 
 540              		.align	2
 541              	.LC16:
 542 0010 496E6974 		.ascii	"Initializing\000"
 542      69616C69 
 542      7A696E67 
 542      00
 543 001d 000000   		.align	2
 544              	.LC17:
 545 0020 506C6561 		.ascii	"Please Wait\000"
 545      73652057 
 545      61697400 
 546              		.align	2
 547              	.LC18:
 548 002c 52656164 		.ascii	"Ready\000"
 548      7900
 549 0032 0000     		.align	2
 550              	.LC19:
 551 0034 50726573 		.ascii	"Press Gripper\000"
 551      73204772 
 551      69707065 
 551      7200
 552 0042 0000     		.align	2
 553              	.LC20:
 554 0044 52756E6E 		.ascii	"Running\000"
 554      696E6700 
 555              		.align	2
 556              	.LC21:
 557 004c 456D6572 		.ascii	"Emergency Stop!\000"
 557      67656E63 
 557      79205374 
 557      6F702100 
ARM GAS  /tmp/ccADwVa0.s 			page 27


 558              		.align	2
 559              	.LC22:
 560 005c 50726573 		.ascii	"Press Reset Button\000"
 560      73205265 
 560      73657420 
 560      42757474 
 560      6F6E00
 561              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 562              		.align	1
 563              		.global	LCDPrintTaskEntry
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv4-sp-d16
 569              	LCDPrintTaskEntry:
 570              	.LVL27:
 571              	.LFB263:
 864:Core/Src/main.c ****   }
 865:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 866:Core/Src/main.c **** }
 867:Core/Src/main.c **** 
 868:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 869:Core/Src/main.c **** /**
 870:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 871:Core/Src/main.c **** * @param argument: Not used
 872:Core/Src/main.c **** * @retval None
 873:Core/Src/main.c **** */
 874:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 875:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
 876:Core/Src/main.c **** {
 877:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 878:Core/Src/main.c **** 
 879:Core/Src/main.c ****   MegaBot_Config_t MegaBot;
 880:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 881:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 882:Core/Src/main.c **** 
 883:Core/Src/main.c **** 
 884:Core/Src/main.c ****   /* Infinite loop */
 885:Core/Src/main.c ****   for(;;)
 886:Core/Src/main.c ****   {
 887:Core/Src/main.c **** 
 888:Core/Src/main.c ****     if(xQueueReceive(MotorControlQueueHandle, (void*)&MotorControl_Qdata_Buf, portMAX_DELAY) == pdP
 889:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 890:Core/Src/main.c ****     }
 891:Core/Src/main.c **** 
 892:Core/Src/main.c **** 
 893:Core/Src/main.c **** 
 894:Core/Src/main.c ****     osDelay(1);
 895:Core/Src/main.c ****   }
 896:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 897:Core/Src/main.c **** }
 898:Core/Src/main.c **** 
 899:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 900:Core/Src/main.c **** /**
 901:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 902:Core/Src/main.c **** * @param argument: Not used
 903:Core/Src/main.c **** * @retval None
ARM GAS  /tmp/ccADwVa0.s 			page 28


 904:Core/Src/main.c **** */
 905:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 906:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 907:Core/Src/main.c **** {
 572              		.loc 1 907 1 is_stmt 1 view -0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 8
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		.loc 1 907 1 is_stmt 0 view .LVU132
 577 0000 10B5     		push	{r4, lr}
 578              		.cfi_def_cfa_offset 8
 579              		.cfi_offset 4, -8
 580              		.cfi_offset 14, -4
 581 0002 82B0     		sub	sp, sp, #8
 582              		.cfi_def_cfa_offset 16
 908:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 909:Core/Src/main.c **** 
 910:Core/Src/main.c ****   I2C_LCD_Init(I2C_LCD_1);
 583              		.loc 1 910 3 is_stmt 1 view .LVU133
 584 0004 0020     		movs	r0, #0
 585              	.LVL28:
 586              		.loc 1 910 3 is_stmt 0 view .LVU134
 587 0006 FFF7FEFF 		bl	I2C_LCD_Init
 588              	.LVL29:
 911:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 589              		.loc 1 911 3 is_stmt 1 view .LVU135
 590 000a 0022     		movs	r2, #0
 591 000c 1146     		mov	r1, r2
 592 000e 1046     		mov	r0, r2
 593 0010 FFF7FEFF 		bl	I2C_LCD_SetCursor
 594              	.LVL30:
 912:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "Test");
 595              		.loc 1 912 3 view .LVU136
 596 0014 3C49     		ldr	r1, .L37
 597 0016 0020     		movs	r0, #0
 598 0018 FFF7FEFF 		bl	I2C_LCD_WriteString
 599              	.LVL31:
 913:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 600              		.loc 1 913 3 view .LVU137
 601 001c 0122     		movs	r2, #1
 602 001e 0021     		movs	r1, #0
 603 0020 0846     		mov	r0, r1
 604 0022 FFF7FEFF 		bl	I2C_LCD_SetCursor
 605              	.LVL32:
 914:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 606              		.loc 1 914 3 view .LVU138
 607 0026 3949     		ldr	r1, .L37+4
 608 0028 0020     		movs	r0, #0
 609 002a FFF7FEFF 		bl	I2C_LCD_WriteString
 610              	.LVL33:
 915:Core/Src/main.c **** 
 916:Core/Src/main.c ****   enum State CurrentState;
 611              		.loc 1 916 3 view .LVU139
 917:Core/Src/main.c ****   enum State LastState = Init;
 612              		.loc 1 917 3 view .LVU140
 613              		.loc 1 917 14 is_stmt 0 view .LVU141
 614 002e 0024     		movs	r4, #0
ARM GAS  /tmp/ccADwVa0.s 			page 29


 615 0030 16E0     		b	.L32
 616              	.LVL34:
 617              	.L34:
 918:Core/Src/main.c **** 
 919:Core/Src/main.c ****   /* Infinite loop */
 920:Core/Src/main.c ****   for(;;)
 921:Core/Src/main.c ****   {
 922:Core/Src/main.c **** 
 923:Core/Src/main.c ****     if(xQueueReceive(LCDPrintQueueHandle, (void*)&CurrentState, portMAX_DELAY) == pdPASS){
 924:Core/Src/main.c ****       if(LastState != CurrentState){
 925:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 926:Core/Src/main.c ****         if(CurrentState == Init){
 927:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 618              		.loc 1 927 9 is_stmt 1 view .LVU142
 619 0032 0022     		movs	r2, #0
 620 0034 1146     		mov	r1, r2
 621 0036 1046     		mov	r0, r2
 622 0038 FFF7FEFF 		bl	I2C_LCD_SetCursor
 623              	.LVL35:
 928:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Initializing");
 624              		.loc 1 928 9 view .LVU143
 625 003c 3449     		ldr	r1, .L37+8
 626 003e 0020     		movs	r0, #0
 627 0040 FFF7FEFF 		bl	I2C_LCD_WriteString
 628              	.LVL36:
 929:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 629              		.loc 1 929 9 view .LVU144
 630 0044 0122     		movs	r2, #1
 631 0046 0021     		movs	r1, #0
 632 0048 0846     		mov	r0, r1
 633 004a FFF7FEFF 		bl	I2C_LCD_SetCursor
 634              	.LVL37:
 930:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Please Wait");
 635              		.loc 1 930 9 view .LVU145
 636 004e 3149     		ldr	r1, .L37+12
 637 0050 0020     		movs	r0, #0
 638 0052 FFF7FEFF 		bl	I2C_LCD_WriteString
 639              	.LVL38:
 640              	.L29:
 931:Core/Src/main.c **** 
 932:Core/Src/main.c ****         }else if(CurrentState == Ready){
 933:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 934:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Ready");
 935:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 936:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Gripper");
 937:Core/Src/main.c **** 
 938:Core/Src/main.c ****         }else if(CurrentState == Running){
 939:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 940:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Running");
 941:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 942:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 943:Core/Src/main.c **** 
 944:Core/Src/main.c ****         }else if(CurrentState == EmergencyStop){
 945:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 946:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Emergency Stop!");
 947:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 948:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Reset Button");
ARM GAS  /tmp/ccADwVa0.s 			page 30


 949:Core/Src/main.c **** 
 950:Core/Src/main.c ****         }
 951:Core/Src/main.c ****         LastState = CurrentState;
 641              		.loc 1 951 9 view .LVU146
 642              		.loc 1 951 19 is_stmt 0 view .LVU147
 643 0056 9DF80740 		ldrb	r4, [sp, #7]	@ zero_extendqisi2
 644              	.LVL39:
 645              	.L27:
 952:Core/Src/main.c ****       }
 953:Core/Src/main.c ****     }
 954:Core/Src/main.c **** 
 955:Core/Src/main.c ****     osDelay(1);
 646              		.loc 1 955 5 is_stmt 1 view .LVU148
 647 005a 0120     		movs	r0, #1
 648 005c FFF7FEFF 		bl	osDelay
 649              	.LVL40:
 920:Core/Src/main.c ****   {
 650              		.loc 1 920 8 view .LVU149
 651              	.L32:
 920:Core/Src/main.c ****   {
 652              		.loc 1 920 3 view .LVU150
 923:Core/Src/main.c ****       if(LastState != CurrentState){
 653              		.loc 1 923 5 view .LVU151
 923:Core/Src/main.c ****       if(LastState != CurrentState){
 654              		.loc 1 923 8 is_stmt 0 view .LVU152
 655 0060 4FF0FF32 		mov	r2, #-1
 656 0064 0DF10701 		add	r1, sp, #7
 657 0068 2B4B     		ldr	r3, .L37+16
 658 006a 1868     		ldr	r0, [r3]
 659 006c FFF7FEFF 		bl	xQueueReceive
 660              	.LVL41:
 923:Core/Src/main.c ****       if(LastState != CurrentState){
 661              		.loc 1 923 7 view .LVU153
 662 0070 0128     		cmp	r0, #1
 663 0072 F2D1     		bne	.L27
 924:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 664              		.loc 1 924 7 is_stmt 1 view .LVU154
 924:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 665              		.loc 1 924 20 is_stmt 0 view .LVU155
 666 0074 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 924:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 667              		.loc 1 924 9 view .LVU156
 668 0078 A342     		cmp	r3, r4
 669 007a EED0     		beq	.L27
 925:Core/Src/main.c ****         if(CurrentState == Init){
 670              		.loc 1 925 9 is_stmt 1 view .LVU157
 671 007c 0020     		movs	r0, #0
 672 007e FFF7FEFF 		bl	I2C_LCD_Clear
 673              	.LVL42:
 926:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 674              		.loc 1 926 9 view .LVU158
 926:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 675              		.loc 1 926 25 is_stmt 0 view .LVU159
 676 0082 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 926:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 677              		.loc 1 926 11 view .LVU160
 678 0086 002B     		cmp	r3, #0
ARM GAS  /tmp/ccADwVa0.s 			page 31


 679 0088 D3D0     		beq	.L34
 932:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 680              		.loc 1 932 15 is_stmt 1 view .LVU161
 932:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 681              		.loc 1 932 17 is_stmt 0 view .LVU162
 682 008a 012B     		cmp	r3, #1
 683 008c 16D0     		beq	.L35
 938:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 684              		.loc 1 938 15 is_stmt 1 view .LVU163
 938:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 685              		.loc 1 938 17 is_stmt 0 view .LVU164
 686 008e 022B     		cmp	r3, #2
 687 0090 27D0     		beq	.L36
 944:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 688              		.loc 1 944 15 is_stmt 1 view .LVU165
 944:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 689              		.loc 1 944 17 is_stmt 0 view .LVU166
 690 0092 032B     		cmp	r3, #3
 691 0094 DFD1     		bne	.L29
 945:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Emergency Stop!");
 692              		.loc 1 945 9 is_stmt 1 view .LVU167
 693 0096 0022     		movs	r2, #0
 694 0098 1146     		mov	r1, r2
 695 009a 1046     		mov	r0, r2
 696 009c FFF7FEFF 		bl	I2C_LCD_SetCursor
 697              	.LVL43:
 946:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 698              		.loc 1 946 9 view .LVU168
 699 00a0 1E49     		ldr	r1, .L37+20
 700 00a2 0020     		movs	r0, #0
 701 00a4 FFF7FEFF 		bl	I2C_LCD_WriteString
 702              	.LVL44:
 947:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Reset Button");
 703              		.loc 1 947 9 view .LVU169
 704 00a8 0122     		movs	r2, #1
 705 00aa 0021     		movs	r1, #0
 706 00ac 0846     		mov	r0, r1
 707 00ae FFF7FEFF 		bl	I2C_LCD_SetCursor
 708              	.LVL45:
 948:Core/Src/main.c **** 
 709              		.loc 1 948 9 view .LVU170
 710 00b2 1B49     		ldr	r1, .L37+24
 711 00b4 0020     		movs	r0, #0
 712 00b6 FFF7FEFF 		bl	I2C_LCD_WriteString
 713              	.LVL46:
 714 00ba CCE7     		b	.L29
 715              	.L35:
 933:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Ready");
 716              		.loc 1 933 9 view .LVU171
 717 00bc 0022     		movs	r2, #0
 718 00be 1146     		mov	r1, r2
 719 00c0 1046     		mov	r0, r2
 720 00c2 FFF7FEFF 		bl	I2C_LCD_SetCursor
 721              	.LVL47:
 934:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 722              		.loc 1 934 9 view .LVU172
 723 00c6 1749     		ldr	r1, .L37+28
ARM GAS  /tmp/ccADwVa0.s 			page 32


 724 00c8 0020     		movs	r0, #0
 725 00ca FFF7FEFF 		bl	I2C_LCD_WriteString
 726              	.LVL48:
 935:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Gripper");
 727              		.loc 1 935 9 view .LVU173
 728 00ce 0122     		movs	r2, #1
 729 00d0 0021     		movs	r1, #0
 730 00d2 0846     		mov	r0, r1
 731 00d4 FFF7FEFF 		bl	I2C_LCD_SetCursor
 732              	.LVL49:
 936:Core/Src/main.c **** 
 733              		.loc 1 936 9 view .LVU174
 734 00d8 1349     		ldr	r1, .L37+32
 735 00da 0020     		movs	r0, #0
 736 00dc FFF7FEFF 		bl	I2C_LCD_WriteString
 737              	.LVL50:
 738 00e0 B9E7     		b	.L29
 739              	.L36:
 939:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Running");
 740              		.loc 1 939 9 view .LVU175
 741 00e2 0022     		movs	r2, #0
 742 00e4 1146     		mov	r1, r2
 743 00e6 1046     		mov	r0, r2
 744 00e8 FFF7FEFF 		bl	I2C_LCD_SetCursor
 745              	.LVL51:
 940:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 746              		.loc 1 940 9 view .LVU176
 747 00ec 0F49     		ldr	r1, .L37+36
 748 00ee 0020     		movs	r0, #0
 749 00f0 FFF7FEFF 		bl	I2C_LCD_WriteString
 750              	.LVL52:
 941:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 751              		.loc 1 941 9 view .LVU177
 752 00f4 0122     		movs	r2, #1
 753 00f6 0021     		movs	r1, #0
 754 00f8 0846     		mov	r0, r1
 755 00fa FFF7FEFF 		bl	I2C_LCD_SetCursor
 756              	.LVL53:
 942:Core/Src/main.c **** 
 757              		.loc 1 942 9 view .LVU178
 758 00fe 0349     		ldr	r1, .L37+4
 759 0100 0020     		movs	r0, #0
 760 0102 FFF7FEFF 		bl	I2C_LCD_WriteString
 761              	.LVL54:
 762 0106 A6E7     		b	.L29
 763              	.L38:
 764              		.align	2
 765              	.L37:
 766 0108 00000000 		.word	.LC14
 767 010c 08000000 		.word	.LC15
 768 0110 10000000 		.word	.LC16
 769 0114 20000000 		.word	.LC17
 770 0118 00000000 		.word	.LANCHOR1
 771 011c 4C000000 		.word	.LC21
 772 0120 5C000000 		.word	.LC22
 773 0124 2C000000 		.word	.LC18
 774 0128 34000000 		.word	.LC19
ARM GAS  /tmp/ccADwVa0.s 			page 33


 775 012c 44000000 		.word	.LC20
 776              		.cfi_endproc
 777              	.LFE263:
 779              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 780              		.align	1
 781              		.global	HAL_GPIO_EXTI_Callback
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 785              		.fpu fpv4-sp-d16
 787              	HAL_GPIO_EXTI_Callback:
 788              	.LVL55:
 789              	.LFB244:
 187:Core/Src/main.c ****   state = EmergencyStop;
 790              		.loc 1 187 1 view -0
 791              		.cfi_startproc
 792              		@ args = 0, pretend = 0, frame = 0
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794              		@ link register save eliminated.
 188:Core/Src/main.c **** }
 795              		.loc 1 188 3 view .LVU180
 188:Core/Src/main.c **** }
 796              		.loc 1 188 9 is_stmt 0 view .LVU181
 797 0000 014B     		ldr	r3, .L40
 798 0002 0322     		movs	r2, #3
 799 0004 1A70     		strb	r2, [r3]
 189:Core/Src/main.c **** 
 800              		.loc 1 189 1 view .LVU182
 801 0006 7047     		bx	lr
 802              	.L41:
 803              		.align	2
 804              	.L40:
 805 0008 00000000 		.word	.LANCHOR0
 806              		.cfi_endproc
 807              	.LFE244:
 809              		.section	.text.MiniBotInit,"ax",%progbits
 810              		.align	1
 811              		.global	MiniBotInit
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv4-sp-d16
 817              	MiniBotInit:
 818              	.LVL56:
 819              	.LFB252:
 600:Core/Src/main.c **** 	// Configure Each of the joints
 820              		.loc 1 600 44 is_stmt 1 view -0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 600:Core/Src/main.c **** 	// Configure Each of the joints
 824              		.loc 1 600 44 is_stmt 0 view .LVU184
 825 0000 00B5     		push	{lr}
 826              		.cfi_def_cfa_offset 4
 827              		.cfi_offset 14, -4
 603:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 828              		.loc 1 603 4 is_stmt 1 view .LVU185
ARM GAS  /tmp/ccADwVa0.s 			page 34


 603:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 829              		.loc 1 603 25 is_stmt 0 view .LVU186
 830 0002 0023     		movs	r3, #0
 831 0004 0370     		strb	r3, [r0]
 604:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 832              		.loc 1 604 4 is_stmt 1 view .LVU187
 604:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 833              		.loc 1 604 25 is_stmt 0 view .LVU188
 834 0006 4FF44872 		mov	r2, #800
 835 000a 4260     		str	r2, [r0, #4]
 605:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 836              		.loc 1 605 4 is_stmt 1 view .LVU189
 605:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 837              		.loc 1 605 25 is_stmt 0 view .LVU190
 838 000c 40F64851 		movw	r1, #3400
 839 0010 8160     		str	r1, [r0, #8]
 606:Core/Src/main.c **** 
 840              		.loc 1 606 4 is_stmt 1 view .LVU191
 606:Core/Src/main.c **** 
 841              		.loc 1 606 33 is_stmt 0 view .LVU192
 842 0012 0373     		strb	r3, [r0, #12]
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 843              		.loc 1 608 4 is_stmt 1 view .LVU193
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 844              		.loc 1 608 29 is_stmt 0 view .LVU194
 845 0014 4FF0010C 		mov	ip, #1
 846 0018 80F810C0 		strb	ip, [r0, #16]
 609:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 847              		.loc 1 609 4 is_stmt 1 view .LVU195
 609:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 848              		.loc 1 609 29 is_stmt 0 view .LVU196
 849 001c 4FF41672 		mov	r2, #600
 850 0020 4261     		str	r2, [r0, #20]
 610:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 851              		.loc 1 610 4 is_stmt 1 view .LVU197
 610:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 852              		.loc 1 610 29 is_stmt 0 view .LVU198
 853 0022 8161     		str	r1, [r0, #24]
 611:Core/Src/main.c **** 
 854              		.loc 1 611 4 is_stmt 1 view .LVU199
 611:Core/Src/main.c **** 
 855              		.loc 1 611 37 is_stmt 0 view .LVU200
 856 0024 0377     		strb	r3, [r0, #28]
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 857              		.loc 1 613 4 is_stmt 1 view .LVU201
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 858              		.loc 1 613 26 is_stmt 0 view .LVU202
 859 0026 4FF0020E 		mov	lr, #2
 860 002a 80F820E0 		strb	lr, [r0, #32]
 614:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 861              		.loc 1 614 4 is_stmt 1 view .LVU203
 614:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 862              		.loc 1 614 26 is_stmt 0 view .LVU204
 863 002e 4262     		str	r2, [r0, #36]
 615:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 864              		.loc 1 615 4 is_stmt 1 view .LVU205
 615:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
ARM GAS  /tmp/ccADwVa0.s 			page 35


 865              		.loc 1 615 26 is_stmt 0 view .LVU206
 866 0030 8162     		str	r1, [r0, #40]
 616:Core/Src/main.c **** 
 867              		.loc 1 616 4 is_stmt 1 view .LVU207
 616:Core/Src/main.c **** 
 868              		.loc 1 616 34 is_stmt 0 view .LVU208
 869 0032 80F82C30 		strb	r3, [r0, #44]
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 870              		.loc 1 618 4 is_stmt 1 view .LVU209
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 871              		.loc 1 618 26 is_stmt 0 view .LVU210
 872 0036 0323     		movs	r3, #3
 873 0038 80F83030 		strb	r3, [r0, #48]
 619:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 874              		.loc 1 619 4 is_stmt 1 view .LVU211
 619:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 875              		.loc 1 619 26 is_stmt 0 view .LVU212
 876 003c 4263     		str	r2, [r0, #52]
 620:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 877              		.loc 1 620 4 is_stmt 1 view .LVU213
 620:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 878              		.loc 1 620 26 is_stmt 0 view .LVU214
 879 003e 4FF44863 		mov	r3, #3200
 880 0042 8363     		str	r3, [r0, #56]
 621:Core/Src/main.c **** 
 881              		.loc 1 621 4 is_stmt 1 view .LVU215
 621:Core/Src/main.c **** 
 882              		.loc 1 621 34 is_stmt 0 view .LVU216
 883 0044 80F83CC0 		strb	ip, [r0, #60]
 623:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 884              		.loc 1 623 4 is_stmt 1 view .LVU217
 623:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 885              		.loc 1 623 27 is_stmt 0 view .LVU218
 886 0048 034B     		ldr	r3, .L44
 887 004a 0364     		str	r3, [r0, #64]
 624:Core/Src/main.c **** }
 888              		.loc 1 624 4 is_stmt 1 view .LVU219
 624:Core/Src/main.c **** }
 889              		.loc 1 624 30 is_stmt 0 view .LVU220
 890 004c 4FF40073 		mov	r3, #512
 891 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 625:Core/Src/main.c **** 
 892              		.loc 1 625 1 view .LVU221
 893 0054 5DF804FB 		ldr	pc, [sp], #4
 894              	.L45:
 895              		.align	2
 896              	.L44:
 897 0058 00000240 		.word	1073872896
 898              		.cfi_endproc
 899              	.LFE252:
 901              		.section	.text.ServoDriverInit,"ax",%progbits
 902              		.align	1
 903              		.global	ServoDriverInit
 904              		.syntax unified
 905              		.thumb
 906              		.thumb_func
 907              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccADwVa0.s 			page 36


 909              	ServoDriverInit:
 910              	.LVL57:
 911              	.LFB254:
 657:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 912              		.loc 1 657 48 is_stmt 1 view -0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 657:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 916              		.loc 1 657 48 is_stmt 0 view .LVU223
 917 0000 10B5     		push	{r4, lr}
 918              		.cfi_def_cfa_offset 8
 919              		.cfi_offset 4, -8
 920              		.cfi_offset 14, -4
 921 0002 0446     		mov	r4, r0
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 922              		.loc 1 658 3 is_stmt 1 view .LVU224
 923 0004 1648     		ldr	r0, .L48
 924              	.LVL58:
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 925              		.loc 1 658 3 is_stmt 0 view .LVU225
 926 0006 FFF7FEFF 		bl	PCA9685_Init
 927              	.LVL59:
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 928              		.loc 1 659 3 is_stmt 1 view .LVU226
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 929              		.loc 1 659 62 is_stmt 0 view .LVU227
 930 000a E388     		ldrh	r3, [r4, #6]
 931 000c 00EE103A 		vmov	s0, r3	@ int
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 932              		.loc 1 659 3 view .LVU228
 933 0010 B8EE400A 		vcvt.f32.u32	s0, s0
 934 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 935 0016 FFF7FEFF 		bl	PCA9685_SetServoAngle
 936              	.LVL60:
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 937              		.loc 1 660 3 is_stmt 1 view .LVU229
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 938              		.loc 1 660 70 is_stmt 0 view .LVU230
 939 001a E389     		ldrh	r3, [r4, #14]
 940 001c 00EE103A 		vmov	s0, r3	@ int
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 941              		.loc 1 660 3 view .LVU231
 942 0020 B8EE400A 		vcvt.f32.u32	s0, s0
 943 0024 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 944 0026 FFF7FEFF 		bl	PCA9685_SetServoAngle
 945              	.LVL61:
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 946              		.loc 1 661 3 is_stmt 1 view .LVU232
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 947              		.loc 1 661 64 is_stmt 0 view .LVU233
 948 002a E38A     		ldrh	r3, [r4, #22]
 949 002c 00EE103A 		vmov	s0, r3	@ int
 661:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 950              		.loc 1 661 3 view .LVU234
 951 0030 B8EE400A 		vcvt.f32.u32	s0, s0
 952 0034 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
ARM GAS  /tmp/ccADwVa0.s 			page 37


 953 0036 FFF7FEFF 		bl	PCA9685_SetServoAngle
 954              	.LVL62:
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 955              		.loc 1 662 3 is_stmt 1 view .LVU235
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 956              		.loc 1 662 64 is_stmt 0 view .LVU236
 957 003a E38B     		ldrh	r3, [r4, #30]
 958 003c 00EE103A 		vmov	s0, r3	@ int
 662:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 959              		.loc 1 662 3 view .LVU237
 960 0040 B8EE400A 		vcvt.f32.u32	s0, s0
 961 0044 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 962 0046 FFF7FEFF 		bl	PCA9685_SetServoAngle
 963              	.LVL63:
 663:Core/Src/main.c **** }
 964              		.loc 1 663 3 is_stmt 1 view .LVU238
 663:Core/Src/main.c **** }
 965              		.loc 1 663 68 is_stmt 0 view .LVU239
 966 004a E38C     		ldrh	r3, [r4, #38]
 967 004c 00EE103A 		vmov	s0, r3	@ int
 663:Core/Src/main.c **** }
 968              		.loc 1 663 3 view .LVU240
 969 0050 B8EE400A 		vcvt.f32.u32	s0, s0
 970 0054 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 971 0058 FFF7FEFF 		bl	PCA9685_SetServoAngle
 972              	.LVL64:
 664:Core/Src/main.c **** 
 973              		.loc 1 664 1 view .LVU241
 974 005c 10BD     		pop	{r4, pc}
 975              	.LVL65:
 976              	.L49:
 664:Core/Src/main.c **** 
 977              		.loc 1 664 1 view .LVU242
 978 005e 00BF     		.align	2
 979              	.L48:
 980 0060 00000000 		.word	.LANCHOR7
 981              		.cfi_endproc
 982              	.LFE254:
 984              		.section	.text.MegaBotInit,"ax",%progbits
 985              		.align	1
 986              		.global	MegaBotInit
 987              		.syntax unified
 988              		.thumb
 989              		.thumb_func
 990              		.fpu fpv4-sp-d16
 992              	MegaBotInit:
 993              	.LVL66:
 994              	.LFB253:
 627:Core/Src/main.c ****   // Configure Each of the joints
 995              		.loc 1 627 44 is_stmt 1 view -0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 627:Core/Src/main.c ****   // Configure Each of the joints
 999              		.loc 1 627 44 is_stmt 0 view .LVU244
 1000 0000 08B5     		push	{r3, lr}
 1001              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccADwVa0.s 			page 38


 1002              		.cfi_offset 3, -8
 1003              		.cfi_offset 14, -4
 629:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 1004              		.loc 1 629 3 is_stmt 1 view .LVU245
 629:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 1005              		.loc 1 629 26 is_stmt 0 view .LVU246
 1006 0002 0022     		movs	r2, #0
 1007 0004 0270     		strb	r2, [r0]
 630:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 1008              		.loc 1 630 3 is_stmt 1 view .LVU247
 630:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 1009              		.loc 1 630 26 is_stmt 0 view .LVU248
 1010 0006 4280     		strh	r2, [r0, #2]	@ movhi
 631:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 1011              		.loc 1 631 3 is_stmt 1 view .LVU249
 631:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 1012              		.loc 1 631 26 is_stmt 0 view .LVU250
 1013 0008 B421     		movs	r1, #180
 1014 000a 8180     		strh	r1, [r0, #4]	@ movhi
 632:Core/Src/main.c **** 
 1015              		.loc 1 632 3 is_stmt 1 view .LVU251
 632:Core/Src/main.c **** 
 1016              		.loc 1 632 32 is_stmt 0 view .LVU252
 1017 000c 4FF05A0C 		mov	ip, #90
 1018 0010 A0F806C0 		strh	ip, [r0, #6]	@ movhi
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 1019              		.loc 1 634 3 is_stmt 1 view .LVU253
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 1020              		.loc 1 634 30 is_stmt 0 view .LVU254
 1021 0014 4FF0010E 		mov	lr, #1
 1022 0018 80F808E0 		strb	lr, [r0, #8]
 635:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 1023              		.loc 1 635 3 is_stmt 1 view .LVU255
 635:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 1024              		.loc 1 635 30 is_stmt 0 view .LVU256
 1025 001c 4281     		strh	r2, [r0, #10]	@ movhi
 636:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 1026              		.loc 1 636 3 is_stmt 1 view .LVU257
 636:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 1027              		.loc 1 636 30 is_stmt 0 view .LVU258
 1028 001e 8181     		strh	r1, [r0, #12]	@ movhi
 637:Core/Src/main.c **** 
 1029              		.loc 1 637 3 is_stmt 1 view .LVU259
 637:Core/Src/main.c **** 
 1030              		.loc 1 637 36 is_stmt 0 view .LVU260
 1031 0020 C281     		strh	r2, [r0, #14]	@ movhi
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 1032              		.loc 1 639 3 is_stmt 1 view .LVU261
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 1033              		.loc 1 639 27 is_stmt 0 view .LVU262
 1034 0022 4FF0020E 		mov	lr, #2
 1035 0026 80F810E0 		strb	lr, [r0, #16]
 640:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 1036              		.loc 1 640 3 is_stmt 1 view .LVU263
 640:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 1037              		.loc 1 640 27 is_stmt 0 view .LVU264
 1038 002a 4FF0320E 		mov	lr, #50
ARM GAS  /tmp/ccADwVa0.s 			page 39


 1039 002e A0F812E0 		strh	lr, [r0, #18]	@ movhi
 641:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 1040              		.loc 1 641 3 is_stmt 1 view .LVU265
 641:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 1041              		.loc 1 641 27 is_stmt 0 view .LVU266
 1042 0032 8182     		strh	r1, [r0, #20]	@ movhi
 642:Core/Src/main.c **** 
 1043              		.loc 1 642 3 is_stmt 1 view .LVU267
 642:Core/Src/main.c **** 
 1044              		.loc 1 642 33 is_stmt 0 view .LVU268
 1045 0034 C182     		strh	r1, [r0, #22]	@ movhi
 644:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 1046              		.loc 1 644 3 is_stmt 1 view .LVU269
 644:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 1047              		.loc 1 644 27 is_stmt 0 view .LVU270
 1048 0036 4FF0030E 		mov	lr, #3
 1049 003a 80F818E0 		strb	lr, [r0, #24]
 645:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 1050              		.loc 1 645 3 is_stmt 1 view .LVU271
 645:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 1051              		.loc 1 645 27 is_stmt 0 view .LVU272
 1052 003e 4283     		strh	r2, [r0, #26]	@ movhi
 646:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 1053              		.loc 1 646 3 is_stmt 1 view .LVU273
 646:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 1054              		.loc 1 646 27 is_stmt 0 view .LVU274
 1055 0040 8183     		strh	r1, [r0, #28]	@ movhi
 647:Core/Src/main.c **** 
 1056              		.loc 1 647 3 is_stmt 1 view .LVU275
 647:Core/Src/main.c **** 
 1057              		.loc 1 647 33 is_stmt 0 view .LVU276
 1058 0042 A0F81EC0 		strh	ip, [r0, #30]	@ movhi
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 1059              		.loc 1 649 3 is_stmt 1 view .LVU277
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 1060              		.loc 1 649 29 is_stmt 0 view .LVU278
 1061 0046 0421     		movs	r1, #4
 1062 0048 80F82010 		strb	r1, [r0, #32]
 650:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 1063              		.loc 1 650 3 is_stmt 1 view .LVU279
 650:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 1064              		.loc 1 650 29 is_stmt 0 view .LVU280
 1065 004c 4284     		strh	r2, [r0, #34]	@ movhi
 651:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 1066              		.loc 1 651 3 is_stmt 1 view .LVU281
 651:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 1067              		.loc 1 651 29 is_stmt 0 view .LVU282
 1068 004e 4621     		movs	r1, #70
 1069 0050 8184     		strh	r1, [r0, #36]	@ movhi
 652:Core/Src/main.c **** 
 1070              		.loc 1 652 3 is_stmt 1 view .LVU283
 652:Core/Src/main.c **** 
 1071              		.loc 1 652 35 is_stmt 0 view .LVU284
 1072 0052 C284     		strh	r2, [r0, #38]	@ movhi
 654:Core/Src/main.c **** }
 1073              		.loc 1 654 3 is_stmt 1 view .LVU285
 1074 0054 FFF7FEFF 		bl	ServoDriverInit
ARM GAS  /tmp/ccADwVa0.s 			page 40


 1075              	.LVL67:
 655:Core/Src/main.c **** 
 1076              		.loc 1 655 1 is_stmt 0 view .LVU286
 1077 0058 08BD     		pop	{r3, pc}
 1078              		.cfi_endproc
 1079              	.LFE253:
 1081              		.section	.text.QPotDataUpdate,"ax",%progbits
 1082              		.align	1
 1083              		.global	QPotDataUpdate
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
 1089              	QPotDataUpdate:
 1090              	.LVL68:
 1091              	.LFB255:
 667:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 1092              		.loc 1 667 111 is_stmt 1 view -0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1097              		.loc 1 668 3 view .LVU288
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1098              		.loc 1 668 20 is_stmt 0 view .LVU289
 1099 0000 1368     		ldr	r3, [r2]
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1100              		.loc 1 668 30 view .LVU290
 1101 0002 0A33     		adds	r3, r3, #10
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1102              		.loc 1 668 5 view .LVU291
 1103 0004 8342     		cmp	r3, r0
 1104 0006 03D3     		bcc	.L53
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1105              		.loc 1 668 52 discriminator 1 view .LVU292
 1106 0008 1368     		ldr	r3, [r2]
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1107              		.loc 1 668 62 discriminator 1 view .LVU293
 1108 000a 0A3B     		subs	r3, r3, #10
 668:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1109              		.loc 1 668 35 discriminator 1 view .LVU294
 1110 000c 8342     		cmp	r3, r0
 1111 000e 0CD9     		bls	.L52
 1112              	.L53:
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1113              		.loc 1 669 5 is_stmt 1 view .LVU295
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1114              		.loc 1 669 27 is_stmt 0 view .LVU296
 1115 0010 8B68     		ldr	r3, [r1, #8]
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1116              		.loc 1 669 7 view .LVU297
 1117 0012 8342     		cmp	r3, r0
 1118 0014 0AD2     		bcs	.L55
 670:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1119              		.loc 1 670 7 is_stmt 1 view .LVU298
 670:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
ARM GAS  /tmp/ccADwVa0.s 			page 41


 1120              		.loc 1 670 24 is_stmt 0 view .LVU299
 1121 0016 8B68     		ldr	r3, [r1, #8]
 670:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1122              		.loc 1 670 17 view .LVU300
 1123 0018 1360     		str	r3, [r2]
 1124              	.L56:
 676:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1125              		.loc 1 676 5 is_stmt 1 view .LVU301
 676:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1126              		.loc 1 676 13 is_stmt 0 view .LVU302
 1127 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 676:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1128              		.loc 1 676 7 view .LVU303
 1129 001c 2BB1     		cbz	r3, .L52
 677:Core/Src/main.c ****     }
 1130              		.loc 1 677 7 is_stmt 1 view .LVU304
 677:Core/Src/main.c ****     }
 1131              		.loc 1 677 24 is_stmt 0 view .LVU305
 1132 001e 8B68     		ldr	r3, [r1, #8]
 677:Core/Src/main.c ****     }
 1133              		.loc 1 677 35 view .LVU306
 1134 0020 1068     		ldr	r0, [r2]
 1135              	.LVL69:
 677:Core/Src/main.c ****     }
 1136              		.loc 1 677 33 view .LVU307
 1137 0022 1B1A     		subs	r3, r3, r0
 677:Core/Src/main.c ****     }
 1138              		.loc 1 677 52 view .LVU308
 1139 0024 4968     		ldr	r1, [r1, #4]
 1140              	.LVL70:
 677:Core/Src/main.c ****     }
 1141              		.loc 1 677 45 view .LVU309
 1142 0026 0B44     		add	r3, r3, r1
 677:Core/Src/main.c ****     }
 1143              		.loc 1 677 17 view .LVU310
 1144 0028 1360     		str	r3, [r2]
 1145              	.L52:
 680:Core/Src/main.c **** 
 1146              		.loc 1 680 1 view .LVU311
 1147 002a 7047     		bx	lr
 1148              	.LVL71:
 1149              	.L55:
 671:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1150              		.loc 1 671 11 is_stmt 1 view .LVU312
 671:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1151              		.loc 1 671 33 is_stmt 0 view .LVU313
 1152 002c 4B68     		ldr	r3, [r1, #4]
 671:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1153              		.loc 1 671 13 view .LVU314
 1154 002e 8342     		cmp	r3, r0
 1155 0030 02D9     		bls	.L57
 672:Core/Src/main.c ****     }else{
 1156              		.loc 1 672 7 is_stmt 1 view .LVU315
 672:Core/Src/main.c ****     }else{
 1157              		.loc 1 672 24 is_stmt 0 view .LVU316
 1158 0032 4B68     		ldr	r3, [r1, #4]
 672:Core/Src/main.c ****     }else{
ARM GAS  /tmp/ccADwVa0.s 			page 42


 1159              		.loc 1 672 17 view .LVU317
 1160 0034 1360     		str	r3, [r2]
 1161 0036 F0E7     		b	.L56
 1162              	.L57:
 674:Core/Src/main.c ****     }
 1163              		.loc 1 674 7 is_stmt 1 view .LVU318
 674:Core/Src/main.c ****     }
 1164              		.loc 1 674 17 is_stmt 0 view .LVU319
 1165 0038 1060     		str	r0, [r2]
 1166 003a EEE7     		b	.L56
 1167              		.cfi_endproc
 1168              	.LFE255:
 1170              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 1171              		.align	1
 1172              		.global	MiniBotInputsEntry
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1176              		.fpu fpv4-sp-d16
 1178              	MiniBotInputsEntry:
 1179              	.LVL72:
 1180              	.LFB260:
 763:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1181              		.loc 1 763 1 is_stmt 1 view -0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 72
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 763:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1185              		.loc 1 763 1 is_stmt 0 view .LVU321
 1186 0000 30B5     		push	{r4, r5, lr}
 1187              		.cfi_def_cfa_offset 12
 1188              		.cfi_offset 4, -12
 1189              		.cfi_offset 5, -8
 1190              		.cfi_offset 14, -4
 1191 0002 93B0     		sub	sp, sp, #76
 1192              		.cfi_def_cfa_offset 88
 766:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 1193              		.loc 1 766 2 is_stmt 1 view .LVU322
 767:Core/Src/main.c **** 
 1194              		.loc 1 767 2 view .LVU323
 1195 0004 6846     		mov	r0, sp
 1196              	.LVL73:
 767:Core/Src/main.c **** 
 1197              		.loc 1 767 2 is_stmt 0 view .LVU324
 1198 0006 FFF7FEFF 		bl	MiniBotInit
 1199              	.LVL74:
 769:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 1200              		.loc 1 769 3 is_stmt 1 view .LVU325
 769:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 1201              		.loc 1 769 20 is_stmt 0 view .LVU326
 1202 000a 2D4B     		ldr	r3, .L64
 1203 000c 029A     		ldr	r2, [sp, #8]
 1204 000e 9A60     		str	r2, [r3, #8]
 770:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1205              		.loc 1 770 3 is_stmt 1 view .LVU327
 770:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1206              		.loc 1 770 34 is_stmt 0 view .LVU328
ARM GAS  /tmp/ccADwVa0.s 			page 43


 1207 0010 019A     		ldr	r2, [sp, #4]
 770:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1208              		.loc 1 770 20 view .LVU329
 1209 0012 5A60     		str	r2, [r3, #4]
 771:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1210              		.loc 1 771 3 is_stmt 1 view .LVU330
 771:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1211              		.loc 1 771 42 is_stmt 0 view .LVU331
 1212 0014 069A     		ldr	r2, [sp, #24]
 771:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1213              		.loc 1 771 24 view .LVU332
 1214 0016 5A61     		str	r2, [r3, #20]
 772:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1215              		.loc 1 772 3 is_stmt 1 view .LVU333
 772:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1216              		.loc 1 772 42 is_stmt 0 view .LVU334
 1217 0018 059A     		ldr	r2, [sp, #20]
 772:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1218              		.loc 1 772 24 view .LVU335
 1219 001a 1A61     		str	r2, [r3, #16]
 773:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1220              		.loc 1 773 3 is_stmt 1 view .LVU336
 773:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1221              		.loc 1 773 36 is_stmt 0 view .LVU337
 1222 001c 0A9A     		ldr	r2, [sp, #40]
 773:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1223              		.loc 1 773 21 view .LVU338
 1224 001e 1A62     		str	r2, [r3, #32]
 774:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1225              		.loc 1 774 3 is_stmt 1 view .LVU339
 774:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1226              		.loc 1 774 36 is_stmt 0 view .LVU340
 1227 0020 099A     		ldr	r2, [sp, #36]
 774:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1228              		.loc 1 774 21 view .LVU341
 1229 0022 DA61     		str	r2, [r3, #28]
 775:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1230              		.loc 1 775 3 is_stmt 1 view .LVU342
 775:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1231              		.loc 1 775 36 is_stmt 0 view .LVU343
 1232 0024 0E9A     		ldr	r2, [sp, #56]
 775:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1233              		.loc 1 775 21 view .LVU344
 1234 0026 DA62     		str	r2, [r3, #44]
 776:Core/Src/main.c ****   
 1235              		.loc 1 776 3 is_stmt 1 view .LVU345
 776:Core/Src/main.c ****   
 1236              		.loc 1 776 36 is_stmt 0 view .LVU346
 1237 0028 0D9A     		ldr	r2, [sp, #52]
 776:Core/Src/main.c ****   
 1238              		.loc 1 776 21 view .LVU347
 1239 002a 9A62     		str	r2, [r3, #40]
 1240 002c 45E0     		b	.L62
 1241              	.LVL75:
 1242              	.L60:
 1243              	.LBB8:
 783:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
ARM GAS  /tmp/ccADwVa0.s 			page 44


 1244              		.loc 1 783 7 is_stmt 1 discriminator 3 view .LVU348
 1245 002e 254D     		ldr	r5, .L64+4
 1246 0030 2846     		mov	r0, r5
 1247 0032 FFF7FEFF 		bl	HAL_ADC_Start
 1248              	.LVL76:
 784:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 1249              		.loc 1 784 7 discriminator 3 view .LVU349
 1250 0036 0121     		movs	r1, #1
 1251 0038 2846     		mov	r0, r5
 1252 003a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1253              	.LVL77:
 785:Core/Src/main.c ****     }
 1254              		.loc 1 785 7 discriminator 3 view .LVU350
 785:Core/Src/main.c ****     }
 1255              		.loc 1 785 24 is_stmt 0 discriminator 3 view .LVU351
 1256 003e 2846     		mov	r0, r5
 1257 0040 FFF7FEFF 		bl	HAL_ADC_GetValue
 1258              	.LVL78:
 785:Core/Src/main.c ****     }
 1259              		.loc 1 785 22 discriminator 3 view .LVU352
 1260 0044 204B     		ldr	r3, .L64+8
 1261 0046 43F82400 		str	r0, [r3, r4, lsl #2]
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1262              		.loc 1 782 27 is_stmt 1 discriminator 3 view .LVU353
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1263              		.loc 1 782 28 is_stmt 0 discriminator 3 view .LVU354
 1264 004a 0134     		adds	r4, r4, #1
 1265              	.LVL79:
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1266              		.loc 1 782 28 discriminator 3 view .LVU355
 1267 004c E4B2     		uxtb	r4, r4
 1268              	.LVL80:
 1269              	.L59:
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1270              		.loc 1 782 22 is_stmt 1 discriminator 1 view .LVU356
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1271              		.loc 1 782 5 is_stmt 0 discriminator 1 view .LVU357
 1272 004e 032C     		cmp	r4, #3
 1273 0050 EDD9     		bls	.L60
 1274              	.LBE8:
 787:Core/Src/main.c **** 
 1275              		.loc 1 787 5 is_stmt 1 view .LVU358
 1276 0052 1C48     		ldr	r0, .L64+4
 1277 0054 FFF7FEFF 		bl	HAL_ADC_Stop
 1278              	.LVL81:
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1279              		.loc 1 789 5 view .LVU359
 1280 0058 194C     		ldr	r4, .L64
 1281              	.LVL82:
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1282              		.loc 1 789 5 is_stmt 0 view .LVU360
 1283 005a 1B4D     		ldr	r5, .L64+8
 1284 005c 2246     		mov	r2, r4
 1285 005e 6946     		mov	r1, sp
 1286 0060 2868     		ldr	r0, [r5]
 1287 0062 FFF7FEFF 		bl	QPotDataUpdate
 1288              	.LVL83:
ARM GAS  /tmp/ccADwVa0.s 			page 45


 790:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 1289              		.loc 1 790 5 is_stmt 1 view .LVU361
 1290 0066 04F10C02 		add	r2, r4, #12
 1291 006a 04A9     		add	r1, sp, #16
 1292 006c 6868     		ldr	r0, [r5, #4]
 1293 006e FFF7FEFF 		bl	QPotDataUpdate
 1294              	.LVL84:
 791:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 1295              		.loc 1 791 5 view .LVU362
 1296 0072 04F11802 		add	r2, r4, #24
 1297 0076 08A9     		add	r1, sp, #32
 1298 0078 A868     		ldr	r0, [r5, #8]
 1299 007a FFF7FEFF 		bl	QPotDataUpdate
 1300              	.LVL85:
 792:Core/Src/main.c **** 
 1301              		.loc 1 792 5 view .LVU363
 1302 007e 04F12402 		add	r2, r4, #36
 1303 0082 0CA9     		add	r1, sp, #48
 1304 0084 E868     		ldr	r0, [r5, #12]
 1305 0086 FFF7FEFF 		bl	QPotDataUpdate
 1306              	.LVL86:
 794:Core/Src/main.c ****     
 1307              		.loc 1 794 5 view .LVU364
 794:Core/Src/main.c ****     
 1308              		.loc 1 794 35 is_stmt 0 view .LVU365
 1309 008a 4FF40071 		mov	r1, #512
 1310 008e 0F48     		ldr	r0, .L64+12
 1311 0090 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1312              	.LVL87:
 794:Core/Src/main.c ****     
 1313              		.loc 1 794 24 view .LVU366
 1314 0094 84F83000 		strb	r0, [r4, #48]
 796:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1315              		.loc 1 796 5 is_stmt 1 view .LVU367
 796:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1316              		.loc 1 796 32 is_stmt 0 view .LVU368
 1317 0098 0D4B     		ldr	r3, .L64+16
 1318 009a 1868     		ldr	r0, [r3]
 796:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1319              		.loc 1 796 7 view .LVU369
 1320 009c 50B1     		cbz	r0, .L61
 797:Core/Src/main.c ****         // failed to post message
 1321              		.loc 1 797 7 is_stmt 1 view .LVU370
 797:Core/Src/main.c ****         // failed to post message
 1322              		.loc 1 797 10 is_stmt 0 view .LVU371
 1323 009e 0023     		movs	r3, #0
 1324 00a0 4FF0FF32 		mov	r2, #-1
 1325 00a4 2146     		mov	r1, r4
 1326 00a6 FFF7FEFF 		bl	xQueueGenericSend
 1327              	.LVL88:
 797:Core/Src/main.c ****         // failed to post message
 1328              		.loc 1 797 9 view .LVU372
 1329 00aa 0128     		cmp	r0, #1
 1330 00ac 02D0     		beq	.L61
 799:Core/Src/main.c ****       }
 1331              		.loc 1 799 9 is_stmt 1 view .LVU373
 799:Core/Src/main.c ****       }
ARM GAS  /tmp/ccADwVa0.s 			page 46


 1332              		.loc 1 799 33 is_stmt 0 view .LVU374
 1333 00ae 094B     		ldr	r3, .L64+20
 1334 00b0 0122     		movs	r2, #1
 1335 00b2 1A70     		strb	r2, [r3]
 1336              	.L61:
 804:Core/Src/main.c **** 	}
 1337              		.loc 1 804 5 is_stmt 1 view .LVU375
 1338 00b4 0120     		movs	r0, #1
 1339 00b6 FFF7FEFF 		bl	osDelay
 1340              	.LVL89:
 780:Core/Src/main.c **** 	{
 1341              		.loc 1 780 7 view .LVU376
 1342              	.L62:
 780:Core/Src/main.c **** 	{
 1343              		.loc 1 780 2 view .LVU377
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1344              		.loc 1 782 5 view .LVU378
 1345              	.LBB9:
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1346              		.loc 1 782 9 view .LVU379
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1347              		.loc 1 782 17 is_stmt 0 view .LVU380
 1348 00ba 0024     		movs	r4, #0
 782:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1349              		.loc 1 782 5 view .LVU381
 1350 00bc C7E7     		b	.L59
 1351              	.L65:
 1352 00be 00BF     		.align	2
 1353              	.L64:
 1354 00c0 00000000 		.word	.LANCHOR8
 1355 00c4 00000000 		.word	.LANCHOR9
 1356 00c8 00000000 		.word	.LANCHOR10
 1357 00cc 00000240 		.word	1073872896
 1358 00d0 00000000 		.word	.LANCHOR4
 1359 00d4 00000000 		.word	.LANCHOR2
 1360              	.LBE9:
 1361              		.cfi_endproc
 1362              	.LFE260:
 1364              		.section	.text.MAP,"ax",%progbits
 1365              		.align	1
 1366              		.global	MAP
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1370              		.fpu fpv4-sp-d16
 1372              	MAP:
 1373              	.LVL90:
 1374              	.LFB257:
 708:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 1375              		.loc 1 708 1 is_stmt 1 view -0
 1376              		.cfi_startproc
 1377              		@ args = 4, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 1379              		@ link register save eliminated.
 709:Core/Src/main.c **** }
 1380              		.loc 1 709 5 view .LVU383
 709:Core/Src/main.c **** }
ARM GAS  /tmp/ccADwVa0.s 			page 47


 1381              		.loc 1 709 24 is_stmt 0 view .LVU384
 1382 0000 A0EB010C 		sub	ip, r0, r1
 709:Core/Src/main.c **** }
 1383              		.loc 1 709 51 view .LVU385
 1384 0004 0098     		ldr	r0, [sp]
 1385              	.LVL91:
 709:Core/Src/main.c **** }
 1386              		.loc 1 709 51 view .LVU386
 1387 0006 C01A     		subs	r0, r0, r3
 709:Core/Src/main.c **** }
 1388              		.loc 1 709 37 view .LVU387
 1389 0008 00FB0CFC 		mul	ip, r0, ip
 709:Core/Src/main.c **** }
 1390              		.loc 1 709 79 view .LVU388
 1391 000c 511A     		subs	r1, r2, r1
 1392              	.LVL92:
 709:Core/Src/main.c **** }
 1393              		.loc 1 709 66 view .LVU389
 1394 000e BCFBF1FC 		udiv	ip, ip, r1
 710:Core/Src/main.c **** 
 1395              		.loc 1 710 1 view .LVU390
 1396 0012 0CEB0300 		add	r0, ip, r3
 1397 0016 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE257:
 1401              		.section	.text.MoveServo,"ax",%progbits
 1402              		.align	1
 1403              		.global	MoveServo
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu fpv4-sp-d16
 1409              	MoveServo:
 1410              	.LVL93:
 1411              	.LFB256:
 682:Core/Src/main.c ****   // MAP each of the angles
 1412              		.loc 1 682 75 is_stmt 1 view -0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 0
 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 682:Core/Src/main.c ****   // MAP each of the angles
 1416              		.loc 1 682 75 is_stmt 0 view .LVU392
 1417 0000 70B5     		push	{r4, r5, r6, lr}
 1418              		.cfi_def_cfa_offset 16
 1419              		.cfi_offset 4, -16
 1420              		.cfi_offset 5, -12
 1421              		.cfi_offset 6, -8
 1422              		.cfi_offset 14, -4
 1423 0002 82B0     		sub	sp, sp, #8
 1424              		.cfi_def_cfa_offset 24
 1425 0004 0446     		mov	r4, r0
 1426 0006 0D46     		mov	r5, r1
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1427              		.loc 1 687 3 is_stmt 1 view .LVU393
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1428              		.loc 1 687 25 is_stmt 0 view .LVU394
 1429 0008 0868     		ldr	r0, [r1]
ARM GAS  /tmp/ccADwVa0.s 			page 48


 1430              	.LVL94:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1431              		.loc 1 687 25 view .LVU395
 1432 000a 4968     		ldr	r1, [r1, #4]
 1433              	.LVL95:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1434              		.loc 1 687 25 view .LVU396
 1435 000c AA68     		ldr	r2, [r5, #8]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1436              		.loc 1 687 131 view .LVU397
 1437 000e A388     		ldrh	r3, [r4, #4]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1438              		.loc 1 687 25 view .LVU398
 1439 0010 0093     		str	r3, [sp]
 1440 0012 6388     		ldrh	r3, [r4, #2]
 1441 0014 FFF7FEFF 		bl	MAP
 1442              	.LVL96:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1443              		.loc 1 687 23 view .LVU399
 1444 0018 80B2     		uxth	r0, r0
 1445 001a 2A4E     		ldr	r6, .L71
 1446 001c 3080     		strh	r0, [r6]	@ movhi
 688:Core/Src/main.c ****   // Shoulder
 1447              		.loc 1 688 3 is_stmt 1 view .LVU400
 1448 001e 07EE900A 		vmov	s15, r0	@ int
 1449 0022 B8EE670A 		vcvt.f32.u32	s0, s15
 1450 0026 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1451 0028 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1452              	.LVL97:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1453              		.loc 1 690 3 view .LVU401
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1454              		.loc 1 690 25 is_stmt 0 view .LVU402
 1455 002c E868     		ldr	r0, [r5, #12]
 1456 002e 2969     		ldr	r1, [r5, #16]
 1457 0030 6A69     		ldr	r2, [r5, #20]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1458              		.loc 1 690 151 view .LVU403
 1459 0032 A389     		ldrh	r3, [r4, #12]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1460              		.loc 1 690 25 view .LVU404
 1461 0034 0093     		str	r3, [sp]
 1462 0036 6389     		ldrh	r3, [r4, #10]
 1463 0038 FFF7FEFF 		bl	MAP
 1464              	.LVL98:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1465              		.loc 1 690 23 view .LVU405
 1466 003c 80B2     		uxth	r0, r0
 1467 003e 7080     		strh	r0, [r6, #2]	@ movhi
 691:Core/Src/main.c ****   // Elbow
 1468              		.loc 1 691 3 is_stmt 1 view .LVU406
 1469 0040 07EE900A 		vmov	s15, r0	@ int
 1470 0044 B8EE670A 		vcvt.f32.u32	s0, s15
 1471 0048 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 1472 004a FFF7FEFF 		bl	PCA9685_SetServoAngle
 1473              	.LVL99:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
ARM GAS  /tmp/ccADwVa0.s 			page 49


 1474              		.loc 1 693 3 view .LVU407
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1475              		.loc 1 693 25 is_stmt 0 view .LVU408
 1476 004e A869     		ldr	r0, [r5, #24]
 1477 0050 E969     		ldr	r1, [r5, #28]
 1478 0052 2A6A     		ldr	r2, [r5, #32]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1479              		.loc 1 693 136 view .LVU409
 1480 0054 A38A     		ldrh	r3, [r4, #20]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1481              		.loc 1 693 25 view .LVU410
 1482 0056 0093     		str	r3, [sp]
 1483 0058 638A     		ldrh	r3, [r4, #18]
 1484 005a FFF7FEFF 		bl	MAP
 1485              	.LVL100:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1486              		.loc 1 693 23 view .LVU411
 1487 005e 80B2     		uxth	r0, r0
 1488 0060 B080     		strh	r0, [r6, #4]	@ movhi
 694:Core/Src/main.c ****   // Wrist
 1489              		.loc 1 694 3 is_stmt 1 view .LVU412
 1490 0062 07EE900A 		vmov	s15, r0	@ int
 1491 0066 B8EE670A 		vcvt.f32.u32	s0, s15
 1492 006a 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 1493 006c FFF7FEFF 		bl	PCA9685_SetServoAngle
 1494              	.LVL101:
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1495              		.loc 1 696 3 view .LVU413
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1496              		.loc 1 696 25 is_stmt 0 view .LVU414
 1497 0070 686A     		ldr	r0, [r5, #36]
 1498 0072 A96A     		ldr	r1, [r5, #40]
 1499 0074 EA6A     		ldr	r2, [r5, #44]
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1500              		.loc 1 696 136 view .LVU415
 1501 0076 A38B     		ldrh	r3, [r4, #28]
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1502              		.loc 1 696 25 view .LVU416
 1503 0078 0093     		str	r3, [sp]
 1504 007a 638B     		ldrh	r3, [r4, #26]
 1505 007c FFF7FEFF 		bl	MAP
 1506              	.LVL102:
 696:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1507              		.loc 1 696 23 view .LVU417
 1508 0080 80B2     		uxth	r0, r0
 1509 0082 F080     		strh	r0, [r6, #6]	@ movhi
 697:Core/Src/main.c ****   // Gripper
 1510              		.loc 1 697 3 is_stmt 1 view .LVU418
 1511 0084 07EE900A 		vmov	s15, r0	@ int
 1512 0088 B8EE670A 		vcvt.f32.u32	s0, s15
 1513 008c 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 1514 008e FFF7FEFF 		bl	PCA9685_SetServoAngle
 1515              	.LVL103:
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1516              		.loc 1 699 3 view .LVU419
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1517              		.loc 1 699 13 is_stmt 0 view .LVU420
ARM GAS  /tmp/ccADwVa0.s 			page 50


 1518 0092 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1519              		.loc 1 699 5 view .LVU421
 1520 0096 53B1     		cbz	r3, .L68
 700:Core/Src/main.c ****   }else{
 1521              		.loc 1 700 5 is_stmt 1 view .LVU422
 700:Core/Src/main.c ****   }else{
 1522              		.loc 1 700 70 is_stmt 0 view .LVU423
 1523 0098 638C     		ldrh	r3, [r4, #34]
 1524 009a 00EE103A 		vmov	s0, r3	@ int
 700:Core/Src/main.c ****   }else{
 1525              		.loc 1 700 5 view .LVU424
 1526 009e B8EE400A 		vcvt.f32.u32	s0, s0
 1527 00a2 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1528 00a6 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1529              	.LVL104:
 1530              	.L67:
 704:Core/Src/main.c **** 
 1531              		.loc 1 704 1 view .LVU425
 1532 00aa 02B0     		add	sp, sp, #8
 1533              		.cfi_remember_state
 1534              		.cfi_def_cfa_offset 16
 1535              		@ sp needed
 1536 00ac 70BD     		pop	{r4, r5, r6, pc}
 1537              	.LVL105:
 1538              	.L68:
 1539              		.cfi_restore_state
 702:Core/Src/main.c ****   }
 1540              		.loc 1 702 5 is_stmt 1 view .LVU426
 702:Core/Src/main.c ****   }
 1541              		.loc 1 702 70 is_stmt 0 view .LVU427
 1542 00ae A38C     		ldrh	r3, [r4, #36]
 1543 00b0 00EE103A 		vmov	s0, r3	@ int
 702:Core/Src/main.c ****   }
 1544              		.loc 1 702 5 view .LVU428
 1545 00b4 B8EE400A 		vcvt.f32.u32	s0, s0
 1546 00b8 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1547 00bc FFF7FEFF 		bl	PCA9685_SetServoAngle
 1548              	.LVL106:
 704:Core/Src/main.c **** 
 1549              		.loc 1 704 1 view .LVU429
 1550 00c0 F3E7     		b	.L67
 1551              	.L72:
 1552 00c2 00BF     		.align	2
 1553              	.L71:
 1554 00c4 00000000 		.word	.LANCHOR11
 1555              		.cfi_endproc
 1556              	.LFE256:
 1558              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 1559              		.align	1
 1560              		.global	MotorControlTaskEntry
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu fpv4-sp-d16
 1566              	MotorControlTaskEntry:
 1567              	.LVL107:
ARM GAS  /tmp/ccADwVa0.s 			page 51


 1568              	.LFB262:
 876:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1569              		.loc 1 876 1 is_stmt 1 view -0
 1570              		.cfi_startproc
 1571              		@ Volatile: function does not return.
 1572              		@ args = 0, pretend = 0, frame = 40
 1573              		@ frame_needed = 0, uses_anonymous_args = 0
 876:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1574              		.loc 1 876 1 is_stmt 0 view .LVU431
 1575 0000 00B5     		push	{lr}
 1576              		.cfi_def_cfa_offset 4
 1577              		.cfi_offset 14, -4
 1578 0002 8BB0     		sub	sp, sp, #44
 1579              		.cfi_def_cfa_offset 48
 879:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 1580              		.loc 1 879 3 is_stmt 1 view .LVU432
 880:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1581              		.loc 1 880 3 view .LVU433
 1582 0004 6846     		mov	r0, sp
 1583              	.LVL108:
 880:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1584              		.loc 1 880 3 is_stmt 0 view .LVU434
 1585 0006 FFF7FEFF 		bl	MegaBotInit
 1586              	.LVL109:
 881:Core/Src/main.c **** 
 1587              		.loc 1 881 3 is_stmt 1 view .LVU435
 1588 000a 6846     		mov	r0, sp
 1589 000c FFF7FEFF 		bl	ServoDriverInit
 1590              	.LVL110:
 1591 0010 06E0     		b	.L75
 1592              	.L77:
 889:Core/Src/main.c ****     }
 1593              		.loc 1 889 7 view .LVU436
 1594 0012 0849     		ldr	r1, .L78
 1595 0014 6846     		mov	r0, sp
 1596 0016 FFF7FEFF 		bl	MoveServo
 1597              	.LVL111:
 1598              	.L74:
 894:Core/Src/main.c ****   }
 1599              		.loc 1 894 5 view .LVU437
 1600 001a 0120     		movs	r0, #1
 1601 001c FFF7FEFF 		bl	osDelay
 1602              	.LVL112:
 885:Core/Src/main.c ****   {
 1603              		.loc 1 885 8 view .LVU438
 1604              	.L75:
 885:Core/Src/main.c ****   {
 1605              		.loc 1 885 3 view .LVU439
 888:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1606              		.loc 1 888 5 view .LVU440
 888:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1607              		.loc 1 888 8 is_stmt 0 view .LVU441
 1608 0020 4FF0FF32 		mov	r2, #-1
 1609 0024 0349     		ldr	r1, .L78
 1610 0026 044B     		ldr	r3, .L78+4
 1611 0028 1868     		ldr	r0, [r3]
 1612 002a FFF7FEFF 		bl	xQueueReceive
ARM GAS  /tmp/ccADwVa0.s 			page 52


 1613              	.LVL113:
 888:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1614              		.loc 1 888 7 view .LVU442
 1615 002e 0128     		cmp	r0, #1
 1616 0030 EFD0     		beq	.L77
 1617 0032 F2E7     		b	.L74
 1618              	.L79:
 1619              		.align	2
 1620              	.L78:
 1621 0034 00000000 		.word	.LANCHOR12
 1622 0038 00000000 		.word	.LANCHOR6
 1623              		.cfi_endproc
 1624              	.LFE262:
 1626              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1627              		.align	1
 1628              		.global	HAL_TIM_PeriodElapsedCallback
 1629              		.syntax unified
 1630              		.thumb
 1631              		.thumb_func
 1632              		.fpu fpv4-sp-d16
 1634              	HAL_TIM_PeriodElapsedCallback:
 1635              	.LVL114:
 1636              	.LFB264:
 956:Core/Src/main.c ****   }
 957:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 958:Core/Src/main.c **** }
 959:Core/Src/main.c **** 
 960:Core/Src/main.c **** /**
 961:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 962:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 963:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 964:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 965:Core/Src/main.c ****   * @param  htim : TIM handle
 966:Core/Src/main.c ****   * @retval None
 967:Core/Src/main.c ****   */
 968:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 969:Core/Src/main.c **** {
 1637              		.loc 1 969 1 is_stmt 1 view -0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 1641              		.loc 1 969 1 is_stmt 0 view .LVU444
 1642 0000 08B5     		push	{r3, lr}
 1643              		.cfi_def_cfa_offset 8
 1644              		.cfi_offset 3, -8
 1645              		.cfi_offset 14, -4
 970:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 971:Core/Src/main.c **** 
 972:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 973:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1646              		.loc 1 973 3 is_stmt 1 view .LVU445
 1647              		.loc 1 973 11 is_stmt 0 view .LVU446
 1648 0002 0268     		ldr	r2, [r0]
 1649              		.loc 1 973 6 view .LVU447
 1650 0004 034B     		ldr	r3, .L84
 1651 0006 9A42     		cmp	r2, r3
 1652 0008 00D0     		beq	.L83
ARM GAS  /tmp/ccADwVa0.s 			page 53


 1653              	.LVL115:
 1654              	.L80:
 974:Core/Src/main.c ****     HAL_IncTick();
 975:Core/Src/main.c ****   }
 976:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 977:Core/Src/main.c **** 
 978:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 979:Core/Src/main.c **** }
 1655              		.loc 1 979 1 view .LVU448
 1656 000a 08BD     		pop	{r3, pc}
 1657              	.LVL116:
 1658              	.L83:
 974:Core/Src/main.c ****     HAL_IncTick();
 1659              		.loc 1 974 5 is_stmt 1 view .LVU449
 1660 000c FFF7FEFF 		bl	HAL_IncTick
 1661              	.LVL117:
 1662              		.loc 1 979 1 is_stmt 0 view .LVU450
 1663 0010 FBE7     		b	.L80
 1664              	.L85:
 1665 0012 00BF     		.align	2
 1666              	.L84:
 1667 0014 00100040 		.word	1073745920
 1668              		.cfi_endproc
 1669              	.LFE264:
 1671              		.section	.text.Error_Handler,"ax",%progbits
 1672              		.align	1
 1673              		.global	Error_Handler
 1674              		.syntax unified
 1675              		.thumb
 1676              		.thumb_func
 1677              		.fpu fpv4-sp-d16
 1679              	Error_Handler:
 1680              	.LFB265:
 980:Core/Src/main.c **** 
 981:Core/Src/main.c **** /**
 982:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 983:Core/Src/main.c ****   * @retval None
 984:Core/Src/main.c ****   */
 985:Core/Src/main.c **** void Error_Handler(void)
 986:Core/Src/main.c **** {
 1681              		.loc 1 986 1 is_stmt 1 view -0
 1682              		.cfi_startproc
 1683              		@ Volatile: function does not return.
 1684              		@ args = 0, pretend = 0, frame = 0
 1685              		@ frame_needed = 0, uses_anonymous_args = 0
 1686              		@ link register save eliminated.
 987:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 988:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 989:Core/Src/main.c ****   __disable_irq();
 1687              		.loc 1 989 3 view .LVU452
 1688              	.LBB10:
 1689              	.LBI10:
 1690              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
ARM GAS  /tmp/ccADwVa0.s 			page 54


   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
ARM GAS  /tmp/ccADwVa0.s 			page 55


  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccADwVa0.s 			page 56


 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccADwVa0.s 			page 57


 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
ARM GAS  /tmp/ccADwVa0.s 			page 58


 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/ccADwVa0.s 			page 59


 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
ARM GAS  /tmp/ccADwVa0.s 			page 60


 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
ARM GAS  /tmp/ccADwVa0.s 			page 61


 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccADwVa0.s 			page 62


 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccADwVa0.s 			page 63


 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
ARM GAS  /tmp/ccADwVa0.s 			page 64


 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccADwVa0.s 			page 65


 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccADwVa0.s 			page 66


 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  /tmp/ccADwVa0.s 			page 67


 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
ARM GAS  /tmp/ccADwVa0.s 			page 68


 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccADwVa0.s 			page 69


 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccADwVa0.s 			page 70


 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1691              		.loc 2 960 27 view .LVU453
 1692              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1693              		.loc 2 962 3 view .LVU454
 1694              		.syntax unified
 1695              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1696 0000 72B6     		cpsid i
 1697              	@ 0 "" 2
 1698              		.thumb
 1699              		.syntax unified
 1700              	.L87:
 1701              	.LBE11:
ARM GAS  /tmp/ccADwVa0.s 			page 71


 1702              	.LBE10:
 990:Core/Src/main.c ****   while (1)
 1703              		.loc 1 990 3 discriminator 1 view .LVU455
 991:Core/Src/main.c ****   {
 992:Core/Src/main.c ****   }
 1704              		.loc 1 992 3 discriminator 1 view .LVU456
 990:Core/Src/main.c ****   while (1)
 1705              		.loc 1 990 9 discriminator 1 view .LVU457
 1706 0002 FEE7     		b	.L87
 1707              		.cfi_endproc
 1708              	.LFE265:
 1710              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1711              		.align	1
 1712              		.syntax unified
 1713              		.thumb
 1714              		.thumb_func
 1715              		.fpu fpv4-sp-d16
 1717              	MX_ADC1_Init:
 1718              	.LFB247:
 363:Core/Src/main.c **** 
 1719              		.loc 1 363 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 16
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723 0000 00B5     		push	{lr}
 1724              		.cfi_def_cfa_offset 4
 1725              		.cfi_offset 14, -4
 1726 0002 85B0     		sub	sp, sp, #20
 1727              		.cfi_def_cfa_offset 24
 369:Core/Src/main.c **** 
 1728              		.loc 1 369 3 view .LVU459
 369:Core/Src/main.c **** 
 1729              		.loc 1 369 26 is_stmt 0 view .LVU460
 1730 0004 0023     		movs	r3, #0
 1731 0006 0093     		str	r3, [sp]
 1732 0008 0193     		str	r3, [sp, #4]
 1733 000a 0293     		str	r3, [sp, #8]
 1734 000c 0393     		str	r3, [sp, #12]
 377:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1735              		.loc 1 377 3 is_stmt 1 view .LVU461
 377:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1736              		.loc 1 377 18 is_stmt 0 view .LVU462
 1737 000e 2548     		ldr	r0, .L100
 1738 0010 254A     		ldr	r2, .L100+4
 1739 0012 0260     		str	r2, [r0]
 378:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1740              		.loc 1 378 3 is_stmt 1 view .LVU463
 378:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1741              		.loc 1 378 29 is_stmt 0 view .LVU464
 1742 0014 4FF48032 		mov	r2, #65536
 1743 0018 4260     		str	r2, [r0, #4]
 379:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1744              		.loc 1 379 3 is_stmt 1 view .LVU465
 379:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1745              		.loc 1 379 25 is_stmt 0 view .LVU466
 1746 001a 8360     		str	r3, [r0, #8]
 380:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
ARM GAS  /tmp/ccADwVa0.s 			page 72


 1747              		.loc 1 380 3 is_stmt 1 view .LVU467
 380:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1748              		.loc 1 380 27 is_stmt 0 view .LVU468
 1749 001c 0122     		movs	r2, #1
 1750 001e 0261     		str	r2, [r0, #16]
 381:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1751              		.loc 1 381 3 is_stmt 1 view .LVU469
 381:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1752              		.loc 1 381 33 is_stmt 0 view .LVU470
 1753 0020 0376     		strb	r3, [r0, #24]
 382:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1754              		.loc 1 382 3 is_stmt 1 view .LVU471
 382:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1755              		.loc 1 382 36 is_stmt 0 view .LVU472
 1756 0022 80F82020 		strb	r2, [r0, #32]
 383:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1757              		.loc 1 383 3 is_stmt 1 view .LVU473
 383:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1758              		.loc 1 383 34 is_stmt 0 view .LVU474
 1759 0026 4262     		str	r2, [r0, #36]
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1760              		.loc 1 384 3 is_stmt 1 view .LVU475
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1761              		.loc 1 384 35 is_stmt 0 view .LVU476
 1762 0028 C362     		str	r3, [r0, #44]
 385:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1763              		.loc 1 385 3 is_stmt 1 view .LVU477
 385:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1764              		.loc 1 385 31 is_stmt 0 view .LVU478
 1765 002a 2049     		ldr	r1, .L100+8
 1766 002c 8162     		str	r1, [r0, #40]
 386:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1767              		.loc 1 386 3 is_stmt 1 view .LVU479
 386:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1768              		.loc 1 386 24 is_stmt 0 view .LVU480
 1769 002e C360     		str	r3, [r0, #12]
 387:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1770              		.loc 1 387 3 is_stmt 1 view .LVU481
 387:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1771              		.loc 1 387 30 is_stmt 0 view .LVU482
 1772 0030 0421     		movs	r1, #4
 1773 0032 C161     		str	r1, [r0, #28]
 388:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1774              		.loc 1 388 3 is_stmt 1 view .LVU483
 388:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1775              		.loc 1 388 36 is_stmt 0 view .LVU484
 1776 0034 80F83030 		strb	r3, [r0, #48]
 389:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1777              		.loc 1 389 3 is_stmt 1 view .LVU485
 389:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1778              		.loc 1 389 27 is_stmt 0 view .LVU486
 1779 0038 4261     		str	r2, [r0, #20]
 390:Core/Src/main.c ****   {
 1780              		.loc 1 390 3 is_stmt 1 view .LVU487
 390:Core/Src/main.c ****   {
 1781              		.loc 1 390 7 is_stmt 0 view .LVU488
 1782 003a FFF7FEFF 		bl	HAL_ADC_Init
ARM GAS  /tmp/ccADwVa0.s 			page 73


 1783              	.LVL118:
 390:Core/Src/main.c ****   {
 1784              		.loc 1 390 6 view .LVU489
 1785 003e 38BB     		cbnz	r0, .L95
 397:Core/Src/main.c ****   sConfig.Rank = 1;
 1786              		.loc 1 397 3 is_stmt 1 view .LVU490
 397:Core/Src/main.c ****   sConfig.Rank = 1;
 1787              		.loc 1 397 19 is_stmt 0 view .LVU491
 1788 0040 0023     		movs	r3, #0
 1789 0042 0093     		str	r3, [sp]
 398:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1790              		.loc 1 398 3 is_stmt 1 view .LVU492
 398:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1791              		.loc 1 398 16 is_stmt 0 view .LVU493
 1792 0044 0122     		movs	r2, #1
 1793 0046 0192     		str	r2, [sp, #4]
 399:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1794              		.loc 1 399 3 is_stmt 1 view .LVU494
 399:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1795              		.loc 1 399 24 is_stmt 0 view .LVU495
 1796 0048 0293     		str	r3, [sp, #8]
 400:Core/Src/main.c ****   {
 1797              		.loc 1 400 3 is_stmt 1 view .LVU496
 400:Core/Src/main.c ****   {
 1798              		.loc 1 400 7 is_stmt 0 view .LVU497
 1799 004a 6946     		mov	r1, sp
 1800 004c 1548     		ldr	r0, .L100
 1801 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1802              	.LVL119:
 400:Core/Src/main.c ****   {
 1803              		.loc 1 400 6 view .LVU498
 1804 0052 F8B9     		cbnz	r0, .L96
 407:Core/Src/main.c ****   sConfig.Rank = 2;
 1805              		.loc 1 407 3 is_stmt 1 view .LVU499
 407:Core/Src/main.c ****   sConfig.Rank = 2;
 1806              		.loc 1 407 19 is_stmt 0 view .LVU500
 1807 0054 0123     		movs	r3, #1
 1808 0056 0093     		str	r3, [sp]
 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1809              		.loc 1 408 3 is_stmt 1 view .LVU501
 408:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1810              		.loc 1 408 16 is_stmt 0 view .LVU502
 1811 0058 0223     		movs	r3, #2
 1812 005a 0193     		str	r3, [sp, #4]
 409:Core/Src/main.c ****   {
 1813              		.loc 1 409 3 is_stmt 1 view .LVU503
 409:Core/Src/main.c ****   {
 1814              		.loc 1 409 7 is_stmt 0 view .LVU504
 1815 005c 6946     		mov	r1, sp
 1816 005e 1148     		ldr	r0, .L100
 1817 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1818              	.LVL120:
 409:Core/Src/main.c ****   {
 1819              		.loc 1 409 6 view .LVU505
 1820 0064 C0B9     		cbnz	r0, .L97
 416:Core/Src/main.c ****   sConfig.Rank = 3;
 1821              		.loc 1 416 3 is_stmt 1 view .LVU506
ARM GAS  /tmp/ccADwVa0.s 			page 74


 416:Core/Src/main.c ****   sConfig.Rank = 3;
 1822              		.loc 1 416 19 is_stmt 0 view .LVU507
 1823 0066 0423     		movs	r3, #4
 1824 0068 0093     		str	r3, [sp]
 417:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1825              		.loc 1 417 3 is_stmt 1 view .LVU508
 417:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1826              		.loc 1 417 16 is_stmt 0 view .LVU509
 1827 006a 0323     		movs	r3, #3
 1828 006c 0193     		str	r3, [sp, #4]
 418:Core/Src/main.c ****   {
 1829              		.loc 1 418 3 is_stmt 1 view .LVU510
 418:Core/Src/main.c ****   {
 1830              		.loc 1 418 7 is_stmt 0 view .LVU511
 1831 006e 6946     		mov	r1, sp
 1832 0070 0C48     		ldr	r0, .L100
 1833 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1834              	.LVL121:
 418:Core/Src/main.c ****   {
 1835              		.loc 1 418 6 view .LVU512
 1836 0076 88B9     		cbnz	r0, .L98
 425:Core/Src/main.c ****   sConfig.Rank = 4;
 1837              		.loc 1 425 3 is_stmt 1 view .LVU513
 425:Core/Src/main.c ****   sConfig.Rank = 4;
 1838              		.loc 1 425 19 is_stmt 0 view .LVU514
 1839 0078 0823     		movs	r3, #8
 1840 007a 0093     		str	r3, [sp]
 426:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1841              		.loc 1 426 3 is_stmt 1 view .LVU515
 426:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1842              		.loc 1 426 16 is_stmt 0 view .LVU516
 1843 007c 0423     		movs	r3, #4
 1844 007e 0193     		str	r3, [sp, #4]
 427:Core/Src/main.c ****   {
 1845              		.loc 1 427 3 is_stmt 1 view .LVU517
 427:Core/Src/main.c ****   {
 1846              		.loc 1 427 7 is_stmt 0 view .LVU518
 1847 0080 6946     		mov	r1, sp
 1848 0082 0848     		ldr	r0, .L100
 1849 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1850              	.LVL122:
 427:Core/Src/main.c ****   {
 1851              		.loc 1 427 6 view .LVU519
 1852 0088 50B9     		cbnz	r0, .L99
 435:Core/Src/main.c **** 
 1853              		.loc 1 435 1 view .LVU520
 1854 008a 05B0     		add	sp, sp, #20
 1855              		.cfi_remember_state
 1856              		.cfi_def_cfa_offset 4
 1857              		@ sp needed
 1858 008c 5DF804FB 		ldr	pc, [sp], #4
 1859              	.L95:
 1860              		.cfi_restore_state
 392:Core/Src/main.c ****   }
 1861              		.loc 1 392 5 is_stmt 1 view .LVU521
 1862 0090 FFF7FEFF 		bl	Error_Handler
 1863              	.LVL123:
ARM GAS  /tmp/ccADwVa0.s 			page 75


 1864              	.L96:
 402:Core/Src/main.c ****   }
 1865              		.loc 1 402 5 view .LVU522
 1866 0094 FFF7FEFF 		bl	Error_Handler
 1867              	.LVL124:
 1868              	.L97:
 411:Core/Src/main.c ****   }
 1869              		.loc 1 411 5 view .LVU523
 1870 0098 FFF7FEFF 		bl	Error_Handler
 1871              	.LVL125:
 1872              	.L98:
 420:Core/Src/main.c ****   }
 1873              		.loc 1 420 5 view .LVU524
 1874 009c FFF7FEFF 		bl	Error_Handler
 1875              	.LVL126:
 1876              	.L99:
 429:Core/Src/main.c ****   }
 1877              		.loc 1 429 5 view .LVU525
 1878 00a0 FFF7FEFF 		bl	Error_Handler
 1879              	.LVL127:
 1880              	.L101:
 1881              		.align	2
 1882              	.L100:
 1883 00a4 00000000 		.word	.LANCHOR9
 1884 00a8 00200140 		.word	1073815552
 1885 00ac 0100000F 		.word	251658241
 1886              		.cfi_endproc
 1887              	.LFE247:
 1889              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1890              		.align	1
 1891              		.syntax unified
 1892              		.thumb
 1893              		.thumb_func
 1894              		.fpu fpv4-sp-d16
 1896              	MX_I2C1_Init:
 1897              	.LFB248:
 443:Core/Src/main.c **** 
 1898              		.loc 1 443 1 view -0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902 0000 08B5     		push	{r3, lr}
 1903              		.cfi_def_cfa_offset 8
 1904              		.cfi_offset 3, -8
 1905              		.cfi_offset 14, -4
 452:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1906              		.loc 1 452 3 view .LVU527
 452:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1907              		.loc 1 452 18 is_stmt 0 view .LVU528
 1908 0002 0A48     		ldr	r0, .L106
 1909 0004 0A4B     		ldr	r3, .L106+4
 1910 0006 0360     		str	r3, [r0]
 453:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1911              		.loc 1 453 3 is_stmt 1 view .LVU529
 453:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1912              		.loc 1 453 25 is_stmt 0 view .LVU530
 1913 0008 0A4B     		ldr	r3, .L106+8
ARM GAS  /tmp/ccADwVa0.s 			page 76


 1914 000a 4360     		str	r3, [r0, #4]
 454:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1915              		.loc 1 454 3 is_stmt 1 view .LVU531
 454:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1916              		.loc 1 454 24 is_stmt 0 view .LVU532
 1917 000c 0023     		movs	r3, #0
 1918 000e 8360     		str	r3, [r0, #8]
 455:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1919              		.loc 1 455 3 is_stmt 1 view .LVU533
 455:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1920              		.loc 1 455 26 is_stmt 0 view .LVU534
 1921 0010 C360     		str	r3, [r0, #12]
 456:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1922              		.loc 1 456 3 is_stmt 1 view .LVU535
 456:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1923              		.loc 1 456 29 is_stmt 0 view .LVU536
 1924 0012 4FF48042 		mov	r2, #16384
 1925 0016 0261     		str	r2, [r0, #16]
 457:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1926              		.loc 1 457 3 is_stmt 1 view .LVU537
 457:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1927              		.loc 1 457 30 is_stmt 0 view .LVU538
 1928 0018 4361     		str	r3, [r0, #20]
 458:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1929              		.loc 1 458 3 is_stmt 1 view .LVU539
 458:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1930              		.loc 1 458 26 is_stmt 0 view .LVU540
 1931 001a 8361     		str	r3, [r0, #24]
 459:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1932              		.loc 1 459 3 is_stmt 1 view .LVU541
 459:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1933              		.loc 1 459 30 is_stmt 0 view .LVU542
 1934 001c C361     		str	r3, [r0, #28]
 460:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1935              		.loc 1 460 3 is_stmt 1 view .LVU543
 460:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1936              		.loc 1 460 28 is_stmt 0 view .LVU544
 1937 001e 0362     		str	r3, [r0, #32]
 461:Core/Src/main.c ****   {
 1938              		.loc 1 461 3 is_stmt 1 view .LVU545
 461:Core/Src/main.c ****   {
 1939              		.loc 1 461 7 is_stmt 0 view .LVU546
 1940 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1941              	.LVL128:
 461:Core/Src/main.c ****   {
 1942              		.loc 1 461 6 view .LVU547
 1943 0024 00B9     		cbnz	r0, .L105
 469:Core/Src/main.c **** 
 1944              		.loc 1 469 1 view .LVU548
 1945 0026 08BD     		pop	{r3, pc}
 1946              	.L105:
 463:Core/Src/main.c ****   }
 1947              		.loc 1 463 5 is_stmt 1 view .LVU549
 1948 0028 FFF7FEFF 		bl	Error_Handler
 1949              	.LVL129:
 1950              	.L107:
 1951              		.align	2
ARM GAS  /tmp/ccADwVa0.s 			page 77


 1952              	.L106:
 1953 002c 00000000 		.word	.LANCHOR7
 1954 0030 00540040 		.word	1073763328
 1955 0034 A0860100 		.word	100000
 1956              		.cfi_endproc
 1957              	.LFE248:
 1959              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1960              		.align	1
 1961              		.syntax unified
 1962              		.thumb
 1963              		.thumb_func
 1964              		.fpu fpv4-sp-d16
 1966              	MX_USART2_UART_Init:
 1967              	.LFB250:
 511:Core/Src/main.c **** 
 1968              		.loc 1 511 1 view -0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 0
 1971              		@ frame_needed = 0, uses_anonymous_args = 0
 1972 0000 08B5     		push	{r3, lr}
 1973              		.cfi_def_cfa_offset 8
 1974              		.cfi_offset 3, -8
 1975              		.cfi_offset 14, -4
 520:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1976              		.loc 1 520 3 view .LVU551
 520:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1977              		.loc 1 520 19 is_stmt 0 view .LVU552
 1978 0002 0A48     		ldr	r0, .L112
 1979 0004 0A4B     		ldr	r3, .L112+4
 1980 0006 0360     		str	r3, [r0]
 521:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1981              		.loc 1 521 3 is_stmt 1 view .LVU553
 521:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1982              		.loc 1 521 24 is_stmt 0 view .LVU554
 1983 0008 4FF4E133 		mov	r3, #115200
 1984 000c 4360     		str	r3, [r0, #4]
 522:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1985              		.loc 1 522 3 is_stmt 1 view .LVU555
 522:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1986              		.loc 1 522 26 is_stmt 0 view .LVU556
 1987 000e 0023     		movs	r3, #0
 1988 0010 8360     		str	r3, [r0, #8]
 523:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1989              		.loc 1 523 3 is_stmt 1 view .LVU557
 523:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1990              		.loc 1 523 24 is_stmt 0 view .LVU558
 1991 0012 C360     		str	r3, [r0, #12]
 524:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1992              		.loc 1 524 3 is_stmt 1 view .LVU559
 524:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1993              		.loc 1 524 22 is_stmt 0 view .LVU560
 1994 0014 0361     		str	r3, [r0, #16]
 525:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1995              		.loc 1 525 3 is_stmt 1 view .LVU561
 525:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1996              		.loc 1 525 20 is_stmt 0 view .LVU562
 1997 0016 0C22     		movs	r2, #12
ARM GAS  /tmp/ccADwVa0.s 			page 78


 1998 0018 4261     		str	r2, [r0, #20]
 526:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1999              		.loc 1 526 3 is_stmt 1 view .LVU563
 526:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 2000              		.loc 1 526 25 is_stmt 0 view .LVU564
 2001 001a 8361     		str	r3, [r0, #24]
 527:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 2002              		.loc 1 527 3 is_stmt 1 view .LVU565
 527:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 2003              		.loc 1 527 28 is_stmt 0 view .LVU566
 2004 001c C361     		str	r3, [r0, #28]
 528:Core/Src/main.c ****   {
 2005              		.loc 1 528 3 is_stmt 1 view .LVU567
 528:Core/Src/main.c ****   {
 2006              		.loc 1 528 7 is_stmt 0 view .LVU568
 2007 001e FFF7FEFF 		bl	HAL_UART_Init
 2008              	.LVL130:
 528:Core/Src/main.c ****   {
 2009              		.loc 1 528 6 view .LVU569
 2010 0022 00B9     		cbnz	r0, .L111
 536:Core/Src/main.c **** 
 2011              		.loc 1 536 1 view .LVU570
 2012 0024 08BD     		pop	{r3, pc}
 2013              	.L111:
 530:Core/Src/main.c ****   }
 2014              		.loc 1 530 5 is_stmt 1 view .LVU571
 2015 0026 FFF7FEFF 		bl	Error_Handler
 2016              	.LVL131:
 2017              	.L113:
 2018 002a 00BF     		.align	2
 2019              	.L112:
 2020 002c 00000000 		.word	.LANCHOR13
 2021 0030 00440040 		.word	1073759232
 2022              		.cfi_endproc
 2023              	.LFE250:
 2025              		.section	.text.MX_I2C2_Init,"ax",%progbits
 2026              		.align	1
 2027              		.syntax unified
 2028              		.thumb
 2029              		.thumb_func
 2030              		.fpu fpv4-sp-d16
 2032              	MX_I2C2_Init:
 2033              	.LFB249:
 477:Core/Src/main.c **** 
 2034              		.loc 1 477 1 view -0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 0, uses_anonymous_args = 0
 2038 0000 08B5     		push	{r3, lr}
 2039              		.cfi_def_cfa_offset 8
 2040              		.cfi_offset 3, -8
 2041              		.cfi_offset 14, -4
 486:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 2042              		.loc 1 486 3 view .LVU573
 486:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 2043              		.loc 1 486 18 is_stmt 0 view .LVU574
 2044 0002 0A48     		ldr	r0, .L118
ARM GAS  /tmp/ccADwVa0.s 			page 79


 2045 0004 0A4B     		ldr	r3, .L118+4
 2046 0006 0360     		str	r3, [r0]
 487:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 2047              		.loc 1 487 3 is_stmt 1 view .LVU575
 487:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 2048              		.loc 1 487 25 is_stmt 0 view .LVU576
 2049 0008 0A4B     		ldr	r3, .L118+8
 2050 000a 4360     		str	r3, [r0, #4]
 488:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 2051              		.loc 1 488 3 is_stmt 1 view .LVU577
 488:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 2052              		.loc 1 488 24 is_stmt 0 view .LVU578
 2053 000c 0023     		movs	r3, #0
 2054 000e 8360     		str	r3, [r0, #8]
 489:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 2055              		.loc 1 489 3 is_stmt 1 view .LVU579
 489:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 2056              		.loc 1 489 26 is_stmt 0 view .LVU580
 2057 0010 C360     		str	r3, [r0, #12]
 490:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 2058              		.loc 1 490 3 is_stmt 1 view .LVU581
 490:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 2059              		.loc 1 490 29 is_stmt 0 view .LVU582
 2060 0012 4FF48042 		mov	r2, #16384
 2061 0016 0261     		str	r2, [r0, #16]
 491:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 2062              		.loc 1 491 3 is_stmt 1 view .LVU583
 491:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 2063              		.loc 1 491 30 is_stmt 0 view .LVU584
 2064 0018 4361     		str	r3, [r0, #20]
 492:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 2065              		.loc 1 492 3 is_stmt 1 view .LVU585
 492:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 2066              		.loc 1 492 26 is_stmt 0 view .LVU586
 2067 001a 8361     		str	r3, [r0, #24]
 493:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 2068              		.loc 1 493 3 is_stmt 1 view .LVU587
 493:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 2069              		.loc 1 493 30 is_stmt 0 view .LVU588
 2070 001c C361     		str	r3, [r0, #28]
 494:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2071              		.loc 1 494 3 is_stmt 1 view .LVU589
 494:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2072              		.loc 1 494 28 is_stmt 0 view .LVU590
 2073 001e 0362     		str	r3, [r0, #32]
 495:Core/Src/main.c ****   {
 2074              		.loc 1 495 3 is_stmt 1 view .LVU591
 495:Core/Src/main.c ****   {
 2075              		.loc 1 495 7 is_stmt 0 view .LVU592
 2076 0020 FFF7FEFF 		bl	HAL_I2C_Init
 2077              	.LVL132:
 495:Core/Src/main.c ****   {
 2078              		.loc 1 495 6 view .LVU593
 2079 0024 00B9     		cbnz	r0, .L117
 503:Core/Src/main.c **** 
 2080              		.loc 1 503 1 view .LVU594
 2081 0026 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccADwVa0.s 			page 80


 2082              	.L117:
 497:Core/Src/main.c ****   }
 2083              		.loc 1 497 5 is_stmt 1 view .LVU595
 2084 0028 FFF7FEFF 		bl	Error_Handler
 2085              	.LVL133:
 2086              	.L119:
 2087              		.align	2
 2088              	.L118:
 2089 002c 00000000 		.word	.LANCHOR14
 2090 0030 00580040 		.word	1073764352
 2091 0034 A0860100 		.word	100000
 2092              		.cfi_endproc
 2093              	.LFE249:
 2095              		.section	.text.SystemClock_Config,"ax",%progbits
 2096              		.align	1
 2097              		.global	SystemClock_Config
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2101              		.fpu fpv4-sp-d16
 2103              	SystemClock_Config:
 2104              	.LFB246:
 315:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2105              		.loc 1 315 1 view -0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 80
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
 2109 0000 00B5     		push	{lr}
 2110              		.cfi_def_cfa_offset 4
 2111              		.cfi_offset 14, -4
 2112 0002 95B0     		sub	sp, sp, #84
 2113              		.cfi_def_cfa_offset 88
 316:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2114              		.loc 1 316 3 view .LVU597
 316:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2115              		.loc 1 316 22 is_stmt 0 view .LVU598
 2116 0004 3422     		movs	r2, #52
 2117 0006 0021     		movs	r1, #0
 2118 0008 07A8     		add	r0, sp, #28
 2119 000a FFF7FEFF 		bl	memset
 2120              	.LVL134:
 317:Core/Src/main.c **** 
 2121              		.loc 1 317 3 is_stmt 1 view .LVU599
 317:Core/Src/main.c **** 
 2122              		.loc 1 317 22 is_stmt 0 view .LVU600
 2123 000e 0023     		movs	r3, #0
 2124 0010 0293     		str	r3, [sp, #8]
 2125 0012 0393     		str	r3, [sp, #12]
 2126 0014 0493     		str	r3, [sp, #16]
 2127 0016 0593     		str	r3, [sp, #20]
 2128 0018 0693     		str	r3, [sp, #24]
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2129              		.loc 1 321 3 is_stmt 1 view .LVU601
 2130              	.LBB12:
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2131              		.loc 1 321 3 view .LVU602
 2132 001a 0093     		str	r3, [sp]
ARM GAS  /tmp/ccADwVa0.s 			page 81


 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2133              		.loc 1 321 3 view .LVU603
 2134 001c 1F4A     		ldr	r2, .L126
 2135 001e 116C     		ldr	r1, [r2, #64]
 2136 0020 41F08051 		orr	r1, r1, #268435456
 2137 0024 1164     		str	r1, [r2, #64]
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2138              		.loc 1 321 3 view .LVU604
 2139 0026 126C     		ldr	r2, [r2, #64]
 2140 0028 02F08052 		and	r2, r2, #268435456
 2141 002c 0092     		str	r2, [sp]
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2142              		.loc 1 321 3 view .LVU605
 2143 002e 009A     		ldr	r2, [sp]
 2144              	.LBE12:
 321:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2145              		.loc 1 321 3 view .LVU606
 322:Core/Src/main.c **** 
 2146              		.loc 1 322 3 view .LVU607
 2147              	.LBB13:
 322:Core/Src/main.c **** 
 2148              		.loc 1 322 3 view .LVU608
 2149 0030 0193     		str	r3, [sp, #4]
 322:Core/Src/main.c **** 
 2150              		.loc 1 322 3 view .LVU609
 2151 0032 1B49     		ldr	r1, .L126+4
 2152 0034 0A68     		ldr	r2, [r1]
 2153 0036 22F44042 		bic	r2, r2, #49152
 2154 003a 42F48042 		orr	r2, r2, #16384
 2155 003e 0A60     		str	r2, [r1]
 322:Core/Src/main.c **** 
 2156              		.loc 1 322 3 view .LVU610
 2157 0040 0A68     		ldr	r2, [r1]
 2158 0042 02F44042 		and	r2, r2, #49152
 2159 0046 0192     		str	r2, [sp, #4]
 322:Core/Src/main.c **** 
 2160              		.loc 1 322 3 view .LVU611
 2161 0048 019A     		ldr	r2, [sp, #4]
 2162              	.LBE13:
 322:Core/Src/main.c **** 
 2163              		.loc 1 322 3 view .LVU612
 327:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2164              		.loc 1 327 3 view .LVU613
 327:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2165              		.loc 1 327 36 is_stmt 0 view .LVU614
 2166 004a 0222     		movs	r2, #2
 2167 004c 0792     		str	r2, [sp, #28]
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2168              		.loc 1 328 3 is_stmt 1 view .LVU615
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2169              		.loc 1 328 30 is_stmt 0 view .LVU616
 2170 004e 0121     		movs	r1, #1
 2171 0050 0A91     		str	r1, [sp, #40]
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2172              		.loc 1 329 3 is_stmt 1 view .LVU617
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2173              		.loc 1 329 41 is_stmt 0 view .LVU618
ARM GAS  /tmp/ccADwVa0.s 			page 82


 2174 0052 1021     		movs	r1, #16
 2175 0054 0B91     		str	r1, [sp, #44]
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2176              		.loc 1 330 3 is_stmt 1 view .LVU619
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2177              		.loc 1 330 34 is_stmt 0 view .LVU620
 2178 0056 0D92     		str	r2, [sp, #52]
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 2179              		.loc 1 331 3 is_stmt 1 view .LVU621
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 2180              		.loc 1 331 35 is_stmt 0 view .LVU622
 2181 0058 0E93     		str	r3, [sp, #56]
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 2182              		.loc 1 332 3 is_stmt 1 view .LVU623
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 2183              		.loc 1 332 30 is_stmt 0 view .LVU624
 2184 005a 0F91     		str	r1, [sp, #60]
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 2185              		.loc 1 333 3 is_stmt 1 view .LVU625
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 2186              		.loc 1 333 30 is_stmt 0 view .LVU626
 2187 005c 4FF4A873 		mov	r3, #336
 2188 0060 1093     		str	r3, [sp, #64]
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 2189              		.loc 1 334 3 is_stmt 1 view .LVU627
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 2190              		.loc 1 334 30 is_stmt 0 view .LVU628
 2191 0062 0423     		movs	r3, #4
 2192 0064 1193     		str	r3, [sp, #68]
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 2193              		.loc 1 335 3 is_stmt 1 view .LVU629
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 2194              		.loc 1 335 30 is_stmt 0 view .LVU630
 2195 0066 1292     		str	r2, [sp, #72]
 336:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2196              		.loc 1 336 3 is_stmt 1 view .LVU631
 336:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2197              		.loc 1 336 30 is_stmt 0 view .LVU632
 2198 0068 1392     		str	r2, [sp, #76]
 337:Core/Src/main.c ****   {
 2199              		.loc 1 337 3 is_stmt 1 view .LVU633
 337:Core/Src/main.c ****   {
 2200              		.loc 1 337 7 is_stmt 0 view .LVU634
 2201 006a 07A8     		add	r0, sp, #28
 2202 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2203              	.LVL135:
 337:Core/Src/main.c ****   {
 2204              		.loc 1 337 6 view .LVU635
 2205 0070 80B9     		cbnz	r0, .L124
 344:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2206              		.loc 1 344 3 is_stmt 1 view .LVU636
 344:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2207              		.loc 1 344 31 is_stmt 0 view .LVU637
 2208 0072 0F23     		movs	r3, #15
 2209 0074 0293     		str	r3, [sp, #8]
 346:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2210              		.loc 1 346 3 is_stmt 1 view .LVU638
ARM GAS  /tmp/ccADwVa0.s 			page 83


 346:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2211              		.loc 1 346 34 is_stmt 0 view .LVU639
 2212 0076 0221     		movs	r1, #2
 2213 0078 0391     		str	r1, [sp, #12]
 347:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2214              		.loc 1 347 3 is_stmt 1 view .LVU640
 347:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2215              		.loc 1 347 35 is_stmt 0 view .LVU641
 2216 007a 0023     		movs	r3, #0
 2217 007c 0493     		str	r3, [sp, #16]
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2218              		.loc 1 348 3 is_stmt 1 view .LVU642
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2219              		.loc 1 348 36 is_stmt 0 view .LVU643
 2220 007e 4FF48052 		mov	r2, #4096
 2221 0082 0592     		str	r2, [sp, #20]
 349:Core/Src/main.c **** 
 2222              		.loc 1 349 3 is_stmt 1 view .LVU644
 349:Core/Src/main.c **** 
 2223              		.loc 1 349 36 is_stmt 0 view .LVU645
 2224 0084 0693     		str	r3, [sp, #24]
 351:Core/Src/main.c ****   {
 2225              		.loc 1 351 3 is_stmt 1 view .LVU646
 351:Core/Src/main.c ****   {
 2226              		.loc 1 351 7 is_stmt 0 view .LVU647
 2227 0086 02A8     		add	r0, sp, #8
 2228 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2229              	.LVL136:
 351:Core/Src/main.c ****   {
 2230              		.loc 1 351 6 view .LVU648
 2231 008c 20B9     		cbnz	r0, .L125
 355:Core/Src/main.c **** 
 2232              		.loc 1 355 1 view .LVU649
 2233 008e 15B0     		add	sp, sp, #84
 2234              		.cfi_remember_state
 2235              		.cfi_def_cfa_offset 4
 2236              		@ sp needed
 2237 0090 5DF804FB 		ldr	pc, [sp], #4
 2238              	.L124:
 2239              		.cfi_restore_state
 339:Core/Src/main.c ****   }
 2240              		.loc 1 339 5 is_stmt 1 view .LVU650
 2241 0094 FFF7FEFF 		bl	Error_Handler
 2242              	.LVL137:
 2243              	.L125:
 353:Core/Src/main.c ****   }
 2244              		.loc 1 353 5 view .LVU651
 2245 0098 FFF7FEFF 		bl	Error_Handler
 2246              	.LVL138:
 2247              	.L127:
 2248              		.align	2
 2249              	.L126:
 2250 009c 00380240 		.word	1073887232
 2251 00a0 00700040 		.word	1073770496
 2252              		.cfi_endproc
 2253              	.LFE246:
 2255              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/ccADwVa0.s 			page 84


 2256              		.align	1
 2257              		.global	main
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2261              		.fpu fpv4-sp-d16
 2263              	main:
 2264              	.LFB245:
 199:Core/Src/main.c **** 
 2265              		.loc 1 199 1 view -0
 2266              		.cfi_startproc
 2267              		@ Volatile: function does not return.
 2268              		@ args = 0, pretend = 0, frame = 224
 2269              		@ frame_needed = 0, uses_anonymous_args = 0
 2270 0000 00B5     		push	{lr}
 2271              		.cfi_def_cfa_offset 4
 2272              		.cfi_offset 14, -4
 2273 0002 B9B0     		sub	sp, sp, #228
 2274              		.cfi_def_cfa_offset 232
 208:Core/Src/main.c **** 
 2275              		.loc 1 208 3 view .LVU653
 2276 0004 FFF7FEFF 		bl	HAL_Init
 2277              	.LVL139:
 215:Core/Src/main.c **** 
 2278              		.loc 1 215 3 view .LVU654
 2279 0008 FFF7FEFF 		bl	SystemClock_Config
 2280              	.LVL140:
 222:Core/Src/main.c ****   MX_ADC1_Init();
 2281              		.loc 1 222 3 view .LVU655
 2282 000c FFF7FEFF 		bl	MX_GPIO_Init
 2283              	.LVL141:
 223:Core/Src/main.c ****   MX_I2C1_Init();
 2284              		.loc 1 223 3 view .LVU656
 2285 0010 FFF7FEFF 		bl	MX_ADC1_Init
 2286              	.LVL142:
 224:Core/Src/main.c ****   MX_USART2_UART_Init();
 2287              		.loc 1 224 3 view .LVU657
 2288 0014 FFF7FEFF 		bl	MX_I2C1_Init
 2289              	.LVL143:
 225:Core/Src/main.c ****   MX_I2C2_Init();
 2290              		.loc 1 225 3 view .LVU658
 2291 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 2292              	.LVL144:
 226:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2293              		.loc 1 226 3 view .LVU659
 2294 001c FFF7FEFF 		bl	MX_I2C2_Init
 2295              	.LVL145:
 233:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 2296              		.loc 1 233 3 view .LVU660
 2297 0020 0025     		movs	r5, #0
 2298 0022 3695     		str	r5, [sp, #216]
 2299 0024 3795     		str	r5, [sp, #220]
 234:Core/Src/main.c **** 
 2300              		.loc 1 234 3 view .LVU661
 234:Core/Src/main.c **** 
 2301              		.loc 1 234 22 is_stmt 0 view .LVU662
 2302 0026 36A8     		add	r0, sp, #216
ARM GAS  /tmp/ccADwVa0.s 			page 85


 2303 0028 FFF7FEFF 		bl	osMutexCreate
 2304              	.LVL146:
 234:Core/Src/main.c **** 
 2305              		.loc 1 234 20 view .LVU663
 2306 002c 494B     		ldr	r3, .L131
 2307 002e 1860     		str	r0, [r3]
 250:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 2308              		.loc 1 250 3 is_stmt 1 view .LVU664
 2309 0030 494C     		ldr	r4, .L131+4
 2310 0032 0DF1C80C 		add	ip, sp, #200
 2311 0036 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2312 003a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 251:Core/Src/main.c **** 
 2313              		.loc 1 251 3 view .LVU665
 251:Core/Src/main.c **** 
 2314              		.loc 1 251 29 is_stmt 0 view .LVU666
 2315 003e 2946     		mov	r1, r5
 2316 0040 6046     		mov	r0, ip
 2317 0042 FFF7FEFF 		bl	osMessageCreate
 2318              	.LVL147:
 251:Core/Src/main.c **** 
 2319              		.loc 1 251 27 view .LVU667
 2320 0046 454B     		ldr	r3, .L131+8
 2321 0048 1860     		str	r0, [r3]
 254:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 2322              		.loc 1 254 3 is_stmt 1 view .LVU668
 2323 004a 0DF1B80C 		add	ip, sp, #184
 2324 004e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2325 0052 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 255:Core/Src/main.c **** 
 2326              		.loc 1 255 3 view .LVU669
 255:Core/Src/main.c **** 
 2327              		.loc 1 255 29 is_stmt 0 view .LVU670
 2328 0056 2946     		mov	r1, r5
 2329 0058 6046     		mov	r0, ip
 2330 005a FFF7FEFF 		bl	osMessageCreate
 2331              	.LVL148:
 255:Core/Src/main.c **** 
 2332              		.loc 1 255 27 view .LVU671
 2333 005e 404B     		ldr	r3, .L131+12
 2334 0060 1860     		str	r0, [r3]
 258:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 2335              		.loc 1 258 3 is_stmt 1 view .LVU672
 2336 0062 0DF1A80C 		add	ip, sp, #168
 2337 0066 04F11003 		add	r3, r4, #16
 2338 006a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2339 006c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 259:Core/Src/main.c **** 
 2340              		.loc 1 259 3 view .LVU673
 259:Core/Src/main.c **** 
 2341              		.loc 1 259 25 is_stmt 0 view .LVU674
 2342 0070 2946     		mov	r1, r5
 2343 0072 6046     		mov	r0, ip
 2344 0074 FFF7FEFF 		bl	osMessageCreate
 2345              	.LVL149:
 259:Core/Src/main.c **** 
 2346              		.loc 1 259 23 view .LVU675
ARM GAS  /tmp/ccADwVa0.s 			page 86


 2347 0078 3A4B     		ldr	r3, .L131+16
 2348 007a 1860     		str	r0, [r3]
 267:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 2349              		.loc 1 267 3 is_stmt 1 view .LVU676
 2350 007c 0DF18C0C 		add	ip, sp, #140
 2351 0080 04F1200E 		add	lr, r4, #32
 2352 0084 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2353 0088 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2354 008c 9EE80700 		ldm	lr, {r0, r1, r2}
 2355 0090 8CE80700 		stm	ip, {r0, r1, r2}
 268:Core/Src/main.c **** 
 2356              		.loc 1 268 3 view .LVU677
 268:Core/Src/main.c **** 
 2357              		.loc 1 268 23 is_stmt 0 view .LVU678
 2358 0094 2946     		mov	r1, r5
 2359 0096 23A8     		add	r0, sp, #140
 2360 0098 FFF7FEFF 		bl	osThreadCreate
 2361              	.LVL150:
 268:Core/Src/main.c **** 
 2362              		.loc 1 268 21 view .LVU679
 2363 009c 324B     		ldr	r3, .L131+20
 2364 009e 1860     		str	r0, [r3]
 271:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 2365              		.loc 1 271 3 is_stmt 1 view .LVU680
 2366 00a0 0DF1700C 		add	ip, sp, #112
 2367 00a4 04F13C0E 		add	lr, r4, #60
 2368 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2369 00ac ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2370 00b0 9EE80700 		ldm	lr, {r0, r1, r2}
 2371 00b4 8CE80700 		stm	ip, {r0, r1, r2}
 272:Core/Src/main.c **** 
 2372              		.loc 1 272 3 view .LVU681
 272:Core/Src/main.c **** 
 2373              		.loc 1 272 24 is_stmt 0 view .LVU682
 2374 00b8 2946     		mov	r1, r5
 2375 00ba 1CA8     		add	r0, sp, #112
 2376 00bc FFF7FEFF 		bl	osThreadCreate
 2377              	.LVL151:
 272:Core/Src/main.c **** 
 2378              		.loc 1 272 22 view .LVU683
 2379 00c0 2A4B     		ldr	r3, .L131+24
 2380 00c2 1860     		str	r0, [r3]
 275:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 2381              		.loc 1 275 3 is_stmt 1 view .LVU684
 2382 00c4 0DF1540C 		add	ip, sp, #84
 2383 00c8 04F1580E 		add	lr, r4, #88
 2384 00cc BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2385 00d0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2386 00d4 9EE80700 		ldm	lr, {r0, r1, r2}
 2387 00d8 8CE80700 		stm	ip, {r0, r1, r2}
 276:Core/Src/main.c **** 
 2388              		.loc 1 276 3 view .LVU685
 276:Core/Src/main.c **** 
 2389              		.loc 1 276 25 is_stmt 0 view .LVU686
 2390 00dc 2946     		mov	r1, r5
 2391 00de 15A8     		add	r0, sp, #84
 2392 00e0 FFF7FEFF 		bl	osThreadCreate
ARM GAS  /tmp/ccADwVa0.s 			page 87


 2393              	.LVL152:
 276:Core/Src/main.c **** 
 2394              		.loc 1 276 23 view .LVU687
 2395 00e4 224B     		ldr	r3, .L131+28
 2396 00e6 1860     		str	r0, [r3]
 279:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 2397              		.loc 1 279 3 is_stmt 1 view .LVU688
 2398 00e8 0DF1380C 		add	ip, sp, #56
 2399 00ec 04F1740E 		add	lr, r4, #116
 2400 00f0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2401 00f4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2402 00f8 9EE80700 		ldm	lr, {r0, r1, r2}
 2403 00fc 8CE80700 		stm	ip, {r0, r1, r2}
 280:Core/Src/main.c **** 
 2404              		.loc 1 280 3 view .LVU689
 280:Core/Src/main.c **** 
 2405              		.loc 1 280 26 is_stmt 0 view .LVU690
 2406 0100 2946     		mov	r1, r5
 2407 0102 0EA8     		add	r0, sp, #56
 2408 0104 FFF7FEFF 		bl	osThreadCreate
 2409              	.LVL153:
 280:Core/Src/main.c **** 
 2410              		.loc 1 280 24 view .LVU691
 2411 0108 1A4B     		ldr	r3, .L131+32
 2412 010a 1860     		str	r0, [r3]
 283:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 2413              		.loc 1 283 3 is_stmt 1 view .LVU692
 2414 010c 0DF11C0C 		add	ip, sp, #28
 2415 0110 04F1900E 		add	lr, r4, #144
 2416 0114 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2417 0118 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2418 011c 9EE80700 		ldm	lr, {r0, r1, r2}
 2419 0120 8CE80700 		stm	ip, {r0, r1, r2}
 284:Core/Src/main.c **** 
 2420              		.loc 1 284 3 view .LVU693
 284:Core/Src/main.c **** 
 2421              		.loc 1 284 28 is_stmt 0 view .LVU694
 2422 0124 2946     		mov	r1, r5
 2423 0126 07A8     		add	r0, sp, #28
 2424 0128 FFF7FEFF 		bl	osThreadCreate
 2425              	.LVL154:
 284:Core/Src/main.c **** 
 2426              		.loc 1 284 26 view .LVU695
 2427 012c 124B     		ldr	r3, .L131+36
 2428 012e 1860     		str	r0, [r3]
 287:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 2429              		.loc 1 287 3 is_stmt 1 view .LVU696
 2430 0130 EC46     		mov	ip, sp
 2431 0132 AC34     		adds	r4, r4, #172
 2432 0134 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2433 0136 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2434 013a 94E80700 		ldm	r4, {r0, r1, r2}
 2435 013e 8CE80700 		stm	ip, {r0, r1, r2}
 288:Core/Src/main.c **** 
 2436              		.loc 1 288 3 view .LVU697
 288:Core/Src/main.c **** 
 2437              		.loc 1 288 24 is_stmt 0 view .LVU698
ARM GAS  /tmp/ccADwVa0.s 			page 88


 2438 0142 2946     		mov	r1, r5
 2439 0144 6846     		mov	r0, sp
 2440 0146 FFF7FEFF 		bl	osThreadCreate
 2441              	.LVL155:
 288:Core/Src/main.c **** 
 2442              		.loc 1 288 22 view .LVU699
 2443 014a 0C4B     		ldr	r3, .L131+40
 2444 014c 1860     		str	r0, [r3]
 295:Core/Src/main.c **** 
 2445              		.loc 1 295 3 is_stmt 1 view .LVU700
 2446 014e FFF7FEFF 		bl	osKernelStart
 2447              	.LVL156:
 2448              	.L129:
 301:Core/Src/main.c ****   {
 2449              		.loc 1 301 3 discriminator 1 view .LVU701
 306:Core/Src/main.c ****   /* USER CODE END 3 */
 2450              		.loc 1 306 3 discriminator 1 view .LVU702
 301:Core/Src/main.c ****   {
 2451              		.loc 1 301 9 discriminator 1 view .LVU703
 2452 0152 FEE7     		b	.L129
 2453              	.L132:
 2454              		.align	2
 2455              	.L131:
 2456 0154 00000000 		.word	.LANCHOR15
 2457 0158 00000000 		.word	.LANCHOR16
 2458 015c 00000000 		.word	.LANCHOR4
 2459 0160 00000000 		.word	.LANCHOR6
 2460 0164 00000000 		.word	.LANCHOR1
 2461 0168 00000000 		.word	.LANCHOR17
 2462 016c 00000000 		.word	.LANCHOR18
 2463 0170 00000000 		.word	.LANCHOR19
 2464 0174 00000000 		.word	.LANCHOR20
 2465 0178 00000000 		.word	.LANCHOR21
 2466 017c 00000000 		.word	.LANCHOR22
 2467              		.cfi_endproc
 2468              	.LFE245:
 2470              		.global	StateMutexHandle
 2471              		.global	LCDPrintQueueHandle
 2472              		.global	MotorControlQueueHandle
 2473              		.global	MiniBotInputQueueHandle
 2474              		.global	LCDPrintTaskHandle
 2475              		.global	MotorControlTaskHandle
 2476              		.global	ApplicationFSMHandle
 2477              		.global	MiniBotInputsHandle
 2478              		.global	BlinkLEDTaskHandle
 2479              		.global	defaultTaskHandle
 2480              		.global	huart2
 2481              		.global	hi2c2
 2482              		.global	hi2c1
 2483              		.global	hadc1
 2484              		.global	state
 2485              		.global	MappedServoAngle
 2486              		.global	tempFailedToPostMessage
 2487              		.global	MotorControl_Qdata_Buf
 2488              		.global	Temp_Qdata_Buf
 2489              		.global	MiniBot_Qdata_Buf
 2490              		.global	PotRawValue
ARM GAS  /tmp/ccADwVa0.s 			page 89


 2491              		.global	Qdata
 2492              		.section	.rodata
 2493              		.align	2
 2494              		.set	.LANCHOR16,. + 0
 2495              	.LC0:
 2496 0000 10000000 		.word	16
 2497 0004 34000000 		.word	52
 2498 0008 00000000 		.word	0
 2499 000c 00000000 		.word	0
 2500              	.LC1:
 2501 0010 10000000 		.word	16
 2502 0014 01000000 		.word	1
 2503 0018 00000000 		.word	0
 2504 001c 00000000 		.word	0
 2505              	.LC23:
 2506 0020 00000000 		.word	.LC2
 2507 0024 00000000 		.word	StartDefaultTask
 2508 0028 0000     		.short	0
 2509 002a 0000     		.space	2
 2510 002c 00000000 		.word	0
 2511 0030 80000000 		.word	128
 2512 0034 00000000 		.word	0
 2513 0038 00000000 		.word	0
 2514              	.LC24:
 2515 003c 0C000000 		.word	.LC4
 2516 0040 00000000 		.word	BlinkLEDTaskEntry
 2517 0044 0000     		.short	0
 2518 0046 0000     		.space	2
 2519 0048 00000000 		.word	0
 2520 004c 80000000 		.word	128
 2521 0050 00000000 		.word	0
 2522 0054 00000000 		.word	0
 2523              	.LC25:
 2524 0058 1C000000 		.word	.LC6
 2525 005c 00000000 		.word	MiniBotInputsEntry
 2526 0060 0000     		.short	0
 2527 0062 0000     		.space	2
 2528 0064 00000000 		.word	0
 2529 0068 00020000 		.word	512
 2530 006c 00000000 		.word	0
 2531 0070 00000000 		.word	0
 2532              	.LC26:
 2533 0074 2C000000 		.word	.LC8
 2534 0078 00000000 		.word	ApplicationFSMEntry
 2535 007c 0200     		.short	2
 2536 007e 0000     		.space	2
 2537 0080 00000000 		.word	0
 2538 0084 00020000 		.word	512
 2539 0088 00000000 		.word	0
 2540 008c 00000000 		.word	0
 2541              	.LC27:
 2542 0090 3C000000 		.word	.LC10
 2543 0094 00000000 		.word	MotorControlTaskEntry
 2544 0098 0000     		.short	0
 2545 009a 0000     		.space	2
 2546 009c 00000000 		.word	0
 2547 00a0 00020000 		.word	512
ARM GAS  /tmp/ccADwVa0.s 			page 90


 2548 00a4 00000000 		.word	0
 2549 00a8 00000000 		.word	0
 2550              	.LC28:
 2551 00ac 50000000 		.word	.LC12
 2552 00b0 00000000 		.word	LCDPrintTaskEntry
 2553 00b4 0000     		.short	0
 2554 00b6 0000     		.space	2
 2555 00b8 00000000 		.word	0
 2556 00bc 80000000 		.word	128
 2557 00c0 00000000 		.word	0
 2558 00c4 00000000 		.word	0
 2559              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 2560              		.align	2
 2561              		.set	.LANCHOR20,. + 0
 2564              	ApplicationFSMHandle:
 2565 0000 00000000 		.space	4
 2566              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 2567              		.align	2
 2568              		.set	.LANCHOR18,. + 0
 2571              	BlinkLEDTaskHandle:
 2572 0000 00000000 		.space	4
 2573              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 2574              		.align	2
 2575              		.set	.LANCHOR1,. + 0
 2578              	LCDPrintQueueHandle:
 2579 0000 00000000 		.space	4
 2580              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 2581              		.align	2
 2582              		.set	.LANCHOR22,. + 0
 2585              	LCDPrintTaskHandle:
 2586 0000 00000000 		.space	4
 2587              		.section	.bss.MappedServoAngle,"aw",%nobits
 2588              		.align	2
 2589              		.set	.LANCHOR11,. + 0
 2592              	MappedServoAngle:
 2593 0000 00000000 		.space	8
 2593      00000000 
 2594              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 2595              		.align	2
 2596              		.set	.LANCHOR4,. + 0
 2599              	MiniBotInputQueueHandle:
 2600 0000 00000000 		.space	4
 2601              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 2602              		.align	2
 2603              		.set	.LANCHOR19,. + 0
 2606              	MiniBotInputsHandle:
 2607 0000 00000000 		.space	4
 2608              		.section	.bss.MiniBot_Qdata_Buf,"aw",%nobits
 2609              		.align	2
 2610              		.set	.LANCHOR3,. + 0
 2613              	MiniBot_Qdata_Buf:
 2614 0000 00000000 		.space	52
 2614      00000000 
 2614      00000000 
 2614      00000000 
 2614      00000000 
 2615              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
ARM GAS  /tmp/ccADwVa0.s 			page 91


 2616              		.align	2
 2617              		.set	.LANCHOR6,. + 0
 2620              	MotorControlQueueHandle:
 2621 0000 00000000 		.space	4
 2622              		.section	.bss.MotorControlTaskHandle,"aw",%nobits
 2623              		.align	2
 2624              		.set	.LANCHOR21,. + 0
 2627              	MotorControlTaskHandle:
 2628 0000 00000000 		.space	4
 2629              		.section	.bss.MotorControl_Qdata_Buf,"aw",%nobits
 2630              		.align	2
 2631              		.set	.LANCHOR12,. + 0
 2634              	MotorControl_Qdata_Buf:
 2635 0000 00000000 		.space	52
 2635      00000000 
 2635      00000000 
 2635      00000000 
 2635      00000000 
 2636              		.section	.bss.PotRawValue,"aw",%nobits
 2637              		.align	2
 2638              		.set	.LANCHOR10,. + 0
 2641              	PotRawValue:
 2642 0000 00000000 		.space	16
 2642      00000000 
 2642      00000000 
 2642      00000000 
 2643              		.section	.bss.Qdata,"aw",%nobits
 2644              		.align	2
 2645              		.set	.LANCHOR8,. + 0
 2648              	Qdata:
 2649 0000 00000000 		.space	52
 2649      00000000 
 2649      00000000 
 2649      00000000 
 2649      00000000 
 2650              		.section	.bss.StateMutexHandle,"aw",%nobits
 2651              		.align	2
 2652              		.set	.LANCHOR15,. + 0
 2655              	StateMutexHandle:
 2656 0000 00000000 		.space	4
 2657              		.section	.bss.Temp_Qdata_Buf,"aw",%nobits
 2658              		.align	2
 2659              		.set	.LANCHOR5,. + 0
 2662              	Temp_Qdata_Buf:
 2663 0000 00000000 		.space	52
 2663      00000000 
 2663      00000000 
 2663      00000000 
 2663      00000000 
 2664              		.section	.bss.defaultTaskHandle,"aw",%nobits
 2665              		.align	2
 2666              		.set	.LANCHOR17,. + 0
 2669              	defaultTaskHandle:
 2670 0000 00000000 		.space	4
 2671              		.section	.bss.hadc1,"aw",%nobits
 2672              		.align	2
 2673              		.set	.LANCHOR9,. + 0
ARM GAS  /tmp/ccADwVa0.s 			page 92


 2676              	hadc1:
 2677 0000 00000000 		.space	72
 2677      00000000 
 2677      00000000 
 2677      00000000 
 2677      00000000 
 2678              		.section	.bss.hi2c1,"aw",%nobits
 2679              		.align	2
 2680              		.set	.LANCHOR7,. + 0
 2683              	hi2c1:
 2684 0000 00000000 		.space	84
 2684      00000000 
 2684      00000000 
 2684      00000000 
 2684      00000000 
 2685              		.section	.bss.hi2c2,"aw",%nobits
 2686              		.align	2
 2687              		.set	.LANCHOR14,. + 0
 2690              	hi2c2:
 2691 0000 00000000 		.space	84
 2691      00000000 
 2691      00000000 
 2691      00000000 
 2691      00000000 
 2692              		.section	.bss.huart2,"aw",%nobits
 2693              		.align	2
 2694              		.set	.LANCHOR13,. + 0
 2697              	huart2:
 2698 0000 00000000 		.space	72
 2698      00000000 
 2698      00000000 
 2698      00000000 
 2698      00000000 
 2699              		.section	.bss.state,"aw",%nobits
 2700              		.set	.LANCHOR0,. + 0
 2703              	state:
 2704 0000 00       		.space	1
 2705              		.section	.bss.tempFailedToPostMessage,"aw",%nobits
 2706              		.set	.LANCHOR2,. + 0
 2709              	tempFailedToPostMessage:
 2710 0000 00       		.space	1
 2711              		.text
 2712              	.Letext0:
 2713              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2714              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2715              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2716              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2717              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2718              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2719              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2720              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2721              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2722              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2723              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2724              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2725              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2726              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
ARM GAS  /tmp/ccADwVa0.s 			page 93


 2727              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2728              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2729              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2730              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2731              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2732              		.file 22 "Core/Inc/I2C_LCD.h"
 2733              		.file 23 "Core/Inc/pca9685.h"
 2734              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 2735              		.file 25 "<built-in>"
ARM GAS  /tmp/ccADwVa0.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccADwVa0.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccADwVa0.s:37     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccADwVa0.s:44     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccADwVa0.s:238    .text.MX_GPIO_Init:00000000000000e8 $d
     /tmp/ccADwVa0.s:246    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccADwVa0.s:253    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccADwVa0.s:284    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccADwVa0.s:289    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccADwVa0.s:296    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccADwVa0.s:331    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccADwVa0.s:336    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccADwVa0.s:343    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccADwVa0.s:522    .text.ApplicationFSMEntry:00000000000000f0 $d
     /tmp/ccADwVa0.s:534    .rodata.LCDPrintTaskEntry.str1.4:0000000000000000 $d
     /tmp/ccADwVa0.s:562    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/ccADwVa0.s:569    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/ccADwVa0.s:766    .text.LCDPrintTaskEntry:0000000000000108 $d
     /tmp/ccADwVa0.s:780    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccADwVa0.s:787    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccADwVa0.s:805    .text.HAL_GPIO_EXTI_Callback:0000000000000008 $d
     /tmp/ccADwVa0.s:810    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccADwVa0.s:817    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccADwVa0.s:897    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccADwVa0.s:902    .text.ServoDriverInit:0000000000000000 $t
     /tmp/ccADwVa0.s:909    .text.ServoDriverInit:0000000000000000 ServoDriverInit
     /tmp/ccADwVa0.s:980    .text.ServoDriverInit:0000000000000060 $d
     /tmp/ccADwVa0.s:985    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccADwVa0.s:992    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccADwVa0.s:1082   .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccADwVa0.s:1089   .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccADwVa0.s:1171   .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccADwVa0.s:1178   .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccADwVa0.s:1354   .text.MiniBotInputsEntry:00000000000000c0 $d
     /tmp/ccADwVa0.s:1365   .text.MAP:0000000000000000 $t
     /tmp/ccADwVa0.s:1372   .text.MAP:0000000000000000 MAP
     /tmp/ccADwVa0.s:1402   .text.MoveServo:0000000000000000 $t
     /tmp/ccADwVa0.s:1409   .text.MoveServo:0000000000000000 MoveServo
     /tmp/ccADwVa0.s:1554   .text.MoveServo:00000000000000c4 $d
     /tmp/ccADwVa0.s:1559   .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/ccADwVa0.s:1566   .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/ccADwVa0.s:1621   .text.MotorControlTaskEntry:0000000000000034 $d
     /tmp/ccADwVa0.s:1627   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccADwVa0.s:1634   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccADwVa0.s:1667   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccADwVa0.s:1672   .text.Error_Handler:0000000000000000 $t
     /tmp/ccADwVa0.s:1679   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccADwVa0.s:1711   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccADwVa0.s:1717   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccADwVa0.s:1883   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccADwVa0.s:1890   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccADwVa0.s:1896   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccADwVa0.s:1953   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccADwVa0.s:1960   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccADwVa0.s:1966   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccADwVa0.s:2020   .text.MX_USART2_UART_Init:000000000000002c $d
ARM GAS  /tmp/ccADwVa0.s 			page 95


     /tmp/ccADwVa0.s:2026   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccADwVa0.s:2032   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccADwVa0.s:2089   .text.MX_I2C2_Init:000000000000002c $d
     /tmp/ccADwVa0.s:2096   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccADwVa0.s:2103   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccADwVa0.s:2250   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccADwVa0.s:2256   .text.main:0000000000000000 $t
     /tmp/ccADwVa0.s:2263   .text.main:0000000000000000 main
     /tmp/ccADwVa0.s:2456   .text.main:0000000000000154 $d
     /tmp/ccADwVa0.s:2655   .bss.StateMutexHandle:0000000000000000 StateMutexHandle
     /tmp/ccADwVa0.s:2578   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/ccADwVa0.s:2620   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/ccADwVa0.s:2599   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccADwVa0.s:2585   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/ccADwVa0.s:2627   .bss.MotorControlTaskHandle:0000000000000000 MotorControlTaskHandle
     /tmp/ccADwVa0.s:2564   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccADwVa0.s:2606   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccADwVa0.s:2571   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccADwVa0.s:2669   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccADwVa0.s:2697   .bss.huart2:0000000000000000 huart2
     /tmp/ccADwVa0.s:2690   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccADwVa0.s:2683   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccADwVa0.s:2676   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccADwVa0.s:2703   .bss.state:0000000000000000 state
     /tmp/ccADwVa0.s:2592   .bss.MappedServoAngle:0000000000000000 MappedServoAngle
     /tmp/ccADwVa0.s:2709   .bss.tempFailedToPostMessage:0000000000000000 tempFailedToPostMessage
     /tmp/ccADwVa0.s:2634   .bss.MotorControl_Qdata_Buf:0000000000000000 MotorControl_Qdata_Buf
     /tmp/ccADwVa0.s:2662   .bss.Temp_Qdata_Buf:0000000000000000 Temp_Qdata_Buf
     /tmp/ccADwVa0.s:2613   .bss.MiniBot_Qdata_Buf:0000000000000000 MiniBot_Qdata_Buf
     /tmp/ccADwVa0.s:2641   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccADwVa0.s:2648   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccADwVa0.s:2493   .rodata:0000000000000000 $d
     /tmp/ccADwVa0.s:2560   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2567   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2574   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2581   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2588   .bss.MappedServoAngle:0000000000000000 $d
     /tmp/ccADwVa0.s:2595   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2602   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2609   .bss.MiniBot_Qdata_Buf:0000000000000000 $d
     /tmp/ccADwVa0.s:2616   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2623   .bss.MotorControlTaskHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2630   .bss.MotorControl_Qdata_Buf:0000000000000000 $d
     /tmp/ccADwVa0.s:2637   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccADwVa0.s:2644   .bss.Qdata:0000000000000000 $d
     /tmp/ccADwVa0.s:2651   .bss.StateMutexHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2658   .bss.Temp_Qdata_Buf:0000000000000000 $d
     /tmp/ccADwVa0.s:2665   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccADwVa0.s:2672   .bss.hadc1:0000000000000000 $d
     /tmp/ccADwVa0.s:2679   .bss.hi2c1:0000000000000000 $d
     /tmp/ccADwVa0.s:2686   .bss.hi2c2:0000000000000000 $d
     /tmp/ccADwVa0.s:2693   .bss.huart2:0000000000000000 $d
     /tmp/ccADwVa0.s:2704   .bss.state:0000000000000000 $d
     /tmp/ccADwVa0.s:2710   .bss.tempFailedToPostMessage:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
ARM GAS  /tmp/ccADwVa0.s 			page 96


HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
xQueueReceive
xQueueGenericSend
HAL_GPIO_ReadPin
I2C_LCD_Init
I2C_LCD_SetCursor
I2C_LCD_WriteString
I2C_LCD_Clear
PCA9685_Init
PCA9685_SetServoAngle
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
