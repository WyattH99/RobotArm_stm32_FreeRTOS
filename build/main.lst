ARM GAS  /tmp/ccFQNcvb.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 456D6572 		.ascii	"EmergencyStopTa\000"
  29      67656E63 
  29      7953746F 
  29      70546100 
  30              		.align	2
  31              	.LC12:
  32 004c 4D6F746F 		.ascii	"MotorControlTas\000"
  32      72436F6E 
  32      74726F6C 
  32      54617300 
  33              		.align	2
  34              	.LC14:
  35 005c 4C434450 		.ascii	"LCDPrintTask\000"
  35      72696E74 
  35      5461736B 
  35      00
  36              		.text
  37              	.Ltext0:
ARM GAS  /tmp/ccFQNcvb.s 			page 2


  38              		.cfi_sections	.debug_frame
  39              		.section	.text.MX_GPIO_Init,"ax",%progbits
  40              		.align	1
  41              		.arch armv7e-m
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	MX_GPIO_Init:
  48              	.LFB250:
  49              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint32_t PotMin;
  40:Core/Src/main.c **** 	uint32_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
ARM GAS  /tmp/ccFQNcvb.s 			page 3


  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t BasePotMin;
  60:Core/Src/main.c **** 	uint32_t BasePotMax;
  61:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  62:Core/Src/main.c **** 	uint32_t ShoulderPotMin;
  63:Core/Src/main.c **** 	uint32_t ShoulderPotMax;
  64:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  65:Core/Src/main.c **** 	uint32_t ElbowPotMin;
  66:Core/Src/main.c **** 	uint32_t ElbowPotMax;
  67:Core/Src/main.c **** 	uint32_t WristPotValue;
  68:Core/Src/main.c **** 	uint32_t WristPotMin;
  69:Core/Src/main.c **** 	uint32_t WristPotMax;
  70:Core/Src/main.c **** 	uint8_t  GripperValue;
  71:Core/Src/main.c **** } MiniBot_Qdata;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  74:Core/Src/main.c **** uint32_t PotRawValue[4];
  75:Core/Src/main.c **** volatile MiniBot_Qdata MiniBot_Qdata_Buf;
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /*
  79:Core/Src/main.c ****  * MegaBot Structures
  80:Core/Src/main.c ****  */
  81:Core/Src/main.c **** typedef struct{
  82:Core/Src/main.c **** 	uint8_t  ServoNum;
  83:Core/Src/main.c **** 	uint16_t ServoMin;
  84:Core/Src/main.c **** 	uint16_t ServoMax;
  85:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  86:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** typedef struct{
  89:Core/Src/main.c **** 	uint8_t  ServoNum;
  90:Core/Src/main.c **** 	uint16_t ServoMin;
  91:Core/Src/main.c **** 	uint16_t ServoMax;
  92:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  93:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** typedef struct{
  96:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  97:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
  98:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  99:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
 100:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
 101:Core/Src/main.c **** } MegaBot_Config_t;
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** volatile MiniBot_Qdata Temp_Qdata_Buf;
ARM GAS  /tmp/ccFQNcvb.s 			page 4


 104:Core/Src/main.c **** volatile MiniBot_Qdata MotorControl_Qdata_Buf;
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** uint8_t tempFailedToPostMessage = 0;
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** enum State{
 110:Core/Src/main.c ****   Init,
 111:Core/Src/main.c ****   Ready,
 112:Core/Src/main.c ****   Running,
 113:Core/Src/main.c ****   EmergencyStop
 114:Core/Src/main.c **** };
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** volatile enum State state = Init;
 117:Core/Src/main.c **** 
 118:Core/Src/main.c **** /* USER CODE END PTD */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 121:Core/Src/main.c **** /* USER CODE BEGIN PD */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c **** /* USER CODE END PD */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 126:Core/Src/main.c **** /* USER CODE BEGIN PM */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /* USER CODE END PM */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 131:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 134:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** UART_HandleTypeDef huart2;
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** osThreadId defaultTaskHandle;
 139:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 140:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 141:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 142:Core/Src/main.c **** osThreadId EmergencyStopTaHandle;
 143:Core/Src/main.c **** osThreadId MotorControlTasHandle;
 144:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 145:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 146:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 147:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 148:Core/Src/main.c **** osMutexId StateMutexHandle;
 149:Core/Src/main.c **** /* USER CODE BEGIN PV */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /* USER CODE END PV */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 154:Core/Src/main.c **** void SystemClock_Config(void);
 155:Core/Src/main.c **** static void MX_GPIO_Init(void);
 156:Core/Src/main.c **** static void MX_ADC1_Init(void);
 157:Core/Src/main.c **** static void MX_I2C1_Init(void);
 158:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 159:Core/Src/main.c **** static void MX_I2C2_Init(void);
 160:Core/Src/main.c **** void StartDefaultTask(void const * argument);
ARM GAS  /tmp/ccFQNcvb.s 			page 5


 161:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 162:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
 163:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 164:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument);
 165:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 166:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 171:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot);
 172:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot);
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot);
 177:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 178:Core/Src/main.c **** 
 179:Core/Src/main.c **** /* USER CODE END PFP */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 182:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /* USER CODE END 0 */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c **** /**
 188:Core/Src/main.c ****   * @brief  The application entry point.
 189:Core/Src/main.c ****   * @retval int
 190:Core/Src/main.c ****   */
 191:Core/Src/main.c **** int main(void)
 192:Core/Src/main.c **** {
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END 1 */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 201:Core/Src/main.c ****   HAL_Init();
 202:Core/Src/main.c **** 
 203:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* USER CODE END Init */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* Configure the system clock */
 208:Core/Src/main.c ****   SystemClock_Config();
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END SysInit */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* Initialize all configured peripherals */
 215:Core/Src/main.c ****   MX_GPIO_Init();
 216:Core/Src/main.c ****   MX_ADC1_Init();
 217:Core/Src/main.c ****   MX_I2C1_Init();
ARM GAS  /tmp/ccFQNcvb.s 			page 6


 218:Core/Src/main.c ****   MX_USART2_UART_Init();
 219:Core/Src/main.c ****   MX_I2C2_Init();
 220:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* USER CODE END 2 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* Create the mutex(es) */
 225:Core/Src/main.c ****   /* definition and creation of StateMutex */
 226:Core/Src/main.c ****   osMutexDef(StateMutex);
 227:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 230:Core/Src/main.c ****   /* add mutexes, ... */
 231:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 234:Core/Src/main.c ****   /* add semaphores, ... */
 235:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 238:Core/Src/main.c ****   /* start timers, add new ones, ... */
 239:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* Create the queue(s) */
 242:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 243:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 244:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 247:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, MiniBot_Qdata);
 248:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 251:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, uint16_t);
 252:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 255:Core/Src/main.c ****   /* add queues, ... */
 256:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* Create the thread(s) */
 259:Core/Src/main.c ****   /* definition and creation of defaultTask */
 260:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 261:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 264:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityNormal, 0, 128);
 265:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 268:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 512);
 269:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 272:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityHigh, 0, 512);
 273:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 274:Core/Src/main.c **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 7


 275:Core/Src/main.c ****   /* definition and creation of EmergencyStopTa */
 276:Core/Src/main.c ****   osThreadDef(EmergencyStopTa, EmergencyStopTaskEntry, osPriorityNormal, 0, 128);
 277:Core/Src/main.c ****   EmergencyStopTaHandle = osThreadCreate(osThread(EmergencyStopTa), NULL);
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* definition and creation of MotorControlTas */
 280:Core/Src/main.c ****   osThreadDef(MotorControlTas, MotorControlTaskEntry, osPriorityNormal, 0, 512);
 281:Core/Src/main.c ****   MotorControlTasHandle = osThreadCreate(osThread(MotorControlTas), NULL);
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 284:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 285:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 288:Core/Src/main.c ****   /* add threads, ... */
 289:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* Start scheduler */
 292:Core/Src/main.c ****   osKernelStart();
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* Infinite loop */
 297:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 298:Core/Src/main.c ****   while (1)
 299:Core/Src/main.c ****   {
 300:Core/Src/main.c ****     /* USER CODE END WHILE */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   /* USER CODE END 3 */
 305:Core/Src/main.c **** }
 306:Core/Src/main.c **** 
 307:Core/Src/main.c **** /**
 308:Core/Src/main.c ****   * @brief System Clock Configuration
 309:Core/Src/main.c ****   * @retval None
 310:Core/Src/main.c ****   */
 311:Core/Src/main.c **** void SystemClock_Config(void)
 312:Core/Src/main.c **** {
 313:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 314:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 317:Core/Src/main.c ****   */
 318:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 319:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 322:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 323:Core/Src/main.c ****   */
 324:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 325:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 326:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 327:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 328:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
ARM GAS  /tmp/ccFQNcvb.s 			page 8


 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 334:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 340:Core/Src/main.c ****   */
 341:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 342:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 343:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 344:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 345:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 346:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 349:Core/Src/main.c ****   {
 350:Core/Src/main.c ****     Error_Handler();
 351:Core/Src/main.c ****   }
 352:Core/Src/main.c **** }
 353:Core/Src/main.c **** 
 354:Core/Src/main.c **** /**
 355:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 356:Core/Src/main.c ****   * @param None
 357:Core/Src/main.c ****   * @retval None
 358:Core/Src/main.c ****   */
 359:Core/Src/main.c **** static void MX_ADC1_Init(void)
 360:Core/Src/main.c **** {
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 373:Core/Src/main.c ****   */
 374:Core/Src/main.c ****   hadc1.Instance = ADC1;
 375:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 376:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 377:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 378:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 379:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 380:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 4;
 381:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 382:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 383:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 384:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 385:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 386:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 387:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 388:Core/Src/main.c ****   {
ARM GAS  /tmp/ccFQNcvb.s 			page 9


 389:Core/Src/main.c ****     Error_Handler();
 390:Core/Src/main.c ****   }
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 393:Core/Src/main.c ****   */
 394:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 395:Core/Src/main.c ****   sConfig.Rank = 1;
 396:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 397:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 398:Core/Src/main.c ****   {
 399:Core/Src/main.c ****     Error_Handler();
 400:Core/Src/main.c ****   }
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 403:Core/Src/main.c ****   */
 404:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 405:Core/Src/main.c ****   sConfig.Rank = 2;
 406:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 407:Core/Src/main.c ****   {
 408:Core/Src/main.c ****     Error_Handler();
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 412:Core/Src/main.c ****   */
 413:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 414:Core/Src/main.c ****   sConfig.Rank = 3;
 415:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 416:Core/Src/main.c ****   {
 417:Core/Src/main.c ****     Error_Handler();
 418:Core/Src/main.c ****   }
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 421:Core/Src/main.c ****   */
 422:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 423:Core/Src/main.c ****   sConfig.Rank = 4;
 424:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 425:Core/Src/main.c ****   {
 426:Core/Src/main.c ****     Error_Handler();
 427:Core/Src/main.c ****   }
 428:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** }
 433:Core/Src/main.c **** 
 434:Core/Src/main.c **** /**
 435:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 436:Core/Src/main.c ****   * @param None
 437:Core/Src/main.c ****   * @retval None
 438:Core/Src/main.c ****   */
 439:Core/Src/main.c **** static void MX_I2C1_Init(void)
 440:Core/Src/main.c **** {
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 445:Core/Src/main.c **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 10


 446:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 449:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 450:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 451:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 452:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 453:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 454:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 456:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 457:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 458:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 459:Core/Src/main.c ****   {
 460:Core/Src/main.c ****     Error_Handler();
 461:Core/Src/main.c ****   }
 462:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c **** }
 467:Core/Src/main.c **** 
 468:Core/Src/main.c **** /**
 469:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 470:Core/Src/main.c ****   * @param None
 471:Core/Src/main.c ****   * @retval None
 472:Core/Src/main.c ****   */
 473:Core/Src/main.c **** static void MX_I2C2_Init(void)
 474:Core/Src/main.c **** {
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 477:Core/Src/main.c **** 
 478:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 483:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 484:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 485:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 486:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 487:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 488:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 490:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 491:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 492:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 493:Core/Src/main.c ****   {
 494:Core/Src/main.c ****     Error_Handler();
 495:Core/Src/main.c ****   }
 496:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** }
 501:Core/Src/main.c **** 
 502:Core/Src/main.c **** /**
ARM GAS  /tmp/ccFQNcvb.s 			page 11


 503:Core/Src/main.c ****   * @brief USART2 Initialization Function
 504:Core/Src/main.c ****   * @param None
 505:Core/Src/main.c ****   * @retval None
 506:Core/Src/main.c ****   */
 507:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 508:Core/Src/main.c **** {
 509:Core/Src/main.c **** 
 510:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 511:Core/Src/main.c **** 
 512:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 513:Core/Src/main.c **** 
 514:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 517:Core/Src/main.c ****   huart2.Instance = USART2;
 518:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 519:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 520:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 521:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 522:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 523:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 524:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 525:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 526:Core/Src/main.c ****   {
 527:Core/Src/main.c ****     Error_Handler();
 528:Core/Src/main.c ****   }
 529:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 532:Core/Src/main.c **** 
 533:Core/Src/main.c **** }
 534:Core/Src/main.c **** 
 535:Core/Src/main.c **** /**
 536:Core/Src/main.c ****   * @brief GPIO Initialization Function
 537:Core/Src/main.c ****   * @param None
 538:Core/Src/main.c ****   * @retval None
 539:Core/Src/main.c ****   */
 540:Core/Src/main.c **** static void MX_GPIO_Init(void)
 541:Core/Src/main.c **** {
  50              		.loc 1 541 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 40
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  55              		.cfi_def_cfa_offset 24
  56              		.cfi_offset 4, -24
  57              		.cfi_offset 5, -20
  58              		.cfi_offset 6, -16
  59              		.cfi_offset 7, -12
  60              		.cfi_offset 8, -8
  61              		.cfi_offset 14, -4
  62 0004 8AB0     		sub	sp, sp, #40
  63              		.cfi_def_cfa_offset 64
 542:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  64              		.loc 1 542 3 view .LVU1
  65              		.loc 1 542 20 is_stmt 0 view .LVU2
  66 0006 0024     		movs	r4, #0
ARM GAS  /tmp/ccFQNcvb.s 			page 12


  67 0008 0594     		str	r4, [sp, #20]
  68 000a 0694     		str	r4, [sp, #24]
  69 000c 0794     		str	r4, [sp, #28]
  70 000e 0894     		str	r4, [sp, #32]
  71 0010 0994     		str	r4, [sp, #36]
 543:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 544:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 545:Core/Src/main.c **** 
 546:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 547:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  72              		.loc 1 547 3 is_stmt 1 view .LVU3
  73              	.LBB4:
  74              		.loc 1 547 3 view .LVU4
  75 0012 0194     		str	r4, [sp, #4]
  76              		.loc 1 547 3 view .LVU5
  77 0014 304B     		ldr	r3, .L3
  78 0016 1A6B     		ldr	r2, [r3, #48]
  79 0018 42F00402 		orr	r2, r2, #4
  80 001c 1A63     		str	r2, [r3, #48]
  81              		.loc 1 547 3 view .LVU6
  82 001e 1A6B     		ldr	r2, [r3, #48]
  83 0020 02F00402 		and	r2, r2, #4
  84 0024 0192     		str	r2, [sp, #4]
  85              		.loc 1 547 3 view .LVU7
  86 0026 019A     		ldr	r2, [sp, #4]
  87              	.LBE4:
  88              		.loc 1 547 3 view .LVU8
 548:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  89              		.loc 1 548 3 view .LVU9
  90              	.LBB5:
  91              		.loc 1 548 3 view .LVU10
  92 0028 0294     		str	r4, [sp, #8]
  93              		.loc 1 548 3 view .LVU11
  94 002a 1A6B     		ldr	r2, [r3, #48]
  95 002c 42F08002 		orr	r2, r2, #128
  96 0030 1A63     		str	r2, [r3, #48]
  97              		.loc 1 548 3 view .LVU12
  98 0032 1A6B     		ldr	r2, [r3, #48]
  99 0034 02F08002 		and	r2, r2, #128
 100 0038 0292     		str	r2, [sp, #8]
 101              		.loc 1 548 3 view .LVU13
 102 003a 029A     		ldr	r2, [sp, #8]
 103              	.LBE5:
 104              		.loc 1 548 3 view .LVU14
 549:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 105              		.loc 1 549 3 view .LVU15
 106              	.LBB6:
 107              		.loc 1 549 3 view .LVU16
 108 003c 0394     		str	r4, [sp, #12]
 109              		.loc 1 549 3 view .LVU17
 110 003e 1A6B     		ldr	r2, [r3, #48]
 111 0040 42F00102 		orr	r2, r2, #1
 112 0044 1A63     		str	r2, [r3, #48]
 113              		.loc 1 549 3 view .LVU18
 114 0046 1A6B     		ldr	r2, [r3, #48]
 115 0048 02F00102 		and	r2, r2, #1
 116 004c 0392     		str	r2, [sp, #12]
ARM GAS  /tmp/ccFQNcvb.s 			page 13


 117              		.loc 1 549 3 view .LVU19
 118 004e 039A     		ldr	r2, [sp, #12]
 119              	.LBE6:
 120              		.loc 1 549 3 view .LVU20
 550:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 121              		.loc 1 550 3 view .LVU21
 122              	.LBB7:
 123              		.loc 1 550 3 view .LVU22
 124 0050 0494     		str	r4, [sp, #16]
 125              		.loc 1 550 3 view .LVU23
 126 0052 1A6B     		ldr	r2, [r3, #48]
 127 0054 42F00202 		orr	r2, r2, #2
 128 0058 1A63     		str	r2, [r3, #48]
 129              		.loc 1 550 3 view .LVU24
 130 005a 1B6B     		ldr	r3, [r3, #48]
 131 005c 03F00203 		and	r3, r3, #2
 132 0060 0493     		str	r3, [sp, #16]
 133              		.loc 1 550 3 view .LVU25
 134 0062 049B     		ldr	r3, [sp, #16]
 135              	.LBE7:
 136              		.loc 1 550 3 view .LVU26
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 553:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 137              		.loc 1 553 3 view .LVU27
 138 0064 1D4E     		ldr	r6, .L3+4
 139 0066 2246     		mov	r2, r4
 140 0068 2021     		movs	r1, #32
 141 006a 3046     		mov	r0, r6
 142 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL0:
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 556:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 556 3 view .LVU28
 145              		.loc 1 556 23 is_stmt 0 view .LVU29
 146 0070 4FF40053 		mov	r3, #8192
 147 0074 0593     		str	r3, [sp, #20]
 557:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 148              		.loc 1 557 3 is_stmt 1 view .LVU30
 149              		.loc 1 557 24 is_stmt 0 view .LVU31
 150 0076 4FF40418 		mov	r8, #2162688
 151 007a CDF81880 		str	r8, [sp, #24]
 558:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 558 3 is_stmt 1 view .LVU32
 153              		.loc 1 558 24 is_stmt 0 view .LVU33
 154 007e 0794     		str	r4, [sp, #28]
 559:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 155              		.loc 1 559 3 is_stmt 1 view .LVU34
 156 0080 05A9     		add	r1, sp, #20
 157 0082 1748     		ldr	r0, .L3+8
 158 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL1:
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 562:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 160              		.loc 1 562 3 view .LVU35
ARM GAS  /tmp/ccFQNcvb.s 			page 14


 161              		.loc 1 562 23 is_stmt 0 view .LVU36
 162 0088 2027     		movs	r7, #32
 163 008a 0597     		str	r7, [sp, #20]
 563:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 164              		.loc 1 563 3 is_stmt 1 view .LVU37
 165              		.loc 1 563 24 is_stmt 0 view .LVU38
 166 008c 0125     		movs	r5, #1
 167 008e 0695     		str	r5, [sp, #24]
 564:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 168              		.loc 1 564 3 is_stmt 1 view .LVU39
 169              		.loc 1 564 24 is_stmt 0 view .LVU40
 170 0090 0794     		str	r4, [sp, #28]
 565:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 171              		.loc 1 565 3 is_stmt 1 view .LVU41
 172              		.loc 1 565 25 is_stmt 0 view .LVU42
 173 0092 0894     		str	r4, [sp, #32]
 566:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 174              		.loc 1 566 3 is_stmt 1 view .LVU43
 175 0094 05A9     		add	r1, sp, #20
 176 0096 3046     		mov	r0, r6
 177 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 178              	.LVL2:
 567:Core/Src/main.c **** 
 568:Core/Src/main.c ****   /*Configure GPIO pin : EmergencyStopBtn_Pin */
 569:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin;
 179              		.loc 1 569 3 view .LVU44
 180              		.loc 1 569 23 is_stmt 0 view .LVU45
 181 009c 4FF48073 		mov	r3, #256
 182 00a0 0593     		str	r3, [sp, #20]
 570:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 183              		.loc 1 570 3 is_stmt 1 view .LVU46
 184              		.loc 1 570 24 is_stmt 0 view .LVU47
 185 00a2 CDF81880 		str	r8, [sp, #24]
 571:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 186              		.loc 1 571 3 is_stmt 1 view .LVU48
 187              		.loc 1 571 24 is_stmt 0 view .LVU49
 188 00a6 0795     		str	r5, [sp, #28]
 572:Core/Src/main.c ****   HAL_GPIO_Init(EmergencyStopBtn_GPIO_Port, &GPIO_InitStruct);
 189              		.loc 1 572 3 is_stmt 1 view .LVU50
 190 00a8 05A9     		add	r1, sp, #20
 191 00aa 3046     		mov	r0, r6
 192 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 193              	.LVL3:
 573:Core/Src/main.c **** 
 574:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 575:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 194              		.loc 1 575 3 view .LVU51
 195              		.loc 1 575 23 is_stmt 0 view .LVU52
 196 00b0 4FF40073 		mov	r3, #512
 197 00b4 0593     		str	r3, [sp, #20]
 576:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 198              		.loc 1 576 3 is_stmt 1 view .LVU53
 199              		.loc 1 576 24 is_stmt 0 view .LVU54
 200 00b6 0694     		str	r4, [sp, #24]
 577:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 201              		.loc 1 577 3 is_stmt 1 view .LVU55
 202              		.loc 1 577 24 is_stmt 0 view .LVU56
ARM GAS  /tmp/ccFQNcvb.s 			page 15


 203 00b8 0795     		str	r5, [sp, #28]
 578:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 204              		.loc 1 578 3 is_stmt 1 view .LVU57
 205 00ba 05A9     		add	r1, sp, #20
 206 00bc 3046     		mov	r0, r6
 207 00be FFF7FEFF 		bl	HAL_GPIO_Init
 208              	.LVL4:
 579:Core/Src/main.c **** 
 580:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 581:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 209              		.loc 1 581 3 view .LVU58
 210              		.loc 1 581 23 is_stmt 0 view .LVU59
 211 00c2 0597     		str	r7, [sp, #20]
 582:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 212              		.loc 1 582 3 is_stmt 1 view .LVU60
 213              		.loc 1 582 24 is_stmt 0 view .LVU61
 214 00c4 0694     		str	r4, [sp, #24]
 583:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 215              		.loc 1 583 3 is_stmt 1 view .LVU62
 216              		.loc 1 583 24 is_stmt 0 view .LVU63
 217 00c6 0795     		str	r5, [sp, #28]
 584:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 218              		.loc 1 584 3 is_stmt 1 view .LVU64
 219 00c8 05A9     		add	r1, sp, #20
 220 00ca 0648     		ldr	r0, .L3+12
 221 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 222              	.LVL5:
 585:Core/Src/main.c **** 
 586:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 587:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 588:Core/Src/main.c **** }
 223              		.loc 1 588 1 is_stmt 0 view .LVU65
 224 00d0 0AB0     		add	sp, sp, #40
 225              		.cfi_def_cfa_offset 24
 226              		@ sp needed
 227 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 228              	.L4:
 229 00d6 00BF     		.align	2
 230              	.L3:
 231 00d8 00380240 		.word	1073887232
 232 00dc 00000240 		.word	1073872896
 233 00e0 00080240 		.word	1073874944
 234 00e4 00040240 		.word	1073873920
 235              		.cfi_endproc
 236              	.LFE250:
 238              		.section	.text.StartDefaultTask,"ax",%progbits
 239              		.align	1
 240              		.global	StartDefaultTask
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu fpv4-sp-d16
 246              	StartDefaultTask:
 247              	.LFB257:
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 591:Core/Src/main.c **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 16


 592:Core/Src/main.c **** 
 593:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 594:Core/Src/main.c **** 	// Configure Each of the joints
 595:Core/Src/main.c **** 
 596:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 597:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 598:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 599:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 600:Core/Src/main.c **** 
 601:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 602:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 604:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 605:Core/Src/main.c **** 
 606:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 607:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 609:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 610:Core/Src/main.c **** 
 611:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 612:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 614:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 615:Core/Src/main.c **** 
 616:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 617:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 618:Core/Src/main.c **** }
 619:Core/Src/main.c **** 
 620:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot){
 621:Core/Src/main.c ****   // Configure Each of the joints
 622:Core/Src/main.c ****   MegaBot->Base.ServoNum = 0;
 623:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 624:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 625:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 626:Core/Src/main.c **** 
 627:Core/Src/main.c ****   MegaBot->Shoulder.ServoNum = 1;
 628:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 630:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 631:Core/Src/main.c **** 
 632:Core/Src/main.c ****   MegaBot->Elbow.ServoNum = 2;
 633:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 635:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 636:Core/Src/main.c **** 
 637:Core/Src/main.c ****   MegaBot->Wrist.ServoNum = 3;
 638:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 640:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 641:Core/Src/main.c **** 
 642:Core/Src/main.c ****   MegaBot->Gripper.ServoNum = 4;
 643:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 645:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 646:Core/Src/main.c **** 
 647:Core/Src/main.c ****   ServoDriverInit(MegaBot);
 648:Core/Src/main.c **** }
ARM GAS  /tmp/ccFQNcvb.s 			page 17


 649:Core/Src/main.c **** 
 650:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot){
 651:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 652:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 657:Core/Src/main.c **** }
 658:Core/Src/main.c **** 
 659:Core/Src/main.c **** 
 660:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 661:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 662:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 663:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 664:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 665:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 666:Core/Src/main.c ****     }else{
 667:Core/Src/main.c ****       *QPotData = PotRawValue;
 668:Core/Src/main.c ****     }
 669:Core/Src/main.c ****     if(Joint->PotInvertRange){
 670:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 671:Core/Src/main.c ****     }
 672:Core/Src/main.c ****   }
 673:Core/Src/main.c **** }
 674:Core/Src/main.c **** 
 675:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot){
 676:Core/Src/main.c ****   // MAP each of the angles
 677:Core/Src/main.c ****   // Send each of new Joints angle
 678:Core/Src/main.c ****   float MappedServoAngle;
 679:Core/Src/main.c ****   // Base
 680:Core/Src/main.c ****   MappedServoAngle = MAP(MiniBot->BasePotValue, MiniBot->BasePotMin, MiniBot->BasePotMax, MegaBot->
 681:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle);
 682:Core/Src/main.c ****   // Shoulder
 683:Core/Src/main.c ****   MappedServoAngle = MAP(MiniBot->ShoulderPotValue, MiniBot->ShoulderPotMin, MiniBot->ShoulderPotMa
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle);
 685:Core/Src/main.c ****   // Elbow
 686:Core/Src/main.c ****   MappedServoAngle = MAP(MiniBot->ElbowPotValue, MiniBot->ElbowPotMin, MiniBot->ElbowPotMax, MegaBo
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle);
 688:Core/Src/main.c ****   // Wrist
 689:Core/Src/main.c ****   MappedServoAngle = MAP(MiniBot->WristPotValue, MiniBot->WristPotMin, MiniBot->WristPotMax, MegaBo
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle);
 691:Core/Src/main.c ****   // Gripper
 692:Core/Src/main.c ****   if(MiniBot->GripperValue){
 693:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 694:Core/Src/main.c ****   }else{
 695:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMax);
 696:Core/Src/main.c ****   }
 697:Core/Src/main.c **** }
 698:Core/Src/main.c **** 
 699:Core/Src/main.c **** // Used to map the Potentiometer Range (0-4096) to the Servo Range (0-180)
 700:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 701:Core/Src/main.c **** {
 702:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 703:Core/Src/main.c **** }
 704:Core/Src/main.c **** 
 705:Core/Src/main.c **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 18


 706:Core/Src/main.c **** /* USER CODE END 4 */
 707:Core/Src/main.c **** 
 708:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 709:Core/Src/main.c **** /**
 710:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 711:Core/Src/main.c ****   * @param  argument: Not used
 712:Core/Src/main.c ****   * @retval None
 713:Core/Src/main.c ****   */
 714:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 715:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 716:Core/Src/main.c **** {
 248              		.loc 1 716 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ Volatile: function does not return.
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL6:
 254              		.loc 1 716 1 is_stmt 0 view .LVU67
 255 0000 08B5     		push	{r3, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 3, -8
 258              		.cfi_offset 14, -4
 259              	.LVL7:
 260              	.L6:
 717:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 718:Core/Src/main.c ****   /* Infinite loop */
 719:Core/Src/main.c ****   for(;;)
 261              		.loc 1 719 3 is_stmt 1 discriminator 1 view .LVU68
 720:Core/Src/main.c ****   {
 721:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 262              		.loc 1 721 5 discriminator 1 view .LVU69
 263 0002 0022     		movs	r2, #0
 264 0004 2021     		movs	r1, #32
 265 0006 0448     		ldr	r0, .L8
 266 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 267              	.LVL8:
 722:Core/Src/main.c ****     osDelay(1000);
 268              		.loc 1 722 5 discriminator 1 view .LVU70
 269 000c 4FF47A70 		mov	r0, #1000
 270 0010 FFF7FEFF 		bl	osDelay
 271              	.LVL9:
 719:Core/Src/main.c ****   {
 272              		.loc 1 719 8 discriminator 1 view .LVU71
 273 0014 F5E7     		b	.L6
 274              	.L9:
 275 0016 00BF     		.align	2
 276              	.L8:
 277 0018 00000240 		.word	1073872896
 278              		.cfi_endproc
 279              	.LFE257:
 281              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 282              		.align	1
 283              		.global	BlinkLEDTaskEntry
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccFQNcvb.s 			page 19


 289              	BlinkLEDTaskEntry:
 290              	.LFB258:
 723:Core/Src/main.c ****   }
 724:Core/Src/main.c ****   /* USER CODE END 5 */
 725:Core/Src/main.c **** }
 726:Core/Src/main.c **** 
 727:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 728:Core/Src/main.c **** /**
 729:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 730:Core/Src/main.c **** * @param argument: Not used
 731:Core/Src/main.c **** * @retval None
 732:Core/Src/main.c **** */
 733:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 734:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 735:Core/Src/main.c **** {
 291              		.loc 1 735 1 view -0
 292              		.cfi_startproc
 293              		@ Volatile: function does not return.
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL10:
 297              		.loc 1 735 1 is_stmt 0 view .LVU73
 298 0000 08B5     		push	{r3, lr}
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 3, -8
 301              		.cfi_offset 14, -4
 302              	.LVL11:
 303              	.L11:
 736:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 737:Core/Src/main.c ****   /* Infinite loop */
 738:Core/Src/main.c ****   for(;;)
 304              		.loc 1 738 3 is_stmt 1 discriminator 1 view .LVU74
 739:Core/Src/main.c ****   {
 740:Core/Src/main.c ****     
 741:Core/Src/main.c ****     osDelay(500);
 305              		.loc 1 741 5 discriminator 1 view .LVU75
 306 0002 4FF4FA70 		mov	r0, #500
 307 0006 FFF7FEFF 		bl	osDelay
 308              	.LVL12:
 742:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 309              		.loc 1 742 5 discriminator 1 view .LVU76
 310 000a 0122     		movs	r2, #1
 311 000c 2021     		movs	r1, #32
 312 000e 0448     		ldr	r0, .L13
 313 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 314              	.LVL13:
 743:Core/Src/main.c ****     osDelay(500);
 315              		.loc 1 743 5 discriminator 1 view .LVU77
 316 0014 4FF4FA70 		mov	r0, #500
 317 0018 FFF7FEFF 		bl	osDelay
 318              	.LVL14:
 738:Core/Src/main.c ****   {
 319              		.loc 1 738 8 discriminator 1 view .LVU78
 320 001c F1E7     		b	.L11
 321              	.L14:
 322 001e 00BF     		.align	2
 323              	.L13:
ARM GAS  /tmp/ccFQNcvb.s 			page 20


 324 0020 00000240 		.word	1073872896
 325              		.cfi_endproc
 326              	.LFE258:
 328              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 329              		.align	1
 330              		.global	LCDPrintTaskEntry
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	LCDPrintTaskEntry:
 337              	.LFB263:
 744:Core/Src/main.c ****   }
 745:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 746:Core/Src/main.c **** }
 747:Core/Src/main.c **** 
 748:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 749:Core/Src/main.c **** /**
 750:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 751:Core/Src/main.c **** * @param argument: Not used
 752:Core/Src/main.c **** * @retval None
 753:Core/Src/main.c **** */
 754:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 755:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 756:Core/Src/main.c **** {
 757:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 758:Core/Src/main.c **** 
 759:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 760:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 761:Core/Src/main.c **** 
 762:Core/Src/main.c ****   
 763:Core/Src/main.c ****   // HAL_ADC_Start_DMA(&hadc1, PotRawValue, 4);
 764:Core/Src/main.c **** 
 765:Core/Src/main.c **** 	/* Infinite loop */
 766:Core/Src/main.c **** 	for(;;)
 767:Core/Src/main.c **** 	{
 768:Core/Src/main.c ****     // for(uint8_t i=0; i<4; i++){
 769:Core/Src/main.c ****     //   HAL_ADC_Start(&hadc1);
 770:Core/Src/main.c ****     //   HAL_ADC_PollForConversion(&hadc1, 1);
 771:Core/Src/main.c ****     //   PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 772:Core/Src/main.c ****     // }
 773:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 774:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 775:Core/Src/main.c ****     PotRawValue[0] = HAL_ADC_GetValue(&hadc1);
 776:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 777:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 778:Core/Src/main.c ****     PotRawValue[1] = HAL_ADC_GetValue(&hadc1);
 779:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 780:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 781:Core/Src/main.c ****     PotRawValue[2] = HAL_ADC_GetValue(&hadc1);
 782:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 783:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 784:Core/Src/main.c ****     PotRawValue[3] = HAL_ADC_GetValue(&hadc1);
 785:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 786:Core/Src/main.c **** 
 787:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 788:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
ARM GAS  /tmp/ccFQNcvb.s 			page 21


 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 790:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 791:Core/Src/main.c **** 
 792:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 793:Core/Src/main.c ****     
 794:Core/Src/main.c ****     if(MiniBotInputQueueHandle != 0){
 795:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 796:Core/Src/main.c ****         // failed to post message
 797:Core/Src/main.c ****         tempFailedToPostMessage = 1;
 798:Core/Src/main.c ****       }
 799:Core/Src/main.c ****     }
 800:Core/Src/main.c ****   
 801:Core/Src/main.c **** 
 802:Core/Src/main.c ****     osDelay(1);
 803:Core/Src/main.c **** 	}
 804:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 805:Core/Src/main.c **** }
 806:Core/Src/main.c **** 
 807:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 808:Core/Src/main.c **** /**
 809:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 810:Core/Src/main.c **** * @param argument: Not used
 811:Core/Src/main.c **** * @retval None
 812:Core/Src/main.c **** */
 813:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 814:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 815:Core/Src/main.c **** {
 816:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 817:Core/Src/main.c **** 
 818:Core/Src/main.c ****   // enum State state = Init;
 819:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 820:Core/Src/main.c **** 
 821:Core/Src/main.c ****   /* Infinite loop */
 822:Core/Src/main.c ****   for(;;)
 823:Core/Src/main.c ****   {
 824:Core/Src/main.c ****     if(state == Init){
 825:Core/Src/main.c ****       state = Ready;
 826:Core/Src/main.c **** 
 827:Core/Src/main.c ****     }else if(state == Ready){
 828:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 829:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 830:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 831:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 832:Core/Src/main.c ****               state++;
 833:Core/Src/main.c ****             }
 834:Core/Src/main.c ****           }
 835:Core/Src/main.c ****         }
 836:Core/Src/main.c ****       }
 837:Core/Src/main.c **** 
 838:Core/Src/main.c ****     }else if(state == Running){
 839:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 840:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 841:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 842:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 843:Core/Src/main.c ****       }
 844:Core/Src/main.c ****       
 845:Core/Src/main.c ****     }
ARM GAS  /tmp/ccFQNcvb.s 			page 22


 846:Core/Src/main.c ****     
 847:Core/Src/main.c ****     if(state == EmergencyStop){
 848:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 849:Core/Src/main.c ****     }
 850:Core/Src/main.c **** 
 851:Core/Src/main.c **** 
 852:Core/Src/main.c **** 
 853:Core/Src/main.c ****     osDelay(1);
 854:Core/Src/main.c ****   }
 855:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 856:Core/Src/main.c **** }
 857:Core/Src/main.c **** 
 858:Core/Src/main.c **** /* USER CODE BEGIN Header_EmergencyStopTaskEntry */
 859:Core/Src/main.c **** /**
 860:Core/Src/main.c **** * @brief Function implementing the EmergencyStopTa thread.
 861:Core/Src/main.c **** * @param argument: Not used
 862:Core/Src/main.c **** * @retval None
 863:Core/Src/main.c **** */
 864:Core/Src/main.c **** /* USER CODE END Header_EmergencyStopTaskEntry */
 865:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument)
 866:Core/Src/main.c **** {
 867:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 868:Core/Src/main.c ****   /* Infinite loop */
 869:Core/Src/main.c ****   for(;;)
 870:Core/Src/main.c ****   {
 871:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 872:Core/Src/main.c ****       
 873:Core/Src/main.c ****     }
 874:Core/Src/main.c **** 
 875:Core/Src/main.c **** 
 876:Core/Src/main.c ****     osDelay(1);
 877:Core/Src/main.c ****   }
 878:Core/Src/main.c ****   /* USER CODE END EmergencyStopTaskEntry */
 879:Core/Src/main.c **** }
 880:Core/Src/main.c **** 
 881:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 882:Core/Src/main.c **** /**
 883:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 884:Core/Src/main.c **** * @param argument: Not used
 885:Core/Src/main.c **** * @retval None
 886:Core/Src/main.c **** */
 887:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 888:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
 889:Core/Src/main.c **** {
 890:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 891:Core/Src/main.c **** 
 892:Core/Src/main.c ****   MegaBot_Config_t MegaBot;
 893:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 894:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 895:Core/Src/main.c **** 
 896:Core/Src/main.c **** 
 897:Core/Src/main.c ****   /* Infinite loop */
 898:Core/Src/main.c ****   for(;;)
 899:Core/Src/main.c ****   {
 900:Core/Src/main.c **** 
 901:Core/Src/main.c ****     if(xQueueReceive(MotorControlQueueHandle, (void*)&MotorControl_Qdata_Buf, portMAX_DELAY) == pdP
 902:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
ARM GAS  /tmp/ccFQNcvb.s 			page 23


 903:Core/Src/main.c ****     }
 904:Core/Src/main.c **** 
 905:Core/Src/main.c **** 
 906:Core/Src/main.c **** 
 907:Core/Src/main.c ****     osDelay(1);
 908:Core/Src/main.c ****   }
 909:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 910:Core/Src/main.c **** }
 911:Core/Src/main.c **** 
 912:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 913:Core/Src/main.c **** /**
 914:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 915:Core/Src/main.c **** * @param argument: Not used
 916:Core/Src/main.c **** * @retval None
 917:Core/Src/main.c **** */
 918:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 919:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 920:Core/Src/main.c **** {
 338              		.loc 1 920 1 view -0
 339              		.cfi_startproc
 340              		@ Volatile: function does not return.
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              	.LVL15:
 344              		.loc 1 920 1 is_stmt 0 view .LVU80
 345 0000 08B5     		push	{r3, lr}
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 3, -8
 348              		.cfi_offset 14, -4
 349              	.LVL16:
 350              	.L16:
 921:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 922:Core/Src/main.c ****   /* Infinite loop */
 923:Core/Src/main.c ****   for(;;)
 351              		.loc 1 923 3 is_stmt 1 discriminator 1 view .LVU81
 924:Core/Src/main.c ****   {
 925:Core/Src/main.c ****     osDelay(1);
 352              		.loc 1 925 5 discriminator 1 view .LVU82
 353 0002 0120     		movs	r0, #1
 354 0004 FFF7FEFF 		bl	osDelay
 355              	.LVL17:
 923:Core/Src/main.c ****   {
 356              		.loc 1 923 8 discriminator 1 view .LVU83
 357 0008 FBE7     		b	.L16
 358              		.cfi_endproc
 359              	.LFE263:
 361              		.section	.text.EmergencyStopTaskEntry,"ax",%progbits
 362              		.align	1
 363              		.global	EmergencyStopTaskEntry
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu fpv4-sp-d16
 369              	EmergencyStopTaskEntry:
 370              	.LFB261:
 866:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 371              		.loc 1 866 1 view -0
ARM GAS  /tmp/ccFQNcvb.s 			page 24


 372              		.cfi_startproc
 373              		@ Volatile: function does not return.
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              	.LVL18:
 866:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 377              		.loc 1 866 1 is_stmt 0 view .LVU85
 378 0000 08B5     		push	{r3, lr}
 379              		.cfi_def_cfa_offset 8
 380              		.cfi_offset 3, -8
 381              		.cfi_offset 14, -4
 382              	.LVL19:
 383              	.L19:
 869:Core/Src/main.c ****   {
 384              		.loc 1 869 3 is_stmt 1 view .LVU86
 871:Core/Src/main.c ****       
 385              		.loc 1 871 5 view .LVU87
 871:Core/Src/main.c ****       
 386              		.loc 1 871 8 is_stmt 0 view .LVU88
 387 0002 4FF48071 		mov	r1, #256
 388 0006 0348     		ldr	r0, .L21
 389 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 390              	.LVL20:
 873:Core/Src/main.c **** 
 391              		.loc 1 873 5 is_stmt 1 view .LVU89
 876:Core/Src/main.c ****   }
 392              		.loc 1 876 5 view .LVU90
 393 000c 0120     		movs	r0, #1
 394 000e FFF7FEFF 		bl	osDelay
 395              	.LVL21:
 869:Core/Src/main.c ****   {
 396              		.loc 1 869 8 view .LVU91
 397 0012 F6E7     		b	.L19
 398              	.L22:
 399              		.align	2
 400              	.L21:
 401 0014 00000240 		.word	1073872896
 402              		.cfi_endproc
 403              	.LFE261:
 405              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 406              		.align	1
 407              		.global	ApplicationFSMEntry
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	ApplicationFSMEntry:
 414              	.LFB260:
 815:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 415              		.loc 1 815 1 view -0
 416              		.cfi_startproc
 417              		@ Volatile: function does not return.
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              	.LVL22:
 815:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 421              		.loc 1 815 1 is_stmt 0 view .LVU93
ARM GAS  /tmp/ccFQNcvb.s 			page 25


 422 0000 08B5     		push	{r3, lr}
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 3, -8
 425              		.cfi_offset 14, -4
 426 0002 07E0     		b	.L27
 427              	.LVL23:
 428              	.L29:
 825:Core/Src/main.c **** 
 429              		.loc 1 825 7 is_stmt 1 view .LVU94
 825:Core/Src/main.c **** 
 430              		.loc 1 825 13 is_stmt 0 view .LVU95
 431 0004 2C4B     		ldr	r3, .L31
 432 0006 0122     		movs	r2, #1
 433 0008 1A70     		strb	r2, [r3]
 434              	.L25:
 847:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 435              		.loc 1 847 5 is_stmt 1 view .LVU96
 847:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 436              		.loc 1 847 14 is_stmt 0 view .LVU97
 437 000a 2B4B     		ldr	r3, .L31
 438 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 849:Core/Src/main.c **** 
 439              		.loc 1 849 5 is_stmt 1 view .LVU98
 853:Core/Src/main.c ****   }
 440              		.loc 1 853 5 view .LVU99
 441 000e 0120     		movs	r0, #1
 442 0010 FFF7FEFF 		bl	osDelay
 443              	.LVL24:
 822:Core/Src/main.c ****   {
 444              		.loc 1 822 8 view .LVU100
 445              	.L27:
 822:Core/Src/main.c ****   {
 446              		.loc 1 822 3 view .LVU101
 824:Core/Src/main.c ****       state = Ready;
 447              		.loc 1 824 5 view .LVU102
 824:Core/Src/main.c ****       state = Ready;
 448              		.loc 1 824 14 is_stmt 0 view .LVU103
 449 0014 284B     		ldr	r3, .L31
 450 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 824:Core/Src/main.c ****       state = Ready;
 451              		.loc 1 824 7 view .LVU104
 452 0018 002B     		cmp	r3, #0
 453 001a F3D0     		beq	.L29
 827:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 454              		.loc 1 827 11 is_stmt 1 view .LVU105
 827:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 455              		.loc 1 827 20 is_stmt 0 view .LVU106
 456 001c 264B     		ldr	r3, .L31
 457 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 458 0020 DBB2     		uxtb	r3, r3
 827:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 459              		.loc 1 827 13 view .LVU107
 460 0022 012B     		cmp	r3, #1
 461 0024 25D0     		beq	.L30
 838:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 462              		.loc 1 838 11 is_stmt 1 view .LVU108
 838:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
ARM GAS  /tmp/ccFQNcvb.s 			page 26


 463              		.loc 1 838 20 is_stmt 0 view .LVU109
 464 0026 244B     		ldr	r3, .L31
 465 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 466 002a DBB2     		uxtb	r3, r3
 838:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 467              		.loc 1 838 13 view .LVU110
 468 002c 022B     		cmp	r3, #2
 469 002e ECD1     		bne	.L25
 840:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 470              		.loc 1 840 7 is_stmt 1 view .LVU111
 840:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 471              		.loc 1 840 10 is_stmt 0 view .LVU112
 472 0030 4FF0FF32 		mov	r2, #-1
 473 0034 2149     		ldr	r1, .L31+4
 474 0036 224B     		ldr	r3, .L31+8
 475 0038 1868     		ldr	r0, [r3]
 476 003a FFF7FEFF 		bl	xQueueReceive
 477              	.LVL25:
 840:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 478              		.loc 1 840 9 view .LVU113
 479 003e 0128     		cmp	r0, #1
 480 0040 E3D1     		bne	.L25
 841:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 481              		.loc 1 841 9 is_stmt 1 view .LVU114
 841:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 482              		.loc 1 841 24 is_stmt 0 view .LVU115
 483 0042 204D     		ldr	r5, .L31+12
 484 0044 AC46     		mov	ip, r5
 485 0046 1D4C     		ldr	r4, .L31+4
 486 0048 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 487 004a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 488 004e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 489 0050 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 490 0054 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 491 0056 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 492 005a 2368     		ldr	r3, [r4]
 493 005c CCF80030 		str	r3, [ip]
 842:Core/Src/main.c ****       }
 494              		.loc 1 842 9 is_stmt 1 view .LVU116
 495 0060 0023     		movs	r3, #0
 496 0062 4FF0FF32 		mov	r2, #-1
 497 0066 2946     		mov	r1, r5
 498 0068 1748     		ldr	r0, .L31+16
 499 006a 0068     		ldr	r0, [r0]
 500 006c FFF7FEFF 		bl	xQueueGenericSend
 501              	.LVL26:
 502 0070 CBE7     		b	.L25
 503              	.L30:
 828:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 504              		.loc 1 828 7 view .LVU117
 828:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 505              		.loc 1 828 10 is_stmt 0 view .LVU118
 506 0072 4FF0FF32 		mov	r2, #-1
 507 0076 1149     		ldr	r1, .L31+4
 508 0078 114B     		ldr	r3, .L31+8
 509 007a 1868     		ldr	r0, [r3]
 510 007c FFF7FEFF 		bl	xQueueReceive
ARM GAS  /tmp/ccFQNcvb.s 			page 27


 511              	.LVL27:
 828:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 512              		.loc 1 828 9 view .LVU119
 513 0080 0128     		cmp	r0, #1
 514 0082 C2D1     		bne	.L25
 829:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 515              		.loc 1 829 9 is_stmt 1 view .LVU120
 829:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 516              		.loc 1 829 29 is_stmt 0 view .LVU121
 517 0084 0D4B     		ldr	r3, .L31+4
 518 0086 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 829:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 519              		.loc 1 829 11 view .LVU122
 520 008a 002B     		cmp	r3, #0
 521 008c BDD1     		bne	.L25
 830:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 522              		.loc 1 830 11 is_stmt 1 view .LVU123
 830:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 523              		.loc 1 830 14 is_stmt 0 view .LVU124
 524 008e 4FF0FF32 		mov	r2, #-1
 525 0092 0A49     		ldr	r1, .L31+4
 526 0094 0A4B     		ldr	r3, .L31+8
 527 0096 1868     		ldr	r0, [r3]
 528 0098 FFF7FEFF 		bl	xQueueReceive
 529              	.LVL28:
 830:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 530              		.loc 1 830 13 view .LVU125
 531 009c 0128     		cmp	r0, #1
 532 009e B4D1     		bne	.L25
 831:Core/Src/main.c ****               state++;
 533              		.loc 1 831 13 is_stmt 1 view .LVU126
 831:Core/Src/main.c ****               state++;
 534              		.loc 1 831 33 is_stmt 0 view .LVU127
 535 00a0 064B     		ldr	r3, .L31+4
 536 00a2 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 537 00a6 DBB2     		uxtb	r3, r3
 831:Core/Src/main.c ****               state++;
 538              		.loc 1 831 15 view .LVU128
 539 00a8 012B     		cmp	r3, #1
 540 00aa AED1     		bne	.L25
 832:Core/Src/main.c ****             }
 541              		.loc 1 832 15 is_stmt 1 view .LVU129
 832:Core/Src/main.c ****             }
 542              		.loc 1 832 20 is_stmt 0 view .LVU130
 543 00ac 024A     		ldr	r2, .L31
 544 00ae 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 545 00b0 0133     		adds	r3, r3, #1
 546 00b2 DBB2     		uxtb	r3, r3
 547 00b4 1370     		strb	r3, [r2]
 548 00b6 A8E7     		b	.L25
 549              	.L32:
 550              		.align	2
 551              	.L31:
 552 00b8 00000000 		.word	.LANCHOR0
 553 00bc 00000000 		.word	.LANCHOR1
 554 00c0 00000000 		.word	.LANCHOR2
 555 00c4 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccFQNcvb.s 			page 28


 556 00c8 00000000 		.word	.LANCHOR4
 557              		.cfi_endproc
 558              	.LFE260:
 560              		.section	.text.MiniBotInit,"ax",%progbits
 561              		.align	1
 562              		.global	MiniBotInit
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	MiniBotInit:
 569              	.LVL29:
 570              	.LFB251:
 593:Core/Src/main.c **** 	// Configure Each of the joints
 571              		.loc 1 593 44 is_stmt 1 view -0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 593:Core/Src/main.c **** 	// Configure Each of the joints
 575              		.loc 1 593 44 is_stmt 0 view .LVU132
 576 0000 00B5     		push	{lr}
 577              		.cfi_def_cfa_offset 4
 578              		.cfi_offset 14, -4
 596:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 579              		.loc 1 596 4 is_stmt 1 view .LVU133
 596:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 580              		.loc 1 596 25 is_stmt 0 view .LVU134
 581 0002 0023     		movs	r3, #0
 582 0004 0370     		strb	r3, [r0]
 597:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 583              		.loc 1 597 4 is_stmt 1 view .LVU135
 597:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 584              		.loc 1 597 25 is_stmt 0 view .LVU136
 585 0006 4FF44872 		mov	r2, #800
 586 000a 4260     		str	r2, [r0, #4]
 598:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 587              		.loc 1 598 4 is_stmt 1 view .LVU137
 598:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 588              		.loc 1 598 25 is_stmt 0 view .LVU138
 589 000c 40F64851 		movw	r1, #3400
 590 0010 8160     		str	r1, [r0, #8]
 599:Core/Src/main.c **** 
 591              		.loc 1 599 4 is_stmt 1 view .LVU139
 599:Core/Src/main.c **** 
 592              		.loc 1 599 33 is_stmt 0 view .LVU140
 593 0012 0373     		strb	r3, [r0, #12]
 601:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 594              		.loc 1 601 4 is_stmt 1 view .LVU141
 601:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 595              		.loc 1 601 29 is_stmt 0 view .LVU142
 596 0014 4FF0010C 		mov	ip, #1
 597 0018 80F810C0 		strb	ip, [r0, #16]
 602:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 598              		.loc 1 602 4 is_stmt 1 view .LVU143
 602:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 599              		.loc 1 602 29 is_stmt 0 view .LVU144
 600 001c 4FF41672 		mov	r2, #600
ARM GAS  /tmp/ccFQNcvb.s 			page 29


 601 0020 4261     		str	r2, [r0, #20]
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 602              		.loc 1 603 4 is_stmt 1 view .LVU145
 603:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 603              		.loc 1 603 29 is_stmt 0 view .LVU146
 604 0022 8161     		str	r1, [r0, #24]
 604:Core/Src/main.c **** 
 605              		.loc 1 604 4 is_stmt 1 view .LVU147
 604:Core/Src/main.c **** 
 606              		.loc 1 604 37 is_stmt 0 view .LVU148
 607 0024 0377     		strb	r3, [r0, #28]
 606:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 608              		.loc 1 606 4 is_stmt 1 view .LVU149
 606:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 609              		.loc 1 606 26 is_stmt 0 view .LVU150
 610 0026 4FF0020E 		mov	lr, #2
 611 002a 80F820E0 		strb	lr, [r0, #32]
 607:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 612              		.loc 1 607 4 is_stmt 1 view .LVU151
 607:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 613              		.loc 1 607 26 is_stmt 0 view .LVU152
 614 002e 4262     		str	r2, [r0, #36]
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 615              		.loc 1 608 4 is_stmt 1 view .LVU153
 608:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 616              		.loc 1 608 26 is_stmt 0 view .LVU154
 617 0030 8162     		str	r1, [r0, #40]
 609:Core/Src/main.c **** 
 618              		.loc 1 609 4 is_stmt 1 view .LVU155
 609:Core/Src/main.c **** 
 619              		.loc 1 609 34 is_stmt 0 view .LVU156
 620 0032 80F82C30 		strb	r3, [r0, #44]
 611:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 621              		.loc 1 611 4 is_stmt 1 view .LVU157
 611:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 622              		.loc 1 611 26 is_stmt 0 view .LVU158
 623 0036 0323     		movs	r3, #3
 624 0038 80F83030 		strb	r3, [r0, #48]
 612:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 625              		.loc 1 612 4 is_stmt 1 view .LVU159
 612:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 626              		.loc 1 612 26 is_stmt 0 view .LVU160
 627 003c 4263     		str	r2, [r0, #52]
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 628              		.loc 1 613 4 is_stmt 1 view .LVU161
 613:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 629              		.loc 1 613 26 is_stmt 0 view .LVU162
 630 003e 4FF44863 		mov	r3, #3200
 631 0042 8363     		str	r3, [r0, #56]
 614:Core/Src/main.c **** 
 632              		.loc 1 614 4 is_stmt 1 view .LVU163
 614:Core/Src/main.c **** 
 633              		.loc 1 614 34 is_stmt 0 view .LVU164
 634 0044 80F83CC0 		strb	ip, [r0, #60]
 616:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 635              		.loc 1 616 4 is_stmt 1 view .LVU165
 616:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
ARM GAS  /tmp/ccFQNcvb.s 			page 30


 636              		.loc 1 616 27 is_stmt 0 view .LVU166
 637 0048 034B     		ldr	r3, .L35
 638 004a 0364     		str	r3, [r0, #64]
 617:Core/Src/main.c **** }
 639              		.loc 1 617 4 is_stmt 1 view .LVU167
 617:Core/Src/main.c **** }
 640              		.loc 1 617 30 is_stmt 0 view .LVU168
 641 004c 4FF40073 		mov	r3, #512
 642 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 618:Core/Src/main.c **** 
 643              		.loc 1 618 1 view .LVU169
 644 0054 5DF804FB 		ldr	pc, [sp], #4
 645              	.L36:
 646              		.align	2
 647              	.L35:
 648 0058 00000240 		.word	1073872896
 649              		.cfi_endproc
 650              	.LFE251:
 652              		.section	.text.ServoDriverInit,"ax",%progbits
 653              		.align	1
 654              		.global	ServoDriverInit
 655              		.syntax unified
 656              		.thumb
 657              		.thumb_func
 658              		.fpu fpv4-sp-d16
 660              	ServoDriverInit:
 661              	.LVL30:
 662              	.LFB253:
 650:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 663              		.loc 1 650 48 is_stmt 1 view -0
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 0
 666              		@ frame_needed = 0, uses_anonymous_args = 0
 650:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 667              		.loc 1 650 48 is_stmt 0 view .LVU171
 668 0000 10B5     		push	{r4, lr}
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 4, -8
 671              		.cfi_offset 14, -4
 672 0002 0446     		mov	r4, r0
 651:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 673              		.loc 1 651 3 is_stmt 1 view .LVU172
 674 0004 1648     		ldr	r0, .L39
 675              	.LVL31:
 651:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 676              		.loc 1 651 3 is_stmt 0 view .LVU173
 677 0006 FFF7FEFF 		bl	PCA9685_Init
 678              	.LVL32:
 652:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 679              		.loc 1 652 3 is_stmt 1 view .LVU174
 652:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 680              		.loc 1 652 62 is_stmt 0 view .LVU175
 681 000a E388     		ldrh	r3, [r4, #6]
 682 000c 00EE103A 		vmov	s0, r3	@ int
 652:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 683              		.loc 1 652 3 view .LVU176
 684 0010 B8EE400A 		vcvt.f32.u32	s0, s0
ARM GAS  /tmp/ccFQNcvb.s 			page 31


 685 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 686 0016 FFF7FEFF 		bl	PCA9685_SetServoAngle
 687              	.LVL33:
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 688              		.loc 1 653 3 is_stmt 1 view .LVU177
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 689              		.loc 1 653 70 is_stmt 0 view .LVU178
 690 001a E389     		ldrh	r3, [r4, #14]
 691 001c 00EE103A 		vmov	s0, r3	@ int
 653:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 692              		.loc 1 653 3 view .LVU179
 693 0020 B8EE400A 		vcvt.f32.u32	s0, s0
 694 0024 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 695 0026 FFF7FEFF 		bl	PCA9685_SetServoAngle
 696              	.LVL34:
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 697              		.loc 1 654 3 is_stmt 1 view .LVU180
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 698              		.loc 1 654 64 is_stmt 0 view .LVU181
 699 002a E38A     		ldrh	r3, [r4, #22]
 700 002c 00EE103A 		vmov	s0, r3	@ int
 654:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 701              		.loc 1 654 3 view .LVU182
 702 0030 B8EE400A 		vcvt.f32.u32	s0, s0
 703 0034 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 704 0036 FFF7FEFF 		bl	PCA9685_SetServoAngle
 705              	.LVL35:
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 706              		.loc 1 655 3 is_stmt 1 view .LVU183
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 707              		.loc 1 655 64 is_stmt 0 view .LVU184
 708 003a E38B     		ldrh	r3, [r4, #30]
 709 003c 00EE103A 		vmov	s0, r3	@ int
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 710              		.loc 1 655 3 view .LVU185
 711 0040 B8EE400A 		vcvt.f32.u32	s0, s0
 712 0044 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 713 0046 FFF7FEFF 		bl	PCA9685_SetServoAngle
 714              	.LVL36:
 656:Core/Src/main.c **** }
 715              		.loc 1 656 3 is_stmt 1 view .LVU186
 656:Core/Src/main.c **** }
 716              		.loc 1 656 68 is_stmt 0 view .LVU187
 717 004a E38C     		ldrh	r3, [r4, #38]
 718 004c 00EE103A 		vmov	s0, r3	@ int
 656:Core/Src/main.c **** }
 719              		.loc 1 656 3 view .LVU188
 720 0050 B8EE400A 		vcvt.f32.u32	s0, s0
 721 0054 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 722 0058 FFF7FEFF 		bl	PCA9685_SetServoAngle
 723              	.LVL37:
 657:Core/Src/main.c **** 
 724              		.loc 1 657 1 view .LVU189
 725 005c 10BD     		pop	{r4, pc}
 726              	.LVL38:
 727              	.L40:
 657:Core/Src/main.c **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 32


 728              		.loc 1 657 1 view .LVU190
 729 005e 00BF     		.align	2
 730              	.L39:
 731 0060 00000000 		.word	.LANCHOR5
 732              		.cfi_endproc
 733              	.LFE253:
 735              		.section	.text.MegaBotInit,"ax",%progbits
 736              		.align	1
 737              		.global	MegaBotInit
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	MegaBotInit:
 744              	.LVL39:
 745              	.LFB252:
 620:Core/Src/main.c ****   // Configure Each of the joints
 746              		.loc 1 620 44 is_stmt 1 view -0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 620:Core/Src/main.c ****   // Configure Each of the joints
 750              		.loc 1 620 44 is_stmt 0 view .LVU192
 751 0000 08B5     		push	{r3, lr}
 752              		.cfi_def_cfa_offset 8
 753              		.cfi_offset 3, -8
 754              		.cfi_offset 14, -4
 622:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 755              		.loc 1 622 3 is_stmt 1 view .LVU193
 622:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 756              		.loc 1 622 26 is_stmt 0 view .LVU194
 757 0002 0022     		movs	r2, #0
 758 0004 0270     		strb	r2, [r0]
 623:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 759              		.loc 1 623 3 is_stmt 1 view .LVU195
 623:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 760              		.loc 1 623 26 is_stmt 0 view .LVU196
 761 0006 4280     		strh	r2, [r0, #2]	@ movhi
 624:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 762              		.loc 1 624 3 is_stmt 1 view .LVU197
 624:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 763              		.loc 1 624 26 is_stmt 0 view .LVU198
 764 0008 B421     		movs	r1, #180
 765 000a 8180     		strh	r1, [r0, #4]	@ movhi
 625:Core/Src/main.c **** 
 766              		.loc 1 625 3 is_stmt 1 view .LVU199
 625:Core/Src/main.c **** 
 767              		.loc 1 625 32 is_stmt 0 view .LVU200
 768 000c 4FF05A0C 		mov	ip, #90
 769 0010 A0F806C0 		strh	ip, [r0, #6]	@ movhi
 627:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 770              		.loc 1 627 3 is_stmt 1 view .LVU201
 627:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 771              		.loc 1 627 30 is_stmt 0 view .LVU202
 772 0014 4FF0010E 		mov	lr, #1
 773 0018 80F808E0 		strb	lr, [r0, #8]
 628:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
ARM GAS  /tmp/ccFQNcvb.s 			page 33


 774              		.loc 1 628 3 is_stmt 1 view .LVU203
 628:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 775              		.loc 1 628 30 is_stmt 0 view .LVU204
 776 001c 4281     		strh	r2, [r0, #10]	@ movhi
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 777              		.loc 1 629 3 is_stmt 1 view .LVU205
 629:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 778              		.loc 1 629 30 is_stmt 0 view .LVU206
 779 001e 8181     		strh	r1, [r0, #12]	@ movhi
 630:Core/Src/main.c **** 
 780              		.loc 1 630 3 is_stmt 1 view .LVU207
 630:Core/Src/main.c **** 
 781              		.loc 1 630 36 is_stmt 0 view .LVU208
 782 0020 C281     		strh	r2, [r0, #14]	@ movhi
 632:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 783              		.loc 1 632 3 is_stmt 1 view .LVU209
 632:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 784              		.loc 1 632 27 is_stmt 0 view .LVU210
 785 0022 4FF0020E 		mov	lr, #2
 786 0026 80F810E0 		strb	lr, [r0, #16]
 633:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 787              		.loc 1 633 3 is_stmt 1 view .LVU211
 633:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 788              		.loc 1 633 27 is_stmt 0 view .LVU212
 789 002a 4FF0320E 		mov	lr, #50
 790 002e A0F812E0 		strh	lr, [r0, #18]	@ movhi
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 791              		.loc 1 634 3 is_stmt 1 view .LVU213
 634:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 792              		.loc 1 634 27 is_stmt 0 view .LVU214
 793 0032 8182     		strh	r1, [r0, #20]	@ movhi
 635:Core/Src/main.c **** 
 794              		.loc 1 635 3 is_stmt 1 view .LVU215
 635:Core/Src/main.c **** 
 795              		.loc 1 635 33 is_stmt 0 view .LVU216
 796 0034 C182     		strh	r1, [r0, #22]	@ movhi
 637:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 797              		.loc 1 637 3 is_stmt 1 view .LVU217
 637:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 798              		.loc 1 637 27 is_stmt 0 view .LVU218
 799 0036 4FF0030E 		mov	lr, #3
 800 003a 80F818E0 		strb	lr, [r0, #24]
 638:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 801              		.loc 1 638 3 is_stmt 1 view .LVU219
 638:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 802              		.loc 1 638 27 is_stmt 0 view .LVU220
 803 003e 4283     		strh	r2, [r0, #26]	@ movhi
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 804              		.loc 1 639 3 is_stmt 1 view .LVU221
 639:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 805              		.loc 1 639 27 is_stmt 0 view .LVU222
 806 0040 8183     		strh	r1, [r0, #28]	@ movhi
 640:Core/Src/main.c **** 
 807              		.loc 1 640 3 is_stmt 1 view .LVU223
 640:Core/Src/main.c **** 
 808              		.loc 1 640 33 is_stmt 0 view .LVU224
 809 0042 A0F81EC0 		strh	ip, [r0, #30]	@ movhi
ARM GAS  /tmp/ccFQNcvb.s 			page 34


 642:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 810              		.loc 1 642 3 is_stmt 1 view .LVU225
 642:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 811              		.loc 1 642 29 is_stmt 0 view .LVU226
 812 0046 0421     		movs	r1, #4
 813 0048 80F82010 		strb	r1, [r0, #32]
 643:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 814              		.loc 1 643 3 is_stmt 1 view .LVU227
 643:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 815              		.loc 1 643 29 is_stmt 0 view .LVU228
 816 004c 4284     		strh	r2, [r0, #34]	@ movhi
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 817              		.loc 1 644 3 is_stmt 1 view .LVU229
 644:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 818              		.loc 1 644 29 is_stmt 0 view .LVU230
 819 004e 4621     		movs	r1, #70
 820 0050 8184     		strh	r1, [r0, #36]	@ movhi
 645:Core/Src/main.c **** 
 821              		.loc 1 645 3 is_stmt 1 view .LVU231
 645:Core/Src/main.c **** 
 822              		.loc 1 645 35 is_stmt 0 view .LVU232
 823 0052 C284     		strh	r2, [r0, #38]	@ movhi
 647:Core/Src/main.c **** }
 824              		.loc 1 647 3 is_stmt 1 view .LVU233
 825 0054 FFF7FEFF 		bl	ServoDriverInit
 826              	.LVL40:
 648:Core/Src/main.c **** 
 827              		.loc 1 648 1 is_stmt 0 view .LVU234
 828 0058 08BD     		pop	{r3, pc}
 829              		.cfi_endproc
 830              	.LFE252:
 832              		.section	.text.QPotDataUpdate,"ax",%progbits
 833              		.align	1
 834              		.global	QPotDataUpdate
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu fpv4-sp-d16
 840              	QPotDataUpdate:
 841              	.LVL41:
 842              	.LFB254:
 660:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 843              		.loc 1 660 111 is_stmt 1 view -0
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 0
 846              		@ frame_needed = 0, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 661:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 848              		.loc 1 661 3 view .LVU236
 661:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 849              		.loc 1 661 20 is_stmt 0 view .LVU237
 850 0000 1368     		ldr	r3, [r2]
 661:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 851              		.loc 1 661 30 view .LVU238
 852 0002 0A33     		adds	r3, r3, #10
 661:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 853              		.loc 1 661 5 view .LVU239
ARM GAS  /tmp/ccFQNcvb.s 			page 35


 854 0004 8342     		cmp	r3, r0
 855 0006 03D3     		bcc	.L44
 661:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 856              		.loc 1 661 52 discriminator 1 view .LVU240
 857 0008 1368     		ldr	r3, [r2]
 661:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 858              		.loc 1 661 62 discriminator 1 view .LVU241
 859 000a 0A3B     		subs	r3, r3, #10
 661:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 860              		.loc 1 661 35 discriminator 1 view .LVU242
 861 000c 8342     		cmp	r3, r0
 862 000e 0CD9     		bls	.L43
 863              	.L44:
 662:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 864              		.loc 1 662 5 is_stmt 1 view .LVU243
 662:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 865              		.loc 1 662 27 is_stmt 0 view .LVU244
 866 0010 8B68     		ldr	r3, [r1, #8]
 662:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 867              		.loc 1 662 7 view .LVU245
 868 0012 8342     		cmp	r3, r0
 869 0014 0AD2     		bcs	.L46
 663:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 870              		.loc 1 663 7 is_stmt 1 view .LVU246
 663:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 871              		.loc 1 663 24 is_stmt 0 view .LVU247
 872 0016 8B68     		ldr	r3, [r1, #8]
 663:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 873              		.loc 1 663 17 view .LVU248
 874 0018 1360     		str	r3, [r2]
 875              	.L47:
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 876              		.loc 1 669 5 is_stmt 1 view .LVU249
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 877              		.loc 1 669 13 is_stmt 0 view .LVU250
 878 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 669:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 879              		.loc 1 669 7 view .LVU251
 880 001c 2BB1     		cbz	r3, .L43
 670:Core/Src/main.c ****     }
 881              		.loc 1 670 7 is_stmt 1 view .LVU252
 670:Core/Src/main.c ****     }
 882              		.loc 1 670 24 is_stmt 0 view .LVU253
 883 001e 8B68     		ldr	r3, [r1, #8]
 670:Core/Src/main.c ****     }
 884              		.loc 1 670 35 view .LVU254
 885 0020 1068     		ldr	r0, [r2]
 886              	.LVL42:
 670:Core/Src/main.c ****     }
 887              		.loc 1 670 33 view .LVU255
 888 0022 1B1A     		subs	r3, r3, r0
 670:Core/Src/main.c ****     }
 889              		.loc 1 670 52 view .LVU256
 890 0024 4968     		ldr	r1, [r1, #4]
 891              	.LVL43:
 670:Core/Src/main.c ****     }
 892              		.loc 1 670 45 view .LVU257
ARM GAS  /tmp/ccFQNcvb.s 			page 36


 893 0026 0B44     		add	r3, r3, r1
 670:Core/Src/main.c ****     }
 894              		.loc 1 670 17 view .LVU258
 895 0028 1360     		str	r3, [r2]
 896              	.L43:
 673:Core/Src/main.c **** 
 897              		.loc 1 673 1 view .LVU259
 898 002a 7047     		bx	lr
 899              	.LVL44:
 900              	.L46:
 664:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 901              		.loc 1 664 11 is_stmt 1 view .LVU260
 664:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 902              		.loc 1 664 33 is_stmt 0 view .LVU261
 903 002c 4B68     		ldr	r3, [r1, #4]
 664:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 904              		.loc 1 664 13 view .LVU262
 905 002e 8342     		cmp	r3, r0
 906 0030 02D9     		bls	.L48
 665:Core/Src/main.c ****     }else{
 907              		.loc 1 665 7 is_stmt 1 view .LVU263
 665:Core/Src/main.c ****     }else{
 908              		.loc 1 665 24 is_stmt 0 view .LVU264
 909 0032 4B68     		ldr	r3, [r1, #4]
 665:Core/Src/main.c ****     }else{
 910              		.loc 1 665 17 view .LVU265
 911 0034 1360     		str	r3, [r2]
 912 0036 F0E7     		b	.L47
 913              	.L48:
 667:Core/Src/main.c ****     }
 914              		.loc 1 667 7 is_stmt 1 view .LVU266
 667:Core/Src/main.c ****     }
 915              		.loc 1 667 17 is_stmt 0 view .LVU267
 916 0038 1060     		str	r0, [r2]
 917 003a EEE7     		b	.L47
 918              		.cfi_endproc
 919              	.LFE254:
 921              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 922              		.align	1
 923              		.global	MiniBotInputsEntry
 924              		.syntax unified
 925              		.thumb
 926              		.thumb_func
 927              		.fpu fpv4-sp-d16
 929              	MiniBotInputsEntry:
 930              	.LVL45:
 931              	.LFB259:
 756:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 932              		.loc 1 756 1 is_stmt 1 view -0
 933              		.cfi_startproc
 934              		@ Volatile: function does not return.
 935              		@ args = 0, pretend = 0, frame = 72
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 756:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 937              		.loc 1 756 1 is_stmt 0 view .LVU269
 938 0000 00B5     		push	{lr}
 939              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccFQNcvb.s 			page 37


 940              		.cfi_offset 14, -4
 941 0002 93B0     		sub	sp, sp, #76
 942              		.cfi_def_cfa_offset 80
 759:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 943              		.loc 1 759 2 is_stmt 1 view .LVU270
 760:Core/Src/main.c **** 
 944              		.loc 1 760 2 view .LVU271
 945 0004 6846     		mov	r0, sp
 946              	.LVL46:
 760:Core/Src/main.c **** 
 947              		.loc 1 760 2 is_stmt 0 view .LVU272
 948 0006 FFF7FEFF 		bl	MiniBotInit
 949              	.LVL47:
 950 000a 02E0     		b	.L51
 951              	.L50:
 802:Core/Src/main.c **** 	}
 952              		.loc 1 802 5 is_stmt 1 view .LVU273
 953 000c 0120     		movs	r0, #1
 954 000e FFF7FEFF 		bl	osDelay
 955              	.LVL48:
 766:Core/Src/main.c **** 	{
 956              		.loc 1 766 7 view .LVU274
 957              	.L51:
 766:Core/Src/main.c **** 	{
 958              		.loc 1 766 2 view .LVU275
 773:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 959              		.loc 1 773 5 view .LVU276
 960 0012 324C     		ldr	r4, .L53
 961 0014 2046     		mov	r0, r4
 962 0016 FFF7FEFF 		bl	HAL_ADC_Start
 963              	.LVL49:
 774:Core/Src/main.c ****     PotRawValue[0] = HAL_ADC_GetValue(&hadc1);
 964              		.loc 1 774 5 view .LVU277
 965 001a 4FF0FF31 		mov	r1, #-1
 966 001e 2046     		mov	r0, r4
 967 0020 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 968              	.LVL50:
 775:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 969              		.loc 1 775 5 view .LVU278
 775:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 970              		.loc 1 775 22 is_stmt 0 view .LVU279
 971 0024 2046     		mov	r0, r4
 972 0026 FFF7FEFF 		bl	HAL_ADC_GetValue
 973              	.LVL51:
 775:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 974              		.loc 1 775 20 view .LVU280
 975 002a 2D4D     		ldr	r5, .L53+4
 976 002c 2860     		str	r0, [r5]
 776:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 977              		.loc 1 776 5 is_stmt 1 view .LVU281
 978 002e 2046     		mov	r0, r4
 979 0030 FFF7FEFF 		bl	HAL_ADC_Start
 980              	.LVL52:
 777:Core/Src/main.c ****     PotRawValue[1] = HAL_ADC_GetValue(&hadc1);
 981              		.loc 1 777 5 view .LVU282
 982 0034 4FF0FF31 		mov	r1, #-1
 983 0038 2046     		mov	r0, r4
ARM GAS  /tmp/ccFQNcvb.s 			page 38


 984 003a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 985              	.LVL53:
 778:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 986              		.loc 1 778 5 view .LVU283
 778:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 987              		.loc 1 778 22 is_stmt 0 view .LVU284
 988 003e 2046     		mov	r0, r4
 989 0040 FFF7FEFF 		bl	HAL_ADC_GetValue
 990              	.LVL54:
 778:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 991              		.loc 1 778 20 view .LVU285
 992 0044 6860     		str	r0, [r5, #4]
 779:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 993              		.loc 1 779 5 is_stmt 1 view .LVU286
 994 0046 2046     		mov	r0, r4
 995 0048 FFF7FEFF 		bl	HAL_ADC_Start
 996              	.LVL55:
 780:Core/Src/main.c ****     PotRawValue[2] = HAL_ADC_GetValue(&hadc1);
 997              		.loc 1 780 5 view .LVU287
 998 004c 4FF0FF31 		mov	r1, #-1
 999 0050 2046     		mov	r0, r4
 1000 0052 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1001              	.LVL56:
 781:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 1002              		.loc 1 781 5 view .LVU288
 781:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 1003              		.loc 1 781 22 is_stmt 0 view .LVU289
 1004 0056 2046     		mov	r0, r4
 1005 0058 FFF7FEFF 		bl	HAL_ADC_GetValue
 1006              	.LVL57:
 781:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
 1007              		.loc 1 781 20 view .LVU290
 1008 005c A860     		str	r0, [r5, #8]
 782:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, portMAX_DELAY);
 1009              		.loc 1 782 5 is_stmt 1 view .LVU291
 1010 005e 2046     		mov	r0, r4
 1011 0060 FFF7FEFF 		bl	HAL_ADC_Start
 1012              	.LVL58:
 783:Core/Src/main.c ****     PotRawValue[3] = HAL_ADC_GetValue(&hadc1);
 1013              		.loc 1 783 5 view .LVU292
 1014 0064 4FF0FF31 		mov	r1, #-1
 1015 0068 2046     		mov	r0, r4
 1016 006a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1017              	.LVL59:
 784:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 1018              		.loc 1 784 5 view .LVU293
 784:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 1019              		.loc 1 784 22 is_stmt 0 view .LVU294
 1020 006e 2046     		mov	r0, r4
 1021 0070 FFF7FEFF 		bl	HAL_ADC_GetValue
 1022              	.LVL60:
 784:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 1023              		.loc 1 784 20 view .LVU295
 1024 0074 E860     		str	r0, [r5, #12]
 785:Core/Src/main.c **** 
 1025              		.loc 1 785 5 is_stmt 1 view .LVU296
 1026 0076 2046     		mov	r0, r4
ARM GAS  /tmp/ccFQNcvb.s 			page 39


 1027 0078 FFF7FEFF 		bl	HAL_ADC_Stop
 1028              	.LVL61:
 787:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1029              		.loc 1 787 5 view .LVU297
 1030 007c 194C     		ldr	r4, .L53+8
 1031 007e 2246     		mov	r2, r4
 1032 0080 6946     		mov	r1, sp
 1033 0082 2868     		ldr	r0, [r5]
 1034 0084 FFF7FEFF 		bl	QPotDataUpdate
 1035              	.LVL62:
 788:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 1036              		.loc 1 788 5 view .LVU298
 1037 0088 04F10C02 		add	r2, r4, #12
 1038 008c 04A9     		add	r1, sp, #16
 1039 008e 6868     		ldr	r0, [r5, #4]
 1040 0090 FFF7FEFF 		bl	QPotDataUpdate
 1041              	.LVL63:
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 1042              		.loc 1 789 5 view .LVU299
 1043 0094 04F11802 		add	r2, r4, #24
 1044 0098 08A9     		add	r1, sp, #32
 1045 009a A868     		ldr	r0, [r5, #8]
 1046 009c FFF7FEFF 		bl	QPotDataUpdate
 1047              	.LVL64:
 790:Core/Src/main.c **** 
 1048              		.loc 1 790 5 view .LVU300
 1049 00a0 04F12402 		add	r2, r4, #36
 1050 00a4 0CA9     		add	r1, sp, #48
 1051 00a6 E868     		ldr	r0, [r5, #12]
 1052 00a8 FFF7FEFF 		bl	QPotDataUpdate
 1053              	.LVL65:
 792:Core/Src/main.c ****     
 1054              		.loc 1 792 5 view .LVU301
 792:Core/Src/main.c ****     
 1055              		.loc 1 792 35 is_stmt 0 view .LVU302
 1056 00ac 4FF40071 		mov	r1, #512
 1057 00b0 0D48     		ldr	r0, .L53+12
 1058 00b2 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1059              	.LVL66:
 792:Core/Src/main.c ****     
 1060              		.loc 1 792 24 view .LVU303
 1061 00b6 84F83000 		strb	r0, [r4, #48]
 794:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1062              		.loc 1 794 5 is_stmt 1 view .LVU304
 794:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1063              		.loc 1 794 32 is_stmt 0 view .LVU305
 1064 00ba 0C4B     		ldr	r3, .L53+16
 1065 00bc 1868     		ldr	r0, [r3]
 794:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1066              		.loc 1 794 7 view .LVU306
 1067 00be 0028     		cmp	r0, #0
 1068 00c0 A4D0     		beq	.L50
 795:Core/Src/main.c ****         // failed to post message
 1069              		.loc 1 795 7 is_stmt 1 view .LVU307
 795:Core/Src/main.c ****         // failed to post message
 1070              		.loc 1 795 10 is_stmt 0 view .LVU308
 1071 00c2 0023     		movs	r3, #0
ARM GAS  /tmp/ccFQNcvb.s 			page 40


 1072 00c4 4FF0FF32 		mov	r2, #-1
 1073 00c8 2146     		mov	r1, r4
 1074 00ca FFF7FEFF 		bl	xQueueGenericSend
 1075              	.LVL67:
 795:Core/Src/main.c ****         // failed to post message
 1076              		.loc 1 795 9 view .LVU309
 1077 00ce 0128     		cmp	r0, #1
 1078 00d0 9CD0     		beq	.L50
 797:Core/Src/main.c ****       }
 1079              		.loc 1 797 9 is_stmt 1 view .LVU310
 797:Core/Src/main.c ****       }
 1080              		.loc 1 797 33 is_stmt 0 view .LVU311
 1081 00d2 074B     		ldr	r3, .L53+20
 1082 00d4 0122     		movs	r2, #1
 1083 00d6 1A70     		strb	r2, [r3]
 1084 00d8 98E7     		b	.L50
 1085              	.L54:
 1086 00da 00BF     		.align	2
 1087              	.L53:
 1088 00dc 00000000 		.word	.LANCHOR6
 1089 00e0 00000000 		.word	.LANCHOR7
 1090 00e4 00000000 		.word	.LANCHOR8
 1091 00e8 00000240 		.word	1073872896
 1092 00ec 00000000 		.word	.LANCHOR2
 1093 00f0 00000000 		.word	.LANCHOR9
 1094              		.cfi_endproc
 1095              	.LFE259:
 1097              		.section	.text.MAP,"ax",%progbits
 1098              		.align	1
 1099              		.global	MAP
 1100              		.syntax unified
 1101              		.thumb
 1102              		.thumb_func
 1103              		.fpu fpv4-sp-d16
 1105              	MAP:
 1106              	.LVL68:
 1107              	.LFB256:
 701:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 1108              		.loc 1 701 1 is_stmt 1 view -0
 1109              		.cfi_startproc
 1110              		@ args = 4, pretend = 0, frame = 0
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
 1112              		@ link register save eliminated.
 702:Core/Src/main.c **** }
 1113              		.loc 1 702 5 view .LVU313
 702:Core/Src/main.c **** }
 1114              		.loc 1 702 24 is_stmt 0 view .LVU314
 1115 0000 A0EB010C 		sub	ip, r0, r1
 702:Core/Src/main.c **** }
 1116              		.loc 1 702 51 view .LVU315
 1117 0004 0098     		ldr	r0, [sp]
 1118              	.LVL69:
 702:Core/Src/main.c **** }
 1119              		.loc 1 702 51 view .LVU316
 1120 0006 C01A     		subs	r0, r0, r3
 702:Core/Src/main.c **** }
 1121              		.loc 1 702 37 view .LVU317
ARM GAS  /tmp/ccFQNcvb.s 			page 41


 1122 0008 00FB0CFC 		mul	ip, r0, ip
 702:Core/Src/main.c **** }
 1123              		.loc 1 702 79 view .LVU318
 1124 000c 511A     		subs	r1, r2, r1
 1125              	.LVL70:
 702:Core/Src/main.c **** }
 1126              		.loc 1 702 66 view .LVU319
 1127 000e BCFBF1FC 		udiv	ip, ip, r1
 703:Core/Src/main.c **** 
 1128              		.loc 1 703 1 view .LVU320
 1129 0012 0CEB0300 		add	r0, ip, r3
 1130 0016 7047     		bx	lr
 1131              		.cfi_endproc
 1132              	.LFE256:
 1134              		.section	.text.MoveServo,"ax",%progbits
 1135              		.align	1
 1136              		.global	MoveServo
 1137              		.syntax unified
 1138              		.thumb
 1139              		.thumb_func
 1140              		.fpu fpv4-sp-d16
 1142              	MoveServo:
 1143              	.LVL71:
 1144              	.LFB255:
 675:Core/Src/main.c ****   // MAP each of the angles
 1145              		.loc 1 675 75 is_stmt 1 view -0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 675:Core/Src/main.c ****   // MAP each of the angles
 1149              		.loc 1 675 75 is_stmt 0 view .LVU322
 1150 0000 30B5     		push	{r4, r5, lr}
 1151              		.cfi_def_cfa_offset 12
 1152              		.cfi_offset 4, -12
 1153              		.cfi_offset 5, -8
 1154              		.cfi_offset 14, -4
 1155 0002 83B0     		sub	sp, sp, #12
 1156              		.cfi_def_cfa_offset 24
 1157 0004 0446     		mov	r4, r0
 1158 0006 0D46     		mov	r5, r1
 678:Core/Src/main.c ****   // Base
 1159              		.loc 1 678 3 is_stmt 1 view .LVU323
 680:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle);
 1160              		.loc 1 680 3 view .LVU324
 680:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle);
 1161              		.loc 1 680 22 is_stmt 0 view .LVU325
 1162 0008 0868     		ldr	r0, [r1]
 1163              	.LVL72:
 680:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle);
 1164              		.loc 1 680 22 view .LVU326
 1165 000a 4968     		ldr	r1, [r1, #4]
 1166              	.LVL73:
 680:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle);
 1167              		.loc 1 680 22 view .LVU327
 1168 000c AA68     		ldr	r2, [r5, #8]
 680:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle);
 1169              		.loc 1 680 128 view .LVU328
ARM GAS  /tmp/ccFQNcvb.s 			page 42


 1170 000e A388     		ldrh	r3, [r4, #4]
 680:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle);
 1171              		.loc 1 680 22 view .LVU329
 1172 0010 0093     		str	r3, [sp]
 1173 0012 6388     		ldrh	r3, [r4, #2]
 1174 0014 FFF7FEFF 		bl	MAP
 1175              	.LVL74:
 1176 0018 00EE100A 		vmov	s0, r0	@ int
 1177              	.LVL75:
 681:Core/Src/main.c ****   // Shoulder
 1178              		.loc 1 681 3 is_stmt 1 view .LVU330
 1179 001c B8EE400A 		vcvt.f32.u32	s0, s0
 1180              	.LVL76:
 681:Core/Src/main.c ****   // Shoulder
 1181              		.loc 1 681 3 is_stmt 0 view .LVU331
 1182 0020 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1183 0022 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1184              	.LVL77:
 683:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle);
 1185              		.loc 1 683 3 is_stmt 1 view .LVU332
 683:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle);
 1186              		.loc 1 683 22 is_stmt 0 view .LVU333
 1187 0026 E868     		ldr	r0, [r5, #12]
 1188 0028 2969     		ldr	r1, [r5, #16]
 1189 002a 6A69     		ldr	r2, [r5, #20]
 683:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle);
 1190              		.loc 1 683 148 view .LVU334
 1191 002c A389     		ldrh	r3, [r4, #12]
 683:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle);
 1192              		.loc 1 683 22 view .LVU335
 1193 002e 0093     		str	r3, [sp]
 1194 0030 6389     		ldrh	r3, [r4, #10]
 1195 0032 FFF7FEFF 		bl	MAP
 1196              	.LVL78:
 1197 0036 00EE100A 		vmov	s0, r0	@ int
 1198              	.LVL79:
 684:Core/Src/main.c ****   // Elbow
 1199              		.loc 1 684 3 is_stmt 1 view .LVU336
 1200 003a B8EE400A 		vcvt.f32.u32	s0, s0
 1201              	.LVL80:
 684:Core/Src/main.c ****   // Elbow
 1202              		.loc 1 684 3 is_stmt 0 view .LVU337
 1203 003e 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 1204 0040 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1205              	.LVL81:
 686:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle);
 1206              		.loc 1 686 3 is_stmt 1 view .LVU338
 686:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle);
 1207              		.loc 1 686 22 is_stmt 0 view .LVU339
 1208 0044 A869     		ldr	r0, [r5, #24]
 1209 0046 E969     		ldr	r1, [r5, #28]
 1210 0048 2A6A     		ldr	r2, [r5, #32]
 686:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle);
 1211              		.loc 1 686 133 view .LVU340
 1212 004a A38A     		ldrh	r3, [r4, #20]
 686:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle);
 1213              		.loc 1 686 22 view .LVU341
ARM GAS  /tmp/ccFQNcvb.s 			page 43


 1214 004c 0093     		str	r3, [sp]
 1215 004e 638A     		ldrh	r3, [r4, #18]
 1216 0050 FFF7FEFF 		bl	MAP
 1217              	.LVL82:
 1218 0054 00EE100A 		vmov	s0, r0	@ int
 1219              	.LVL83:
 687:Core/Src/main.c ****   // Wrist
 1220              		.loc 1 687 3 is_stmt 1 view .LVU342
 1221 0058 B8EE400A 		vcvt.f32.u32	s0, s0
 1222              	.LVL84:
 687:Core/Src/main.c ****   // Wrist
 1223              		.loc 1 687 3 is_stmt 0 view .LVU343
 1224 005c 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 1225 005e FFF7FEFF 		bl	PCA9685_SetServoAngle
 1226              	.LVL85:
 689:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle);
 1227              		.loc 1 689 3 is_stmt 1 view .LVU344
 689:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle);
 1228              		.loc 1 689 22 is_stmt 0 view .LVU345
 1229 0062 686A     		ldr	r0, [r5, #36]
 1230 0064 A96A     		ldr	r1, [r5, #40]
 1231 0066 EA6A     		ldr	r2, [r5, #44]
 689:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle);
 1232              		.loc 1 689 133 view .LVU346
 1233 0068 A38B     		ldrh	r3, [r4, #28]
 689:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle);
 1234              		.loc 1 689 22 view .LVU347
 1235 006a 0093     		str	r3, [sp]
 1236 006c 638B     		ldrh	r3, [r4, #26]
 1237 006e FFF7FEFF 		bl	MAP
 1238              	.LVL86:
 1239 0072 00EE100A 		vmov	s0, r0	@ int
 1240              	.LVL87:
 690:Core/Src/main.c ****   // Gripper
 1241              		.loc 1 690 3 is_stmt 1 view .LVU348
 1242 0076 B8EE400A 		vcvt.f32.u32	s0, s0
 1243              	.LVL88:
 690:Core/Src/main.c ****   // Gripper
 1244              		.loc 1 690 3 is_stmt 0 view .LVU349
 1245 007a 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 1246 007c FFF7FEFF 		bl	PCA9685_SetServoAngle
 1247              	.LVL89:
 692:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1248              		.loc 1 692 3 is_stmt 1 view .LVU350
 692:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1249              		.loc 1 692 13 is_stmt 0 view .LVU351
 1250 0080 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 692:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1251              		.loc 1 692 5 view .LVU352
 1252 0084 53B1     		cbz	r3, .L57
 693:Core/Src/main.c ****   }else{
 1253              		.loc 1 693 5 is_stmt 1 view .LVU353
 693:Core/Src/main.c ****   }else{
 1254              		.loc 1 693 70 is_stmt 0 view .LVU354
 1255 0086 638C     		ldrh	r3, [r4, #34]
 1256 0088 00EE103A 		vmov	s0, r3	@ int
 693:Core/Src/main.c ****   }else{
ARM GAS  /tmp/ccFQNcvb.s 			page 44


 1257              		.loc 1 693 5 view .LVU355
 1258 008c B8EE400A 		vcvt.f32.u32	s0, s0
 1259 0090 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1260 0094 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1261              	.LVL90:
 1262              	.L56:
 697:Core/Src/main.c **** 
 1263              		.loc 1 697 1 view .LVU356
 1264 0098 03B0     		add	sp, sp, #12
 1265              		.cfi_remember_state
 1266              		.cfi_def_cfa_offset 12
 1267              		@ sp needed
 1268 009a 30BD     		pop	{r4, r5, pc}
 1269              	.LVL91:
 1270              	.L57:
 1271              		.cfi_restore_state
 695:Core/Src/main.c ****   }
 1272              		.loc 1 695 5 is_stmt 1 view .LVU357
 695:Core/Src/main.c ****   }
 1273              		.loc 1 695 70 is_stmt 0 view .LVU358
 1274 009c A38C     		ldrh	r3, [r4, #36]
 1275 009e 00EE103A 		vmov	s0, r3	@ int
 695:Core/Src/main.c ****   }
 1276              		.loc 1 695 5 view .LVU359
 1277 00a2 B8EE400A 		vcvt.f32.u32	s0, s0
 1278 00a6 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1279 00aa FFF7FEFF 		bl	PCA9685_SetServoAngle
 1280              	.LVL92:
 697:Core/Src/main.c **** 
 1281              		.loc 1 697 1 view .LVU360
 1282 00ae F3E7     		b	.L56
 1283              		.cfi_endproc
 1284              	.LFE255:
 1286              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 1287              		.align	1
 1288              		.global	MotorControlTaskEntry
 1289              		.syntax unified
 1290              		.thumb
 1291              		.thumb_func
 1292              		.fpu fpv4-sp-d16
 1294              	MotorControlTaskEntry:
 1295              	.LVL93:
 1296              	.LFB262:
 889:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1297              		.loc 1 889 1 is_stmt 1 view -0
 1298              		.cfi_startproc
 1299              		@ Volatile: function does not return.
 1300              		@ args = 0, pretend = 0, frame = 40
 1301              		@ frame_needed = 0, uses_anonymous_args = 0
 889:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1302              		.loc 1 889 1 is_stmt 0 view .LVU362
 1303 0000 00B5     		push	{lr}
 1304              		.cfi_def_cfa_offset 4
 1305              		.cfi_offset 14, -4
 1306 0002 8BB0     		sub	sp, sp, #44
 1307              		.cfi_def_cfa_offset 48
 892:Core/Src/main.c ****   MegaBotInit(&MegaBot);
ARM GAS  /tmp/ccFQNcvb.s 			page 45


 1308              		.loc 1 892 3 is_stmt 1 view .LVU363
 893:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1309              		.loc 1 893 3 view .LVU364
 1310 0004 6846     		mov	r0, sp
 1311              	.LVL94:
 893:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1312              		.loc 1 893 3 is_stmt 0 view .LVU365
 1313 0006 FFF7FEFF 		bl	MegaBotInit
 1314              	.LVL95:
 894:Core/Src/main.c **** 
 1315              		.loc 1 894 3 is_stmt 1 view .LVU366
 1316 000a 6846     		mov	r0, sp
 1317 000c FFF7FEFF 		bl	ServoDriverInit
 1318              	.LVL96:
 1319 0010 06E0     		b	.L62
 1320              	.L64:
 902:Core/Src/main.c ****     }
 1321              		.loc 1 902 7 view .LVU367
 1322 0012 0849     		ldr	r1, .L65
 1323 0014 6846     		mov	r0, sp
 1324 0016 FFF7FEFF 		bl	MoveServo
 1325              	.LVL97:
 1326              	.L61:
 907:Core/Src/main.c ****   }
 1327              		.loc 1 907 5 view .LVU368
 1328 001a 0120     		movs	r0, #1
 1329 001c FFF7FEFF 		bl	osDelay
 1330              	.LVL98:
 898:Core/Src/main.c ****   {
 1331              		.loc 1 898 8 view .LVU369
 1332              	.L62:
 898:Core/Src/main.c ****   {
 1333              		.loc 1 898 3 view .LVU370
 901:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1334              		.loc 1 901 5 view .LVU371
 901:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1335              		.loc 1 901 8 is_stmt 0 view .LVU372
 1336 0020 4FF0FF32 		mov	r2, #-1
 1337 0024 0349     		ldr	r1, .L65
 1338 0026 044B     		ldr	r3, .L65+4
 1339 0028 1868     		ldr	r0, [r3]
 1340 002a FFF7FEFF 		bl	xQueueReceive
 1341              	.LVL99:
 901:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1342              		.loc 1 901 7 view .LVU373
 1343 002e 0128     		cmp	r0, #1
 1344 0030 EFD0     		beq	.L64
 1345 0032 F2E7     		b	.L61
 1346              	.L66:
 1347              		.align	2
 1348              	.L65:
 1349 0034 00000000 		.word	.LANCHOR10
 1350 0038 00000000 		.word	.LANCHOR4
 1351              		.cfi_endproc
 1352              	.LFE262:
 1354              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1355              		.align	1
ARM GAS  /tmp/ccFQNcvb.s 			page 46


 1356              		.global	HAL_TIM_PeriodElapsedCallback
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	HAL_TIM_PeriodElapsedCallback:
 1363              	.LVL100:
 1364              	.LFB264:
 926:Core/Src/main.c ****   }
 927:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 928:Core/Src/main.c **** }
 929:Core/Src/main.c **** 
 930:Core/Src/main.c **** /**
 931:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 932:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 933:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 934:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 935:Core/Src/main.c ****   * @param  htim : TIM handle
 936:Core/Src/main.c ****   * @retval None
 937:Core/Src/main.c ****   */
 938:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 939:Core/Src/main.c **** {
 1365              		.loc 1 939 1 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369              		.loc 1 939 1 is_stmt 0 view .LVU375
 1370 0000 08B5     		push	{r3, lr}
 1371              		.cfi_def_cfa_offset 8
 1372              		.cfi_offset 3, -8
 1373              		.cfi_offset 14, -4
 940:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 941:Core/Src/main.c **** 
 942:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 943:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1374              		.loc 1 943 3 is_stmt 1 view .LVU376
 1375              		.loc 1 943 11 is_stmt 0 view .LVU377
 1376 0002 0268     		ldr	r2, [r0]
 1377              		.loc 1 943 6 view .LVU378
 1378 0004 034B     		ldr	r3, .L71
 1379 0006 9A42     		cmp	r2, r3
 1380 0008 00D0     		beq	.L70
 1381              	.LVL101:
 1382              	.L67:
 944:Core/Src/main.c ****     HAL_IncTick();
 945:Core/Src/main.c ****   }
 946:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 947:Core/Src/main.c **** 
 948:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 949:Core/Src/main.c **** }
 1383              		.loc 1 949 1 view .LVU379
 1384 000a 08BD     		pop	{r3, pc}
 1385              	.LVL102:
 1386              	.L70:
 944:Core/Src/main.c ****     HAL_IncTick();
 1387              		.loc 1 944 5 is_stmt 1 view .LVU380
 1388 000c FFF7FEFF 		bl	HAL_IncTick
ARM GAS  /tmp/ccFQNcvb.s 			page 47


 1389              	.LVL103:
 1390              		.loc 1 949 1 is_stmt 0 view .LVU381
 1391 0010 FBE7     		b	.L67
 1392              	.L72:
 1393 0012 00BF     		.align	2
 1394              	.L71:
 1395 0014 00100040 		.word	1073745920
 1396              		.cfi_endproc
 1397              	.LFE264:
 1399              		.section	.text.Error_Handler,"ax",%progbits
 1400              		.align	1
 1401              		.global	Error_Handler
 1402              		.syntax unified
 1403              		.thumb
 1404              		.thumb_func
 1405              		.fpu fpv4-sp-d16
 1407              	Error_Handler:
 1408              	.LFB265:
 950:Core/Src/main.c **** 
 951:Core/Src/main.c **** /**
 952:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 953:Core/Src/main.c ****   * @retval None
 954:Core/Src/main.c ****   */
 955:Core/Src/main.c **** void Error_Handler(void)
 956:Core/Src/main.c **** {
 1409              		.loc 1 956 1 is_stmt 1 view -0
 1410              		.cfi_startproc
 1411              		@ Volatile: function does not return.
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
 957:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 958:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 959:Core/Src/main.c ****   __disable_irq();
 1415              		.loc 1 959 3 view .LVU383
 1416              	.LBB8:
 1417              	.LBI8:
 1418              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/ccFQNcvb.s 			page 48


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  /tmp/ccFQNcvb.s 			page 49


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  /tmp/ccFQNcvb.s 			page 50


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
ARM GAS  /tmp/ccFQNcvb.s 			page 51


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  /tmp/ccFQNcvb.s 			page 52


 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 53


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  /tmp/ccFQNcvb.s 			page 54


 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
ARM GAS  /tmp/ccFQNcvb.s 			page 55


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccFQNcvb.s 			page 56


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/ccFQNcvb.s 			page 57


 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
ARM GAS  /tmp/ccFQNcvb.s 			page 58


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccFQNcvb.s 			page 59


 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
ARM GAS  /tmp/ccFQNcvb.s 			page 60


 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/ccFQNcvb.s 			page 61


 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccFQNcvb.s 			page 62


 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccFQNcvb.s 			page 63


 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 64


 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1419              		.loc 2 960 27 view .LVU384
 1420              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1421              		.loc 2 962 3 view .LVU385
 1422              		.syntax unified
 1423              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1424 0000 72B6     		cpsid i
 1425              	@ 0 "" 2
 1426              		.thumb
 1427              		.syntax unified
 1428              	.L74:
 1429              	.LBE9:
 1430              	.LBE8:
 960:Core/Src/main.c ****   while (1)
 1431              		.loc 1 960 3 discriminator 1 view .LVU386
 961:Core/Src/main.c ****   {
 962:Core/Src/main.c ****   }
 1432              		.loc 1 962 3 discriminator 1 view .LVU387
 960:Core/Src/main.c ****   while (1)
 1433              		.loc 1 960 9 discriminator 1 view .LVU388
 1434 0002 FEE7     		b	.L74
 1435              		.cfi_endproc
 1436              	.LFE265:
 1438              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1439              		.align	1
 1440              		.syntax unified
 1441              		.thumb
ARM GAS  /tmp/ccFQNcvb.s 			page 65


 1442              		.thumb_func
 1443              		.fpu fpv4-sp-d16
 1445              	MX_ADC1_Init:
 1446              	.LFB246:
 360:Core/Src/main.c **** 
 1447              		.loc 1 360 1 view -0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 16
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451 0000 10B5     		push	{r4, lr}
 1452              		.cfi_def_cfa_offset 8
 1453              		.cfi_offset 4, -8
 1454              		.cfi_offset 14, -4
 1455 0002 84B0     		sub	sp, sp, #16
 1456              		.cfi_def_cfa_offset 24
 366:Core/Src/main.c **** 
 1457              		.loc 1 366 3 view .LVU390
 366:Core/Src/main.c **** 
 1458              		.loc 1 366 26 is_stmt 0 view .LVU391
 1459 0004 0023     		movs	r3, #0
 1460 0006 0093     		str	r3, [sp]
 1461 0008 0193     		str	r3, [sp, #4]
 1462 000a 0293     		str	r3, [sp, #8]
 1463 000c 0393     		str	r3, [sp, #12]
 374:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1464              		.loc 1 374 3 is_stmt 1 view .LVU392
 374:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1465              		.loc 1 374 18 is_stmt 0 view .LVU393
 1466 000e 2548     		ldr	r0, .L87
 1467 0010 254A     		ldr	r2, .L87+4
 1468 0012 0260     		str	r2, [r0]
 375:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1469              		.loc 1 375 3 is_stmt 1 view .LVU394
 375:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1470              		.loc 1 375 29 is_stmt 0 view .LVU395
 1471 0014 4FF48032 		mov	r2, #65536
 1472 0018 4260     		str	r2, [r0, #4]
 376:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1473              		.loc 1 376 3 is_stmt 1 view .LVU396
 376:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1474              		.loc 1 376 25 is_stmt 0 view .LVU397
 1475 001a 8360     		str	r3, [r0, #8]
 377:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1476              		.loc 1 377 3 is_stmt 1 view .LVU398
 377:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1477              		.loc 1 377 27 is_stmt 0 view .LVU399
 1478 001c 0122     		movs	r2, #1
 1479 001e 0261     		str	r2, [r0, #16]
 378:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1480              		.loc 1 378 3 is_stmt 1 view .LVU400
 378:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1481              		.loc 1 378 33 is_stmt 0 view .LVU401
 1482 0020 0376     		strb	r3, [r0, #24]
 379:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 4;
 1483              		.loc 1 379 3 is_stmt 1 view .LVU402
 379:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 4;
 1484              		.loc 1 379 36 is_stmt 0 view .LVU403
ARM GAS  /tmp/ccFQNcvb.s 			page 66


 1485 0022 80F82020 		strb	r2, [r0, #32]
 380:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1486              		.loc 1 380 3 is_stmt 1 view .LVU404
 380:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1487              		.loc 1 380 34 is_stmt 0 view .LVU405
 1488 0026 0421     		movs	r1, #4
 1489 0028 4162     		str	r1, [r0, #36]
 381:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1490              		.loc 1 381 3 is_stmt 1 view .LVU406
 381:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1491              		.loc 1 381 35 is_stmt 0 view .LVU407
 1492 002a C362     		str	r3, [r0, #44]
 382:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1493              		.loc 1 382 3 is_stmt 1 view .LVU408
 382:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1494              		.loc 1 382 31 is_stmt 0 view .LVU409
 1495 002c 1F4C     		ldr	r4, .L87+8
 1496 002e 8462     		str	r4, [r0, #40]
 383:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1497              		.loc 1 383 3 is_stmt 1 view .LVU410
 383:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1498              		.loc 1 383 24 is_stmt 0 view .LVU411
 1499 0030 C360     		str	r3, [r0, #12]
 384:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1500              		.loc 1 384 3 is_stmt 1 view .LVU412
 384:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1501              		.loc 1 384 30 is_stmt 0 view .LVU413
 1502 0032 C161     		str	r1, [r0, #28]
 385:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1503              		.loc 1 385 3 is_stmt 1 view .LVU414
 385:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1504              		.loc 1 385 36 is_stmt 0 view .LVU415
 1505 0034 80F83030 		strb	r3, [r0, #48]
 386:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1506              		.loc 1 386 3 is_stmt 1 view .LVU416
 386:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1507              		.loc 1 386 27 is_stmt 0 view .LVU417
 1508 0038 4261     		str	r2, [r0, #20]
 387:Core/Src/main.c ****   {
 1509              		.loc 1 387 3 is_stmt 1 view .LVU418
 387:Core/Src/main.c ****   {
 1510              		.loc 1 387 7 is_stmt 0 view .LVU419
 1511 003a FFF7FEFF 		bl	HAL_ADC_Init
 1512              	.LVL104:
 387:Core/Src/main.c ****   {
 1513              		.loc 1 387 6 view .LVU420
 1514 003e 30BB     		cbnz	r0, .L82
 394:Core/Src/main.c ****   sConfig.Rank = 1;
 1515              		.loc 1 394 3 is_stmt 1 view .LVU421
 394:Core/Src/main.c ****   sConfig.Rank = 1;
 1516              		.loc 1 394 19 is_stmt 0 view .LVU422
 1517 0040 0023     		movs	r3, #0
 1518 0042 0093     		str	r3, [sp]
 395:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1519              		.loc 1 395 3 is_stmt 1 view .LVU423
 395:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1520              		.loc 1 395 16 is_stmt 0 view .LVU424
ARM GAS  /tmp/ccFQNcvb.s 			page 67


 1521 0044 0122     		movs	r2, #1
 1522 0046 0192     		str	r2, [sp, #4]
 396:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1523              		.loc 1 396 3 is_stmt 1 view .LVU425
 396:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1524              		.loc 1 396 24 is_stmt 0 view .LVU426
 1525 0048 0293     		str	r3, [sp, #8]
 397:Core/Src/main.c ****   {
 1526              		.loc 1 397 3 is_stmt 1 view .LVU427
 397:Core/Src/main.c ****   {
 1527              		.loc 1 397 7 is_stmt 0 view .LVU428
 1528 004a 6946     		mov	r1, sp
 1529 004c 1548     		ldr	r0, .L87
 1530 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1531              	.LVL105:
 397:Core/Src/main.c ****   {
 1532              		.loc 1 397 6 view .LVU429
 1533 0052 F0B9     		cbnz	r0, .L83
 404:Core/Src/main.c ****   sConfig.Rank = 2;
 1534              		.loc 1 404 3 is_stmt 1 view .LVU430
 404:Core/Src/main.c ****   sConfig.Rank = 2;
 1535              		.loc 1 404 19 is_stmt 0 view .LVU431
 1536 0054 0123     		movs	r3, #1
 1537 0056 0093     		str	r3, [sp]
 405:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1538              		.loc 1 405 3 is_stmt 1 view .LVU432
 405:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1539              		.loc 1 405 16 is_stmt 0 view .LVU433
 1540 0058 0223     		movs	r3, #2
 1541 005a 0193     		str	r3, [sp, #4]
 406:Core/Src/main.c ****   {
 1542              		.loc 1 406 3 is_stmt 1 view .LVU434
 406:Core/Src/main.c ****   {
 1543              		.loc 1 406 7 is_stmt 0 view .LVU435
 1544 005c 6946     		mov	r1, sp
 1545 005e 1148     		ldr	r0, .L87
 1546 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1547              	.LVL106:
 406:Core/Src/main.c ****   {
 1548              		.loc 1 406 6 view .LVU436
 1549 0064 B8B9     		cbnz	r0, .L84
 413:Core/Src/main.c ****   sConfig.Rank = 3;
 1550              		.loc 1 413 3 is_stmt 1 view .LVU437
 413:Core/Src/main.c ****   sConfig.Rank = 3;
 1551              		.loc 1 413 19 is_stmt 0 view .LVU438
 1552 0066 0423     		movs	r3, #4
 1553 0068 0093     		str	r3, [sp]
 414:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1554              		.loc 1 414 3 is_stmt 1 view .LVU439
 414:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1555              		.loc 1 414 16 is_stmt 0 view .LVU440
 1556 006a 0323     		movs	r3, #3
 1557 006c 0193     		str	r3, [sp, #4]
 415:Core/Src/main.c ****   {
 1558              		.loc 1 415 3 is_stmt 1 view .LVU441
 415:Core/Src/main.c ****   {
 1559              		.loc 1 415 7 is_stmt 0 view .LVU442
ARM GAS  /tmp/ccFQNcvb.s 			page 68


 1560 006e 6946     		mov	r1, sp
 1561 0070 0C48     		ldr	r0, .L87
 1562 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1563              	.LVL107:
 415:Core/Src/main.c ****   {
 1564              		.loc 1 415 6 view .LVU443
 1565 0076 80B9     		cbnz	r0, .L85
 422:Core/Src/main.c ****   sConfig.Rank = 4;
 1566              		.loc 1 422 3 is_stmt 1 view .LVU444
 422:Core/Src/main.c ****   sConfig.Rank = 4;
 1567              		.loc 1 422 19 is_stmt 0 view .LVU445
 1568 0078 0823     		movs	r3, #8
 1569 007a 0093     		str	r3, [sp]
 423:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1570              		.loc 1 423 3 is_stmt 1 view .LVU446
 423:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1571              		.loc 1 423 16 is_stmt 0 view .LVU447
 1572 007c 0423     		movs	r3, #4
 1573 007e 0193     		str	r3, [sp, #4]
 424:Core/Src/main.c ****   {
 1574              		.loc 1 424 3 is_stmt 1 view .LVU448
 424:Core/Src/main.c ****   {
 1575              		.loc 1 424 7 is_stmt 0 view .LVU449
 1576 0080 6946     		mov	r1, sp
 1577 0082 0848     		ldr	r0, .L87
 1578 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1579              	.LVL108:
 424:Core/Src/main.c ****   {
 1580              		.loc 1 424 6 view .LVU450
 1581 0088 48B9     		cbnz	r0, .L86
 432:Core/Src/main.c **** 
 1582              		.loc 1 432 1 view .LVU451
 1583 008a 04B0     		add	sp, sp, #16
 1584              		.cfi_remember_state
 1585              		.cfi_def_cfa_offset 8
 1586              		@ sp needed
 1587 008c 10BD     		pop	{r4, pc}
 1588              	.L82:
 1589              		.cfi_restore_state
 389:Core/Src/main.c ****   }
 1590              		.loc 1 389 5 is_stmt 1 view .LVU452
 1591 008e FFF7FEFF 		bl	Error_Handler
 1592              	.LVL109:
 1593              	.L83:
 399:Core/Src/main.c ****   }
 1594              		.loc 1 399 5 view .LVU453
 1595 0092 FFF7FEFF 		bl	Error_Handler
 1596              	.LVL110:
 1597              	.L84:
 408:Core/Src/main.c ****   }
 1598              		.loc 1 408 5 view .LVU454
 1599 0096 FFF7FEFF 		bl	Error_Handler
 1600              	.LVL111:
 1601              	.L85:
 417:Core/Src/main.c ****   }
 1602              		.loc 1 417 5 view .LVU455
 1603 009a FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccFQNcvb.s 			page 69


 1604              	.LVL112:
 1605              	.L86:
 426:Core/Src/main.c ****   }
 1606              		.loc 1 426 5 view .LVU456
 1607 009e FFF7FEFF 		bl	Error_Handler
 1608              	.LVL113:
 1609              	.L88:
 1610 00a2 00BF     		.align	2
 1611              	.L87:
 1612 00a4 00000000 		.word	.LANCHOR6
 1613 00a8 00200140 		.word	1073815552
 1614 00ac 0100000F 		.word	251658241
 1615              		.cfi_endproc
 1616              	.LFE246:
 1618              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1619              		.align	1
 1620              		.syntax unified
 1621              		.thumb
 1622              		.thumb_func
 1623              		.fpu fpv4-sp-d16
 1625              	MX_I2C1_Init:
 1626              	.LFB247:
 440:Core/Src/main.c **** 
 1627              		.loc 1 440 1 view -0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631 0000 08B5     		push	{r3, lr}
 1632              		.cfi_def_cfa_offset 8
 1633              		.cfi_offset 3, -8
 1634              		.cfi_offset 14, -4
 449:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1635              		.loc 1 449 3 view .LVU458
 449:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1636              		.loc 1 449 18 is_stmt 0 view .LVU459
 1637 0002 0A48     		ldr	r0, .L93
 1638 0004 0A4B     		ldr	r3, .L93+4
 1639 0006 0360     		str	r3, [r0]
 450:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1640              		.loc 1 450 3 is_stmt 1 view .LVU460
 450:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1641              		.loc 1 450 25 is_stmt 0 view .LVU461
 1642 0008 0A4B     		ldr	r3, .L93+8
 1643 000a 4360     		str	r3, [r0, #4]
 451:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1644              		.loc 1 451 3 is_stmt 1 view .LVU462
 451:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1645              		.loc 1 451 24 is_stmt 0 view .LVU463
 1646 000c 0023     		movs	r3, #0
 1647 000e 8360     		str	r3, [r0, #8]
 452:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1648              		.loc 1 452 3 is_stmt 1 view .LVU464
 452:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1649              		.loc 1 452 26 is_stmt 0 view .LVU465
 1650 0010 C360     		str	r3, [r0, #12]
 453:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1651              		.loc 1 453 3 is_stmt 1 view .LVU466
ARM GAS  /tmp/ccFQNcvb.s 			page 70


 453:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1652              		.loc 1 453 29 is_stmt 0 view .LVU467
 1653 0012 4FF48042 		mov	r2, #16384
 1654 0016 0261     		str	r2, [r0, #16]
 454:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1655              		.loc 1 454 3 is_stmt 1 view .LVU468
 454:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1656              		.loc 1 454 30 is_stmt 0 view .LVU469
 1657 0018 4361     		str	r3, [r0, #20]
 455:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1658              		.loc 1 455 3 is_stmt 1 view .LVU470
 455:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1659              		.loc 1 455 26 is_stmt 0 view .LVU471
 1660 001a 8361     		str	r3, [r0, #24]
 456:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1661              		.loc 1 456 3 is_stmt 1 view .LVU472
 456:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1662              		.loc 1 456 30 is_stmt 0 view .LVU473
 1663 001c C361     		str	r3, [r0, #28]
 457:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1664              		.loc 1 457 3 is_stmt 1 view .LVU474
 457:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1665              		.loc 1 457 28 is_stmt 0 view .LVU475
 1666 001e 0362     		str	r3, [r0, #32]
 458:Core/Src/main.c ****   {
 1667              		.loc 1 458 3 is_stmt 1 view .LVU476
 458:Core/Src/main.c ****   {
 1668              		.loc 1 458 7 is_stmt 0 view .LVU477
 1669 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1670              	.LVL114:
 458:Core/Src/main.c ****   {
 1671              		.loc 1 458 6 view .LVU478
 1672 0024 00B9     		cbnz	r0, .L92
 466:Core/Src/main.c **** 
 1673              		.loc 1 466 1 view .LVU479
 1674 0026 08BD     		pop	{r3, pc}
 1675              	.L92:
 460:Core/Src/main.c ****   }
 1676              		.loc 1 460 5 is_stmt 1 view .LVU480
 1677 0028 FFF7FEFF 		bl	Error_Handler
 1678              	.LVL115:
 1679              	.L94:
 1680              		.align	2
 1681              	.L93:
 1682 002c 00000000 		.word	.LANCHOR5
 1683 0030 00540040 		.word	1073763328
 1684 0034 A0860100 		.word	100000
 1685              		.cfi_endproc
 1686              	.LFE247:
 1688              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1689              		.align	1
 1690              		.syntax unified
 1691              		.thumb
 1692              		.thumb_func
 1693              		.fpu fpv4-sp-d16
 1695              	MX_USART2_UART_Init:
 1696              	.LFB249:
ARM GAS  /tmp/ccFQNcvb.s 			page 71


 508:Core/Src/main.c **** 
 1697              		.loc 1 508 1 view -0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701 0000 08B5     		push	{r3, lr}
 1702              		.cfi_def_cfa_offset 8
 1703              		.cfi_offset 3, -8
 1704              		.cfi_offset 14, -4
 517:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1705              		.loc 1 517 3 view .LVU482
 517:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1706              		.loc 1 517 19 is_stmt 0 view .LVU483
 1707 0002 0A48     		ldr	r0, .L99
 1708 0004 0A4B     		ldr	r3, .L99+4
 1709 0006 0360     		str	r3, [r0]
 518:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1710              		.loc 1 518 3 is_stmt 1 view .LVU484
 518:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1711              		.loc 1 518 24 is_stmt 0 view .LVU485
 1712 0008 4FF4E133 		mov	r3, #115200
 1713 000c 4360     		str	r3, [r0, #4]
 519:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1714              		.loc 1 519 3 is_stmt 1 view .LVU486
 519:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1715              		.loc 1 519 26 is_stmt 0 view .LVU487
 1716 000e 0023     		movs	r3, #0
 1717 0010 8360     		str	r3, [r0, #8]
 520:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1718              		.loc 1 520 3 is_stmt 1 view .LVU488
 520:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1719              		.loc 1 520 24 is_stmt 0 view .LVU489
 1720 0012 C360     		str	r3, [r0, #12]
 521:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1721              		.loc 1 521 3 is_stmt 1 view .LVU490
 521:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1722              		.loc 1 521 22 is_stmt 0 view .LVU491
 1723 0014 0361     		str	r3, [r0, #16]
 522:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1724              		.loc 1 522 3 is_stmt 1 view .LVU492
 522:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1725              		.loc 1 522 20 is_stmt 0 view .LVU493
 1726 0016 0C22     		movs	r2, #12
 1727 0018 4261     		str	r2, [r0, #20]
 523:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1728              		.loc 1 523 3 is_stmt 1 view .LVU494
 523:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1729              		.loc 1 523 25 is_stmt 0 view .LVU495
 1730 001a 8361     		str	r3, [r0, #24]
 524:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1731              		.loc 1 524 3 is_stmt 1 view .LVU496
 524:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1732              		.loc 1 524 28 is_stmt 0 view .LVU497
 1733 001c C361     		str	r3, [r0, #28]
 525:Core/Src/main.c ****   {
 1734              		.loc 1 525 3 is_stmt 1 view .LVU498
 525:Core/Src/main.c ****   {
ARM GAS  /tmp/ccFQNcvb.s 			page 72


 1735              		.loc 1 525 7 is_stmt 0 view .LVU499
 1736 001e FFF7FEFF 		bl	HAL_UART_Init
 1737              	.LVL116:
 525:Core/Src/main.c ****   {
 1738              		.loc 1 525 6 view .LVU500
 1739 0022 00B9     		cbnz	r0, .L98
 533:Core/Src/main.c **** 
 1740              		.loc 1 533 1 view .LVU501
 1741 0024 08BD     		pop	{r3, pc}
 1742              	.L98:
 527:Core/Src/main.c ****   }
 1743              		.loc 1 527 5 is_stmt 1 view .LVU502
 1744 0026 FFF7FEFF 		bl	Error_Handler
 1745              	.LVL117:
 1746              	.L100:
 1747 002a 00BF     		.align	2
 1748              	.L99:
 1749 002c 00000000 		.word	.LANCHOR11
 1750 0030 00440040 		.word	1073759232
 1751              		.cfi_endproc
 1752              	.LFE249:
 1754              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1755              		.align	1
 1756              		.syntax unified
 1757              		.thumb
 1758              		.thumb_func
 1759              		.fpu fpv4-sp-d16
 1761              	MX_I2C2_Init:
 1762              	.LFB248:
 474:Core/Src/main.c **** 
 1763              		.loc 1 474 1 view -0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767 0000 08B5     		push	{r3, lr}
 1768              		.cfi_def_cfa_offset 8
 1769              		.cfi_offset 3, -8
 1770              		.cfi_offset 14, -4
 483:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1771              		.loc 1 483 3 view .LVU504
 483:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1772              		.loc 1 483 18 is_stmt 0 view .LVU505
 1773 0002 0A48     		ldr	r0, .L105
 1774 0004 0A4B     		ldr	r3, .L105+4
 1775 0006 0360     		str	r3, [r0]
 484:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1776              		.loc 1 484 3 is_stmt 1 view .LVU506
 484:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1777              		.loc 1 484 25 is_stmt 0 view .LVU507
 1778 0008 0A4B     		ldr	r3, .L105+8
 1779 000a 4360     		str	r3, [r0, #4]
 485:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1780              		.loc 1 485 3 is_stmt 1 view .LVU508
 485:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1781              		.loc 1 485 24 is_stmt 0 view .LVU509
 1782 000c 0023     		movs	r3, #0
 1783 000e 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccFQNcvb.s 			page 73


 486:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1784              		.loc 1 486 3 is_stmt 1 view .LVU510
 486:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1785              		.loc 1 486 26 is_stmt 0 view .LVU511
 1786 0010 C360     		str	r3, [r0, #12]
 487:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1787              		.loc 1 487 3 is_stmt 1 view .LVU512
 487:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1788              		.loc 1 487 29 is_stmt 0 view .LVU513
 1789 0012 4FF48042 		mov	r2, #16384
 1790 0016 0261     		str	r2, [r0, #16]
 488:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1791              		.loc 1 488 3 is_stmt 1 view .LVU514
 488:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1792              		.loc 1 488 30 is_stmt 0 view .LVU515
 1793 0018 4361     		str	r3, [r0, #20]
 489:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1794              		.loc 1 489 3 is_stmt 1 view .LVU516
 489:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1795              		.loc 1 489 26 is_stmt 0 view .LVU517
 1796 001a 8361     		str	r3, [r0, #24]
 490:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1797              		.loc 1 490 3 is_stmt 1 view .LVU518
 490:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1798              		.loc 1 490 30 is_stmt 0 view .LVU519
 1799 001c C361     		str	r3, [r0, #28]
 491:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1800              		.loc 1 491 3 is_stmt 1 view .LVU520
 491:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1801              		.loc 1 491 28 is_stmt 0 view .LVU521
 1802 001e 0362     		str	r3, [r0, #32]
 492:Core/Src/main.c ****   {
 1803              		.loc 1 492 3 is_stmt 1 view .LVU522
 492:Core/Src/main.c ****   {
 1804              		.loc 1 492 7 is_stmt 0 view .LVU523
 1805 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1806              	.LVL118:
 492:Core/Src/main.c ****   {
 1807              		.loc 1 492 6 view .LVU524
 1808 0024 00B9     		cbnz	r0, .L104
 500:Core/Src/main.c **** 
 1809              		.loc 1 500 1 view .LVU525
 1810 0026 08BD     		pop	{r3, pc}
 1811              	.L104:
 494:Core/Src/main.c ****   }
 1812              		.loc 1 494 5 is_stmt 1 view .LVU526
 1813 0028 FFF7FEFF 		bl	Error_Handler
 1814              	.LVL119:
 1815              	.L106:
 1816              		.align	2
 1817              	.L105:
 1818 002c 00000000 		.word	.LANCHOR12
 1819 0030 00580040 		.word	1073764352
 1820 0034 A0860100 		.word	100000
 1821              		.cfi_endproc
 1822              	.LFE248:
 1824              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/ccFQNcvb.s 			page 74


 1825              		.align	1
 1826              		.global	SystemClock_Config
 1827              		.syntax unified
 1828              		.thumb
 1829              		.thumb_func
 1830              		.fpu fpv4-sp-d16
 1832              	SystemClock_Config:
 1833              	.LFB245:
 312:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1834              		.loc 1 312 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 80
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838 0000 00B5     		push	{lr}
 1839              		.cfi_def_cfa_offset 4
 1840              		.cfi_offset 14, -4
 1841 0002 95B0     		sub	sp, sp, #84
 1842              		.cfi_def_cfa_offset 88
 313:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1843              		.loc 1 313 3 view .LVU528
 313:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1844              		.loc 1 313 22 is_stmt 0 view .LVU529
 1845 0004 3422     		movs	r2, #52
 1846 0006 0021     		movs	r1, #0
 1847 0008 07A8     		add	r0, sp, #28
 1848 000a FFF7FEFF 		bl	memset
 1849              	.LVL120:
 314:Core/Src/main.c **** 
 1850              		.loc 1 314 3 is_stmt 1 view .LVU530
 314:Core/Src/main.c **** 
 1851              		.loc 1 314 22 is_stmt 0 view .LVU531
 1852 000e 0023     		movs	r3, #0
 1853 0010 0293     		str	r3, [sp, #8]
 1854 0012 0393     		str	r3, [sp, #12]
 1855 0014 0493     		str	r3, [sp, #16]
 1856 0016 0593     		str	r3, [sp, #20]
 1857 0018 0693     		str	r3, [sp, #24]
 318:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1858              		.loc 1 318 3 is_stmt 1 view .LVU532
 1859              	.LBB10:
 318:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1860              		.loc 1 318 3 view .LVU533
 1861 001a 0093     		str	r3, [sp]
 318:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1862              		.loc 1 318 3 view .LVU534
 1863 001c 1F4A     		ldr	r2, .L113
 1864 001e 116C     		ldr	r1, [r2, #64]
 1865 0020 41F08051 		orr	r1, r1, #268435456
 1866 0024 1164     		str	r1, [r2, #64]
 318:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1867              		.loc 1 318 3 view .LVU535
 1868 0026 126C     		ldr	r2, [r2, #64]
 1869 0028 02F08052 		and	r2, r2, #268435456
 1870 002c 0092     		str	r2, [sp]
 318:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1871              		.loc 1 318 3 view .LVU536
 1872 002e 009A     		ldr	r2, [sp]
ARM GAS  /tmp/ccFQNcvb.s 			page 75


 1873              	.LBE10:
 318:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1874              		.loc 1 318 3 view .LVU537
 319:Core/Src/main.c **** 
 1875              		.loc 1 319 3 view .LVU538
 1876              	.LBB11:
 319:Core/Src/main.c **** 
 1877              		.loc 1 319 3 view .LVU539
 1878 0030 0193     		str	r3, [sp, #4]
 319:Core/Src/main.c **** 
 1879              		.loc 1 319 3 view .LVU540
 1880 0032 1B49     		ldr	r1, .L113+4
 1881 0034 0A68     		ldr	r2, [r1]
 1882 0036 22F44042 		bic	r2, r2, #49152
 1883 003a 42F48042 		orr	r2, r2, #16384
 1884 003e 0A60     		str	r2, [r1]
 319:Core/Src/main.c **** 
 1885              		.loc 1 319 3 view .LVU541
 1886 0040 0A68     		ldr	r2, [r1]
 1887 0042 02F44042 		and	r2, r2, #49152
 1888 0046 0192     		str	r2, [sp, #4]
 319:Core/Src/main.c **** 
 1889              		.loc 1 319 3 view .LVU542
 1890 0048 019A     		ldr	r2, [sp, #4]
 1891              	.LBE11:
 319:Core/Src/main.c **** 
 1892              		.loc 1 319 3 view .LVU543
 324:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1893              		.loc 1 324 3 view .LVU544
 324:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1894              		.loc 1 324 36 is_stmt 0 view .LVU545
 1895 004a 0222     		movs	r2, #2
 1896 004c 0792     		str	r2, [sp, #28]
 325:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1897              		.loc 1 325 3 is_stmt 1 view .LVU546
 325:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1898              		.loc 1 325 30 is_stmt 0 view .LVU547
 1899 004e 0121     		movs	r1, #1
 1900 0050 0A91     		str	r1, [sp, #40]
 326:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1901              		.loc 1 326 3 is_stmt 1 view .LVU548
 326:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1902              		.loc 1 326 41 is_stmt 0 view .LVU549
 1903 0052 1021     		movs	r1, #16
 1904 0054 0B91     		str	r1, [sp, #44]
 327:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1905              		.loc 1 327 3 is_stmt 1 view .LVU550
 327:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1906              		.loc 1 327 34 is_stmt 0 view .LVU551
 1907 0056 0D92     		str	r2, [sp, #52]
 328:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1908              		.loc 1 328 3 is_stmt 1 view .LVU552
 328:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1909              		.loc 1 328 35 is_stmt 0 view .LVU553
 1910 0058 0E93     		str	r3, [sp, #56]
 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1911              		.loc 1 329 3 is_stmt 1 view .LVU554
ARM GAS  /tmp/ccFQNcvb.s 			page 76


 329:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1912              		.loc 1 329 30 is_stmt 0 view .LVU555
 1913 005a 0F91     		str	r1, [sp, #60]
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1914              		.loc 1 330 3 is_stmt 1 view .LVU556
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1915              		.loc 1 330 30 is_stmt 0 view .LVU557
 1916 005c 4FF4A873 		mov	r3, #336
 1917 0060 1093     		str	r3, [sp, #64]
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1918              		.loc 1 331 3 is_stmt 1 view .LVU558
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1919              		.loc 1 331 30 is_stmt 0 view .LVU559
 1920 0062 0423     		movs	r3, #4
 1921 0064 1193     		str	r3, [sp, #68]
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1922              		.loc 1 332 3 is_stmt 1 view .LVU560
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1923              		.loc 1 332 30 is_stmt 0 view .LVU561
 1924 0066 1292     		str	r2, [sp, #72]
 333:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1925              		.loc 1 333 3 is_stmt 1 view .LVU562
 333:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1926              		.loc 1 333 30 is_stmt 0 view .LVU563
 1927 0068 1392     		str	r2, [sp, #76]
 334:Core/Src/main.c ****   {
 1928              		.loc 1 334 3 is_stmt 1 view .LVU564
 334:Core/Src/main.c ****   {
 1929              		.loc 1 334 7 is_stmt 0 view .LVU565
 1930 006a 07A8     		add	r0, sp, #28
 1931 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1932              	.LVL121:
 334:Core/Src/main.c ****   {
 1933              		.loc 1 334 6 view .LVU566
 1934 0070 80B9     		cbnz	r0, .L111
 341:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1935              		.loc 1 341 3 is_stmt 1 view .LVU567
 341:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1936              		.loc 1 341 31 is_stmt 0 view .LVU568
 1937 0072 0F23     		movs	r3, #15
 1938 0074 0293     		str	r3, [sp, #8]
 343:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1939              		.loc 1 343 3 is_stmt 1 view .LVU569
 343:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1940              		.loc 1 343 34 is_stmt 0 view .LVU570
 1941 0076 0221     		movs	r1, #2
 1942 0078 0391     		str	r1, [sp, #12]
 344:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1943              		.loc 1 344 3 is_stmt 1 view .LVU571
 344:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1944              		.loc 1 344 35 is_stmt 0 view .LVU572
 1945 007a 0023     		movs	r3, #0
 1946 007c 0493     		str	r3, [sp, #16]
 345:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1947              		.loc 1 345 3 is_stmt 1 view .LVU573
 345:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1948              		.loc 1 345 36 is_stmt 0 view .LVU574
ARM GAS  /tmp/ccFQNcvb.s 			page 77


 1949 007e 4FF48052 		mov	r2, #4096
 1950 0082 0592     		str	r2, [sp, #20]
 346:Core/Src/main.c **** 
 1951              		.loc 1 346 3 is_stmt 1 view .LVU575
 346:Core/Src/main.c **** 
 1952              		.loc 1 346 36 is_stmt 0 view .LVU576
 1953 0084 0693     		str	r3, [sp, #24]
 348:Core/Src/main.c ****   {
 1954              		.loc 1 348 3 is_stmt 1 view .LVU577
 348:Core/Src/main.c ****   {
 1955              		.loc 1 348 7 is_stmt 0 view .LVU578
 1956 0086 02A8     		add	r0, sp, #8
 1957 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1958              	.LVL122:
 348:Core/Src/main.c ****   {
 1959              		.loc 1 348 6 view .LVU579
 1960 008c 20B9     		cbnz	r0, .L112
 352:Core/Src/main.c **** 
 1961              		.loc 1 352 1 view .LVU580
 1962 008e 15B0     		add	sp, sp, #84
 1963              		.cfi_remember_state
 1964              		.cfi_def_cfa_offset 4
 1965              		@ sp needed
 1966 0090 5DF804FB 		ldr	pc, [sp], #4
 1967              	.L111:
 1968              		.cfi_restore_state
 336:Core/Src/main.c ****   }
 1969              		.loc 1 336 5 is_stmt 1 view .LVU581
 1970 0094 FFF7FEFF 		bl	Error_Handler
 1971              	.LVL123:
 1972              	.L112:
 350:Core/Src/main.c ****   }
 1973              		.loc 1 350 5 view .LVU582
 1974 0098 FFF7FEFF 		bl	Error_Handler
 1975              	.LVL124:
 1976              	.L114:
 1977              		.align	2
 1978              	.L113:
 1979 009c 00380240 		.word	1073887232
 1980 00a0 00700040 		.word	1073770496
 1981              		.cfi_endproc
 1982              	.LFE245:
 1984              		.section	.text.main,"ax",%progbits
 1985              		.align	1
 1986              		.global	main
 1987              		.syntax unified
 1988              		.thumb
 1989              		.thumb_func
 1990              		.fpu fpv4-sp-d16
 1992              	main:
 1993              	.LFB244:
 192:Core/Src/main.c **** 
 1994              		.loc 1 192 1 view -0
 1995              		.cfi_startproc
 1996              		@ Volatile: function does not return.
 1997              		@ args = 0, pretend = 0, frame = 256
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFQNcvb.s 			page 78


 1999 0000 00B5     		push	{lr}
 2000              		.cfi_def_cfa_offset 4
 2001              		.cfi_offset 14, -4
 2002 0002 C1B0     		sub	sp, sp, #260
 2003              		.cfi_def_cfa_offset 264
 201:Core/Src/main.c **** 
 2004              		.loc 1 201 3 view .LVU584
 2005 0004 FFF7FEFF 		bl	HAL_Init
 2006              	.LVL125:
 208:Core/Src/main.c **** 
 2007              		.loc 1 208 3 view .LVU585
 2008 0008 FFF7FEFF 		bl	SystemClock_Config
 2009              	.LVL126:
 215:Core/Src/main.c ****   MX_ADC1_Init();
 2010              		.loc 1 215 3 view .LVU586
 2011 000c FFF7FEFF 		bl	MX_GPIO_Init
 2012              	.LVL127:
 216:Core/Src/main.c ****   MX_I2C1_Init();
 2013              		.loc 1 216 3 view .LVU587
 2014 0010 FFF7FEFF 		bl	MX_ADC1_Init
 2015              	.LVL128:
 217:Core/Src/main.c ****   MX_USART2_UART_Init();
 2016              		.loc 1 217 3 view .LVU588
 2017 0014 FFF7FEFF 		bl	MX_I2C1_Init
 2018              	.LVL129:
 218:Core/Src/main.c ****   MX_I2C2_Init();
 2019              		.loc 1 218 3 view .LVU589
 2020 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 2021              	.LVL130:
 219:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2022              		.loc 1 219 3 view .LVU590
 2023 001c FFF7FEFF 		bl	MX_I2C2_Init
 2024              	.LVL131:
 226:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 2025              		.loc 1 226 3 view .LVU591
 2026 0020 0025     		movs	r5, #0
 2027 0022 3E95     		str	r5, [sp, #248]
 2028 0024 3F95     		str	r5, [sp, #252]
 227:Core/Src/main.c **** 
 2029              		.loc 1 227 3 view .LVU592
 227:Core/Src/main.c **** 
 2030              		.loc 1 227 22 is_stmt 0 view .LVU593
 2031 0026 3EA8     		add	r0, sp, #248
 2032 0028 FFF7FEFF 		bl	osMutexCreate
 2033              	.LVL132:
 227:Core/Src/main.c **** 
 2034              		.loc 1 227 20 view .LVU594
 2035 002c 534B     		ldr	r3, .L118
 2036 002e 1860     		str	r0, [r3]
 243:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 2037              		.loc 1 243 3 is_stmt 1 view .LVU595
 2038 0030 534C     		ldr	r4, .L118+4
 2039 0032 0DF1E80C 		add	ip, sp, #232
 2040 0036 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2041 003a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 244:Core/Src/main.c **** 
 2042              		.loc 1 244 3 view .LVU596
ARM GAS  /tmp/ccFQNcvb.s 			page 79


 244:Core/Src/main.c **** 
 2043              		.loc 1 244 29 is_stmt 0 view .LVU597
 2044 003e 2946     		mov	r1, r5
 2045 0040 6046     		mov	r0, ip
 2046 0042 FFF7FEFF 		bl	osMessageCreate
 2047              	.LVL133:
 244:Core/Src/main.c **** 
 2048              		.loc 1 244 27 view .LVU598
 2049 0046 4F4B     		ldr	r3, .L118+8
 2050 0048 1860     		str	r0, [r3]
 247:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 2051              		.loc 1 247 3 is_stmt 1 view .LVU599
 2052 004a 0DF1D80C 		add	ip, sp, #216
 2053 004e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2054 0052 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 248:Core/Src/main.c **** 
 2055              		.loc 1 248 3 view .LVU600
 248:Core/Src/main.c **** 
 2056              		.loc 1 248 29 is_stmt 0 view .LVU601
 2057 0056 2946     		mov	r1, r5
 2058 0058 6046     		mov	r0, ip
 2059 005a FFF7FEFF 		bl	osMessageCreate
 2060              	.LVL134:
 248:Core/Src/main.c **** 
 2061              		.loc 1 248 27 view .LVU602
 2062 005e 4A4B     		ldr	r3, .L118+12
 2063 0060 1860     		str	r0, [r3]
 251:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 2064              		.loc 1 251 3 is_stmt 1 view .LVU603
 2065 0062 0DF1C80C 		add	ip, sp, #200
 2066 0066 04F11003 		add	r3, r4, #16
 2067 006a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2068 006c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 252:Core/Src/main.c **** 
 2069              		.loc 1 252 3 view .LVU604
 252:Core/Src/main.c **** 
 2070              		.loc 1 252 25 is_stmt 0 view .LVU605
 2071 0070 2946     		mov	r1, r5
 2072 0072 6046     		mov	r0, ip
 2073 0074 FFF7FEFF 		bl	osMessageCreate
 2074              	.LVL135:
 252:Core/Src/main.c **** 
 2075              		.loc 1 252 23 view .LVU606
 2076 0078 444B     		ldr	r3, .L118+16
 2077 007a 1860     		str	r0, [r3]
 260:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 2078              		.loc 1 260 3 is_stmt 1 view .LVU607
 2079 007c 0DF1AC0C 		add	ip, sp, #172
 2080 0080 04F1200E 		add	lr, r4, #32
 2081 0084 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2082 0088 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2083 008c 9EE80700 		ldm	lr, {r0, r1, r2}
 2084 0090 8CE80700 		stm	ip, {r0, r1, r2}
 261:Core/Src/main.c **** 
 2085              		.loc 1 261 3 view .LVU608
 261:Core/Src/main.c **** 
 2086              		.loc 1 261 23 is_stmt 0 view .LVU609
ARM GAS  /tmp/ccFQNcvb.s 			page 80


 2087 0094 2946     		mov	r1, r5
 2088 0096 2BA8     		add	r0, sp, #172
 2089 0098 FFF7FEFF 		bl	osThreadCreate
 2090              	.LVL136:
 261:Core/Src/main.c **** 
 2091              		.loc 1 261 21 view .LVU610
 2092 009c 3C4B     		ldr	r3, .L118+20
 2093 009e 1860     		str	r0, [r3]
 264:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 2094              		.loc 1 264 3 is_stmt 1 view .LVU611
 2095 00a0 0DF1900C 		add	ip, sp, #144
 2096 00a4 04F13C0E 		add	lr, r4, #60
 2097 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2098 00ac ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2099 00b0 9EE80700 		ldm	lr, {r0, r1, r2}
 2100 00b4 8CE80700 		stm	ip, {r0, r1, r2}
 265:Core/Src/main.c **** 
 2101              		.loc 1 265 3 view .LVU612
 265:Core/Src/main.c **** 
 2102              		.loc 1 265 24 is_stmt 0 view .LVU613
 2103 00b8 2946     		mov	r1, r5
 2104 00ba 24A8     		add	r0, sp, #144
 2105 00bc FFF7FEFF 		bl	osThreadCreate
 2106              	.LVL137:
 265:Core/Src/main.c **** 
 2107              		.loc 1 265 22 view .LVU614
 2108 00c0 344B     		ldr	r3, .L118+24
 2109 00c2 1860     		str	r0, [r3]
 268:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 2110              		.loc 1 268 3 is_stmt 1 view .LVU615
 2111 00c4 0DF1740C 		add	ip, sp, #116
 2112 00c8 04F1580E 		add	lr, r4, #88
 2113 00cc BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2114 00d0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2115 00d4 9EE80700 		ldm	lr, {r0, r1, r2}
 2116 00d8 8CE80700 		stm	ip, {r0, r1, r2}
 269:Core/Src/main.c **** 
 2117              		.loc 1 269 3 view .LVU616
 269:Core/Src/main.c **** 
 2118              		.loc 1 269 25 is_stmt 0 view .LVU617
 2119 00dc 2946     		mov	r1, r5
 2120 00de 1DA8     		add	r0, sp, #116
 2121 00e0 FFF7FEFF 		bl	osThreadCreate
 2122              	.LVL138:
 269:Core/Src/main.c **** 
 2123              		.loc 1 269 23 view .LVU618
 2124 00e4 2C4B     		ldr	r3, .L118+28
 2125 00e6 1860     		str	r0, [r3]
 272:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 2126              		.loc 1 272 3 is_stmt 1 view .LVU619
 2127 00e8 0DF1580C 		add	ip, sp, #88
 2128 00ec 04F1740E 		add	lr, r4, #116
 2129 00f0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2130 00f4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2131 00f8 9EE80700 		ldm	lr, {r0, r1, r2}
 2132 00fc 8CE80700 		stm	ip, {r0, r1, r2}
 273:Core/Src/main.c **** 
ARM GAS  /tmp/ccFQNcvb.s 			page 81


 2133              		.loc 1 273 3 view .LVU620
 273:Core/Src/main.c **** 
 2134              		.loc 1 273 26 is_stmt 0 view .LVU621
 2135 0100 2946     		mov	r1, r5
 2136 0102 16A8     		add	r0, sp, #88
 2137 0104 FFF7FEFF 		bl	osThreadCreate
 2138              	.LVL139:
 273:Core/Src/main.c **** 
 2139              		.loc 1 273 24 view .LVU622
 2140 0108 244B     		ldr	r3, .L118+32
 2141 010a 1860     		str	r0, [r3]
 276:Core/Src/main.c ****   EmergencyStopTaHandle = osThreadCreate(osThread(EmergencyStopTa), NULL);
 2142              		.loc 1 276 3 is_stmt 1 view .LVU623
 2143 010c 0DF13C0C 		add	ip, sp, #60
 2144 0110 04F1900E 		add	lr, r4, #144
 2145 0114 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2146 0118 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2147 011c 9EE80700 		ldm	lr, {r0, r1, r2}
 2148 0120 8CE80700 		stm	ip, {r0, r1, r2}
 277:Core/Src/main.c **** 
 2149              		.loc 1 277 3 view .LVU624
 277:Core/Src/main.c **** 
 2150              		.loc 1 277 27 is_stmt 0 view .LVU625
 2151 0124 2946     		mov	r1, r5
 2152 0126 0FA8     		add	r0, sp, #60
 2153 0128 FFF7FEFF 		bl	osThreadCreate
 2154              	.LVL140:
 277:Core/Src/main.c **** 
 2155              		.loc 1 277 25 view .LVU626
 2156 012c 1C4B     		ldr	r3, .L118+36
 2157 012e 1860     		str	r0, [r3]
 280:Core/Src/main.c ****   MotorControlTasHandle = osThreadCreate(osThread(MotorControlTas), NULL);
 2158              		.loc 1 280 3 is_stmt 1 view .LVU627
 2159 0130 0DF1200C 		add	ip, sp, #32
 2160 0134 04F1AC0E 		add	lr, r4, #172
 2161 0138 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2162 013c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2163 0140 9EE80700 		ldm	lr, {r0, r1, r2}
 2164 0144 8CE80700 		stm	ip, {r0, r1, r2}
 281:Core/Src/main.c **** 
 2165              		.loc 1 281 3 view .LVU628
 281:Core/Src/main.c **** 
 2166              		.loc 1 281 27 is_stmt 0 view .LVU629
 2167 0148 2946     		mov	r1, r5
 2168 014a 08A8     		add	r0, sp, #32
 2169 014c FFF7FEFF 		bl	osThreadCreate
 2170              	.LVL141:
 281:Core/Src/main.c **** 
 2171              		.loc 1 281 25 view .LVU630
 2172 0150 144B     		ldr	r3, .L118+40
 2173 0152 1860     		str	r0, [r3]
 284:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 2174              		.loc 1 284 3 is_stmt 1 view .LVU631
 2175 0154 0DF1040C 		add	ip, sp, #4
 2176 0158 C834     		adds	r4, r4, #200
 2177 015a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2178 015c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccFQNcvb.s 			page 82


 2179 0160 94E80700 		ldm	r4, {r0, r1, r2}
 2180 0164 8CE80700 		stm	ip, {r0, r1, r2}
 285:Core/Src/main.c **** 
 2181              		.loc 1 285 3 view .LVU632
 285:Core/Src/main.c **** 
 2182              		.loc 1 285 24 is_stmt 0 view .LVU633
 2183 0168 2946     		mov	r1, r5
 2184 016a 01A8     		add	r0, sp, #4
 2185 016c FFF7FEFF 		bl	osThreadCreate
 2186              	.LVL142:
 285:Core/Src/main.c **** 
 2187              		.loc 1 285 22 view .LVU634
 2188 0170 0D4B     		ldr	r3, .L118+44
 2189 0172 1860     		str	r0, [r3]
 292:Core/Src/main.c **** 
 2190              		.loc 1 292 3 is_stmt 1 view .LVU635
 2191 0174 FFF7FEFF 		bl	osKernelStart
 2192              	.LVL143:
 2193              	.L116:
 298:Core/Src/main.c ****   {
 2194              		.loc 1 298 3 discriminator 1 view .LVU636
 303:Core/Src/main.c ****   /* USER CODE END 3 */
 2195              		.loc 1 303 3 discriminator 1 view .LVU637
 298:Core/Src/main.c ****   {
 2196              		.loc 1 298 9 discriminator 1 view .LVU638
 2197 0178 FEE7     		b	.L116
 2198              	.L119:
 2199 017a 00BF     		.align	2
 2200              	.L118:
 2201 017c 00000000 		.word	.LANCHOR13
 2202 0180 00000000 		.word	.LANCHOR14
 2203 0184 00000000 		.word	.LANCHOR2
 2204 0188 00000000 		.word	.LANCHOR4
 2205 018c 00000000 		.word	.LANCHOR15
 2206 0190 00000000 		.word	.LANCHOR16
 2207 0194 00000000 		.word	.LANCHOR17
 2208 0198 00000000 		.word	.LANCHOR18
 2209 019c 00000000 		.word	.LANCHOR19
 2210 01a0 00000000 		.word	.LANCHOR20
 2211 01a4 00000000 		.word	.LANCHOR21
 2212 01a8 00000000 		.word	.LANCHOR22
 2213              		.cfi_endproc
 2214              	.LFE244:
 2216              		.global	StateMutexHandle
 2217              		.global	LCDPrintQueueHandle
 2218              		.global	MotorControlQueueHandle
 2219              		.global	MiniBotInputQueueHandle
 2220              		.global	LCDPrintTaskHandle
 2221              		.global	MotorControlTasHandle
 2222              		.global	EmergencyStopTaHandle
 2223              		.global	ApplicationFSMHandle
 2224              		.global	MiniBotInputsHandle
 2225              		.global	BlinkLEDTaskHandle
 2226              		.global	defaultTaskHandle
 2227              		.global	huart2
 2228              		.global	hi2c2
 2229              		.global	hi2c1
ARM GAS  /tmp/ccFQNcvb.s 			page 83


 2230              		.global	hadc1
 2231              		.global	state
 2232              		.global	tempFailedToPostMessage
 2233              		.global	MotorControl_Qdata_Buf
 2234              		.global	Temp_Qdata_Buf
 2235              		.global	MiniBot_Qdata_Buf
 2236              		.global	PotRawValue
 2237              		.global	Qdata
 2238              		.section	.rodata
 2239              		.align	2
 2240              		.set	.LANCHOR14,. + 0
 2241              	.LC0:
 2242 0000 10000000 		.word	16
 2243 0004 34000000 		.word	52
 2244 0008 00000000 		.word	0
 2245 000c 00000000 		.word	0
 2246              	.LC1:
 2247 0010 10000000 		.word	16
 2248 0014 02000000 		.word	2
 2249 0018 00000000 		.word	0
 2250 001c 00000000 		.word	0
 2251              	.LC16:
 2252 0020 00000000 		.word	.LC2
 2253 0024 00000000 		.word	StartDefaultTask
 2254 0028 0000     		.short	0
 2255 002a 0000     		.space	2
 2256 002c 00000000 		.word	0
 2257 0030 80000000 		.word	128
 2258 0034 00000000 		.word	0
 2259 0038 00000000 		.word	0
 2260              	.LC17:
 2261 003c 0C000000 		.word	.LC4
 2262 0040 00000000 		.word	BlinkLEDTaskEntry
 2263 0044 0000     		.short	0
 2264 0046 0000     		.space	2
 2265 0048 00000000 		.word	0
 2266 004c 80000000 		.word	128
 2267 0050 00000000 		.word	0
 2268 0054 00000000 		.word	0
 2269              	.LC18:
 2270 0058 1C000000 		.word	.LC6
 2271 005c 00000000 		.word	MiniBotInputsEntry
 2272 0060 0000     		.short	0
 2273 0062 0000     		.space	2
 2274 0064 00000000 		.word	0
 2275 0068 00020000 		.word	512
 2276 006c 00000000 		.word	0
 2277 0070 00000000 		.word	0
 2278              	.LC19:
 2279 0074 2C000000 		.word	.LC8
 2280 0078 00000000 		.word	ApplicationFSMEntry
 2281 007c 0200     		.short	2
 2282 007e 0000     		.space	2
 2283 0080 00000000 		.word	0
 2284 0084 00020000 		.word	512
 2285 0088 00000000 		.word	0
 2286 008c 00000000 		.word	0
ARM GAS  /tmp/ccFQNcvb.s 			page 84


 2287              	.LC20:
 2288 0090 3C000000 		.word	.LC10
 2289 0094 00000000 		.word	EmergencyStopTaskEntry
 2290 0098 0000     		.short	0
 2291 009a 0000     		.space	2
 2292 009c 00000000 		.word	0
 2293 00a0 80000000 		.word	128
 2294 00a4 00000000 		.word	0
 2295 00a8 00000000 		.word	0
 2296              	.LC21:
 2297 00ac 4C000000 		.word	.LC12
 2298 00b0 00000000 		.word	MotorControlTaskEntry
 2299 00b4 0000     		.short	0
 2300 00b6 0000     		.space	2
 2301 00b8 00000000 		.word	0
 2302 00bc 00020000 		.word	512
 2303 00c0 00000000 		.word	0
 2304 00c4 00000000 		.word	0
 2305              	.LC22:
 2306 00c8 5C000000 		.word	.LC14
 2307 00cc 00000000 		.word	LCDPrintTaskEntry
 2308 00d0 0000     		.short	0
 2309 00d2 0000     		.space	2
 2310 00d4 00000000 		.word	0
 2311 00d8 80000000 		.word	128
 2312 00dc 00000000 		.word	0
 2313 00e0 00000000 		.word	0
 2314              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 2315              		.align	2
 2316              		.set	.LANCHOR19,. + 0
 2319              	ApplicationFSMHandle:
 2320 0000 00000000 		.space	4
 2321              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 2322              		.align	2
 2323              		.set	.LANCHOR17,. + 0
 2326              	BlinkLEDTaskHandle:
 2327 0000 00000000 		.space	4
 2328              		.section	.bss.EmergencyStopTaHandle,"aw",%nobits
 2329              		.align	2
 2330              		.set	.LANCHOR20,. + 0
 2333              	EmergencyStopTaHandle:
 2334 0000 00000000 		.space	4
 2335              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 2336              		.align	2
 2337              		.set	.LANCHOR15,. + 0
 2340              	LCDPrintQueueHandle:
 2341 0000 00000000 		.space	4
 2342              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 2343              		.align	2
 2344              		.set	.LANCHOR22,. + 0
 2347              	LCDPrintTaskHandle:
 2348 0000 00000000 		.space	4
 2349              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 2350              		.align	2
 2351              		.set	.LANCHOR2,. + 0
 2354              	MiniBotInputQueueHandle:
 2355 0000 00000000 		.space	4
ARM GAS  /tmp/ccFQNcvb.s 			page 85


 2356              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 2357              		.align	2
 2358              		.set	.LANCHOR18,. + 0
 2361              	MiniBotInputsHandle:
 2362 0000 00000000 		.space	4
 2363              		.section	.bss.MiniBot_Qdata_Buf,"aw",%nobits
 2364              		.align	2
 2365              		.set	.LANCHOR1,. + 0
 2368              	MiniBot_Qdata_Buf:
 2369 0000 00000000 		.space	52
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2369      00000000 
 2370              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
 2371              		.align	2
 2372              		.set	.LANCHOR4,. + 0
 2375              	MotorControlQueueHandle:
 2376 0000 00000000 		.space	4
 2377              		.section	.bss.MotorControlTasHandle,"aw",%nobits
 2378              		.align	2
 2379              		.set	.LANCHOR21,. + 0
 2382              	MotorControlTasHandle:
 2383 0000 00000000 		.space	4
 2384              		.section	.bss.MotorControl_Qdata_Buf,"aw",%nobits
 2385              		.align	2
 2386              		.set	.LANCHOR10,. + 0
 2389              	MotorControl_Qdata_Buf:
 2390 0000 00000000 		.space	52
 2390      00000000 
 2390      00000000 
 2390      00000000 
 2390      00000000 
 2391              		.section	.bss.PotRawValue,"aw",%nobits
 2392              		.align	2
 2393              		.set	.LANCHOR7,. + 0
 2396              	PotRawValue:
 2397 0000 00000000 		.space	16
 2397      00000000 
 2397      00000000 
 2397      00000000 
 2398              		.section	.bss.Qdata,"aw",%nobits
 2399              		.align	2
 2400              		.set	.LANCHOR8,. + 0
 2403              	Qdata:
 2404 0000 00000000 		.space	52
 2404      00000000 
 2404      00000000 
 2404      00000000 
 2404      00000000 
 2405              		.section	.bss.StateMutexHandle,"aw",%nobits
 2406              		.align	2
 2407              		.set	.LANCHOR13,. + 0
 2410              	StateMutexHandle:
 2411 0000 00000000 		.space	4
 2412              		.section	.bss.Temp_Qdata_Buf,"aw",%nobits
 2413              		.align	2
ARM GAS  /tmp/ccFQNcvb.s 			page 86


 2414              		.set	.LANCHOR3,. + 0
 2417              	Temp_Qdata_Buf:
 2418 0000 00000000 		.space	52
 2418      00000000 
 2418      00000000 
 2418      00000000 
 2418      00000000 
 2419              		.section	.bss.defaultTaskHandle,"aw",%nobits
 2420              		.align	2
 2421              		.set	.LANCHOR16,. + 0
 2424              	defaultTaskHandle:
 2425 0000 00000000 		.space	4
 2426              		.section	.bss.hadc1,"aw",%nobits
 2427              		.align	2
 2428              		.set	.LANCHOR6,. + 0
 2431              	hadc1:
 2432 0000 00000000 		.space	72
 2432      00000000 
 2432      00000000 
 2432      00000000 
 2432      00000000 
 2433              		.section	.bss.hi2c1,"aw",%nobits
 2434              		.align	2
 2435              		.set	.LANCHOR5,. + 0
 2438              	hi2c1:
 2439 0000 00000000 		.space	84
 2439      00000000 
 2439      00000000 
 2439      00000000 
 2439      00000000 
 2440              		.section	.bss.hi2c2,"aw",%nobits
 2441              		.align	2
 2442              		.set	.LANCHOR12,. + 0
 2445              	hi2c2:
 2446 0000 00000000 		.space	84
 2446      00000000 
 2446      00000000 
 2446      00000000 
 2446      00000000 
 2447              		.section	.bss.huart2,"aw",%nobits
 2448              		.align	2
 2449              		.set	.LANCHOR11,. + 0
 2452              	huart2:
 2453 0000 00000000 		.space	72
 2453      00000000 
 2453      00000000 
 2453      00000000 
 2453      00000000 
 2454              		.section	.bss.state,"aw",%nobits
 2455              		.set	.LANCHOR0,. + 0
 2458              	state:
 2459 0000 00       		.space	1
 2460              		.section	.bss.tempFailedToPostMessage,"aw",%nobits
 2461              		.set	.LANCHOR9,. + 0
 2464              	tempFailedToPostMessage:
 2465 0000 00       		.space	1
 2466              		.text
ARM GAS  /tmp/ccFQNcvb.s 			page 87


 2467              	.Letext0:
 2468              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2469              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2470              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2471              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2472              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2473              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2474              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2475              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2476              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2477              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2478              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2479              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2480              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2481              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2482              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2483              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2484              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2485              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2486              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2487              		.file 22 "Core/Inc/pca9685.h"
 2488              		.file 23 "<built-in>"
ARM GAS  /tmp/ccFQNcvb.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFQNcvb.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccFQNcvb.s:40     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFQNcvb.s:47     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFQNcvb.s:231    .text.MX_GPIO_Init:00000000000000d8 $d
     /tmp/ccFQNcvb.s:239    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccFQNcvb.s:246    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccFQNcvb.s:277    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccFQNcvb.s:282    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccFQNcvb.s:289    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccFQNcvb.s:324    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccFQNcvb.s:329    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/ccFQNcvb.s:336    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/ccFQNcvb.s:362    .text.EmergencyStopTaskEntry:0000000000000000 $t
     /tmp/ccFQNcvb.s:369    .text.EmergencyStopTaskEntry:0000000000000000 EmergencyStopTaskEntry
     /tmp/ccFQNcvb.s:401    .text.EmergencyStopTaskEntry:0000000000000014 $d
     /tmp/ccFQNcvb.s:406    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccFQNcvb.s:413    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccFQNcvb.s:552    .text.ApplicationFSMEntry:00000000000000b8 $d
     /tmp/ccFQNcvb.s:561    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccFQNcvb.s:568    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccFQNcvb.s:648    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccFQNcvb.s:653    .text.ServoDriverInit:0000000000000000 $t
     /tmp/ccFQNcvb.s:660    .text.ServoDriverInit:0000000000000000 ServoDriverInit
     /tmp/ccFQNcvb.s:731    .text.ServoDriverInit:0000000000000060 $d
     /tmp/ccFQNcvb.s:736    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccFQNcvb.s:743    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccFQNcvb.s:833    .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccFQNcvb.s:840    .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccFQNcvb.s:922    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccFQNcvb.s:929    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccFQNcvb.s:1088   .text.MiniBotInputsEntry:00000000000000dc $d
     /tmp/ccFQNcvb.s:1098   .text.MAP:0000000000000000 $t
     /tmp/ccFQNcvb.s:1105   .text.MAP:0000000000000000 MAP
     /tmp/ccFQNcvb.s:1135   .text.MoveServo:0000000000000000 $t
     /tmp/ccFQNcvb.s:1142   .text.MoveServo:0000000000000000 MoveServo
     /tmp/ccFQNcvb.s:1287   .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/ccFQNcvb.s:1294   .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/ccFQNcvb.s:1349   .text.MotorControlTaskEntry:0000000000000034 $d
     /tmp/ccFQNcvb.s:1355   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccFQNcvb.s:1362   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccFQNcvb.s:1395   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccFQNcvb.s:1400   .text.Error_Handler:0000000000000000 $t
     /tmp/ccFQNcvb.s:1407   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccFQNcvb.s:1439   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccFQNcvb.s:1445   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccFQNcvb.s:1612   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccFQNcvb.s:1619   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccFQNcvb.s:1625   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccFQNcvb.s:1682   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccFQNcvb.s:1689   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccFQNcvb.s:1695   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccFQNcvb.s:1749   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccFQNcvb.s:1755   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccFQNcvb.s:1761   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccFQNcvb.s:1818   .text.MX_I2C2_Init:000000000000002c $d
ARM GAS  /tmp/ccFQNcvb.s 			page 89


     /tmp/ccFQNcvb.s:1825   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFQNcvb.s:1832   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFQNcvb.s:1979   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccFQNcvb.s:1985   .text.main:0000000000000000 $t
     /tmp/ccFQNcvb.s:1992   .text.main:0000000000000000 main
     /tmp/ccFQNcvb.s:2201   .text.main:000000000000017c $d
     /tmp/ccFQNcvb.s:2410   .bss.StateMutexHandle:0000000000000000 StateMutexHandle
     /tmp/ccFQNcvb.s:2340   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/ccFQNcvb.s:2375   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/ccFQNcvb.s:2354   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccFQNcvb.s:2347   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/ccFQNcvb.s:2382   .bss.MotorControlTasHandle:0000000000000000 MotorControlTasHandle
     /tmp/ccFQNcvb.s:2333   .bss.EmergencyStopTaHandle:0000000000000000 EmergencyStopTaHandle
     /tmp/ccFQNcvb.s:2319   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccFQNcvb.s:2361   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccFQNcvb.s:2326   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccFQNcvb.s:2424   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccFQNcvb.s:2452   .bss.huart2:0000000000000000 huart2
     /tmp/ccFQNcvb.s:2445   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccFQNcvb.s:2438   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccFQNcvb.s:2431   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccFQNcvb.s:2458   .bss.state:0000000000000000 state
     /tmp/ccFQNcvb.s:2464   .bss.tempFailedToPostMessage:0000000000000000 tempFailedToPostMessage
     /tmp/ccFQNcvb.s:2389   .bss.MotorControl_Qdata_Buf:0000000000000000 MotorControl_Qdata_Buf
     /tmp/ccFQNcvb.s:2417   .bss.Temp_Qdata_Buf:0000000000000000 Temp_Qdata_Buf
     /tmp/ccFQNcvb.s:2368   .bss.MiniBot_Qdata_Buf:0000000000000000 MiniBot_Qdata_Buf
     /tmp/ccFQNcvb.s:2396   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccFQNcvb.s:2403   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccFQNcvb.s:2239   .rodata:0000000000000000 $d
     /tmp/ccFQNcvb.s:2315   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2322   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2329   .bss.EmergencyStopTaHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2336   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2343   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2350   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2357   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2364   .bss.MiniBot_Qdata_Buf:0000000000000000 $d
     /tmp/ccFQNcvb.s:2371   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2378   .bss.MotorControlTasHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2385   .bss.MotorControl_Qdata_Buf:0000000000000000 $d
     /tmp/ccFQNcvb.s:2392   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccFQNcvb.s:2399   .bss.Qdata:0000000000000000 $d
     /tmp/ccFQNcvb.s:2406   .bss.StateMutexHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2413   .bss.Temp_Qdata_Buf:0000000000000000 $d
     /tmp/ccFQNcvb.s:2420   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccFQNcvb.s:2427   .bss.hadc1:0000000000000000 $d
     /tmp/ccFQNcvb.s:2434   .bss.hi2c1:0000000000000000 $d
     /tmp/ccFQNcvb.s:2441   .bss.hi2c2:0000000000000000 $d
     /tmp/ccFQNcvb.s:2448   .bss.huart2:0000000000000000 $d
     /tmp/ccFQNcvb.s:2459   .bss.state:0000000000000000 $d
     /tmp/ccFQNcvb.s:2465   .bss.tempFailedToPostMessage:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_GPIO_ReadPin
ARM GAS  /tmp/ccFQNcvb.s 			page 90


xQueueReceive
xQueueGenericSend
PCA9685_Init
PCA9685_SetServoAngle
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
