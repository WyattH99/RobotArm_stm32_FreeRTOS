ARM GAS  /tmp/ccDefyvn.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB251:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccDefyvn.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint32_t PotMin;
  40:Core/Src/main.c **** 	uint32_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  60:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  61:Core/Src/main.c **** 	uint32_t WristPotValue;
  62:Core/Src/main.c **** 	uint8_t  GripperValue;
  63:Core/Src/main.c **** } MiniBot_Qdata;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  66:Core/Src/main.c **** uint32_t value[4];
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /*
  70:Core/Src/main.c ****  * MegaBot Structures
  71:Core/Src/main.c ****  */
  72:Core/Src/main.c **** typedef struct{
  73:Core/Src/main.c **** 	uint8_t  ServoNum;
  74:Core/Src/main.c **** 	uint16_t ServoMin;
  75:Core/Src/main.c **** 	uint16_t ServoMax;
  76:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  77:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** typedef struct{
  80:Core/Src/main.c **** 	uint8_t  ServoNum;
  81:Core/Src/main.c **** 	uint16_t ServoMin;
  82:Core/Src/main.c **** 	uint16_t ServoMax;
  83:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  84:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** typedef struct{
  87:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  88:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
ARM GAS  /tmp/ccDefyvn.s 			page 3


  89:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  90:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
  91:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
  92:Core/Src/main.c **** } MegaBot_Config_t;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* USER CODE END PTD */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  97:Core/Src/main.c **** /* USER CODE BEGIN PD */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* USER CODE END PD */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 102:Core/Src/main.c **** /* USER CODE BEGIN PM */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** /* USER CODE END PM */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 107:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 108:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** UART_HandleTypeDef huart2;
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* Definitions for defaultTask */
 115:Core/Src/main.c **** osThreadId_t defaultTaskHandle;
 116:Core/Src/main.c **** const osThreadAttr_t defaultTask_attributes = {
 117:Core/Src/main.c ****   .name = "defaultTask",
 118:Core/Src/main.c ****   .stack_size = 128 * 4,
 119:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 120:Core/Src/main.c **** };
 121:Core/Src/main.c **** /* Definitions for BlinkLEDTask */
 122:Core/Src/main.c **** osThreadId_t BlinkLEDTaskHandle;
 123:Core/Src/main.c **** const osThreadAttr_t BlinkLEDTask_attributes = {
 124:Core/Src/main.c ****   .name = "BlinkLEDTask",
 125:Core/Src/main.c ****   .stack_size = 128 * 4,
 126:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityLow,
 127:Core/Src/main.c **** };
 128:Core/Src/main.c **** /* Definitions for MiniBotInputs */
 129:Core/Src/main.c **** osThreadId_t MiniBotInputsHandle;
 130:Core/Src/main.c **** const osThreadAttr_t MiniBotInputs_attributes = {
 131:Core/Src/main.c ****   .name = "MiniBotInputs",
 132:Core/Src/main.c ****   .stack_size = 128 * 4,
 133:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 134:Core/Src/main.c **** };
 135:Core/Src/main.c **** /* Definitions for ApplicationFSM */
 136:Core/Src/main.c **** osThreadId_t ApplicationFSMHandle;
 137:Core/Src/main.c **** const osThreadAttr_t ApplicationFSM_attributes = {
 138:Core/Src/main.c ****   .name = "ApplicationFSM",
 139:Core/Src/main.c ****   .stack_size = 128 * 4,
 140:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 141:Core/Src/main.c **** };
 142:Core/Src/main.c **** /* Definitions for MiniBotInputQueue */
 143:Core/Src/main.c **** osMessageQueueId_t MiniBotInputQueueHandle;
 144:Core/Src/main.c **** const osMessageQueueAttr_t MiniBotInputQueue_attributes = {
 145:Core/Src/main.c ****   .name = "MiniBotInputQueue"
ARM GAS  /tmp/ccDefyvn.s 			page 4


 146:Core/Src/main.c **** };
 147:Core/Src/main.c **** /* USER CODE BEGIN PV */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** /* USER CODE END PV */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 152:Core/Src/main.c **** void SystemClock_Config(void);
 153:Core/Src/main.c **** static void MX_GPIO_Init(void);
 154:Core/Src/main.c **** static void MX_DMA_Init(void);
 155:Core/Src/main.c **** static void MX_ADC1_Init(void);
 156:Core/Src/main.c **** static void MX_I2C1_Init(void);
 157:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 158:Core/Src/main.c **** void StartDefaultTask(void *argument);
 159:Core/Src/main.c **** void BlinkLEDTaskEntry(void *argument);
 160:Core/Src/main.c **** void MiniBotInputsEntry(void *argument);
 161:Core/Src/main.c **** void ApplicationFSMEntry(void *argument);
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** /* USER CODE END PFP */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 168:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 171:Core/Src/main.c **** 	// Configure Each of the joints
 172:Core/Src/main.c **** 
 173:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 174:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 175:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 176:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 179:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 180:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 181:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 184:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 185:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 186:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 187:Core/Src/main.c **** 
 188:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 189:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 190:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 191:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 194:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 195:Core/Src/main.c **** }
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot){
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** }
 200:Core/Src/main.c **** 
 201:Core/Src/main.c **** /* USER CODE END 0 */
 202:Core/Src/main.c **** 
ARM GAS  /tmp/ccDefyvn.s 			page 5


 203:Core/Src/main.c **** /**
 204:Core/Src/main.c ****   * @brief  The application entry point.
 205:Core/Src/main.c ****   * @retval int
 206:Core/Src/main.c ****   */
 207:Core/Src/main.c **** int main(void)
 208:Core/Src/main.c **** {
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE END 1 */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 217:Core/Src/main.c ****   HAL_Init();
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* USER CODE END Init */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* Configure the system clock */
 224:Core/Src/main.c ****   SystemClock_Config();
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* USER CODE END SysInit */
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* Initialize all configured peripherals */
 231:Core/Src/main.c ****   MX_GPIO_Init();
 232:Core/Src/main.c ****   MX_DMA_Init();
 233:Core/Src/main.c ****   MX_ADC1_Init();
 234:Core/Src/main.c ****   MX_I2C1_Init();
 235:Core/Src/main.c ****   MX_USART2_UART_Init();
 236:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END 2 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* Init scheduler */
 241:Core/Src/main.c ****   osKernelInitialize();
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 244:Core/Src/main.c ****   /* add mutexes, ... */
 245:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 248:Core/Src/main.c ****   /* add semaphores, ... */
 249:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 252:Core/Src/main.c ****   /* start timers, add new ones, ... */
 253:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* Create the queue(s) */
 256:Core/Src/main.c ****   /* creation of MiniBotInputQueue */
 257:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &MiniBotInputQueue_attributes)
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
ARM GAS  /tmp/ccDefyvn.s 			page 6


 260:Core/Src/main.c ****   /* add queues, ... */
 261:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* Create the thread(s) */
 264:Core/Src/main.c ****   /* creation of defaultTask */
 265:Core/Src/main.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* creation of BlinkLEDTask */
 268:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadNew(BlinkLEDTaskEntry, NULL, &BlinkLEDTask_attributes);
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* creation of MiniBotInputs */
 271:Core/Src/main.c ****   MiniBotInputsHandle = osThreadNew(MiniBotInputsEntry, NULL, &MiniBotInputs_attributes);
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* creation of ApplicationFSM */
 274:Core/Src/main.c ****   ApplicationFSMHandle = osThreadNew(ApplicationFSMEntry, NULL, &ApplicationFSM_attributes);
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 277:Core/Src/main.c ****   /* add threads, ... */
 278:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 281:Core/Src/main.c ****   /* add events, ... */
 282:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* Start scheduler */
 285:Core/Src/main.c ****   osKernelStart();
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* Infinite loop */
 290:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 291:Core/Src/main.c ****   while (1)
 292:Core/Src/main.c ****   {
 293:Core/Src/main.c ****     /* USER CODE END WHILE */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 296:Core/Src/main.c ****   }
 297:Core/Src/main.c ****   /* USER CODE END 3 */
 298:Core/Src/main.c **** }
 299:Core/Src/main.c **** 
 300:Core/Src/main.c **** /**
 301:Core/Src/main.c ****   * @brief System Clock Configuration
 302:Core/Src/main.c ****   * @retval None
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c **** void SystemClock_Config(void)
 305:Core/Src/main.c **** {
 306:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 307:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 310:Core/Src/main.c ****   */
 311:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 312:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 315:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 316:Core/Src/main.c ****   */
ARM GAS  /tmp/ccDefyvn.s 			page 7


 317:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 318:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 319:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 323:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 324:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 325:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 326:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 327:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 328:Core/Src/main.c ****   {
 329:Core/Src/main.c ****     Error_Handler();
 330:Core/Src/main.c ****   }
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 333:Core/Src/main.c ****   */
 334:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 335:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 336:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 337:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 338:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 339:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 342:Core/Src/main.c ****   {
 343:Core/Src/main.c ****     Error_Handler();
 344:Core/Src/main.c ****   }
 345:Core/Src/main.c **** }
 346:Core/Src/main.c **** 
 347:Core/Src/main.c **** /**
 348:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 349:Core/Src/main.c ****   * @param None
 350:Core/Src/main.c ****   * @retval None
 351:Core/Src/main.c ****   */
 352:Core/Src/main.c **** static void MX_ADC1_Init(void)
 353:Core/Src/main.c **** {
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 366:Core/Src/main.c ****   */
 367:Core/Src/main.c ****   hadc1.Instance = ADC1;
 368:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 369:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 370:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 371:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 372:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 373:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
ARM GAS  /tmp/ccDefyvn.s 			page 8


 374:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 375:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 376:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 377:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 378:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 379:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 380:Core/Src/main.c ****   {
 381:Core/Src/main.c ****     Error_Handler();
 382:Core/Src/main.c ****   }
 383:Core/Src/main.c **** 
 384:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 385:Core/Src/main.c ****   */
 386:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 387:Core/Src/main.c ****   sConfig.Rank = 1;
 388:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 389:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 390:Core/Src/main.c ****   {
 391:Core/Src/main.c ****     Error_Handler();
 392:Core/Src/main.c ****   }
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 395:Core/Src/main.c ****   */
 396:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 397:Core/Src/main.c ****   sConfig.Rank = 2;
 398:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 399:Core/Src/main.c ****   {
 400:Core/Src/main.c ****     Error_Handler();
 401:Core/Src/main.c ****   }
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 404:Core/Src/main.c ****   */
 405:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 406:Core/Src/main.c ****   sConfig.Rank = 3;
 407:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 408:Core/Src/main.c ****   {
 409:Core/Src/main.c ****     Error_Handler();
 410:Core/Src/main.c ****   }
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 413:Core/Src/main.c ****   */
 414:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 415:Core/Src/main.c ****   sConfig.Rank = 4;
 416:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 417:Core/Src/main.c ****   {
 418:Core/Src/main.c ****     Error_Handler();
 419:Core/Src/main.c ****   }
 420:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** }
 425:Core/Src/main.c **** 
 426:Core/Src/main.c **** /**
 427:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 428:Core/Src/main.c ****   * @param None
 429:Core/Src/main.c ****   * @retval None
 430:Core/Src/main.c ****   */
ARM GAS  /tmp/ccDefyvn.s 			page 9


 431:Core/Src/main.c **** static void MX_I2C1_Init(void)
 432:Core/Src/main.c **** {
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 439:Core/Src/main.c **** 
 440:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 441:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 442:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 443:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 444:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 445:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 446:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 447:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 448:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 449:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 450:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 451:Core/Src/main.c ****   {
 452:Core/Src/main.c ****     Error_Handler();
 453:Core/Src/main.c ****   }
 454:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 457:Core/Src/main.c **** 
 458:Core/Src/main.c **** }
 459:Core/Src/main.c **** 
 460:Core/Src/main.c **** /**
 461:Core/Src/main.c ****   * @brief USART2 Initialization Function
 462:Core/Src/main.c ****   * @param None
 463:Core/Src/main.c ****   * @retval None
 464:Core/Src/main.c ****   */
 465:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 466:Core/Src/main.c **** {
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 475:Core/Src/main.c ****   huart2.Instance = USART2;
 476:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 477:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 478:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 479:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 480:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 481:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 482:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 483:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 484:Core/Src/main.c ****   {
 485:Core/Src/main.c ****     Error_Handler();
 486:Core/Src/main.c ****   }
 487:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
ARM GAS  /tmp/ccDefyvn.s 			page 10


 488:Core/Src/main.c **** 
 489:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c **** }
 492:Core/Src/main.c **** 
 493:Core/Src/main.c **** /**
 494:Core/Src/main.c ****   * Enable DMA controller clock
 495:Core/Src/main.c ****   */
 496:Core/Src/main.c **** static void MX_DMA_Init(void)
 497:Core/Src/main.c **** {
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* DMA controller clock enable */
 500:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /* DMA interrupt init */
 503:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 504:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 505:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 506:Core/Src/main.c **** 
 507:Core/Src/main.c **** }
 508:Core/Src/main.c **** 
 509:Core/Src/main.c **** /**
 510:Core/Src/main.c ****   * @brief GPIO Initialization Function
 511:Core/Src/main.c ****   * @param None
 512:Core/Src/main.c ****   * @retval None
 513:Core/Src/main.c ****   */
 514:Core/Src/main.c **** static void MX_GPIO_Init(void)
 515:Core/Src/main.c **** {
  28              		.loc 1 515 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 516:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 516 3 view .LVU1
  41              		.loc 1 516 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 517:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 518:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 519:Core/Src/main.c **** 
 520:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 521:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 521 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 521 3 view .LVU4
ARM GAS  /tmp/ccDefyvn.s 			page 11


  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 521 3 view .LVU5
  53 0012 274B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 521 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 521 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 521 3 view .LVU8
 522:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 522 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 522 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 522 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 522 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 522 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 522 3 view .LVU14
 523:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 523 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 523 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 523 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 523 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 523 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 523 3 view .LVU20
 524:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 524 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 524 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 524 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccDefyvn.s 			page 12


 105              		.loc 1 524 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 524 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 524 3 view .LVU26
 525:Core/Src/main.c **** 
 526:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 527:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 527 3 view .LVU27
 114 0062 144D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 530:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 530 3 view .LVU28
 121              		.loc 1 530 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 531:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 531 3 is_stmt 1 view .LVU30
 125              		.loc 1 531 24 is_stmt 0 view .LVU31
 126 0074 4FF40413 		mov	r3, #2162688
 127 0078 0693     		str	r3, [sp, #24]
 532:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 532 3 is_stmt 1 view .LVU32
 129              		.loc 1 532 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 533:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 533 3 is_stmt 1 view .LVU34
 132 007c 05A9     		add	r1, sp, #20
 133 007e 0E48     		ldr	r0, .L3+8
 134 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL1:
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 536:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 136              		.loc 1 536 3 view .LVU35
 137              		.loc 1 536 23 is_stmt 0 view .LVU36
 138 0084 2023     		movs	r3, #32
 139 0086 0593     		str	r3, [sp, #20]
 537:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 140              		.loc 1 537 3 is_stmt 1 view .LVU37
 141              		.loc 1 537 24 is_stmt 0 view .LVU38
 142 0088 0126     		movs	r6, #1
 143 008a 0696     		str	r6, [sp, #24]
 538:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 144              		.loc 1 538 3 is_stmt 1 view .LVU39
 145              		.loc 1 538 24 is_stmt 0 view .LVU40
 146 008c 0794     		str	r4, [sp, #28]
 539:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccDefyvn.s 			page 13


 147              		.loc 1 539 3 is_stmt 1 view .LVU41
 148              		.loc 1 539 25 is_stmt 0 view .LVU42
 149 008e 0894     		str	r4, [sp, #32]
 540:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 150              		.loc 1 540 3 is_stmt 1 view .LVU43
 151 0090 05A9     		add	r1, sp, #20
 152 0092 2846     		mov	r0, r5
 153 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 154              	.LVL2:
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 543:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 155              		.loc 1 543 3 view .LVU44
 156              		.loc 1 543 23 is_stmt 0 view .LVU45
 157 0098 4FF40073 		mov	r3, #512
 158 009c 0593     		str	r3, [sp, #20]
 544:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 159              		.loc 1 544 3 is_stmt 1 view .LVU46
 160              		.loc 1 544 24 is_stmt 0 view .LVU47
 161 009e 0694     		str	r4, [sp, #24]
 545:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 162              		.loc 1 545 3 is_stmt 1 view .LVU48
 163              		.loc 1 545 24 is_stmt 0 view .LVU49
 164 00a0 0796     		str	r6, [sp, #28]
 546:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 165              		.loc 1 546 3 is_stmt 1 view .LVU50
 166 00a2 05A9     		add	r1, sp, #20
 167 00a4 2846     		mov	r0, r5
 168 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 547:Core/Src/main.c **** 
 548:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 549:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 550:Core/Src/main.c **** }
 170              		.loc 1 550 1 is_stmt 0 view .LVU51
 171 00aa 0AB0     		add	sp, sp, #40
 172              		.cfi_def_cfa_offset 16
 173              		@ sp needed
 174 00ac 70BD     		pop	{r4, r5, r6, pc}
 175              	.L4:
 176 00ae 00BF     		.align	2
 177              	.L3:
 178 00b0 00380240 		.word	1073887232
 179 00b4 00000240 		.word	1073872896
 180 00b8 00080240 		.word	1073874944
 181              		.cfi_endproc
 182              	.LFE251:
 184              		.section	.text.MX_DMA_Init,"ax",%progbits
 185              		.align	1
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	MX_DMA_Init:
 192              	.LFB250:
 497:Core/Src/main.c **** 
 193              		.loc 1 497 1 is_stmt 1 view -0
ARM GAS  /tmp/ccDefyvn.s 			page 14


 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 8
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 00B5     		push	{lr}
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 14, -4
 200 0002 83B0     		sub	sp, sp, #12
 201              		.cfi_def_cfa_offset 16
 500:Core/Src/main.c **** 
 202              		.loc 1 500 3 view .LVU53
 203              	.LBB8:
 500:Core/Src/main.c **** 
 204              		.loc 1 500 3 view .LVU54
 205 0004 0022     		movs	r2, #0
 206 0006 0192     		str	r2, [sp, #4]
 500:Core/Src/main.c **** 
 207              		.loc 1 500 3 view .LVU55
 208 0008 094B     		ldr	r3, .L7
 209 000a 196B     		ldr	r1, [r3, #48]
 210 000c 41F48001 		orr	r1, r1, #4194304
 211 0010 1963     		str	r1, [r3, #48]
 500:Core/Src/main.c **** 
 212              		.loc 1 500 3 view .LVU56
 213 0012 1B6B     		ldr	r3, [r3, #48]
 214 0014 03F48003 		and	r3, r3, #4194304
 215 0018 0193     		str	r3, [sp, #4]
 500:Core/Src/main.c **** 
 216              		.loc 1 500 3 view .LVU57
 217 001a 019B     		ldr	r3, [sp, #4]
 218              	.LBE8:
 500:Core/Src/main.c **** 
 219              		.loc 1 500 3 view .LVU58
 504:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 220              		.loc 1 504 3 view .LVU59
 221 001c 0521     		movs	r1, #5
 222 001e 3820     		movs	r0, #56
 223 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 224              	.LVL4:
 505:Core/Src/main.c **** 
 225              		.loc 1 505 3 view .LVU60
 226 0024 3820     		movs	r0, #56
 227 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 228              	.LVL5:
 507:Core/Src/main.c **** 
 229              		.loc 1 507 1 is_stmt 0 view .LVU61
 230 002a 03B0     		add	sp, sp, #12
 231              		.cfi_def_cfa_offset 4
 232              		@ sp needed
 233 002c 5DF804FB 		ldr	pc, [sp], #4
 234              	.L8:
 235              		.align	2
 236              	.L7:
 237 0030 00380240 		.word	1073887232
 238              		.cfi_endproc
 239              	.LFE250:
 241              		.section	.text.StartDefaultTask,"ax",%progbits
 242              		.align	1
ARM GAS  /tmp/ccDefyvn.s 			page 15


 243              		.global	StartDefaultTask
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	StartDefaultTask:
 250              	.LFB252:
 551:Core/Src/main.c **** 
 552:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 553:Core/Src/main.c **** 
 554:Core/Src/main.c **** /* USER CODE END 4 */
 555:Core/Src/main.c **** 
 556:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 557:Core/Src/main.c **** /**
 558:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 559:Core/Src/main.c ****   * @param  argument: Not used
 560:Core/Src/main.c ****   * @retval None
 561:Core/Src/main.c ****   */
 562:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 563:Core/Src/main.c **** void StartDefaultTask(void *argument)
 564:Core/Src/main.c **** {
 251              		.loc 1 564 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ Volatile: function does not return.
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL6:
 257              		.loc 1 564 1 is_stmt 0 view .LVU63
 258 0000 08B5     		push	{r3, lr}
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 3, -8
 261              		.cfi_offset 14, -4
 262              	.LVL7:
 263              	.L10:
 565:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 566:Core/Src/main.c ****   /* Infinite loop */
 567:Core/Src/main.c ****   for(;;)
 264              		.loc 1 567 3 is_stmt 1 discriminator 1 view .LVU64
 568:Core/Src/main.c ****   {
 569:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 265              		.loc 1 569 5 discriminator 1 view .LVU65
 266 0002 0022     		movs	r2, #0
 267 0004 2021     		movs	r1, #32
 268 0006 0448     		ldr	r0, .L12
 269 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 270              	.LVL8:
 570:Core/Src/main.c ****     osDelay(1000);
 271              		.loc 1 570 5 discriminator 1 view .LVU66
 272 000c 4FF47A70 		mov	r0, #1000
 273 0010 FFF7FEFF 		bl	osDelay
 274              	.LVL9:
 567:Core/Src/main.c ****   {
 275              		.loc 1 567 8 discriminator 1 view .LVU67
 276 0014 F5E7     		b	.L10
 277              	.L13:
 278 0016 00BF     		.align	2
 279              	.L12:
ARM GAS  /tmp/ccDefyvn.s 			page 16


 280 0018 00000240 		.word	1073872896
 281              		.cfi_endproc
 282              	.LFE252:
 284              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 285              		.align	1
 286              		.global	BlinkLEDTaskEntry
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	BlinkLEDTaskEntry:
 293              	.LFB253:
 571:Core/Src/main.c ****   }
 572:Core/Src/main.c ****   /* USER CODE END 5 */
 573:Core/Src/main.c **** }
 574:Core/Src/main.c **** 
 575:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 576:Core/Src/main.c **** /**
 577:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 578:Core/Src/main.c **** * @param argument: Not used
 579:Core/Src/main.c **** * @retval None
 580:Core/Src/main.c **** */
 581:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 582:Core/Src/main.c **** void BlinkLEDTaskEntry(void *argument)
 583:Core/Src/main.c **** {
 294              		.loc 1 583 1 view -0
 295              		.cfi_startproc
 296              		@ Volatile: function does not return.
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              	.LVL10:
 300              		.loc 1 583 1 is_stmt 0 view .LVU69
 301 0000 08B5     		push	{r3, lr}
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 3, -8
 304              		.cfi_offset 14, -4
 305              	.LVL11:
 306              	.L15:
 584:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 585:Core/Src/main.c ****   /* Infinite loop */
 586:Core/Src/main.c ****   for(;;)
 307              		.loc 1 586 3 is_stmt 1 discriminator 1 view .LVU70
 587:Core/Src/main.c ****   {
 588:Core/Src/main.c ****     
 589:Core/Src/main.c ****     osDelay(500);
 308              		.loc 1 589 5 discriminator 1 view .LVU71
 309 0002 4FF4FA70 		mov	r0, #500
 310 0006 FFF7FEFF 		bl	osDelay
 311              	.LVL12:
 590:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 312              		.loc 1 590 5 discriminator 1 view .LVU72
 313 000a 0122     		movs	r2, #1
 314 000c 2021     		movs	r1, #32
 315 000e 0448     		ldr	r0, .L17
 316 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL13:
 591:Core/Src/main.c ****     osDelay(500);
ARM GAS  /tmp/ccDefyvn.s 			page 17


 318              		.loc 1 591 5 discriminator 1 view .LVU73
 319 0014 4FF4FA70 		mov	r0, #500
 320 0018 FFF7FEFF 		bl	osDelay
 321              	.LVL14:
 586:Core/Src/main.c ****   {
 322              		.loc 1 586 8 discriminator 1 view .LVU74
 323 001c F1E7     		b	.L15
 324              	.L18:
 325 001e 00BF     		.align	2
 326              	.L17:
 327 0020 00000240 		.word	1073872896
 328              		.cfi_endproc
 329              	.LFE253:
 331              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 332              		.align	1
 333              		.global	ApplicationFSMEntry
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	ApplicationFSMEntry:
 340              	.LFB255:
 592:Core/Src/main.c ****   }
 593:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 594:Core/Src/main.c **** }
 595:Core/Src/main.c **** 
 596:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 597:Core/Src/main.c **** /**
 598:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 599:Core/Src/main.c **** * @param argument: Not used
 600:Core/Src/main.c **** * @retval None
 601:Core/Src/main.c **** */
 602:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 603:Core/Src/main.c **** void MiniBotInputsEntry(void *argument)
 604:Core/Src/main.c **** {
 605:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 606:Core/Src/main.c **** 
 607:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 608:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 609:Core/Src/main.c **** 
 610:Core/Src/main.c ****   // volatile MiniBot_Qdata Qdata;
 611:Core/Src/main.c **** 
 612:Core/Src/main.c ****   
 613:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, value, 4);
 614:Core/Src/main.c **** 
 615:Core/Src/main.c **** 	/* Infinite loop */
 616:Core/Src/main.c **** 	for(;;)
 617:Core/Src/main.c **** 	{
 618:Core/Src/main.c ****     // TODO: Turn this into a function
 619:Core/Src/main.c ****     if(value[0] > MiniBot.Base.PotMax){
 620:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax;
 621:Core/Src/main.c ****     }else if(value[0] < MiniBot.Base.PotMin){
 622:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMin;
 623:Core/Src/main.c ****     }else{
 624:Core/Src/main.c ****       Qdata.BasePotValue = value[0];
 625:Core/Src/main.c ****     }
 626:Core/Src/main.c ****     if(MiniBot.Base.PotInvertRange){
ARM GAS  /tmp/ccDefyvn.s 			page 18


 627:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax - Qdata.BasePotValue + MiniBot.Base.PotMin;
 628:Core/Src/main.c ****     }
 629:Core/Src/main.c **** 
 630:Core/Src/main.c ****     if(value[1] > MiniBot.Shoulder.PotMax){
 631:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax;
 632:Core/Src/main.c ****     }else if(value[1] < MiniBot.Shoulder.PotMin){
 633:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMin;
 634:Core/Src/main.c ****     }else{
 635:Core/Src/main.c ****       Qdata.ShoulderPotValue = value[1];
 636:Core/Src/main.c ****     }
 637:Core/Src/main.c ****     if(MiniBot.Shoulder.PotInvertRange){
 638:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax - Qdata.ShoulderPotValue + MiniBot.Shoulder.
 639:Core/Src/main.c ****     }
 640:Core/Src/main.c **** 
 641:Core/Src/main.c ****     if(value[2] > MiniBot.Elbow.PotMax){
 642:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax;
 643:Core/Src/main.c ****     }else if(value[2] < MiniBot.Elbow.PotMin){
 644:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMin;
 645:Core/Src/main.c ****     }else{
 646:Core/Src/main.c ****       Qdata.ElbowPotValue = value[2];
 647:Core/Src/main.c ****     }
 648:Core/Src/main.c ****     if(MiniBot.Elbow.PotInvertRange){
 649:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax - Qdata.ElbowPotValue + MiniBot.Elbow.PotMin;
 650:Core/Src/main.c ****     }
 651:Core/Src/main.c **** 
 652:Core/Src/main.c ****     if(value[3] > MiniBot.Wrist.PotMax){
 653:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax;
 654:Core/Src/main.c ****     }else if(value[3] < MiniBot.Wrist.PotMin){
 655:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMin;
 656:Core/Src/main.c ****     }else{
 657:Core/Src/main.c ****       Qdata.WristPotValue = value[3];
 658:Core/Src/main.c ****     }
 659:Core/Src/main.c ****     if(MiniBot.Wrist.PotInvertRange){
 660:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax - Qdata.WristPotValue + MiniBot.Wrist.PotMin;
 661:Core/Src/main.c ****     }
 662:Core/Src/main.c **** 
 663:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 664:Core/Src/main.c ****     
 665:Core/Src/main.c **** 
 666:Core/Src/main.c **** 		osDelay(1);
 667:Core/Src/main.c **** 	}
 668:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 669:Core/Src/main.c **** }
 670:Core/Src/main.c **** 
 671:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 672:Core/Src/main.c **** /**
 673:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 674:Core/Src/main.c **** * @param argument: Not used
 675:Core/Src/main.c **** * @retval None
 676:Core/Src/main.c **** */
 677:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 678:Core/Src/main.c **** void ApplicationFSMEntry(void *argument)
 679:Core/Src/main.c **** {
 341              		.loc 1 679 1 view -0
 342              		.cfi_startproc
 343              		@ Volatile: function does not return.
 344              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccDefyvn.s 			page 19


 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL15:
 347              		.loc 1 679 1 is_stmt 0 view .LVU76
 348 0000 08B5     		push	{r3, lr}
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 3, -8
 351              		.cfi_offset 14, -4
 352              	.LVL16:
 353              	.L20:
 680:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 681:Core/Src/main.c ****   /* Infinite loop */
 682:Core/Src/main.c ****   for(;;)
 354              		.loc 1 682 3 is_stmt 1 discriminator 1 view .LVU77
 683:Core/Src/main.c ****   {
 684:Core/Src/main.c ****     osDelay(1);
 355              		.loc 1 684 5 discriminator 1 view .LVU78
 356 0002 0120     		movs	r0, #1
 357 0004 FFF7FEFF 		bl	osDelay
 358              	.LVL17:
 682:Core/Src/main.c ****   {
 359              		.loc 1 682 8 discriminator 1 view .LVU79
 360 0008 FBE7     		b	.L20
 361              		.cfi_endproc
 362              	.LFE255:
 364              		.section	.text.MiniBotInit,"ax",%progbits
 365              		.align	1
 366              		.global	MiniBotInit
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu fpv4-sp-d16
 372              	MiniBotInit:
 373              	.LVL18:
 374              	.LFB243:
 170:Core/Src/main.c **** 	// Configure Each of the joints
 375              		.loc 1 170 44 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 170:Core/Src/main.c **** 	// Configure Each of the joints
 379              		.loc 1 170 44 is_stmt 0 view .LVU81
 380 0000 00B5     		push	{lr}
 381              		.cfi_def_cfa_offset 4
 382              		.cfi_offset 14, -4
 173:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 383              		.loc 1 173 4 is_stmt 1 view .LVU82
 173:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 384              		.loc 1 173 25 is_stmt 0 view .LVU83
 385 0002 0023     		movs	r3, #0
 386 0004 0370     		strb	r3, [r0]
 174:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 387              		.loc 1 174 4 is_stmt 1 view .LVU84
 174:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 388              		.loc 1 174 25 is_stmt 0 view .LVU85
 389 0006 4FF44872 		mov	r2, #800
 390 000a 4260     		str	r2, [r0, #4]
 175:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
ARM GAS  /tmp/ccDefyvn.s 			page 20


 391              		.loc 1 175 4 is_stmt 1 view .LVU86
 175:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 392              		.loc 1 175 25 is_stmt 0 view .LVU87
 393 000c 40F64851 		movw	r1, #3400
 394 0010 8160     		str	r1, [r0, #8]
 176:Core/Src/main.c **** 
 395              		.loc 1 176 4 is_stmt 1 view .LVU88
 176:Core/Src/main.c **** 
 396              		.loc 1 176 33 is_stmt 0 view .LVU89
 397 0012 0373     		strb	r3, [r0, #12]
 178:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 398              		.loc 1 178 4 is_stmt 1 view .LVU90
 178:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 399              		.loc 1 178 29 is_stmt 0 view .LVU91
 400 0014 4FF0010C 		mov	ip, #1
 401 0018 80F810C0 		strb	ip, [r0, #16]
 179:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 402              		.loc 1 179 4 is_stmt 1 view .LVU92
 179:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 403              		.loc 1 179 29 is_stmt 0 view .LVU93
 404 001c 4FF41672 		mov	r2, #600
 405 0020 4261     		str	r2, [r0, #20]
 180:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 406              		.loc 1 180 4 is_stmt 1 view .LVU94
 180:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 407              		.loc 1 180 29 is_stmt 0 view .LVU95
 408 0022 8161     		str	r1, [r0, #24]
 181:Core/Src/main.c **** 
 409              		.loc 1 181 4 is_stmt 1 view .LVU96
 181:Core/Src/main.c **** 
 410              		.loc 1 181 37 is_stmt 0 view .LVU97
 411 0024 0377     		strb	r3, [r0, #28]
 183:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 412              		.loc 1 183 4 is_stmt 1 view .LVU98
 183:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 413              		.loc 1 183 26 is_stmt 0 view .LVU99
 414 0026 4FF0020E 		mov	lr, #2
 415 002a 80F820E0 		strb	lr, [r0, #32]
 184:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 416              		.loc 1 184 4 is_stmt 1 view .LVU100
 184:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 417              		.loc 1 184 26 is_stmt 0 view .LVU101
 418 002e 4262     		str	r2, [r0, #36]
 185:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 419              		.loc 1 185 4 is_stmt 1 view .LVU102
 185:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 420              		.loc 1 185 26 is_stmt 0 view .LVU103
 421 0030 8162     		str	r1, [r0, #40]
 186:Core/Src/main.c **** 
 422              		.loc 1 186 4 is_stmt 1 view .LVU104
 186:Core/Src/main.c **** 
 423              		.loc 1 186 34 is_stmt 0 view .LVU105
 424 0032 80F82C30 		strb	r3, [r0, #44]
 188:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 425              		.loc 1 188 4 is_stmt 1 view .LVU106
 188:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 426              		.loc 1 188 26 is_stmt 0 view .LVU107
ARM GAS  /tmp/ccDefyvn.s 			page 21


 427 0036 0323     		movs	r3, #3
 428 0038 80F83030 		strb	r3, [r0, #48]
 189:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 429              		.loc 1 189 4 is_stmt 1 view .LVU108
 189:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 430              		.loc 1 189 26 is_stmt 0 view .LVU109
 431 003c 4263     		str	r2, [r0, #52]
 190:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 432              		.loc 1 190 4 is_stmt 1 view .LVU110
 190:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 433              		.loc 1 190 26 is_stmt 0 view .LVU111
 434 003e 4FF44863 		mov	r3, #3200
 435 0042 8363     		str	r3, [r0, #56]
 191:Core/Src/main.c **** 
 436              		.loc 1 191 4 is_stmt 1 view .LVU112
 191:Core/Src/main.c **** 
 437              		.loc 1 191 34 is_stmt 0 view .LVU113
 438 0044 80F83CC0 		strb	ip, [r0, #60]
 193:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 439              		.loc 1 193 4 is_stmt 1 view .LVU114
 193:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 440              		.loc 1 193 27 is_stmt 0 view .LVU115
 441 0048 034B     		ldr	r3, .L24
 442 004a 0364     		str	r3, [r0, #64]
 194:Core/Src/main.c **** }
 443              		.loc 1 194 4 is_stmt 1 view .LVU116
 194:Core/Src/main.c **** }
 444              		.loc 1 194 30 is_stmt 0 view .LVU117
 445 004c 4FF40073 		mov	r3, #512
 446 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 195:Core/Src/main.c **** 
 447              		.loc 1 195 1 view .LVU118
 448 0054 5DF804FB 		ldr	pc, [sp], #4
 449              	.L25:
 450              		.align	2
 451              	.L24:
 452 0058 00000240 		.word	1073872896
 453              		.cfi_endproc
 454              	.LFE243:
 456              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 457              		.align	1
 458              		.global	MiniBotInputsEntry
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	MiniBotInputsEntry:
 465              	.LVL19:
 466              	.LFB254:
 604:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 467              		.loc 1 604 1 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ Volatile: function does not return.
 470              		@ args = 0, pretend = 0, frame = 72
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 604:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 472              		.loc 1 604 1 is_stmt 0 view .LVU120
ARM GAS  /tmp/ccDefyvn.s 			page 22


 473 0000 00B5     		push	{lr}
 474              		.cfi_def_cfa_offset 4
 475              		.cfi_offset 14, -4
 476 0002 93B0     		sub	sp, sp, #76
 477              		.cfi_def_cfa_offset 80
 607:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 478              		.loc 1 607 2 is_stmt 1 view .LVU121
 608:Core/Src/main.c **** 
 479              		.loc 1 608 2 view .LVU122
 480 0004 6846     		mov	r0, sp
 481              	.LVL20:
 608:Core/Src/main.c **** 
 482              		.loc 1 608 2 is_stmt 0 view .LVU123
 483 0006 FFF7FEFF 		bl	MiniBotInit
 484              	.LVL21:
 613:Core/Src/main.c **** 
 485              		.loc 1 613 3 is_stmt 1 view .LVU124
 486 000a 0422     		movs	r2, #4
 487 000c 3949     		ldr	r1, .L45
 488 000e 3A48     		ldr	r0, .L45+4
 489 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 490              	.LVL22:
 491 0014 40E0     		b	.L43
 492              	.L27:
 621:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMin;
 493              		.loc 1 621 11 view .LVU125
 621:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMin;
 494              		.loc 1 621 37 is_stmt 0 view .LVU126
 495 0016 0199     		ldr	r1, [sp, #4]
 621:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMin;
 496              		.loc 1 621 13 view .LVU127
 497 0018 8A42     		cmp	r2, r1
 498 001a 02D2     		bcs	.L29
 622:Core/Src/main.c ****     }else{
 499              		.loc 1 622 7 is_stmt 1 view .LVU128
 622:Core/Src/main.c ****     }else{
 500              		.loc 1 622 26 is_stmt 0 view .LVU129
 501 001c 374A     		ldr	r2, .L45+8
 502 001e 1160     		str	r1, [r2]
 503 0020 41E0     		b	.L28
 504              	.L29:
 624:Core/Src/main.c ****     }
 505              		.loc 1 624 7 is_stmt 1 view .LVU130
 624:Core/Src/main.c ****     }
 506              		.loc 1 624 26 is_stmt 0 view .LVU131
 507 0022 3649     		ldr	r1, .L45+8
 508 0024 0A60     		str	r2, [r1]
 509 0026 3EE0     		b	.L28
 510              	.L31:
 632:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMin;
 511              		.loc 1 632 11 is_stmt 1 view .LVU132
 632:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMin;
 512              		.loc 1 632 41 is_stmt 0 view .LVU133
 513 0028 0599     		ldr	r1, [sp, #20]
 632:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMin;
 514              		.loc 1 632 13 view .LVU134
 515 002a 8A42     		cmp	r2, r1
ARM GAS  /tmp/ccDefyvn.s 			page 23


 516 002c 4CD2     		bcs	.L33
 633:Core/Src/main.c ****     }else{
 517              		.loc 1 633 7 is_stmt 1 view .LVU135
 633:Core/Src/main.c ****     }else{
 518              		.loc 1 633 30 is_stmt 0 view .LVU136
 519 002e 334A     		ldr	r2, .L45+8
 520 0030 5160     		str	r1, [r2, #4]
 521              	.L32:
 637:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax - Qdata.ShoulderPotValue + MiniBot.Shoulder.
 522              		.loc 1 637 5 is_stmt 1 view .LVU137
 637:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax - Qdata.ShoulderPotValue + MiniBot.Shoulder.
 523              		.loc 1 637 24 is_stmt 0 view .LVU138
 524 0032 9DF81C20 		ldrb	r2, [sp, #28]	@ zero_extendqisi2
 637:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax - Qdata.ShoulderPotValue + MiniBot.Shoulder.
 525              		.loc 1 637 7 view .LVU139
 526 0036 2AB1     		cbz	r2, .L34
 638:Core/Src/main.c ****     }
 527              		.loc 1 638 7 is_stmt 1 view .LVU140
 638:Core/Src/main.c ****     }
 528              		.loc 1 638 63 is_stmt 0 view .LVU141
 529 0038 304A     		ldr	r2, .L45+8
 530 003a 5168     		ldr	r1, [r2, #4]
 638:Core/Src/main.c ****     }
 531              		.loc 1 638 56 view .LVU142
 532 003c 5B1A     		subs	r3, r3, r1
 638:Core/Src/main.c ****     }
 533              		.loc 1 638 99 view .LVU143
 534 003e 0599     		ldr	r1, [sp, #20]
 638:Core/Src/main.c ****     }
 535              		.loc 1 638 81 view .LVU144
 536 0040 0B44     		add	r3, r3, r1
 638:Core/Src/main.c ****     }
 537              		.loc 1 638 30 view .LVU145
 538 0042 5360     		str	r3, [r2, #4]
 539              	.L34:
 641:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax;
 540              		.loc 1 641 5 is_stmt 1 view .LVU146
 641:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax;
 541              		.loc 1 641 13 is_stmt 0 view .LVU147
 542 0044 2B4B     		ldr	r3, .L45
 543 0046 9A68     		ldr	r2, [r3, #8]
 641:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax;
 544              		.loc 1 641 32 view .LVU148
 545 0048 0A9B     		ldr	r3, [sp, #40]
 641:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax;
 546              		.loc 1 641 7 view .LVU149
 547 004a 9A42     		cmp	r2, r3
 548 004c 3FD9     		bls	.L35
 642:Core/Src/main.c ****     }else if(value[2] < MiniBot.Elbow.PotMin){
 549              		.loc 1 642 7 is_stmt 1 view .LVU150
 642:Core/Src/main.c ****     }else if(value[2] < MiniBot.Elbow.PotMin){
 550              		.loc 1 642 27 is_stmt 0 view .LVU151
 551 004e 2B4A     		ldr	r2, .L45+8
 552 0050 9360     		str	r3, [r2, #8]
 553              	.L36:
 648:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax - Qdata.ElbowPotValue + MiniBot.Elbow.PotMin;
 554              		.loc 1 648 5 is_stmt 1 view .LVU152
ARM GAS  /tmp/ccDefyvn.s 			page 24


 648:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax - Qdata.ElbowPotValue + MiniBot.Elbow.PotMin;
 555              		.loc 1 648 21 is_stmt 0 view .LVU153
 556 0052 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 648:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMax - Qdata.ElbowPotValue + MiniBot.Elbow.PotMin;
 557              		.loc 1 648 7 view .LVU154
 558 0056 2AB1     		cbz	r2, .L38
 649:Core/Src/main.c ****     }
 559              		.loc 1 649 7 is_stmt 1 view .LVU155
 649:Core/Src/main.c ****     }
 560              		.loc 1 649 57 is_stmt 0 view .LVU156
 561 0058 284A     		ldr	r2, .L45+8
 562 005a 9168     		ldr	r1, [r2, #8]
 649:Core/Src/main.c ****     }
 563              		.loc 1 649 50 view .LVU157
 564 005c 5B1A     		subs	r3, r3, r1
 649:Core/Src/main.c ****     }
 565              		.loc 1 649 87 view .LVU158
 566 005e 0999     		ldr	r1, [sp, #36]
 649:Core/Src/main.c ****     }
 567              		.loc 1 649 72 view .LVU159
 568 0060 0B44     		add	r3, r3, r1
 649:Core/Src/main.c ****     }
 569              		.loc 1 649 27 view .LVU160
 570 0062 9360     		str	r3, [r2, #8]
 571              	.L38:
 652:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax;
 572              		.loc 1 652 5 is_stmt 1 view .LVU161
 652:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax;
 573              		.loc 1 652 13 is_stmt 0 view .LVU162
 574 0064 234B     		ldr	r3, .L45
 575 0066 DA68     		ldr	r2, [r3, #12]
 652:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax;
 576              		.loc 1 652 32 view .LVU163
 577 0068 0E9B     		ldr	r3, [sp, #56]
 652:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax;
 578              		.loc 1 652 7 view .LVU164
 579 006a 9A42     		cmp	r2, r3
 580 006c 38D9     		bls	.L39
 653:Core/Src/main.c ****     }else if(value[3] < MiniBot.Wrist.PotMin){
 581              		.loc 1 653 7 is_stmt 1 view .LVU165
 653:Core/Src/main.c ****     }else if(value[3] < MiniBot.Wrist.PotMin){
 582              		.loc 1 653 27 is_stmt 0 view .LVU166
 583 006e 234A     		ldr	r2, .L45+8
 584 0070 D360     		str	r3, [r2, #12]
 585              	.L40:
 659:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax - Qdata.WristPotValue + MiniBot.Wrist.PotMin;
 586              		.loc 1 659 5 is_stmt 1 view .LVU167
 659:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax - Qdata.WristPotValue + MiniBot.Wrist.PotMin;
 587              		.loc 1 659 21 is_stmt 0 view .LVU168
 588 0072 9DF83C20 		ldrb	r2, [sp, #60]	@ zero_extendqisi2
 659:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMax - Qdata.WristPotValue + MiniBot.Wrist.PotMin;
 589              		.loc 1 659 7 view .LVU169
 590 0076 2AB1     		cbz	r2, .L42
 660:Core/Src/main.c ****     }
 591              		.loc 1 660 7 is_stmt 1 view .LVU170
 660:Core/Src/main.c ****     }
 592              		.loc 1 660 57 is_stmt 0 view .LVU171
ARM GAS  /tmp/ccDefyvn.s 			page 25


 593 0078 204A     		ldr	r2, .L45+8
 594 007a D168     		ldr	r1, [r2, #12]
 660:Core/Src/main.c ****     }
 595              		.loc 1 660 50 view .LVU172
 596 007c 5B1A     		subs	r3, r3, r1
 660:Core/Src/main.c ****     }
 597              		.loc 1 660 87 view .LVU173
 598 007e 0D99     		ldr	r1, [sp, #52]
 660:Core/Src/main.c ****     }
 599              		.loc 1 660 72 view .LVU174
 600 0080 0B44     		add	r3, r3, r1
 660:Core/Src/main.c ****     }
 601              		.loc 1 660 27 view .LVU175
 602 0082 D360     		str	r3, [r2, #12]
 603              	.L42:
 663:Core/Src/main.c ****     
 604              		.loc 1 663 5 is_stmt 1 view .LVU176
 663:Core/Src/main.c ****     
 605              		.loc 1 663 35 is_stmt 0 view .LVU177
 606 0084 4FF40071 		mov	r1, #512
 607 0088 1D48     		ldr	r0, .L45+12
 608 008a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 609              	.LVL23:
 663:Core/Src/main.c ****     
 610              		.loc 1 663 24 view .LVU178
 611 008e 1B4B     		ldr	r3, .L45+8
 612 0090 1874     		strb	r0, [r3, #16]
 666:Core/Src/main.c **** 	}
 613              		.loc 1 666 3 is_stmt 1 view .LVU179
 614 0092 0120     		movs	r0, #1
 615 0094 FFF7FEFF 		bl	osDelay
 616              	.LVL24:
 616:Core/Src/main.c **** 	{
 617              		.loc 1 616 7 view .LVU180
 618              	.L43:
 616:Core/Src/main.c **** 	{
 619              		.loc 1 616 2 view .LVU181
 619:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax;
 620              		.loc 1 619 5 view .LVU182
 619:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax;
 621              		.loc 1 619 13 is_stmt 0 view .LVU183
 622 0098 164B     		ldr	r3, .L45
 623 009a 1A68     		ldr	r2, [r3]
 619:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax;
 624              		.loc 1 619 31 view .LVU184
 625 009c 029B     		ldr	r3, [sp, #8]
 619:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax;
 626              		.loc 1 619 7 view .LVU185
 627 009e 9A42     		cmp	r2, r3
 628 00a0 B9D9     		bls	.L27
 620:Core/Src/main.c ****     }else if(value[0] < MiniBot.Base.PotMin){
 629              		.loc 1 620 7 is_stmt 1 view .LVU186
 620:Core/Src/main.c ****     }else if(value[0] < MiniBot.Base.PotMin){
 630              		.loc 1 620 26 is_stmt 0 view .LVU187
 631 00a2 164A     		ldr	r2, .L45+8
 632 00a4 1360     		str	r3, [r2]
 633              	.L28:
ARM GAS  /tmp/ccDefyvn.s 			page 26


 626:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax - Qdata.BasePotValue + MiniBot.Base.PotMin;
 634              		.loc 1 626 5 is_stmt 1 view .LVU188
 626:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax - Qdata.BasePotValue + MiniBot.Base.PotMin;
 635              		.loc 1 626 20 is_stmt 0 view .LVU189
 636 00a6 9DF80C20 		ldrb	r2, [sp, #12]	@ zero_extendqisi2
 626:Core/Src/main.c ****       Qdata.BasePotValue = MiniBot.Base.PotMax - Qdata.BasePotValue + MiniBot.Base.PotMin;
 637              		.loc 1 626 7 view .LVU190
 638 00aa 2AB1     		cbz	r2, .L30
 627:Core/Src/main.c ****     }
 639              		.loc 1 627 7 is_stmt 1 view .LVU191
 627:Core/Src/main.c ****     }
 640              		.loc 1 627 55 is_stmt 0 view .LVU192
 641 00ac 134A     		ldr	r2, .L45+8
 642 00ae 1168     		ldr	r1, [r2]
 627:Core/Src/main.c ****     }
 643              		.loc 1 627 48 view .LVU193
 644 00b0 5B1A     		subs	r3, r3, r1
 627:Core/Src/main.c ****     }
 645              		.loc 1 627 83 view .LVU194
 646 00b2 0199     		ldr	r1, [sp, #4]
 627:Core/Src/main.c ****     }
 647              		.loc 1 627 69 view .LVU195
 648 00b4 0B44     		add	r3, r3, r1
 627:Core/Src/main.c ****     }
 649              		.loc 1 627 26 view .LVU196
 650 00b6 1360     		str	r3, [r2]
 651              	.L30:
 630:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax;
 652              		.loc 1 630 5 is_stmt 1 view .LVU197
 630:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax;
 653              		.loc 1 630 13 is_stmt 0 view .LVU198
 654 00b8 0E4B     		ldr	r3, .L45
 655 00ba 5A68     		ldr	r2, [r3, #4]
 630:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax;
 656              		.loc 1 630 35 view .LVU199
 657 00bc 069B     		ldr	r3, [sp, #24]
 630:Core/Src/main.c ****       Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax;
 658              		.loc 1 630 7 view .LVU200
 659 00be 9A42     		cmp	r2, r3
 660 00c0 B2D9     		bls	.L31
 631:Core/Src/main.c ****     }else if(value[1] < MiniBot.Shoulder.PotMin){
 661              		.loc 1 631 7 is_stmt 1 view .LVU201
 631:Core/Src/main.c ****     }else if(value[1] < MiniBot.Shoulder.PotMin){
 662              		.loc 1 631 30 is_stmt 0 view .LVU202
 663 00c2 0E4A     		ldr	r2, .L45+8
 664 00c4 5360     		str	r3, [r2, #4]
 665 00c6 B4E7     		b	.L32
 666              	.L33:
 635:Core/Src/main.c ****     }
 667              		.loc 1 635 7 is_stmt 1 view .LVU203
 635:Core/Src/main.c ****     }
 668              		.loc 1 635 30 is_stmt 0 view .LVU204
 669 00c8 0C49     		ldr	r1, .L45+8
 670 00ca 4A60     		str	r2, [r1, #4]
 671 00cc B1E7     		b	.L32
 672              	.L35:
 643:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMin;
ARM GAS  /tmp/ccDefyvn.s 			page 27


 673              		.loc 1 643 11 is_stmt 1 view .LVU205
 643:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMin;
 674              		.loc 1 643 38 is_stmt 0 view .LVU206
 675 00ce 0999     		ldr	r1, [sp, #36]
 643:Core/Src/main.c ****       Qdata.ElbowPotValue = MiniBot.Elbow.PotMin;
 676              		.loc 1 643 13 view .LVU207
 677 00d0 8A42     		cmp	r2, r1
 678 00d2 02D2     		bcs	.L37
 644:Core/Src/main.c ****     }else{
 679              		.loc 1 644 7 is_stmt 1 view .LVU208
 644:Core/Src/main.c ****     }else{
 680              		.loc 1 644 27 is_stmt 0 view .LVU209
 681 00d4 094A     		ldr	r2, .L45+8
 682 00d6 9160     		str	r1, [r2, #8]
 683 00d8 BBE7     		b	.L36
 684              	.L37:
 646:Core/Src/main.c ****     }
 685              		.loc 1 646 7 is_stmt 1 view .LVU210
 646:Core/Src/main.c ****     }
 686              		.loc 1 646 27 is_stmt 0 view .LVU211
 687 00da 0849     		ldr	r1, .L45+8
 688 00dc 8A60     		str	r2, [r1, #8]
 689 00de B8E7     		b	.L36
 690              	.L39:
 654:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMin;
 691              		.loc 1 654 11 is_stmt 1 view .LVU212
 654:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMin;
 692              		.loc 1 654 38 is_stmt 0 view .LVU213
 693 00e0 0D99     		ldr	r1, [sp, #52]
 654:Core/Src/main.c ****       Qdata.WristPotValue = MiniBot.Wrist.PotMin;
 694              		.loc 1 654 13 view .LVU214
 695 00e2 8A42     		cmp	r2, r1
 696 00e4 02D2     		bcs	.L41
 655:Core/Src/main.c ****     }else{
 697              		.loc 1 655 7 is_stmt 1 view .LVU215
 655:Core/Src/main.c ****     }else{
 698              		.loc 1 655 27 is_stmt 0 view .LVU216
 699 00e6 054A     		ldr	r2, .L45+8
 700 00e8 D160     		str	r1, [r2, #12]
 701 00ea C2E7     		b	.L40
 702              	.L41:
 657:Core/Src/main.c ****     }
 703              		.loc 1 657 7 is_stmt 1 view .LVU217
 657:Core/Src/main.c ****     }
 704              		.loc 1 657 27 is_stmt 0 view .LVU218
 705 00ec 0349     		ldr	r1, .L45+8
 706 00ee CA60     		str	r2, [r1, #12]
 707 00f0 BFE7     		b	.L40
 708              	.L46:
 709 00f2 00BF     		.align	2
 710              	.L45:
 711 00f4 00000000 		.word	.LANCHOR0
 712 00f8 00000000 		.word	.LANCHOR1
 713 00fc 00000000 		.word	.LANCHOR2
 714 0100 00000240 		.word	1073872896
 715              		.cfi_endproc
 716              	.LFE254:
ARM GAS  /tmp/ccDefyvn.s 			page 28


 718              		.section	.text.MegaBotInit,"ax",%progbits
 719              		.align	1
 720              		.global	MegaBotInit
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv4-sp-d16
 726              	MegaBotInit:
 727              	.LVL25:
 728              	.LFB244:
 197:Core/Src/main.c **** 
 729              		.loc 1 197 44 is_stmt 1 view -0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 199:Core/Src/main.c **** 
 734              		.loc 1 199 1 view .LVU220
 735 0000 7047     		bx	lr
 736              		.cfi_endproc
 737              	.LFE244:
 739              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 740              		.align	1
 741              		.global	HAL_TIM_PeriodElapsedCallback
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 745              		.fpu fpv4-sp-d16
 747              	HAL_TIM_PeriodElapsedCallback:
 748              	.LVL26:
 749              	.LFB256:
 685:Core/Src/main.c ****   }
 686:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 687:Core/Src/main.c **** }
 688:Core/Src/main.c **** 
 689:Core/Src/main.c **** /**
 690:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 691:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 692:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 693:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 694:Core/Src/main.c ****   * @param  htim : TIM handle
 695:Core/Src/main.c ****   * @retval None
 696:Core/Src/main.c ****   */
 697:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 698:Core/Src/main.c **** {
 750              		.loc 1 698 1 view -0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		.loc 1 698 1 is_stmt 0 view .LVU222
 755 0000 08B5     		push	{r3, lr}
 756              		.cfi_def_cfa_offset 8
 757              		.cfi_offset 3, -8
 758              		.cfi_offset 14, -4
 699:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 700:Core/Src/main.c **** 
 701:Core/Src/main.c ****   /* USER CODE END Callback 0 */
ARM GAS  /tmp/ccDefyvn.s 			page 29


 702:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 759              		.loc 1 702 3 is_stmt 1 view .LVU223
 760              		.loc 1 702 11 is_stmt 0 view .LVU224
 761 0002 0268     		ldr	r2, [r0]
 762              		.loc 1 702 6 view .LVU225
 763 0004 034B     		ldr	r3, .L52
 764 0006 9A42     		cmp	r2, r3
 765 0008 00D0     		beq	.L51
 766              	.LVL27:
 767              	.L48:
 703:Core/Src/main.c ****     HAL_IncTick();
 704:Core/Src/main.c ****   }
 705:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 706:Core/Src/main.c **** 
 707:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 708:Core/Src/main.c **** }
 768              		.loc 1 708 1 view .LVU226
 769 000a 08BD     		pop	{r3, pc}
 770              	.LVL28:
 771              	.L51:
 703:Core/Src/main.c ****     HAL_IncTick();
 772              		.loc 1 703 5 is_stmt 1 view .LVU227
 773 000c FFF7FEFF 		bl	HAL_IncTick
 774              	.LVL29:
 775              		.loc 1 708 1 is_stmt 0 view .LVU228
 776 0010 FBE7     		b	.L48
 777              	.L53:
 778 0012 00BF     		.align	2
 779              	.L52:
 780 0014 00100040 		.word	1073745920
 781              		.cfi_endproc
 782              	.LFE256:
 784              		.section	.text.Error_Handler,"ax",%progbits
 785              		.align	1
 786              		.global	Error_Handler
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv4-sp-d16
 792              	Error_Handler:
 793              	.LFB257:
 709:Core/Src/main.c **** 
 710:Core/Src/main.c **** /**
 711:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 712:Core/Src/main.c ****   * @retval None
 713:Core/Src/main.c ****   */
 714:Core/Src/main.c **** void Error_Handler(void)
 715:Core/Src/main.c **** {
 794              		.loc 1 715 1 is_stmt 1 view -0
 795              		.cfi_startproc
 796              		@ Volatile: function does not return.
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799              		@ link register save eliminated.
 716:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 717:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 718:Core/Src/main.c ****   __disable_irq();
ARM GAS  /tmp/ccDefyvn.s 			page 30


 800              		.loc 1 718 3 view .LVU230
 801              	.LBB9:
 802              	.LBI9:
 803              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
ARM GAS  /tmp/ccDefyvn.s 			page 31


  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
ARM GAS  /tmp/ccDefyvn.s 			page 32


 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccDefyvn.s 			page 33


 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccDefyvn.s 			page 34


 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccDefyvn.s 			page 35


 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDefyvn.s 			page 36


 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDefyvn.s 			page 37


 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  /tmp/ccDefyvn.s 			page 38


 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccDefyvn.s 			page 39


 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
ARM GAS  /tmp/ccDefyvn.s 			page 40


 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDefyvn.s 			page 41


 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccDefyvn.s 			page 42


 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
ARM GAS  /tmp/ccDefyvn.s 			page 43


 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/ccDefyvn.s 			page 44


 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDefyvn.s 			page 45


 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccDefyvn.s 			page 46


 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 804              		.loc 2 960 27 view .LVU231
 805              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 806              		.loc 2 962 3 view .LVU232
ARM GAS  /tmp/ccDefyvn.s 			page 47


 807              		.syntax unified
 808              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 809 0000 72B6     		cpsid i
 810              	@ 0 "" 2
 811              		.thumb
 812              		.syntax unified
 813              	.L55:
 814              	.LBE10:
 815              	.LBE9:
 719:Core/Src/main.c ****   while (1)
 816              		.loc 1 719 3 discriminator 1 view .LVU233
 720:Core/Src/main.c ****   {
 721:Core/Src/main.c ****   }
 817              		.loc 1 721 3 discriminator 1 view .LVU234
 719:Core/Src/main.c ****   while (1)
 818              		.loc 1 719 9 discriminator 1 view .LVU235
 819 0002 FEE7     		b	.L55
 820              		.cfi_endproc
 821              	.LFE257:
 823              		.section	.text.MX_ADC1_Init,"ax",%progbits
 824              		.align	1
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu fpv4-sp-d16
 830              	MX_ADC1_Init:
 831              	.LFB247:
 353:Core/Src/main.c **** 
 832              		.loc 1 353 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 16
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836 0000 00B5     		push	{lr}
 837              		.cfi_def_cfa_offset 4
 838              		.cfi_offset 14, -4
 839 0002 85B0     		sub	sp, sp, #20
 840              		.cfi_def_cfa_offset 24
 359:Core/Src/main.c **** 
 841              		.loc 1 359 3 view .LVU237
 359:Core/Src/main.c **** 
 842              		.loc 1 359 26 is_stmt 0 view .LVU238
 843 0004 0023     		movs	r3, #0
 844 0006 0093     		str	r3, [sp]
 845 0008 0193     		str	r3, [sp, #4]
 846 000a 0293     		str	r3, [sp, #8]
 847 000c 0393     		str	r3, [sp, #12]
 367:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 848              		.loc 1 367 3 is_stmt 1 view .LVU239
 367:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 849              		.loc 1 367 18 is_stmt 0 view .LVU240
 850 000e 2548     		ldr	r0, .L68
 851 0010 254A     		ldr	r2, .L68+4
 852 0012 0260     		str	r2, [r0]
 368:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 853              		.loc 1 368 3 is_stmt 1 view .LVU241
 368:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 854              		.loc 1 368 29 is_stmt 0 view .LVU242
ARM GAS  /tmp/ccDefyvn.s 			page 48


 855 0014 4FF48032 		mov	r2, #65536
 856 0018 4260     		str	r2, [r0, #4]
 369:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 857              		.loc 1 369 3 is_stmt 1 view .LVU243
 369:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 858              		.loc 1 369 25 is_stmt 0 view .LVU244
 859 001a 8360     		str	r3, [r0, #8]
 370:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 860              		.loc 1 370 3 is_stmt 1 view .LVU245
 370:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 861              		.loc 1 370 27 is_stmt 0 view .LVU246
 862 001c 0122     		movs	r2, #1
 863 001e 0261     		str	r2, [r0, #16]
 371:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 864              		.loc 1 371 3 is_stmt 1 view .LVU247
 371:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 865              		.loc 1 371 33 is_stmt 0 view .LVU248
 866 0020 0276     		strb	r2, [r0, #24]
 372:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 867              		.loc 1 372 3 is_stmt 1 view .LVU249
 372:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 868              		.loc 1 372 36 is_stmt 0 view .LVU250
 869 0022 80F82030 		strb	r3, [r0, #32]
 373:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 870              		.loc 1 373 3 is_stmt 1 view .LVU251
 373:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 871              		.loc 1 373 35 is_stmt 0 view .LVU252
 872 0026 C362     		str	r3, [r0, #44]
 374:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 873              		.loc 1 374 3 is_stmt 1 view .LVU253
 374:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 874              		.loc 1 374 31 is_stmt 0 view .LVU254
 875 0028 2049     		ldr	r1, .L68+8
 876 002a 8162     		str	r1, [r0, #40]
 375:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 877              		.loc 1 375 3 is_stmt 1 view .LVU255
 375:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 878              		.loc 1 375 24 is_stmt 0 view .LVU256
 879 002c C360     		str	r3, [r0, #12]
 376:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 880              		.loc 1 376 3 is_stmt 1 view .LVU257
 376:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 881              		.loc 1 376 30 is_stmt 0 view .LVU258
 882 002e 0421     		movs	r1, #4
 883 0030 C161     		str	r1, [r0, #28]
 377:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 884              		.loc 1 377 3 is_stmt 1 view .LVU259
 377:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 885              		.loc 1 377 36 is_stmt 0 view .LVU260
 886 0032 80F83020 		strb	r2, [r0, #48]
 378:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 887              		.loc 1 378 3 is_stmt 1 view .LVU261
 378:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 888              		.loc 1 378 27 is_stmt 0 view .LVU262
 889 0036 4361     		str	r3, [r0, #20]
 379:Core/Src/main.c ****   {
 890              		.loc 1 379 3 is_stmt 1 view .LVU263
ARM GAS  /tmp/ccDefyvn.s 			page 49


 379:Core/Src/main.c ****   {
 891              		.loc 1 379 7 is_stmt 0 view .LVU264
 892 0038 FFF7FEFF 		bl	HAL_ADC_Init
 893              	.LVL30:
 379:Core/Src/main.c ****   {
 894              		.loc 1 379 6 view .LVU265
 895 003c 38BB     		cbnz	r0, .L63
 386:Core/Src/main.c ****   sConfig.Rank = 1;
 896              		.loc 1 386 3 is_stmt 1 view .LVU266
 386:Core/Src/main.c ****   sConfig.Rank = 1;
 897              		.loc 1 386 19 is_stmt 0 view .LVU267
 898 003e 0023     		movs	r3, #0
 899 0040 0093     		str	r3, [sp]
 387:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 900              		.loc 1 387 3 is_stmt 1 view .LVU268
 387:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 901              		.loc 1 387 16 is_stmt 0 view .LVU269
 902 0042 0122     		movs	r2, #1
 903 0044 0192     		str	r2, [sp, #4]
 388:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 904              		.loc 1 388 3 is_stmt 1 view .LVU270
 388:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 905              		.loc 1 388 24 is_stmt 0 view .LVU271
 906 0046 0293     		str	r3, [sp, #8]
 389:Core/Src/main.c ****   {
 907              		.loc 1 389 3 is_stmt 1 view .LVU272
 389:Core/Src/main.c ****   {
 908              		.loc 1 389 7 is_stmt 0 view .LVU273
 909 0048 6946     		mov	r1, sp
 910 004a 1648     		ldr	r0, .L68
 911 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 912              	.LVL31:
 389:Core/Src/main.c ****   {
 913              		.loc 1 389 6 view .LVU274
 914 0050 F8B9     		cbnz	r0, .L64
 396:Core/Src/main.c ****   sConfig.Rank = 2;
 915              		.loc 1 396 3 is_stmt 1 view .LVU275
 396:Core/Src/main.c ****   sConfig.Rank = 2;
 916              		.loc 1 396 19 is_stmt 0 view .LVU276
 917 0052 0123     		movs	r3, #1
 918 0054 0093     		str	r3, [sp]
 397:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 919              		.loc 1 397 3 is_stmt 1 view .LVU277
 397:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 920              		.loc 1 397 16 is_stmt 0 view .LVU278
 921 0056 0223     		movs	r3, #2
 922 0058 0193     		str	r3, [sp, #4]
 398:Core/Src/main.c ****   {
 923              		.loc 1 398 3 is_stmt 1 view .LVU279
 398:Core/Src/main.c ****   {
 924              		.loc 1 398 7 is_stmt 0 view .LVU280
 925 005a 6946     		mov	r1, sp
 926 005c 1148     		ldr	r0, .L68
 927 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 928              	.LVL32:
 398:Core/Src/main.c ****   {
 929              		.loc 1 398 6 view .LVU281
ARM GAS  /tmp/ccDefyvn.s 			page 50


 930 0062 C0B9     		cbnz	r0, .L65
 405:Core/Src/main.c ****   sConfig.Rank = 3;
 931              		.loc 1 405 3 is_stmt 1 view .LVU282
 405:Core/Src/main.c ****   sConfig.Rank = 3;
 932              		.loc 1 405 19 is_stmt 0 view .LVU283
 933 0064 0423     		movs	r3, #4
 934 0066 0093     		str	r3, [sp]
 406:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 935              		.loc 1 406 3 is_stmt 1 view .LVU284
 406:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 936              		.loc 1 406 16 is_stmt 0 view .LVU285
 937 0068 0323     		movs	r3, #3
 938 006a 0193     		str	r3, [sp, #4]
 407:Core/Src/main.c ****   {
 939              		.loc 1 407 3 is_stmt 1 view .LVU286
 407:Core/Src/main.c ****   {
 940              		.loc 1 407 7 is_stmt 0 view .LVU287
 941 006c 6946     		mov	r1, sp
 942 006e 0D48     		ldr	r0, .L68
 943 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 944              	.LVL33:
 407:Core/Src/main.c ****   {
 945              		.loc 1 407 6 view .LVU288
 946 0074 88B9     		cbnz	r0, .L66
 414:Core/Src/main.c ****   sConfig.Rank = 4;
 947              		.loc 1 414 3 is_stmt 1 view .LVU289
 414:Core/Src/main.c ****   sConfig.Rank = 4;
 948              		.loc 1 414 19 is_stmt 0 view .LVU290
 949 0076 0823     		movs	r3, #8
 950 0078 0093     		str	r3, [sp]
 415:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 951              		.loc 1 415 3 is_stmt 1 view .LVU291
 415:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 952              		.loc 1 415 16 is_stmt 0 view .LVU292
 953 007a 0423     		movs	r3, #4
 954 007c 0193     		str	r3, [sp, #4]
 416:Core/Src/main.c ****   {
 955              		.loc 1 416 3 is_stmt 1 view .LVU293
 416:Core/Src/main.c ****   {
 956              		.loc 1 416 7 is_stmt 0 view .LVU294
 957 007e 6946     		mov	r1, sp
 958 0080 0848     		ldr	r0, .L68
 959 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 960              	.LVL34:
 416:Core/Src/main.c ****   {
 961              		.loc 1 416 6 view .LVU295
 962 0086 50B9     		cbnz	r0, .L67
 424:Core/Src/main.c **** 
 963              		.loc 1 424 1 view .LVU296
 964 0088 05B0     		add	sp, sp, #20
 965              		.cfi_remember_state
 966              		.cfi_def_cfa_offset 4
 967              		@ sp needed
 968 008a 5DF804FB 		ldr	pc, [sp], #4
 969              	.L63:
 970              		.cfi_restore_state
 381:Core/Src/main.c ****   }
ARM GAS  /tmp/ccDefyvn.s 			page 51


 971              		.loc 1 381 5 is_stmt 1 view .LVU297
 972 008e FFF7FEFF 		bl	Error_Handler
 973              	.LVL35:
 974              	.L64:
 391:Core/Src/main.c ****   }
 975              		.loc 1 391 5 view .LVU298
 976 0092 FFF7FEFF 		bl	Error_Handler
 977              	.LVL36:
 978              	.L65:
 400:Core/Src/main.c ****   }
 979              		.loc 1 400 5 view .LVU299
 980 0096 FFF7FEFF 		bl	Error_Handler
 981              	.LVL37:
 982              	.L66:
 409:Core/Src/main.c ****   }
 983              		.loc 1 409 5 view .LVU300
 984 009a FFF7FEFF 		bl	Error_Handler
 985              	.LVL38:
 986              	.L67:
 418:Core/Src/main.c ****   }
 987              		.loc 1 418 5 view .LVU301
 988 009e FFF7FEFF 		bl	Error_Handler
 989              	.LVL39:
 990              	.L69:
 991 00a2 00BF     		.align	2
 992              	.L68:
 993 00a4 00000000 		.word	.LANCHOR1
 994 00a8 00200140 		.word	1073815552
 995 00ac 0100000F 		.word	251658241
 996              		.cfi_endproc
 997              	.LFE247:
 999              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1000              		.align	1
 1001              		.syntax unified
 1002              		.thumb
 1003              		.thumb_func
 1004              		.fpu fpv4-sp-d16
 1006              	MX_I2C1_Init:
 1007              	.LFB248:
 432:Core/Src/main.c **** 
 1008              		.loc 1 432 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012 0000 08B5     		push	{r3, lr}
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 3, -8
 1015              		.cfi_offset 14, -4
 441:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1016              		.loc 1 441 3 view .LVU303
 441:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1017              		.loc 1 441 18 is_stmt 0 view .LVU304
 1018 0002 0A48     		ldr	r0, .L74
 1019 0004 0A4B     		ldr	r3, .L74+4
 1020 0006 0360     		str	r3, [r0]
 442:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1021              		.loc 1 442 3 is_stmt 1 view .LVU305
ARM GAS  /tmp/ccDefyvn.s 			page 52


 442:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1022              		.loc 1 442 25 is_stmt 0 view .LVU306
 1023 0008 0A4B     		ldr	r3, .L74+8
 1024 000a 4360     		str	r3, [r0, #4]
 443:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1025              		.loc 1 443 3 is_stmt 1 view .LVU307
 443:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1026              		.loc 1 443 24 is_stmt 0 view .LVU308
 1027 000c 0023     		movs	r3, #0
 1028 000e 8360     		str	r3, [r0, #8]
 444:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1029              		.loc 1 444 3 is_stmt 1 view .LVU309
 444:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1030              		.loc 1 444 26 is_stmt 0 view .LVU310
 1031 0010 C360     		str	r3, [r0, #12]
 445:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1032              		.loc 1 445 3 is_stmt 1 view .LVU311
 445:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1033              		.loc 1 445 29 is_stmt 0 view .LVU312
 1034 0012 4FF48042 		mov	r2, #16384
 1035 0016 0261     		str	r2, [r0, #16]
 446:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1036              		.loc 1 446 3 is_stmt 1 view .LVU313
 446:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1037              		.loc 1 446 30 is_stmt 0 view .LVU314
 1038 0018 4361     		str	r3, [r0, #20]
 447:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1039              		.loc 1 447 3 is_stmt 1 view .LVU315
 447:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1040              		.loc 1 447 26 is_stmt 0 view .LVU316
 1041 001a 8361     		str	r3, [r0, #24]
 448:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1042              		.loc 1 448 3 is_stmt 1 view .LVU317
 448:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1043              		.loc 1 448 30 is_stmt 0 view .LVU318
 1044 001c C361     		str	r3, [r0, #28]
 449:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1045              		.loc 1 449 3 is_stmt 1 view .LVU319
 449:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1046              		.loc 1 449 28 is_stmt 0 view .LVU320
 1047 001e 0362     		str	r3, [r0, #32]
 450:Core/Src/main.c ****   {
 1048              		.loc 1 450 3 is_stmt 1 view .LVU321
 450:Core/Src/main.c ****   {
 1049              		.loc 1 450 7 is_stmt 0 view .LVU322
 1050 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1051              	.LVL40:
 450:Core/Src/main.c ****   {
 1052              		.loc 1 450 6 view .LVU323
 1053 0024 00B9     		cbnz	r0, .L73
 458:Core/Src/main.c **** 
 1054              		.loc 1 458 1 view .LVU324
 1055 0026 08BD     		pop	{r3, pc}
 1056              	.L73:
 452:Core/Src/main.c ****   }
 1057              		.loc 1 452 5 is_stmt 1 view .LVU325
 1058 0028 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccDefyvn.s 			page 53


 1059              	.LVL41:
 1060              	.L75:
 1061              		.align	2
 1062              	.L74:
 1063 002c 00000000 		.word	.LANCHOR3
 1064 0030 00540040 		.word	1073763328
 1065 0034 A0860100 		.word	100000
 1066              		.cfi_endproc
 1067              	.LFE248:
 1069              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1070              		.align	1
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1074              		.fpu fpv4-sp-d16
 1076              	MX_USART2_UART_Init:
 1077              	.LFB249:
 466:Core/Src/main.c **** 
 1078              		.loc 1 466 1 view -0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082 0000 08B5     		push	{r3, lr}
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 3, -8
 1085              		.cfi_offset 14, -4
 475:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1086              		.loc 1 475 3 view .LVU327
 475:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1087              		.loc 1 475 19 is_stmt 0 view .LVU328
 1088 0002 0A48     		ldr	r0, .L80
 1089 0004 0A4B     		ldr	r3, .L80+4
 1090 0006 0360     		str	r3, [r0]
 476:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1091              		.loc 1 476 3 is_stmt 1 view .LVU329
 476:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1092              		.loc 1 476 24 is_stmt 0 view .LVU330
 1093 0008 4FF4E133 		mov	r3, #115200
 1094 000c 4360     		str	r3, [r0, #4]
 477:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1095              		.loc 1 477 3 is_stmt 1 view .LVU331
 477:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1096              		.loc 1 477 26 is_stmt 0 view .LVU332
 1097 000e 0023     		movs	r3, #0
 1098 0010 8360     		str	r3, [r0, #8]
 478:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1099              		.loc 1 478 3 is_stmt 1 view .LVU333
 478:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1100              		.loc 1 478 24 is_stmt 0 view .LVU334
 1101 0012 C360     		str	r3, [r0, #12]
 479:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1102              		.loc 1 479 3 is_stmt 1 view .LVU335
 479:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1103              		.loc 1 479 22 is_stmt 0 view .LVU336
 1104 0014 0361     		str	r3, [r0, #16]
 480:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1105              		.loc 1 480 3 is_stmt 1 view .LVU337
ARM GAS  /tmp/ccDefyvn.s 			page 54


 480:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1106              		.loc 1 480 20 is_stmt 0 view .LVU338
 1107 0016 0C22     		movs	r2, #12
 1108 0018 4261     		str	r2, [r0, #20]
 481:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1109              		.loc 1 481 3 is_stmt 1 view .LVU339
 481:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1110              		.loc 1 481 25 is_stmt 0 view .LVU340
 1111 001a 8361     		str	r3, [r0, #24]
 482:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1112              		.loc 1 482 3 is_stmt 1 view .LVU341
 482:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1113              		.loc 1 482 28 is_stmt 0 view .LVU342
 1114 001c C361     		str	r3, [r0, #28]
 483:Core/Src/main.c ****   {
 1115              		.loc 1 483 3 is_stmt 1 view .LVU343
 483:Core/Src/main.c ****   {
 1116              		.loc 1 483 7 is_stmt 0 view .LVU344
 1117 001e FFF7FEFF 		bl	HAL_UART_Init
 1118              	.LVL42:
 483:Core/Src/main.c ****   {
 1119              		.loc 1 483 6 view .LVU345
 1120 0022 00B9     		cbnz	r0, .L79
 491:Core/Src/main.c **** 
 1121              		.loc 1 491 1 view .LVU346
 1122 0024 08BD     		pop	{r3, pc}
 1123              	.L79:
 485:Core/Src/main.c ****   }
 1124              		.loc 1 485 5 is_stmt 1 view .LVU347
 1125 0026 FFF7FEFF 		bl	Error_Handler
 1126              	.LVL43:
 1127              	.L81:
 1128 002a 00BF     		.align	2
 1129              	.L80:
 1130 002c 00000000 		.word	.LANCHOR4
 1131 0030 00440040 		.word	1073759232
 1132              		.cfi_endproc
 1133              	.LFE249:
 1135              		.section	.text.SystemClock_Config,"ax",%progbits
 1136              		.align	1
 1137              		.global	SystemClock_Config
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu fpv4-sp-d16
 1143              	SystemClock_Config:
 1144              	.LFB246:
 305:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1145              		.loc 1 305 1 view -0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 80
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149 0000 00B5     		push	{lr}
 1150              		.cfi_def_cfa_offset 4
 1151              		.cfi_offset 14, -4
 1152 0002 95B0     		sub	sp, sp, #84
 1153              		.cfi_def_cfa_offset 88
ARM GAS  /tmp/ccDefyvn.s 			page 55


 306:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1154              		.loc 1 306 3 view .LVU349
 306:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1155              		.loc 1 306 22 is_stmt 0 view .LVU350
 1156 0004 3422     		movs	r2, #52
 1157 0006 0021     		movs	r1, #0
 1158 0008 07A8     		add	r0, sp, #28
 1159 000a FFF7FEFF 		bl	memset
 1160              	.LVL44:
 307:Core/Src/main.c **** 
 1161              		.loc 1 307 3 is_stmt 1 view .LVU351
 307:Core/Src/main.c **** 
 1162              		.loc 1 307 22 is_stmt 0 view .LVU352
 1163 000e 0023     		movs	r3, #0
 1164 0010 0293     		str	r3, [sp, #8]
 1165 0012 0393     		str	r3, [sp, #12]
 1166 0014 0493     		str	r3, [sp, #16]
 1167 0016 0593     		str	r3, [sp, #20]
 1168 0018 0693     		str	r3, [sp, #24]
 311:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1169              		.loc 1 311 3 is_stmt 1 view .LVU353
 1170              	.LBB11:
 311:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1171              		.loc 1 311 3 view .LVU354
 1172 001a 0093     		str	r3, [sp]
 311:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1173              		.loc 1 311 3 view .LVU355
 1174 001c 1F4A     		ldr	r2, .L88
 1175 001e 116C     		ldr	r1, [r2, #64]
 1176 0020 41F08051 		orr	r1, r1, #268435456
 1177 0024 1164     		str	r1, [r2, #64]
 311:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1178              		.loc 1 311 3 view .LVU356
 1179 0026 126C     		ldr	r2, [r2, #64]
 1180 0028 02F08052 		and	r2, r2, #268435456
 1181 002c 0092     		str	r2, [sp]
 311:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1182              		.loc 1 311 3 view .LVU357
 1183 002e 009A     		ldr	r2, [sp]
 1184              	.LBE11:
 311:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1185              		.loc 1 311 3 view .LVU358
 312:Core/Src/main.c **** 
 1186              		.loc 1 312 3 view .LVU359
 1187              	.LBB12:
 312:Core/Src/main.c **** 
 1188              		.loc 1 312 3 view .LVU360
 1189 0030 0193     		str	r3, [sp, #4]
 312:Core/Src/main.c **** 
 1190              		.loc 1 312 3 view .LVU361
 1191 0032 1B49     		ldr	r1, .L88+4
 1192 0034 0A68     		ldr	r2, [r1]
 1193 0036 22F44042 		bic	r2, r2, #49152
 1194 003a 42F48042 		orr	r2, r2, #16384
 1195 003e 0A60     		str	r2, [r1]
 312:Core/Src/main.c **** 
 1196              		.loc 1 312 3 view .LVU362
ARM GAS  /tmp/ccDefyvn.s 			page 56


 1197 0040 0A68     		ldr	r2, [r1]
 1198 0042 02F44042 		and	r2, r2, #49152
 1199 0046 0192     		str	r2, [sp, #4]
 312:Core/Src/main.c **** 
 1200              		.loc 1 312 3 view .LVU363
 1201 0048 019A     		ldr	r2, [sp, #4]
 1202              	.LBE12:
 312:Core/Src/main.c **** 
 1203              		.loc 1 312 3 view .LVU364
 317:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1204              		.loc 1 317 3 view .LVU365
 317:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1205              		.loc 1 317 36 is_stmt 0 view .LVU366
 1206 004a 0222     		movs	r2, #2
 1207 004c 0792     		str	r2, [sp, #28]
 318:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1208              		.loc 1 318 3 is_stmt 1 view .LVU367
 318:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1209              		.loc 1 318 30 is_stmt 0 view .LVU368
 1210 004e 0121     		movs	r1, #1
 1211 0050 0A91     		str	r1, [sp, #40]
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1212              		.loc 1 319 3 is_stmt 1 view .LVU369
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1213              		.loc 1 319 41 is_stmt 0 view .LVU370
 1214 0052 1021     		movs	r1, #16
 1215 0054 0B91     		str	r1, [sp, #44]
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1216              		.loc 1 320 3 is_stmt 1 view .LVU371
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1217              		.loc 1 320 34 is_stmt 0 view .LVU372
 1218 0056 0D92     		str	r2, [sp, #52]
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1219              		.loc 1 321 3 is_stmt 1 view .LVU373
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1220              		.loc 1 321 35 is_stmt 0 view .LVU374
 1221 0058 0E93     		str	r3, [sp, #56]
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1222              		.loc 1 322 3 is_stmt 1 view .LVU375
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1223              		.loc 1 322 30 is_stmt 0 view .LVU376
 1224 005a 0F91     		str	r1, [sp, #60]
 323:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1225              		.loc 1 323 3 is_stmt 1 view .LVU377
 323:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1226              		.loc 1 323 30 is_stmt 0 view .LVU378
 1227 005c 4FF4A873 		mov	r3, #336
 1228 0060 1093     		str	r3, [sp, #64]
 324:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1229              		.loc 1 324 3 is_stmt 1 view .LVU379
 324:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1230              		.loc 1 324 30 is_stmt 0 view .LVU380
 1231 0062 0423     		movs	r3, #4
 1232 0064 1193     		str	r3, [sp, #68]
 325:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1233              		.loc 1 325 3 is_stmt 1 view .LVU381
 325:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
ARM GAS  /tmp/ccDefyvn.s 			page 57


 1234              		.loc 1 325 30 is_stmt 0 view .LVU382
 1235 0066 1292     		str	r2, [sp, #72]
 326:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1236              		.loc 1 326 3 is_stmt 1 view .LVU383
 326:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1237              		.loc 1 326 30 is_stmt 0 view .LVU384
 1238 0068 1392     		str	r2, [sp, #76]
 327:Core/Src/main.c ****   {
 1239              		.loc 1 327 3 is_stmt 1 view .LVU385
 327:Core/Src/main.c ****   {
 1240              		.loc 1 327 7 is_stmt 0 view .LVU386
 1241 006a 07A8     		add	r0, sp, #28
 1242 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1243              	.LVL45:
 327:Core/Src/main.c ****   {
 1244              		.loc 1 327 6 view .LVU387
 1245 0070 80B9     		cbnz	r0, .L86
 334:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1246              		.loc 1 334 3 is_stmt 1 view .LVU388
 334:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1247              		.loc 1 334 31 is_stmt 0 view .LVU389
 1248 0072 0F23     		movs	r3, #15
 1249 0074 0293     		str	r3, [sp, #8]
 336:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1250              		.loc 1 336 3 is_stmt 1 view .LVU390
 336:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1251              		.loc 1 336 34 is_stmt 0 view .LVU391
 1252 0076 0221     		movs	r1, #2
 1253 0078 0391     		str	r1, [sp, #12]
 337:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1254              		.loc 1 337 3 is_stmt 1 view .LVU392
 337:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1255              		.loc 1 337 35 is_stmt 0 view .LVU393
 1256 007a 0023     		movs	r3, #0
 1257 007c 0493     		str	r3, [sp, #16]
 338:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1258              		.loc 1 338 3 is_stmt 1 view .LVU394
 338:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1259              		.loc 1 338 36 is_stmt 0 view .LVU395
 1260 007e 4FF48052 		mov	r2, #4096
 1261 0082 0592     		str	r2, [sp, #20]
 339:Core/Src/main.c **** 
 1262              		.loc 1 339 3 is_stmt 1 view .LVU396
 339:Core/Src/main.c **** 
 1263              		.loc 1 339 36 is_stmt 0 view .LVU397
 1264 0084 0693     		str	r3, [sp, #24]
 341:Core/Src/main.c ****   {
 1265              		.loc 1 341 3 is_stmt 1 view .LVU398
 341:Core/Src/main.c ****   {
 1266              		.loc 1 341 7 is_stmt 0 view .LVU399
 1267 0086 02A8     		add	r0, sp, #8
 1268 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1269              	.LVL46:
 341:Core/Src/main.c ****   {
 1270              		.loc 1 341 6 view .LVU400
 1271 008c 20B9     		cbnz	r0, .L87
 345:Core/Src/main.c **** 
ARM GAS  /tmp/ccDefyvn.s 			page 58


 1272              		.loc 1 345 1 view .LVU401
 1273 008e 15B0     		add	sp, sp, #84
 1274              		.cfi_remember_state
 1275              		.cfi_def_cfa_offset 4
 1276              		@ sp needed
 1277 0090 5DF804FB 		ldr	pc, [sp], #4
 1278              	.L86:
 1279              		.cfi_restore_state
 329:Core/Src/main.c ****   }
 1280              		.loc 1 329 5 is_stmt 1 view .LVU402
 1281 0094 FFF7FEFF 		bl	Error_Handler
 1282              	.LVL47:
 1283              	.L87:
 343:Core/Src/main.c ****   }
 1284              		.loc 1 343 5 view .LVU403
 1285 0098 FFF7FEFF 		bl	Error_Handler
 1286              	.LVL48:
 1287              	.L89:
 1288              		.align	2
 1289              	.L88:
 1290 009c 00380240 		.word	1073887232
 1291 00a0 00700040 		.word	1073770496
 1292              		.cfi_endproc
 1293              	.LFE246:
 1295              		.section	.text.main,"ax",%progbits
 1296              		.align	1
 1297              		.global	main
 1298              		.syntax unified
 1299              		.thumb
 1300              		.thumb_func
 1301              		.fpu fpv4-sp-d16
 1303              	main:
 1304              	.LFB245:
 208:Core/Src/main.c **** 
 1305              		.loc 1 208 1 view -0
 1306              		.cfi_startproc
 1307              		@ Volatile: function does not return.
 1308              		@ args = 0, pretend = 0, frame = 0
 1309              		@ frame_needed = 0, uses_anonymous_args = 0
 1310 0000 08B5     		push	{r3, lr}
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 3, -8
 1313              		.cfi_offset 14, -4
 217:Core/Src/main.c **** 
 1314              		.loc 1 217 3 view .LVU405
 1315 0002 FFF7FEFF 		bl	HAL_Init
 1316              	.LVL49:
 224:Core/Src/main.c **** 
 1317              		.loc 1 224 3 view .LVU406
 1318 0006 FFF7FEFF 		bl	SystemClock_Config
 1319              	.LVL50:
 231:Core/Src/main.c ****   MX_DMA_Init();
 1320              		.loc 1 231 3 view .LVU407
 1321 000a FFF7FEFF 		bl	MX_GPIO_Init
 1322              	.LVL51:
 232:Core/Src/main.c ****   MX_ADC1_Init();
 1323              		.loc 1 232 3 view .LVU408
ARM GAS  /tmp/ccDefyvn.s 			page 59


 1324 000e FFF7FEFF 		bl	MX_DMA_Init
 1325              	.LVL52:
 233:Core/Src/main.c ****   MX_I2C1_Init();
 1326              		.loc 1 233 3 view .LVU409
 1327 0012 FFF7FEFF 		bl	MX_ADC1_Init
 1328              	.LVL53:
 234:Core/Src/main.c ****   MX_USART2_UART_Init();
 1329              		.loc 1 234 3 view .LVU410
 1330 0016 FFF7FEFF 		bl	MX_I2C1_Init
 1331              	.LVL54:
 235:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1332              		.loc 1 235 3 view .LVU411
 1333 001a FFF7FEFF 		bl	MX_USART2_UART_Init
 1334              	.LVL55:
 241:Core/Src/main.c **** 
 1335              		.loc 1 241 3 view .LVU412
 1336 001e FFF7FEFF 		bl	osKernelInitialize
 1337              	.LVL56:
 257:Core/Src/main.c **** 
 1338              		.loc 1 257 3 view .LVU413
 257:Core/Src/main.c **** 
 1339              		.loc 1 257 29 is_stmt 0 view .LVU414
 1340 0022 134A     		ldr	r2, .L93
 1341 0024 0421     		movs	r1, #4
 1342 0026 1020     		movs	r0, #16
 1343 0028 FFF7FEFF 		bl	osMessageQueueNew
 1344              	.LVL57:
 257:Core/Src/main.c **** 
 1345              		.loc 1 257 27 view .LVU415
 1346 002c 114B     		ldr	r3, .L93+4
 1347 002e 1860     		str	r0, [r3]
 265:Core/Src/main.c **** 
 1348              		.loc 1 265 3 is_stmt 1 view .LVU416
 265:Core/Src/main.c **** 
 1349              		.loc 1 265 23 is_stmt 0 view .LVU417
 1350 0030 114A     		ldr	r2, .L93+8
 1351 0032 0021     		movs	r1, #0
 1352 0034 1148     		ldr	r0, .L93+12
 1353 0036 FFF7FEFF 		bl	osThreadNew
 1354              	.LVL58:
 265:Core/Src/main.c **** 
 1355              		.loc 1 265 21 view .LVU418
 1356 003a 114B     		ldr	r3, .L93+16
 1357 003c 1860     		str	r0, [r3]
 268:Core/Src/main.c **** 
 1358              		.loc 1 268 3 is_stmt 1 view .LVU419
 268:Core/Src/main.c **** 
 1359              		.loc 1 268 24 is_stmt 0 view .LVU420
 1360 003e 114A     		ldr	r2, .L93+20
 1361 0040 0021     		movs	r1, #0
 1362 0042 1148     		ldr	r0, .L93+24
 1363 0044 FFF7FEFF 		bl	osThreadNew
 1364              	.LVL59:
 268:Core/Src/main.c **** 
 1365              		.loc 1 268 22 view .LVU421
 1366 0048 104B     		ldr	r3, .L93+28
 1367 004a 1860     		str	r0, [r3]
ARM GAS  /tmp/ccDefyvn.s 			page 60


 271:Core/Src/main.c **** 
 1368              		.loc 1 271 3 is_stmt 1 view .LVU422
 271:Core/Src/main.c **** 
 1369              		.loc 1 271 25 is_stmt 0 view .LVU423
 1370 004c 104A     		ldr	r2, .L93+32
 1371 004e 0021     		movs	r1, #0
 1372 0050 1048     		ldr	r0, .L93+36
 1373 0052 FFF7FEFF 		bl	osThreadNew
 1374              	.LVL60:
 271:Core/Src/main.c **** 
 1375              		.loc 1 271 23 view .LVU424
 1376 0056 104B     		ldr	r3, .L93+40
 1377 0058 1860     		str	r0, [r3]
 274:Core/Src/main.c **** 
 1378              		.loc 1 274 3 is_stmt 1 view .LVU425
 274:Core/Src/main.c **** 
 1379              		.loc 1 274 26 is_stmt 0 view .LVU426
 1380 005a 104A     		ldr	r2, .L93+44
 1381 005c 0021     		movs	r1, #0
 1382 005e 1048     		ldr	r0, .L93+48
 1383 0060 FFF7FEFF 		bl	osThreadNew
 1384              	.LVL61:
 274:Core/Src/main.c **** 
 1385              		.loc 1 274 24 view .LVU427
 1386 0064 0F4B     		ldr	r3, .L93+52
 1387 0066 1860     		str	r0, [r3]
 285:Core/Src/main.c **** 
 1388              		.loc 1 285 3 is_stmt 1 view .LVU428
 1389 0068 FFF7FEFF 		bl	osKernelStart
 1390              	.LVL62:
 1391              	.L91:
 291:Core/Src/main.c ****   {
 1392              		.loc 1 291 3 discriminator 1 view .LVU429
 296:Core/Src/main.c ****   /* USER CODE END 3 */
 1393              		.loc 1 296 3 discriminator 1 view .LVU430
 291:Core/Src/main.c ****   {
 1394              		.loc 1 291 9 discriminator 1 view .LVU431
 1395 006c FEE7     		b	.L91
 1396              	.L94:
 1397 006e 00BF     		.align	2
 1398              	.L93:
 1399 0070 00000000 		.word	.LANCHOR5
 1400 0074 00000000 		.word	.LANCHOR6
 1401 0078 00000000 		.word	.LANCHOR7
 1402 007c 00000000 		.word	StartDefaultTask
 1403 0080 00000000 		.word	.LANCHOR8
 1404 0084 00000000 		.word	.LANCHOR9
 1405 0088 00000000 		.word	BlinkLEDTaskEntry
 1406 008c 00000000 		.word	.LANCHOR10
 1407 0090 00000000 		.word	.LANCHOR11
 1408 0094 00000000 		.word	MiniBotInputsEntry
 1409 0098 00000000 		.word	.LANCHOR12
 1410 009c 00000000 		.word	.LANCHOR13
 1411 00a0 00000000 		.word	ApplicationFSMEntry
 1412 00a4 00000000 		.word	.LANCHOR14
 1413              		.cfi_endproc
 1414              	.LFE245:
ARM GAS  /tmp/ccDefyvn.s 			page 61


 1416              		.global	MiniBotInputQueue_attributes
 1417              		.section	.rodata.str1.4,"aMS",%progbits,1
 1418              		.align	2
 1419              	.LC0:
 1420 0000 4D696E69 		.ascii	"MiniBotInputQueue\000"
 1420      426F7449 
 1420      6E707574 
 1420      51756575 
 1420      6500
 1421              		.global	MiniBotInputQueueHandle
 1422              		.global	ApplicationFSM_attributes
 1423 0012 0000     		.align	2
 1424              	.LC1:
 1425 0014 4170706C 		.ascii	"ApplicationFSM\000"
 1425      69636174 
 1425      696F6E46 
 1425      534D00
 1426              		.global	ApplicationFSMHandle
 1427              		.global	MiniBotInputs_attributes
 1428 0023 00       		.align	2
 1429              	.LC2:
 1430 0024 4D696E69 		.ascii	"MiniBotInputs\000"
 1430      426F7449 
 1430      6E707574 
 1430      7300
 1431              		.global	MiniBotInputsHandle
 1432              		.global	BlinkLEDTask_attributes
 1433 0032 0000     		.align	2
 1434              	.LC3:
 1435 0034 426C696E 		.ascii	"BlinkLEDTask\000"
 1435      6B4C4544 
 1435      5461736B 
 1435      00
 1436              		.global	BlinkLEDTaskHandle
 1437              		.global	defaultTask_attributes
 1438 0041 000000   		.align	2
 1439              	.LC4:
 1440 0044 64656661 		.ascii	"defaultTask\000"
 1440      756C7454 
 1440      61736B00 
 1441              		.global	defaultTaskHandle
 1442              		.global	huart2
 1443              		.global	hi2c1
 1444              		.global	hdma_adc1
 1445              		.global	hadc1
 1446              		.global	value
 1447              		.global	Qdata
 1448              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 1449              		.align	2
 1450              		.set	.LANCHOR14,. + 0
 1453              	ApplicationFSMHandle:
 1454 0000 00000000 		.space	4
 1455              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 1456              		.align	2
 1457              		.set	.LANCHOR10,. + 0
 1460              	BlinkLEDTaskHandle:
 1461 0000 00000000 		.space	4
ARM GAS  /tmp/ccDefyvn.s 			page 62


 1462              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 1463              		.align	2
 1464              		.set	.LANCHOR6,. + 0
 1467              	MiniBotInputQueueHandle:
 1468 0000 00000000 		.space	4
 1469              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 1470              		.align	2
 1471              		.set	.LANCHOR12,. + 0
 1474              	MiniBotInputsHandle:
 1475 0000 00000000 		.space	4
 1476              		.section	.bss.Qdata,"aw",%nobits
 1477              		.align	2
 1478              		.set	.LANCHOR2,. + 0
 1481              	Qdata:
 1482 0000 00000000 		.space	20
 1482      00000000 
 1482      00000000 
 1482      00000000 
 1482      00000000 
 1483              		.section	.bss.defaultTaskHandle,"aw",%nobits
 1484              		.align	2
 1485              		.set	.LANCHOR8,. + 0
 1488              	defaultTaskHandle:
 1489 0000 00000000 		.space	4
 1490              		.section	.bss.hadc1,"aw",%nobits
 1491              		.align	2
 1492              		.set	.LANCHOR1,. + 0
 1495              	hadc1:
 1496 0000 00000000 		.space	72
 1496      00000000 
 1496      00000000 
 1496      00000000 
 1496      00000000 
 1497              		.section	.bss.hdma_adc1,"aw",%nobits
 1498              		.align	2
 1501              	hdma_adc1:
 1502 0000 00000000 		.space	96
 1502      00000000 
 1502      00000000 
 1502      00000000 
 1502      00000000 
 1503              		.section	.bss.hi2c1,"aw",%nobits
 1504              		.align	2
 1505              		.set	.LANCHOR3,. + 0
 1508              	hi2c1:
 1509 0000 00000000 		.space	84
 1509      00000000 
 1509      00000000 
 1509      00000000 
 1509      00000000 
 1510              		.section	.bss.huart2,"aw",%nobits
 1511              		.align	2
 1512              		.set	.LANCHOR4,. + 0
 1515              	huart2:
 1516 0000 00000000 		.space	72
 1516      00000000 
 1516      00000000 
ARM GAS  /tmp/ccDefyvn.s 			page 63


 1516      00000000 
 1516      00000000 
 1517              		.section	.bss.value,"aw",%nobits
 1518              		.align	2
 1519              		.set	.LANCHOR0,. + 0
 1522              	value:
 1523 0000 00000000 		.space	16
 1523      00000000 
 1523      00000000 
 1523      00000000 
 1524              		.section	.rodata.ApplicationFSM_attributes,"a"
 1525              		.align	2
 1526              		.set	.LANCHOR13,. + 0
 1529              	ApplicationFSM_attributes:
 1530 0000 14000000 		.word	.LC1
 1531 0004 00000000 		.space	16
 1531      00000000 
 1531      00000000 
 1531      00000000 
 1532 0014 00020000 		.word	512
 1533 0018 18000000 		.word	24
 1534 001c 00000000 		.space	8
 1534      00000000 
 1535              		.section	.rodata.BlinkLEDTask_attributes,"a"
 1536              		.align	2
 1537              		.set	.LANCHOR9,. + 0
 1540              	BlinkLEDTask_attributes:
 1541 0000 34000000 		.word	.LC3
 1542 0004 00000000 		.space	16
 1542      00000000 
 1542      00000000 
 1542      00000000 
 1543 0014 00020000 		.word	512
 1544 0018 08000000 		.word	8
 1545 001c 00000000 		.space	8
 1545      00000000 
 1546              		.section	.rodata.MiniBotInputQueue_attributes,"a"
 1547              		.align	2
 1548              		.set	.LANCHOR5,. + 0
 1551              	MiniBotInputQueue_attributes:
 1552 0000 00000000 		.word	.LC0
 1553 0004 00000000 		.space	20
 1553      00000000 
 1553      00000000 
 1553      00000000 
 1553      00000000 
 1554              		.section	.rodata.MiniBotInputs_attributes,"a"
 1555              		.align	2
 1556              		.set	.LANCHOR11,. + 0
 1559              	MiniBotInputs_attributes:
 1560 0000 24000000 		.word	.LC2
 1561 0004 00000000 		.space	16
 1561      00000000 
 1561      00000000 
 1561      00000000 
 1562 0014 00020000 		.word	512
 1563 0018 18000000 		.word	24
ARM GAS  /tmp/ccDefyvn.s 			page 64


 1564 001c 00000000 		.space	8
 1564      00000000 
 1565              		.section	.rodata.defaultTask_attributes,"a"
 1566              		.align	2
 1567              		.set	.LANCHOR7,. + 0
 1570              	defaultTask_attributes:
 1571 0000 44000000 		.word	.LC4
 1572 0004 00000000 		.space	16
 1572      00000000 
 1572      00000000 
 1572      00000000 
 1573 0014 00020000 		.word	512
 1574 0018 18000000 		.word	24
 1575 001c 00000000 		.space	8
 1575      00000000 
 1576              		.text
 1577              	.Letext0:
 1578              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1579              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1580              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1581              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1582              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1583              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1584              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1585              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1586              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1587              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1588              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1589              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1590              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1591              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1592              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1593              		.file 18 "<built-in>"
ARM GAS  /tmp/ccDefyvn.s 			page 65


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccDefyvn.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccDefyvn.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccDefyvn.s:178    .text.MX_GPIO_Init:00000000000000b0 $d
     /tmp/ccDefyvn.s:185    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccDefyvn.s:191    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccDefyvn.s:237    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccDefyvn.s:242    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccDefyvn.s:249    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccDefyvn.s:280    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccDefyvn.s:285    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccDefyvn.s:292    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccDefyvn.s:327    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccDefyvn.s:332    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccDefyvn.s:339    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccDefyvn.s:365    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccDefyvn.s:372    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccDefyvn.s:452    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccDefyvn.s:457    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccDefyvn.s:464    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccDefyvn.s:711    .text.MiniBotInputsEntry:00000000000000f4 $d
     /tmp/ccDefyvn.s:719    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccDefyvn.s:726    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccDefyvn.s:740    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccDefyvn.s:747    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccDefyvn.s:780    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccDefyvn.s:785    .text.Error_Handler:0000000000000000 $t
     /tmp/ccDefyvn.s:792    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccDefyvn.s:824    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccDefyvn.s:830    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccDefyvn.s:993    .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccDefyvn.s:1000   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccDefyvn.s:1006   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccDefyvn.s:1063   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccDefyvn.s:1070   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccDefyvn.s:1076   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccDefyvn.s:1130   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccDefyvn.s:1136   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccDefyvn.s:1143   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccDefyvn.s:1290   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccDefyvn.s:1296   .text.main:0000000000000000 $t
     /tmp/ccDefyvn.s:1303   .text.main:0000000000000000 main
     /tmp/ccDefyvn.s:1399   .text.main:0000000000000070 $d
     /tmp/ccDefyvn.s:1551   .rodata.MiniBotInputQueue_attributes:0000000000000000 MiniBotInputQueue_attributes
     /tmp/ccDefyvn.s:1418   .rodata.str1.4:0000000000000000 $d
     /tmp/ccDefyvn.s:1467   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccDefyvn.s:1529   .rodata.ApplicationFSM_attributes:0000000000000000 ApplicationFSM_attributes
     /tmp/ccDefyvn.s:1453   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccDefyvn.s:1559   .rodata.MiniBotInputs_attributes:0000000000000000 MiniBotInputs_attributes
     /tmp/ccDefyvn.s:1474   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccDefyvn.s:1540   .rodata.BlinkLEDTask_attributes:0000000000000000 BlinkLEDTask_attributes
     /tmp/ccDefyvn.s:1460   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccDefyvn.s:1570   .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
     /tmp/ccDefyvn.s:1488   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccDefyvn.s:1515   .bss.huart2:0000000000000000 huart2
     /tmp/ccDefyvn.s:1508   .bss.hi2c1:0000000000000000 hi2c1
ARM GAS  /tmp/ccDefyvn.s 			page 66


     /tmp/ccDefyvn.s:1501   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccDefyvn.s:1495   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccDefyvn.s:1522   .bss.value:0000000000000000 value
     /tmp/ccDefyvn.s:1481   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccDefyvn.s:1449   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccDefyvn.s:1456   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccDefyvn.s:1463   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccDefyvn.s:1470   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccDefyvn.s:1477   .bss.Qdata:0000000000000000 $d
     /tmp/ccDefyvn.s:1484   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccDefyvn.s:1491   .bss.hadc1:0000000000000000 $d
     /tmp/ccDefyvn.s:1498   .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccDefyvn.s:1504   .bss.hi2c1:0000000000000000 $d
     /tmp/ccDefyvn.s:1511   .bss.huart2:0000000000000000 $d
     /tmp/ccDefyvn.s:1518   .bss.value:0000000000000000 $d
     /tmp/ccDefyvn.s:1525   .rodata.ApplicationFSM_attributes:0000000000000000 $d
     /tmp/ccDefyvn.s:1536   .rodata.BlinkLEDTask_attributes:0000000000000000 $d
     /tmp/ccDefyvn.s:1547   .rodata.MiniBotInputQueue_attributes:0000000000000000 $d
     /tmp/ccDefyvn.s:1555   .rodata.MiniBotInputs_attributes:0000000000000000 $d
     /tmp/ccDefyvn.s:1566   .rodata.defaultTask_attributes:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
HAL_ADC_Start_DMA
HAL_GPIO_ReadPin
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osKernelInitialize
osMessageQueueNew
osThreadNew
osKernelStart
