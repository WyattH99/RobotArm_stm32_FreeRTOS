ARM GAS  /tmp/ccNe93V8.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 456D6572 		.ascii	"EmergencyStopTask\000"
  29      67656E63 
  29      7953746F 
  29      70546173 
  29      6B00
  30 004e 0000     		.align	2
  31              	.LC12:
  32 0050 4D6F746F 		.ascii	"MotorControlTask\000"
  32      72436F6E 
  32      74726F6C 
  32      5461736B 
  32      00
  33 0061 000000   		.align	2
  34              	.LC14:
  35 0064 4C434450 		.ascii	"LCDPrintTask\000"
  35      72696E74 
  35      5461736B 
  35      00
ARM GAS  /tmp/ccNe93V8.s 			page 2


  36              		.text
  37              	.Ltext0:
  38              		.cfi_sections	.debug_frame
  39              		.section	.text.MX_GPIO_Init,"ax",%progbits
  40              		.align	1
  41              		.arch armv7e-m
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	MX_GPIO_Init:
  48              	.LFB250:
  49              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** #include "I2C_LCD.h"
  29:Core/Src/main.c **** #include "I2C_LCD_cfg.h"
  30:Core/Src/main.c **** #include "Util.h"
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /*
  38:Core/Src/main.c ****  * MiniBot Structures
  39:Core/Src/main.c ****  */
  40:Core/Src/main.c **** typedef struct{
  41:Core/Src/main.c **** 	uint8_t  PotNum;
  42:Core/Src/main.c **** 	uint32_t PotMin;
  43:Core/Src/main.c **** 	uint32_t PotMax;
  44:Core/Src/main.c **** 	uint8_t  PotInvertRange;
ARM GAS  /tmp/ccNe93V8.s 			page 3


  45:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** typedef struct{
  48:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  49:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  50:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** typedef struct{
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  54:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  55:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  56:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  57:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  58:Core/Src/main.c **** } MiniBot_Config_t;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** typedef struct{
  61:Core/Src/main.c **** 	uint32_t BasePotValue;
  62:Core/Src/main.c **** 	uint32_t BasePotMin;
  63:Core/Src/main.c **** 	uint32_t BasePotMax;
  64:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  65:Core/Src/main.c **** 	uint32_t ShoulderPotMin;
  66:Core/Src/main.c **** 	uint32_t ShoulderPotMax;
  67:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  68:Core/Src/main.c **** 	uint32_t ElbowPotMin;
  69:Core/Src/main.c **** 	uint32_t ElbowPotMax;
  70:Core/Src/main.c **** 	uint32_t WristPotValue;
  71:Core/Src/main.c **** 	uint32_t WristPotMin;
  72:Core/Src/main.c **** 	uint32_t WristPotMax;
  73:Core/Src/main.c **** 	uint8_t  GripperValue;
  74:Core/Src/main.c **** } MiniBot_Qdata;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  77:Core/Src/main.c **** uint32_t PotRawValue[4];
  78:Core/Src/main.c **** volatile MiniBot_Qdata MiniBot_Qdata_Buf;
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /*
  82:Core/Src/main.c ****  * MegaBot Structures
  83:Core/Src/main.c ****  */
  84:Core/Src/main.c **** typedef struct{
  85:Core/Src/main.c **** 	uint8_t  ServoNum;
  86:Core/Src/main.c **** 	uint16_t ServoMin;
  87:Core/Src/main.c **** 	uint16_t ServoMax;
  88:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  89:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** typedef struct{
  92:Core/Src/main.c **** 	uint8_t  ServoNum;
  93:Core/Src/main.c **** 	uint16_t ServoMin;
  94:Core/Src/main.c **** 	uint16_t ServoMax;
  95:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  96:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** typedef struct{
  99:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
 100:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
 101:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
ARM GAS  /tmp/ccNe93V8.s 			page 4


 102:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
 103:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
 104:Core/Src/main.c **** } MegaBot_Config_t;
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** volatile MiniBot_Qdata Temp_Qdata_Buf;
 107:Core/Src/main.c **** volatile MiniBot_Qdata MotorControl_Qdata_Buf;
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** uint8_t tempFailedToPostMessage = 0;
 110:Core/Src/main.c **** uint16_t MappedServoAngle[4];
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** enum State{
 114:Core/Src/main.c ****   Init,
 115:Core/Src/main.c ****   Ready,
 116:Core/Src/main.c ****   Running,
 117:Core/Src/main.c ****   EmergencyStop
 118:Core/Src/main.c **** };
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** volatile enum State state = Init;
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* USER CODE END PTD */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 125:Core/Src/main.c **** /* USER CODE BEGIN PD */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* USER CODE END PD */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 130:Core/Src/main.c **** /* USER CODE BEGIN PM */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /* USER CODE END PM */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 135:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 138:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** UART_HandleTypeDef huart2;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** osThreadId defaultTaskHandle;
 143:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 144:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 145:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 146:Core/Src/main.c **** osThreadId EmergencyStopTaskHandle;
 147:Core/Src/main.c **** osThreadId MotorControlTaskHandle;
 148:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 149:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 150:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 151:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 152:Core/Src/main.c **** osMutexId StateMutexHandle;
 153:Core/Src/main.c **** /* USER CODE BEGIN PV */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /* USER CODE END PV */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 158:Core/Src/main.c **** void SystemClock_Config(void);
ARM GAS  /tmp/ccNe93V8.s 			page 5


 159:Core/Src/main.c **** static void MX_GPIO_Init(void);
 160:Core/Src/main.c **** static void MX_ADC1_Init(void);
 161:Core/Src/main.c **** static void MX_I2C1_Init(void);
 162:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 163:Core/Src/main.c **** static void MX_I2C2_Init(void);
 164:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 165:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 166:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
 167:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 168:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument);
 169:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 170:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 175:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot);
 176:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot);
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot);
 181:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /* USER CODE END PFP */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 186:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** /* USER CODE END 0 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** /**
 192:Core/Src/main.c ****   * @brief  The application entry point.
 193:Core/Src/main.c ****   * @retval int
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c **** int main(void)
 196:Core/Src/main.c **** {
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE END 1 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 205:Core/Src/main.c ****   HAL_Init();
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE END Init */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* Configure the system clock */
 212:Core/Src/main.c ****   SystemClock_Config();
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 215:Core/Src/main.c **** 
ARM GAS  /tmp/ccNe93V8.s 			page 6


 216:Core/Src/main.c ****   /* USER CODE END SysInit */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* Initialize all configured peripherals */
 219:Core/Src/main.c ****   MX_GPIO_Init();
 220:Core/Src/main.c ****   MX_ADC1_Init();
 221:Core/Src/main.c ****   MX_I2C1_Init();
 222:Core/Src/main.c ****   MX_USART2_UART_Init();
 223:Core/Src/main.c ****   MX_I2C2_Init();
 224:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE END 2 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* Create the mutex(es) */
 229:Core/Src/main.c ****   /* definition and creation of StateMutex */
 230:Core/Src/main.c ****   osMutexDef(StateMutex);
 231:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 234:Core/Src/main.c ****   /* add mutexes, ... */
 235:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 238:Core/Src/main.c ****   /* add semaphores, ... */
 239:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 242:Core/Src/main.c ****   /* start timers, add new ones, ... */
 243:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* Create the queue(s) */
 246:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 247:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 248:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 251:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, MiniBot_Qdata);
 252:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 255:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, enum State);
 256:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 259:Core/Src/main.c ****   /* add queues, ... */
 260:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* Create the thread(s) */
 263:Core/Src/main.c ****   /* definition and creation of defaultTask */
 264:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 265:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 268:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityNormal, 0, 128);
 269:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 272:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 512);
ARM GAS  /tmp/ccNe93V8.s 			page 7


 273:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 276:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityHigh, 0, 512);
 277:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* definition and creation of EmergencyStopTask */
 280:Core/Src/main.c ****   osThreadDef(EmergencyStopTask, EmergencyStopTaskEntry, osPriorityNormal, 0, 128);
 281:Core/Src/main.c ****   EmergencyStopTaskHandle = osThreadCreate(osThread(EmergencyStopTask), NULL);
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* definition and creation of MotorControlTask */
 284:Core/Src/main.c ****   osThreadDef(MotorControlTask, MotorControlTaskEntry, osPriorityNormal, 0, 512);
 285:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 288:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 289:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 292:Core/Src/main.c ****   /* add threads, ... */
 293:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* Start scheduler */
 296:Core/Src/main.c ****   osKernelStart();
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /* Infinite loop */
 301:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 302:Core/Src/main.c ****   while (1)
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     /* USER CODE END WHILE */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 307:Core/Src/main.c ****   }
 308:Core/Src/main.c ****   /* USER CODE END 3 */
 309:Core/Src/main.c **** }
 310:Core/Src/main.c **** 
 311:Core/Src/main.c **** /**
 312:Core/Src/main.c ****   * @brief System Clock Configuration
 313:Core/Src/main.c ****   * @retval None
 314:Core/Src/main.c ****   */
 315:Core/Src/main.c **** void SystemClock_Config(void)
 316:Core/Src/main.c **** {
 317:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 318:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 321:Core/Src/main.c ****   */
 322:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 323:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 326:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 327:Core/Src/main.c ****   */
 328:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccNe93V8.s 			page 8


 330:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 337:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 338:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 339:Core/Src/main.c ****   {
 340:Core/Src/main.c ****     Error_Handler();
 341:Core/Src/main.c ****   }
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 344:Core/Src/main.c ****   */
 345:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 346:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 347:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 348:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 350:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 353:Core/Src/main.c ****   {
 354:Core/Src/main.c ****     Error_Handler();
 355:Core/Src/main.c ****   }
 356:Core/Src/main.c **** }
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** /**
 359:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 360:Core/Src/main.c ****   * @param None
 361:Core/Src/main.c ****   * @retval None
 362:Core/Src/main.c ****   */
 363:Core/Src/main.c **** static void MX_ADC1_Init(void)
 364:Core/Src/main.c **** {
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 373:Core/Src/main.c **** 
 374:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 377:Core/Src/main.c ****   */
 378:Core/Src/main.c ****   hadc1.Instance = ADC1;
 379:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 380:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 381:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 382:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 383:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 384:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 386:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
ARM GAS  /tmp/ccNe93V8.s 			page 9


 387:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 388:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 389:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 390:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 391:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 397:Core/Src/main.c ****   */
 398:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 399:Core/Src/main.c ****   sConfig.Rank = 1;
 400:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 401:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****     Error_Handler();
 404:Core/Src/main.c ****   }
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 407:Core/Src/main.c ****   */
 408:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 409:Core/Src/main.c ****   sConfig.Rank = 2;
 410:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 416:Core/Src/main.c ****   */
 417:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 418:Core/Src/main.c ****   sConfig.Rank = 3;
 419:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 420:Core/Src/main.c ****   {
 421:Core/Src/main.c ****     Error_Handler();
 422:Core/Src/main.c ****   }
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 425:Core/Src/main.c ****   */
 426:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 427:Core/Src/main.c ****   sConfig.Rank = 4;
 428:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 429:Core/Src/main.c ****   {
 430:Core/Src/main.c ****     Error_Handler();
 431:Core/Src/main.c ****   }
 432:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** }
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** /**
 439:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 440:Core/Src/main.c ****   * @param None
 441:Core/Src/main.c ****   * @retval None
 442:Core/Src/main.c ****   */
 443:Core/Src/main.c **** static void MX_I2C1_Init(void)
ARM GAS  /tmp/ccNe93V8.s 			page 10


 444:Core/Src/main.c **** {
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 453:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 454:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 455:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 456:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 457:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 458:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 459:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 460:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 461:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 462:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 463:Core/Src/main.c ****   {
 464:Core/Src/main.c ****     Error_Handler();
 465:Core/Src/main.c ****   }
 466:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 469:Core/Src/main.c **** 
 470:Core/Src/main.c **** }
 471:Core/Src/main.c **** 
 472:Core/Src/main.c **** /**
 473:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 474:Core/Src/main.c ****   * @param None
 475:Core/Src/main.c ****   * @retval None
 476:Core/Src/main.c ****   */
 477:Core/Src/main.c **** static void MX_I2C2_Init(void)
 478:Core/Src/main.c **** {
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 487:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 488:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 489:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 490:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 491:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 492:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 493:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 494:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 495:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 496:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 497:Core/Src/main.c ****   {
 498:Core/Src/main.c ****     Error_Handler();
 499:Core/Src/main.c ****   }
 500:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
ARM GAS  /tmp/ccNe93V8.s 			page 11


 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** }
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** /**
 507:Core/Src/main.c ****   * @brief USART2 Initialization Function
 508:Core/Src/main.c ****   * @param None
 509:Core/Src/main.c ****   * @retval None
 510:Core/Src/main.c ****   */
 511:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 512:Core/Src/main.c **** {
 513:Core/Src/main.c **** 
 514:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 519:Core/Src/main.c **** 
 520:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 521:Core/Src/main.c ****   huart2.Instance = USART2;
 522:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 523:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 524:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 525:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 526:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 527:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 528:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 529:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 530:Core/Src/main.c ****   {
 531:Core/Src/main.c ****     Error_Handler();
 532:Core/Src/main.c ****   }
 533:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 536:Core/Src/main.c **** 
 537:Core/Src/main.c **** }
 538:Core/Src/main.c **** 
 539:Core/Src/main.c **** /**
 540:Core/Src/main.c ****   * @brief GPIO Initialization Function
 541:Core/Src/main.c ****   * @param None
 542:Core/Src/main.c ****   * @retval None
 543:Core/Src/main.c ****   */
 544:Core/Src/main.c **** static void MX_GPIO_Init(void)
 545:Core/Src/main.c **** {
  50              		.loc 1 545 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 40
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  55              		.cfi_def_cfa_offset 24
  56              		.cfi_offset 4, -24
  57              		.cfi_offset 5, -20
  58              		.cfi_offset 6, -16
  59              		.cfi_offset 7, -12
  60              		.cfi_offset 8, -8
  61              		.cfi_offset 14, -4
ARM GAS  /tmp/ccNe93V8.s 			page 12


  62 0004 8AB0     		sub	sp, sp, #40
  63              		.cfi_def_cfa_offset 64
 546:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  64              		.loc 1 546 3 view .LVU1
  65              		.loc 1 546 20 is_stmt 0 view .LVU2
  66 0006 0024     		movs	r4, #0
  67 0008 0594     		str	r4, [sp, #20]
  68 000a 0694     		str	r4, [sp, #24]
  69 000c 0794     		str	r4, [sp, #28]
  70 000e 0894     		str	r4, [sp, #32]
  71 0010 0994     		str	r4, [sp, #36]
 547:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 548:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 549:Core/Src/main.c **** 
 550:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 551:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  72              		.loc 1 551 3 is_stmt 1 view .LVU3
  73              	.LBB4:
  74              		.loc 1 551 3 view .LVU4
  75 0012 0194     		str	r4, [sp, #4]
  76              		.loc 1 551 3 view .LVU5
  77 0014 304B     		ldr	r3, .L3
  78 0016 1A6B     		ldr	r2, [r3, #48]
  79 0018 42F00402 		orr	r2, r2, #4
  80 001c 1A63     		str	r2, [r3, #48]
  81              		.loc 1 551 3 view .LVU6
  82 001e 1A6B     		ldr	r2, [r3, #48]
  83 0020 02F00402 		and	r2, r2, #4
  84 0024 0192     		str	r2, [sp, #4]
  85              		.loc 1 551 3 view .LVU7
  86 0026 019A     		ldr	r2, [sp, #4]
  87              	.LBE4:
  88              		.loc 1 551 3 view .LVU8
 552:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  89              		.loc 1 552 3 view .LVU9
  90              	.LBB5:
  91              		.loc 1 552 3 view .LVU10
  92 0028 0294     		str	r4, [sp, #8]
  93              		.loc 1 552 3 view .LVU11
  94 002a 1A6B     		ldr	r2, [r3, #48]
  95 002c 42F08002 		orr	r2, r2, #128
  96 0030 1A63     		str	r2, [r3, #48]
  97              		.loc 1 552 3 view .LVU12
  98 0032 1A6B     		ldr	r2, [r3, #48]
  99 0034 02F08002 		and	r2, r2, #128
 100 0038 0292     		str	r2, [sp, #8]
 101              		.loc 1 552 3 view .LVU13
 102 003a 029A     		ldr	r2, [sp, #8]
 103              	.LBE5:
 104              		.loc 1 552 3 view .LVU14
 553:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 105              		.loc 1 553 3 view .LVU15
 106              	.LBB6:
 107              		.loc 1 553 3 view .LVU16
 108 003c 0394     		str	r4, [sp, #12]
 109              		.loc 1 553 3 view .LVU17
 110 003e 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccNe93V8.s 			page 13


 111 0040 42F00102 		orr	r2, r2, #1
 112 0044 1A63     		str	r2, [r3, #48]
 113              		.loc 1 553 3 view .LVU18
 114 0046 1A6B     		ldr	r2, [r3, #48]
 115 0048 02F00102 		and	r2, r2, #1
 116 004c 0392     		str	r2, [sp, #12]
 117              		.loc 1 553 3 view .LVU19
 118 004e 039A     		ldr	r2, [sp, #12]
 119              	.LBE6:
 120              		.loc 1 553 3 view .LVU20
 554:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 121              		.loc 1 554 3 view .LVU21
 122              	.LBB7:
 123              		.loc 1 554 3 view .LVU22
 124 0050 0494     		str	r4, [sp, #16]
 125              		.loc 1 554 3 view .LVU23
 126 0052 1A6B     		ldr	r2, [r3, #48]
 127 0054 42F00202 		orr	r2, r2, #2
 128 0058 1A63     		str	r2, [r3, #48]
 129              		.loc 1 554 3 view .LVU24
 130 005a 1B6B     		ldr	r3, [r3, #48]
 131 005c 03F00203 		and	r3, r3, #2
 132 0060 0493     		str	r3, [sp, #16]
 133              		.loc 1 554 3 view .LVU25
 134 0062 049B     		ldr	r3, [sp, #16]
 135              	.LBE7:
 136              		.loc 1 554 3 view .LVU26
 555:Core/Src/main.c **** 
 556:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 557:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 137              		.loc 1 557 3 view .LVU27
 138 0064 1D4E     		ldr	r6, .L3+4
 139 0066 2246     		mov	r2, r4
 140 0068 2021     		movs	r1, #32
 141 006a 3046     		mov	r0, r6
 142 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL0:
 558:Core/Src/main.c **** 
 559:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 560:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 560 3 view .LVU28
 145              		.loc 1 560 23 is_stmt 0 view .LVU29
 146 0070 4FF40053 		mov	r3, #8192
 147 0074 0593     		str	r3, [sp, #20]
 561:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 148              		.loc 1 561 3 is_stmt 1 view .LVU30
 149              		.loc 1 561 24 is_stmt 0 view .LVU31
 150 0076 4FF40418 		mov	r8, #2162688
 151 007a CDF81880 		str	r8, [sp, #24]
 562:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 562 3 is_stmt 1 view .LVU32
 153              		.loc 1 562 24 is_stmt 0 view .LVU33
 154 007e 0794     		str	r4, [sp, #28]
 563:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 155              		.loc 1 563 3 is_stmt 1 view .LVU34
 156 0080 05A9     		add	r1, sp, #20
 157 0082 1748     		ldr	r0, .L3+8
ARM GAS  /tmp/ccNe93V8.s 			page 14


 158 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL1:
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 566:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 160              		.loc 1 566 3 view .LVU35
 161              		.loc 1 566 23 is_stmt 0 view .LVU36
 162 0088 2027     		movs	r7, #32
 163 008a 0597     		str	r7, [sp, #20]
 567:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 164              		.loc 1 567 3 is_stmt 1 view .LVU37
 165              		.loc 1 567 24 is_stmt 0 view .LVU38
 166 008c 0125     		movs	r5, #1
 167 008e 0695     		str	r5, [sp, #24]
 568:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 168              		.loc 1 568 3 is_stmt 1 view .LVU39
 169              		.loc 1 568 24 is_stmt 0 view .LVU40
 170 0090 0794     		str	r4, [sp, #28]
 569:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 171              		.loc 1 569 3 is_stmt 1 view .LVU41
 172              		.loc 1 569 25 is_stmt 0 view .LVU42
 173 0092 0894     		str	r4, [sp, #32]
 570:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 174              		.loc 1 570 3 is_stmt 1 view .LVU43
 175 0094 05A9     		add	r1, sp, #20
 176 0096 3046     		mov	r0, r6
 177 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 178              	.LVL2:
 571:Core/Src/main.c **** 
 572:Core/Src/main.c ****   /*Configure GPIO pin : EmergencyStopBtn_Pin */
 573:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin;
 179              		.loc 1 573 3 view .LVU44
 180              		.loc 1 573 23 is_stmt 0 view .LVU45
 181 009c 4FF48073 		mov	r3, #256
 182 00a0 0593     		str	r3, [sp, #20]
 574:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 183              		.loc 1 574 3 is_stmt 1 view .LVU46
 184              		.loc 1 574 24 is_stmt 0 view .LVU47
 185 00a2 CDF81880 		str	r8, [sp, #24]
 575:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 186              		.loc 1 575 3 is_stmt 1 view .LVU48
 187              		.loc 1 575 24 is_stmt 0 view .LVU49
 188 00a6 0795     		str	r5, [sp, #28]
 576:Core/Src/main.c ****   HAL_GPIO_Init(EmergencyStopBtn_GPIO_Port, &GPIO_InitStruct);
 189              		.loc 1 576 3 is_stmt 1 view .LVU50
 190 00a8 05A9     		add	r1, sp, #20
 191 00aa 3046     		mov	r0, r6
 192 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 193              	.LVL3:
 577:Core/Src/main.c **** 
 578:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 579:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 194              		.loc 1 579 3 view .LVU51
 195              		.loc 1 579 23 is_stmt 0 view .LVU52
 196 00b0 4FF40073 		mov	r3, #512
 197 00b4 0593     		str	r3, [sp, #20]
 580:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
ARM GAS  /tmp/ccNe93V8.s 			page 15


 198              		.loc 1 580 3 is_stmt 1 view .LVU53
 199              		.loc 1 580 24 is_stmt 0 view .LVU54
 200 00b6 0694     		str	r4, [sp, #24]
 581:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 201              		.loc 1 581 3 is_stmt 1 view .LVU55
 202              		.loc 1 581 24 is_stmt 0 view .LVU56
 203 00b8 0795     		str	r5, [sp, #28]
 582:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 204              		.loc 1 582 3 is_stmt 1 view .LVU57
 205 00ba 05A9     		add	r1, sp, #20
 206 00bc 3046     		mov	r0, r6
 207 00be FFF7FEFF 		bl	HAL_GPIO_Init
 208              	.LVL4:
 583:Core/Src/main.c **** 
 584:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 585:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 209              		.loc 1 585 3 view .LVU58
 210              		.loc 1 585 23 is_stmt 0 view .LVU59
 211 00c2 0597     		str	r7, [sp, #20]
 586:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 212              		.loc 1 586 3 is_stmt 1 view .LVU60
 213              		.loc 1 586 24 is_stmt 0 view .LVU61
 214 00c4 0694     		str	r4, [sp, #24]
 587:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 215              		.loc 1 587 3 is_stmt 1 view .LVU62
 216              		.loc 1 587 24 is_stmt 0 view .LVU63
 217 00c6 0795     		str	r5, [sp, #28]
 588:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 218              		.loc 1 588 3 is_stmt 1 view .LVU64
 219 00c8 05A9     		add	r1, sp, #20
 220 00ca 0648     		ldr	r0, .L3+12
 221 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 222              	.LVL5:
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 591:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 592:Core/Src/main.c **** }
 223              		.loc 1 592 1 is_stmt 0 view .LVU65
 224 00d0 0AB0     		add	sp, sp, #40
 225              		.cfi_def_cfa_offset 24
 226              		@ sp needed
 227 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 228              	.L4:
 229 00d6 00BF     		.align	2
 230              	.L3:
 231 00d8 00380240 		.word	1073887232
 232 00dc 00000240 		.word	1073872896
 233 00e0 00080240 		.word	1073874944
 234 00e4 00040240 		.word	1073873920
 235              		.cfi_endproc
 236              	.LFE250:
 238              		.section	.text.StartDefaultTask,"ax",%progbits
 239              		.align	1
 240              		.global	StartDefaultTask
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
ARM GAS  /tmp/ccNe93V8.s 			page 16


 244              		.fpu fpv4-sp-d16
 246              	StartDefaultTask:
 247              	.LFB257:
 593:Core/Src/main.c **** 
 594:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 595:Core/Src/main.c **** 
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 598:Core/Src/main.c **** 	// Configure Each of the joints
 599:Core/Src/main.c **** 
 600:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 601:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 602:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 603:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 604:Core/Src/main.c **** 
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 606:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 607:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 609:Core/Src/main.c **** 
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 611:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 612:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 614:Core/Src/main.c **** 
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 616:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 617:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 619:Core/Src/main.c **** 
 620:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 621:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 622:Core/Src/main.c **** }
 623:Core/Src/main.c **** 
 624:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot){
 625:Core/Src/main.c ****   // Configure Each of the joints
 626:Core/Src/main.c ****   MegaBot->Base.ServoNum = 0;
 627:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 628:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 629:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoNum = 1;
 632:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 633:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoNum = 2;
 637:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 638:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 640:Core/Src/main.c **** 
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoNum = 3;
 642:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 643:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 644:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 645:Core/Src/main.c **** 
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoNum = 4;
ARM GAS  /tmp/ccNe93V8.s 			page 17


 647:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 648:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 650:Core/Src/main.c **** 
 651:Core/Src/main.c ****   ServoDriverInit(MegaBot);
 652:Core/Src/main.c **** }
 653:Core/Src/main.c **** 
 654:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot){
 655:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 661:Core/Src/main.c **** }
 662:Core/Src/main.c **** 
 663:Core/Src/main.c **** 
 664:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 665:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 666:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 667:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 668:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 669:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 670:Core/Src/main.c ****     }else{
 671:Core/Src/main.c ****       *QPotData = PotRawValue;
 672:Core/Src/main.c ****     }
 673:Core/Src/main.c ****     if(Joint->PotInvertRange){
 674:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 675:Core/Src/main.c ****     }
 676:Core/Src/main.c ****   }
 677:Core/Src/main.c **** }
 678:Core/Src/main.c **** 
 679:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot){
 680:Core/Src/main.c ****   // MAP each of the angles
 681:Core/Src/main.c ****   // Send each of new Joints angle
 682:Core/Src/main.c ****   // uint16_t MappedServoAngle;
 683:Core/Src/main.c ****   // Base
 684:Core/Src/main.c ****   MappedServoAngle[0] = MAP(MiniBot->BasePotValue, MiniBot->BasePotMin, MiniBot->BasePotMax, MegaBo
 685:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 686:Core/Src/main.c ****   // Shoulder
 687:Core/Src/main.c ****   MappedServoAngle[1] = MAP(MiniBot->ShoulderPotValue, MiniBot->ShoulderPotMin, MiniBot->ShoulderPo
 688:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 689:Core/Src/main.c ****   // Elbow
 690:Core/Src/main.c ****   MappedServoAngle[2] = MAP(MiniBot->ElbowPotValue, MiniBot->ElbowPotMin, MiniBot->ElbowPotMax, Meg
 691:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 692:Core/Src/main.c ****   // Wrist
 693:Core/Src/main.c ****   MappedServoAngle[3] = MAP(MiniBot->WristPotValue, MiniBot->WristPotMin, MiniBot->WristPotMax, Meg
 694:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 695:Core/Src/main.c ****   // Gripper
 696:Core/Src/main.c ****   if(MiniBot->GripperValue){
 697:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 698:Core/Src/main.c ****   }else{
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMax);
 700:Core/Src/main.c ****   }
 701:Core/Src/main.c **** }
 702:Core/Src/main.c **** 
 703:Core/Src/main.c **** // Used to map the Potentiometer Range (0-4096) to the Servo Range (0-180)
ARM GAS  /tmp/ccNe93V8.s 			page 18


 704:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 705:Core/Src/main.c **** {
 706:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 707:Core/Src/main.c **** }
 708:Core/Src/main.c **** 
 709:Core/Src/main.c **** 
 710:Core/Src/main.c **** /* USER CODE END 4 */
 711:Core/Src/main.c **** 
 712:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 713:Core/Src/main.c **** /**
 714:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 715:Core/Src/main.c ****   * @param  argument: Not used
 716:Core/Src/main.c ****   * @retval None
 717:Core/Src/main.c ****   */
 718:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 719:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 720:Core/Src/main.c **** {
 248              		.loc 1 720 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ Volatile: function does not return.
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL6:
 254              		.loc 1 720 1 is_stmt 0 view .LVU67
 255 0000 08B5     		push	{r3, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 3, -8
 258              		.cfi_offset 14, -4
 259              	.LVL7:
 260              	.L6:
 721:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 722:Core/Src/main.c ****   /* Infinite loop */
 723:Core/Src/main.c ****   for(;;)
 261              		.loc 1 723 3 is_stmt 1 discriminator 1 view .LVU68
 724:Core/Src/main.c ****   {
 725:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 262              		.loc 1 725 5 discriminator 1 view .LVU69
 263 0002 0022     		movs	r2, #0
 264 0004 2021     		movs	r1, #32
 265 0006 0448     		ldr	r0, .L8
 266 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 267              	.LVL8:
 726:Core/Src/main.c ****     osDelay(1000);
 268              		.loc 1 726 5 discriminator 1 view .LVU70
 269 000c 4FF47A70 		mov	r0, #1000
 270 0010 FFF7FEFF 		bl	osDelay
 271              	.LVL9:
 723:Core/Src/main.c ****   {
 272              		.loc 1 723 8 discriminator 1 view .LVU71
 273 0014 F5E7     		b	.L6
 274              	.L9:
 275 0016 00BF     		.align	2
 276              	.L8:
 277 0018 00000240 		.word	1073872896
 278              		.cfi_endproc
 279              	.LFE257:
 281              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
ARM GAS  /tmp/ccNe93V8.s 			page 19


 282              		.align	1
 283              		.global	BlinkLEDTaskEntry
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu fpv4-sp-d16
 289              	BlinkLEDTaskEntry:
 290              	.LFB258:
 727:Core/Src/main.c ****   }
 728:Core/Src/main.c ****   /* USER CODE END 5 */
 729:Core/Src/main.c **** }
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 732:Core/Src/main.c **** /**
 733:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 734:Core/Src/main.c **** * @param argument: Not used
 735:Core/Src/main.c **** * @retval None
 736:Core/Src/main.c **** */
 737:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 738:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 739:Core/Src/main.c **** {
 291              		.loc 1 739 1 view -0
 292              		.cfi_startproc
 293              		@ Volatile: function does not return.
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL10:
 297              		.loc 1 739 1 is_stmt 0 view .LVU73
 298 0000 08B5     		push	{r3, lr}
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 3, -8
 301              		.cfi_offset 14, -4
 302              	.LVL11:
 303              	.L11:
 740:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 741:Core/Src/main.c ****   /* Infinite loop */
 742:Core/Src/main.c ****   for(;;)
 304              		.loc 1 742 3 is_stmt 1 discriminator 1 view .LVU74
 743:Core/Src/main.c ****   {
 744:Core/Src/main.c ****     
 745:Core/Src/main.c ****     osDelay(500);
 305              		.loc 1 745 5 discriminator 1 view .LVU75
 306 0002 4FF4FA70 		mov	r0, #500
 307 0006 FFF7FEFF 		bl	osDelay
 308              	.LVL12:
 746:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 309              		.loc 1 746 5 discriminator 1 view .LVU76
 310 000a 0122     		movs	r2, #1
 311 000c 2021     		movs	r1, #32
 312 000e 0448     		ldr	r0, .L13
 313 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 314              	.LVL13:
 747:Core/Src/main.c ****     osDelay(500);
 315              		.loc 1 747 5 discriminator 1 view .LVU77
 316 0014 4FF4FA70 		mov	r0, #500
 317 0018 FFF7FEFF 		bl	osDelay
 318              	.LVL14:
ARM GAS  /tmp/ccNe93V8.s 			page 20


 742:Core/Src/main.c ****   {
 319              		.loc 1 742 8 discriminator 1 view .LVU78
 320 001c F1E7     		b	.L11
 321              	.L14:
 322 001e 00BF     		.align	2
 323              	.L13:
 324 0020 00000240 		.word	1073872896
 325              		.cfi_endproc
 326              	.LFE258:
 328              		.section	.text.EmergencyStopTaskEntry,"ax",%progbits
 329              		.align	1
 330              		.global	EmergencyStopTaskEntry
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	EmergencyStopTaskEntry:
 337              	.LFB261:
 748:Core/Src/main.c ****   }
 749:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 750:Core/Src/main.c **** }
 751:Core/Src/main.c **** 
 752:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 753:Core/Src/main.c **** /**
 754:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 755:Core/Src/main.c **** * @param argument: Not used
 756:Core/Src/main.c **** * @retval None
 757:Core/Src/main.c **** */
 758:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 759:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 760:Core/Src/main.c **** {
 761:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 762:Core/Src/main.c **** 
 763:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 764:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 765:Core/Src/main.c **** 
 766:Core/Src/main.c ****   Qdata.BasePotMax = MiniBot.Base.PotMax;
 767:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 768:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 769:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 770:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 771:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 772:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 773:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 774:Core/Src/main.c ****   
 775:Core/Src/main.c **** 
 776:Core/Src/main.c **** 	/* Infinite loop */
 777:Core/Src/main.c **** 	for(;;)
 778:Core/Src/main.c **** 	{
 779:Core/Src/main.c ****     for(uint8_t i=0; i<4; i++){
 780:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 781:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 782:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 783:Core/Src/main.c ****     }
 784:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 785:Core/Src/main.c **** 
 786:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
ARM GAS  /tmp/ccNe93V8.s 			page 21


 787:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 788:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 790:Core/Src/main.c **** 
 791:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 792:Core/Src/main.c ****     
 793:Core/Src/main.c ****     if(MiniBotInputQueueHandle != 0){
 794:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 795:Core/Src/main.c ****         // failed to post message
 796:Core/Src/main.c ****         tempFailedToPostMessage = 1;
 797:Core/Src/main.c ****       }
 798:Core/Src/main.c ****     }
 799:Core/Src/main.c ****   
 800:Core/Src/main.c **** 
 801:Core/Src/main.c ****     osDelay(1);
 802:Core/Src/main.c **** 	}
 803:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 804:Core/Src/main.c **** }
 805:Core/Src/main.c **** 
 806:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 807:Core/Src/main.c **** /**
 808:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 809:Core/Src/main.c **** * @param argument: Not used
 810:Core/Src/main.c **** * @retval None
 811:Core/Src/main.c **** */
 812:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 813:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 814:Core/Src/main.c **** {
 815:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 816:Core/Src/main.c **** 
 817:Core/Src/main.c ****   // enum State state = Init;
 818:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 819:Core/Src/main.c **** 
 820:Core/Src/main.c ****   /* Infinite loop */
 821:Core/Src/main.c ****   for(;;)
 822:Core/Src/main.c ****   {
 823:Core/Src/main.c ****     if(xQueueSend(LCDPrintQueueHandle, (void*)&state, portMAX_DELAY) != pdPASS){
 824:Core/Src/main.c ****       // failed to post message
 825:Core/Src/main.c ****       tempFailedToPostMessage = 1;
 826:Core/Src/main.c ****     }
 827:Core/Src/main.c ****     if(state == Init){
 828:Core/Src/main.c ****       state = Ready;
 829:Core/Src/main.c ****       
 830:Core/Src/main.c ****     }else if(state == Ready){
 831:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 832:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 833:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 834:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 835:Core/Src/main.c ****               state++;
 836:Core/Src/main.c ****             }
 837:Core/Src/main.c ****           }
 838:Core/Src/main.c ****         }
 839:Core/Src/main.c ****       }
 840:Core/Src/main.c **** 
 841:Core/Src/main.c ****     }else if(state == Running){
 842:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 843:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
ARM GAS  /tmp/ccNe93V8.s 			page 22


 844:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 845:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 846:Core/Src/main.c ****       }
 847:Core/Src/main.c ****       
 848:Core/Src/main.c ****     }
 849:Core/Src/main.c ****     
 850:Core/Src/main.c ****     if(state == EmergencyStop){
 851:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 852:Core/Src/main.c ****     }
 853:Core/Src/main.c **** 
 854:Core/Src/main.c **** 
 855:Core/Src/main.c **** 
 856:Core/Src/main.c ****     osDelay(1);
 857:Core/Src/main.c ****   }
 858:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 859:Core/Src/main.c **** }
 860:Core/Src/main.c **** 
 861:Core/Src/main.c **** /* USER CODE BEGIN Header_EmergencyStopTaskEntry */
 862:Core/Src/main.c **** /**
 863:Core/Src/main.c **** * @brief Function implementing the EmergencyStopTa thread.
 864:Core/Src/main.c **** * @param argument: Not used
 865:Core/Src/main.c **** * @retval None
 866:Core/Src/main.c **** */
 867:Core/Src/main.c **** /* USER CODE END Header_EmergencyStopTaskEntry */
 868:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument)
 869:Core/Src/main.c **** {
 338              		.loc 1 869 1 view -0
 339              		.cfi_startproc
 340              		@ Volatile: function does not return.
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              	.LVL15:
 344              		.loc 1 869 1 is_stmt 0 view .LVU80
 345 0000 08B5     		push	{r3, lr}
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 3, -8
 348              		.cfi_offset 14, -4
 349              	.LVL16:
 350              	.L16:
 870:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 871:Core/Src/main.c ****   /* Infinite loop */
 872:Core/Src/main.c ****   for(;;)
 351              		.loc 1 872 3 is_stmt 1 view .LVU81
 873:Core/Src/main.c ****   {
 874:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 352              		.loc 1 874 5 view .LVU82
 353              		.loc 1 874 8 is_stmt 0 view .LVU83
 354 0002 4FF48071 		mov	r1, #256
 355 0006 0348     		ldr	r0, .L18
 356 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 357              	.LVL17:
 875:Core/Src/main.c ****       
 876:Core/Src/main.c ****     }
 358              		.loc 1 876 5 is_stmt 1 view .LVU84
 877:Core/Src/main.c **** 
 878:Core/Src/main.c **** 
 879:Core/Src/main.c ****     osDelay(1);
ARM GAS  /tmp/ccNe93V8.s 			page 23


 359              		.loc 1 879 5 view .LVU85
 360 000c 0120     		movs	r0, #1
 361 000e FFF7FEFF 		bl	osDelay
 362              	.LVL18:
 872:Core/Src/main.c ****   {
 363              		.loc 1 872 8 view .LVU86
 364 0012 F6E7     		b	.L16
 365              	.L19:
 366              		.align	2
 367              	.L18:
 368 0014 00000240 		.word	1073872896
 369              		.cfi_endproc
 370              	.LFE261:
 372              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 373              		.align	1
 374              		.global	ApplicationFSMEntry
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu fpv4-sp-d16
 380              	ApplicationFSMEntry:
 381              	.LFB260:
 814:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 382              		.loc 1 814 1 view -0
 383              		.cfi_startproc
 384              		@ Volatile: function does not return.
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              	.LVL19:
 814:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 388              		.loc 1 814 1 is_stmt 0 view .LVU88
 389 0000 08B5     		push	{r3, lr}
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 3, -8
 392              		.cfi_offset 14, -4
 393 0002 07E0     		b	.L25
 394              	.LVL20:
 395              	.L27:
 828:Core/Src/main.c ****       
 396              		.loc 1 828 7 is_stmt 1 view .LVU89
 828:Core/Src/main.c ****       
 397              		.loc 1 828 13 is_stmt 0 view .LVU90
 398 0004 334B     		ldr	r3, .L29
 399 0006 0122     		movs	r2, #1
 400 0008 1A70     		strb	r2, [r3]
 401              	.L23:
 850:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 402              		.loc 1 850 5 is_stmt 1 view .LVU91
 850:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 403              		.loc 1 850 14 is_stmt 0 view .LVU92
 404 000a 324B     		ldr	r3, .L29
 405 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 852:Core/Src/main.c **** 
 406              		.loc 1 852 5 is_stmt 1 view .LVU93
 856:Core/Src/main.c ****   }
 407              		.loc 1 856 5 view .LVU94
 408 000e 0120     		movs	r0, #1
ARM GAS  /tmp/ccNe93V8.s 			page 24


 409 0010 FFF7FEFF 		bl	osDelay
 410              	.LVL21:
 821:Core/Src/main.c ****   {
 411              		.loc 1 821 8 view .LVU95
 412              	.L25:
 821:Core/Src/main.c ****   {
 413              		.loc 1 821 3 view .LVU96
 823:Core/Src/main.c ****       // failed to post message
 414              		.loc 1 823 5 view .LVU97
 823:Core/Src/main.c ****       // failed to post message
 415              		.loc 1 823 8 is_stmt 0 view .LVU98
 416 0014 0023     		movs	r3, #0
 417 0016 4FF0FF32 		mov	r2, #-1
 418 001a 2E49     		ldr	r1, .L29
 419 001c 2E48     		ldr	r0, .L29+4
 420 001e 0068     		ldr	r0, [r0]
 421 0020 FFF7FEFF 		bl	xQueueGenericSend
 422              	.LVL22:
 823:Core/Src/main.c ****       // failed to post message
 423              		.loc 1 823 7 view .LVU99
 424 0024 0128     		cmp	r0, #1
 425 0026 02D0     		beq	.L21
 825:Core/Src/main.c ****     }
 426              		.loc 1 825 7 is_stmt 1 view .LVU100
 825:Core/Src/main.c ****     }
 427              		.loc 1 825 31 is_stmt 0 view .LVU101
 428 0028 2C4B     		ldr	r3, .L29+8
 429 002a 0122     		movs	r2, #1
 430 002c 1A70     		strb	r2, [r3]
 431              	.L21:
 827:Core/Src/main.c ****       state = Ready;
 432              		.loc 1 827 5 is_stmt 1 view .LVU102
 827:Core/Src/main.c ****       state = Ready;
 433              		.loc 1 827 14 is_stmt 0 view .LVU103
 434 002e 294B     		ldr	r3, .L29
 435 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 827:Core/Src/main.c ****       state = Ready;
 436              		.loc 1 827 7 view .LVU104
 437 0032 002B     		cmp	r3, #0
 438 0034 E6D0     		beq	.L27
 830:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 439              		.loc 1 830 11 is_stmt 1 view .LVU105
 830:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 440              		.loc 1 830 20 is_stmt 0 view .LVU106
 441 0036 274B     		ldr	r3, .L29
 442 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 443 003a DBB2     		uxtb	r3, r3
 830:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 444              		.loc 1 830 13 view .LVU107
 445 003c 012B     		cmp	r3, #1
 446 003e 25D0     		beq	.L28
 841:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 447              		.loc 1 841 11 is_stmt 1 view .LVU108
 841:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 448              		.loc 1 841 20 is_stmt 0 view .LVU109
 449 0040 244B     		ldr	r3, .L29
 450 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccNe93V8.s 			page 25


 451 0044 DBB2     		uxtb	r3, r3
 841:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 452              		.loc 1 841 13 view .LVU110
 453 0046 022B     		cmp	r3, #2
 454 0048 DFD1     		bne	.L23
 843:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 455              		.loc 1 843 7 is_stmt 1 view .LVU111
 843:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 456              		.loc 1 843 10 is_stmt 0 view .LVU112
 457 004a 4FF0FF32 		mov	r2, #-1
 458 004e 2449     		ldr	r1, .L29+12
 459 0050 244B     		ldr	r3, .L29+16
 460 0052 1868     		ldr	r0, [r3]
 461 0054 FFF7FEFF 		bl	xQueueReceive
 462              	.LVL23:
 843:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 463              		.loc 1 843 9 view .LVU113
 464 0058 0128     		cmp	r0, #1
 465 005a D6D1     		bne	.L23
 844:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 466              		.loc 1 844 9 is_stmt 1 view .LVU114
 844:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 467              		.loc 1 844 24 is_stmt 0 view .LVU115
 468 005c 224D     		ldr	r5, .L29+20
 469 005e AC46     		mov	ip, r5
 470 0060 1F4C     		ldr	r4, .L29+12
 471 0062 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 472 0064 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 473 0068 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 474 006a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 475 006e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 476 0070 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 477 0074 2368     		ldr	r3, [r4]
 478 0076 CCF80030 		str	r3, [ip]
 845:Core/Src/main.c ****       }
 479              		.loc 1 845 9 is_stmt 1 view .LVU116
 480 007a 0023     		movs	r3, #0
 481 007c 4FF0FF32 		mov	r2, #-1
 482 0080 2946     		mov	r1, r5
 483 0082 1A48     		ldr	r0, .L29+24
 484 0084 0068     		ldr	r0, [r0]
 485 0086 FFF7FEFF 		bl	xQueueGenericSend
 486              	.LVL24:
 487 008a BEE7     		b	.L23
 488              	.L28:
 831:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 489              		.loc 1 831 7 view .LVU117
 831:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 490              		.loc 1 831 10 is_stmt 0 view .LVU118
 491 008c 4FF0FF32 		mov	r2, #-1
 492 0090 1349     		ldr	r1, .L29+12
 493 0092 144B     		ldr	r3, .L29+16
 494 0094 1868     		ldr	r0, [r3]
 495 0096 FFF7FEFF 		bl	xQueueReceive
 496              	.LVL25:
 831:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 497              		.loc 1 831 9 view .LVU119
ARM GAS  /tmp/ccNe93V8.s 			page 26


 498 009a 0128     		cmp	r0, #1
 499 009c B5D1     		bne	.L23
 832:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 500              		.loc 1 832 9 is_stmt 1 view .LVU120
 832:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 501              		.loc 1 832 29 is_stmt 0 view .LVU121
 502 009e 104B     		ldr	r3, .L29+12
 503 00a0 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 832:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 504              		.loc 1 832 11 view .LVU122
 505 00a4 002B     		cmp	r3, #0
 506 00a6 B0D1     		bne	.L23
 833:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 507              		.loc 1 833 11 is_stmt 1 view .LVU123
 833:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 508              		.loc 1 833 14 is_stmt 0 view .LVU124
 509 00a8 4FF0FF32 		mov	r2, #-1
 510 00ac 0C49     		ldr	r1, .L29+12
 511 00ae 0D4B     		ldr	r3, .L29+16
 512 00b0 1868     		ldr	r0, [r3]
 513 00b2 FFF7FEFF 		bl	xQueueReceive
 514              	.LVL26:
 833:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 515              		.loc 1 833 13 view .LVU125
 516 00b6 0128     		cmp	r0, #1
 517 00b8 A7D1     		bne	.L23
 834:Core/Src/main.c ****               state++;
 518              		.loc 1 834 13 is_stmt 1 view .LVU126
 834:Core/Src/main.c ****               state++;
 519              		.loc 1 834 33 is_stmt 0 view .LVU127
 520 00ba 094B     		ldr	r3, .L29+12
 521 00bc 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 522 00c0 DBB2     		uxtb	r3, r3
 834:Core/Src/main.c ****               state++;
 523              		.loc 1 834 15 view .LVU128
 524 00c2 012B     		cmp	r3, #1
 525 00c4 A1D1     		bne	.L23
 835:Core/Src/main.c ****             }
 526              		.loc 1 835 15 is_stmt 1 view .LVU129
 835:Core/Src/main.c ****             }
 527              		.loc 1 835 20 is_stmt 0 view .LVU130
 528 00c6 034A     		ldr	r2, .L29
 529 00c8 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 530 00ca 0133     		adds	r3, r3, #1
 531 00cc DBB2     		uxtb	r3, r3
 532 00ce 1370     		strb	r3, [r2]
 533 00d0 9BE7     		b	.L23
 534              	.L30:
 535 00d2 00BF     		.align	2
 536              	.L29:
 537 00d4 00000000 		.word	.LANCHOR0
 538 00d8 00000000 		.word	.LANCHOR1
 539 00dc 00000000 		.word	.LANCHOR2
 540 00e0 00000000 		.word	.LANCHOR3
 541 00e4 00000000 		.word	.LANCHOR4
 542 00e8 00000000 		.word	.LANCHOR5
 543 00ec 00000000 		.word	.LANCHOR6
ARM GAS  /tmp/ccNe93V8.s 			page 27


 544              		.cfi_endproc
 545              	.LFE260:
 547              		.section	.rodata.LCDPrintTaskEntry.str1.4,"aMS",%progbits,1
 548              		.align	2
 549              	.LC16:
 550 0000 54657374 		.ascii	"Test\000"
 550      00
 551 0005 000000   		.align	2
 552              	.LC17:
 553 0008 49324320 		.ascii	"I2C LCD\000"
 553      4C434400 
 554              		.align	2
 555              	.LC18:
 556 0010 496E6974 		.ascii	"Initializing\000"
 556      69616C69 
 556      7A696E67 
 556      00
 557 001d 000000   		.align	2
 558              	.LC19:
 559 0020 506C6561 		.ascii	"Please Wait\000"
 559      73652057 
 559      61697400 
 560              		.align	2
 561              	.LC20:
 562 002c 52656164 		.ascii	"Ready\000"
 562      7900
 563 0032 0000     		.align	2
 564              	.LC21:
 565 0034 50726573 		.ascii	"Press Gripper\000"
 565      73204772 
 565      69707065 
 565      7200
 566 0042 0000     		.align	2
 567              	.LC22:
 568 0044 52756E6E 		.ascii	"Running\000"
 568      696E6700 
 569              		.align	2
 570              	.LC23:
 571 004c 456D6572 		.ascii	"Emergency Stop!\000"
 571      67656E63 
 571      79205374 
 571      6F702100 
 572              		.align	2
 573              	.LC24:
 574 005c 50726573 		.ascii	"Press Reset Button\000"
 574      73205265 
 574      73657420 
 574      42757474 
 574      6F6E00
 575              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 576              		.align	1
 577              		.global	LCDPrintTaskEntry
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 581              		.fpu fpv4-sp-d16
 583              	LCDPrintTaskEntry:
ARM GAS  /tmp/ccNe93V8.s 			page 28


 584              	.LVL27:
 585              	.LFB263:
 880:Core/Src/main.c ****   }
 881:Core/Src/main.c ****   /* USER CODE END EmergencyStopTaskEntry */
 882:Core/Src/main.c **** }
 883:Core/Src/main.c **** 
 884:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 885:Core/Src/main.c **** /**
 886:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 887:Core/Src/main.c **** * @param argument: Not used
 888:Core/Src/main.c **** * @retval None
 889:Core/Src/main.c **** */
 890:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 891:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
 892:Core/Src/main.c **** {
 893:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 894:Core/Src/main.c **** 
 895:Core/Src/main.c ****   MegaBot_Config_t MegaBot;
 896:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 897:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 898:Core/Src/main.c **** 
 899:Core/Src/main.c **** 
 900:Core/Src/main.c ****   /* Infinite loop */
 901:Core/Src/main.c ****   for(;;)
 902:Core/Src/main.c ****   {
 903:Core/Src/main.c **** 
 904:Core/Src/main.c ****     if(xQueueReceive(MotorControlQueueHandle, (void*)&MotorControl_Qdata_Buf, portMAX_DELAY) == pdP
 905:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 906:Core/Src/main.c ****     }
 907:Core/Src/main.c **** 
 908:Core/Src/main.c **** 
 909:Core/Src/main.c **** 
 910:Core/Src/main.c ****     osDelay(1);
 911:Core/Src/main.c ****   }
 912:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 913:Core/Src/main.c **** }
 914:Core/Src/main.c **** 
 915:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 916:Core/Src/main.c **** /**
 917:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 918:Core/Src/main.c **** * @param argument: Not used
 919:Core/Src/main.c **** * @retval None
 920:Core/Src/main.c **** */
 921:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 922:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 923:Core/Src/main.c **** {
 586              		.loc 1 923 1 is_stmt 1 view -0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 8
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              		.loc 1 923 1 is_stmt 0 view .LVU132
 591 0000 10B5     		push	{r4, lr}
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 4, -8
 594              		.cfi_offset 14, -4
 595 0002 82B0     		sub	sp, sp, #8
 596              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccNe93V8.s 			page 29


 597 0004 0024     		movs	r4, #0
 924:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 925:Core/Src/main.c **** 
 926:Core/Src/main.c ****   I2C_LCD_Init(I2C_LCD_1);
 598              		.loc 1 926 3 is_stmt 1 view .LVU133
 599 0006 2046     		mov	r0, r4
 600              	.LVL28:
 601              		.loc 1 926 3 is_stmt 0 view .LVU134
 602 0008 FFF7FEFF 		bl	I2C_LCD_Init
 603              	.LVL29:
 927:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 604              		.loc 1 927 3 is_stmt 1 view .LVU135
 605 000c 2246     		mov	r2, r4
 606 000e 2146     		mov	r1, r4
 607 0010 2046     		mov	r0, r4
 608 0012 FFF7FEFF 		bl	I2C_LCD_SetCursor
 609              	.LVL30:
 928:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "Test");
 610              		.loc 1 928 3 view .LVU136
 611 0016 3C49     		ldr	r1, .L42
 612 0018 2046     		mov	r0, r4
 613 001a FFF7FEFF 		bl	I2C_LCD_WriteString
 614              	.LVL31:
 929:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 615              		.loc 1 929 3 view .LVU137
 616 001e 0122     		movs	r2, #1
 617 0020 2146     		mov	r1, r4
 618 0022 2046     		mov	r0, r4
 619 0024 FFF7FEFF 		bl	I2C_LCD_SetCursor
 620              	.LVL32:
 930:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 621              		.loc 1 930 3 view .LVU138
 622 0028 3849     		ldr	r1, .L42+4
 623 002a 2046     		mov	r0, r4
 624 002c FFF7FEFF 		bl	I2C_LCD_WriteString
 625              	.LVL33:
 626 0030 16E0     		b	.L37
 627              	.LVL34:
 628              	.L39:
 931:Core/Src/main.c **** 
 932:Core/Src/main.c ****   enum State CurrentState;
 933:Core/Src/main.c ****   enum State LastState;
 934:Core/Src/main.c **** 
 935:Core/Src/main.c ****   /* Infinite loop */
 936:Core/Src/main.c ****   for(;;)
 937:Core/Src/main.c ****   {
 938:Core/Src/main.c **** 
 939:Core/Src/main.c ****     if(xQueueReceive(LCDPrintQueueHandle, (void*)&CurrentState, portMAX_DELAY) == pdPASS){
 940:Core/Src/main.c ****       if(LastState != CurrentState){
 941:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 942:Core/Src/main.c ****         if(CurrentState == Init){
 943:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 629              		.loc 1 943 9 view .LVU139
 630 0032 0022     		movs	r2, #0
 631 0034 1146     		mov	r1, r2
 632 0036 1046     		mov	r0, r2
 633 0038 FFF7FEFF 		bl	I2C_LCD_SetCursor
ARM GAS  /tmp/ccNe93V8.s 			page 30


 634              	.LVL35:
 944:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Initializing");
 635              		.loc 1 944 9 view .LVU140
 636 003c 3449     		ldr	r1, .L42+8
 637 003e 0020     		movs	r0, #0
 638 0040 FFF7FEFF 		bl	I2C_LCD_WriteString
 639              	.LVL36:
 945:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 640              		.loc 1 945 9 view .LVU141
 641 0044 0122     		movs	r2, #1
 642 0046 0021     		movs	r1, #0
 643 0048 0846     		mov	r0, r1
 644 004a FFF7FEFF 		bl	I2C_LCD_SetCursor
 645              	.LVL37:
 946:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Please Wait");
 646              		.loc 1 946 9 view .LVU142
 647 004e 3149     		ldr	r1, .L42+12
 648 0050 0020     		movs	r0, #0
 649 0052 FFF7FEFF 		bl	I2C_LCD_WriteString
 650              	.LVL38:
 651              	.L34:
 947:Core/Src/main.c **** 
 948:Core/Src/main.c ****         }else if(CurrentState == Ready){
 949:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 950:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Ready");
 951:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 952:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Gripper");
 953:Core/Src/main.c **** 
 954:Core/Src/main.c ****         }else if(CurrentState == Running){
 955:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 956:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Running");
 957:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 958:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 959:Core/Src/main.c **** 
 960:Core/Src/main.c ****         }else if(CurrentState == EmergencyStop){
 961:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 962:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Emergency Stop!");
 963:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 964:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Reset Button");
 965:Core/Src/main.c **** 
 966:Core/Src/main.c ****         }
 967:Core/Src/main.c ****         LastState = CurrentState;
 652              		.loc 1 967 9 view .LVU143
 653              		.loc 1 967 19 is_stmt 0 view .LVU144
 654 0056 9DF80740 		ldrb	r4, [sp, #7]	@ zero_extendqisi2
 655              	.LVL39:
 656              	.L32:
 968:Core/Src/main.c ****       }
 969:Core/Src/main.c ****     }
 970:Core/Src/main.c **** 
 971:Core/Src/main.c ****     osDelay(1);
 657              		.loc 1 971 5 is_stmt 1 view .LVU145
 658 005a 0120     		movs	r0, #1
 659 005c FFF7FEFF 		bl	osDelay
 660              	.LVL40:
 936:Core/Src/main.c ****   {
 661              		.loc 1 936 8 view .LVU146
ARM GAS  /tmp/ccNe93V8.s 			page 31


 662              	.L37:
 932:Core/Src/main.c ****   enum State LastState;
 663              		.loc 1 932 3 view .LVU147
 933:Core/Src/main.c **** 
 664              		.loc 1 933 3 view .LVU148
 936:Core/Src/main.c ****   {
 665              		.loc 1 936 3 view .LVU149
 939:Core/Src/main.c ****       if(LastState != CurrentState){
 666              		.loc 1 939 5 view .LVU150
 939:Core/Src/main.c ****       if(LastState != CurrentState){
 667              		.loc 1 939 8 is_stmt 0 view .LVU151
 668 0060 4FF0FF32 		mov	r2, #-1
 669 0064 0DF10701 		add	r1, sp, #7
 670 0068 2B4B     		ldr	r3, .L42+16
 671 006a 1868     		ldr	r0, [r3]
 672 006c FFF7FEFF 		bl	xQueueReceive
 673              	.LVL41:
 939:Core/Src/main.c ****       if(LastState != CurrentState){
 674              		.loc 1 939 7 view .LVU152
 675 0070 0128     		cmp	r0, #1
 676 0072 F2D1     		bne	.L32
 940:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 677              		.loc 1 940 7 is_stmt 1 view .LVU153
 940:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 678              		.loc 1 940 20 is_stmt 0 view .LVU154
 679 0074 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 940:Core/Src/main.c ****         I2C_LCD_Clear(I2C_LCD_1);
 680              		.loc 1 940 9 view .LVU155
 681 0078 A342     		cmp	r3, r4
 682 007a EED0     		beq	.L32
 941:Core/Src/main.c ****         if(CurrentState == Init){
 683              		.loc 1 941 9 is_stmt 1 view .LVU156
 684 007c 0020     		movs	r0, #0
 685 007e FFF7FEFF 		bl	I2C_LCD_Clear
 686              	.LVL42:
 942:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 687              		.loc 1 942 9 view .LVU157
 942:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 688              		.loc 1 942 25 is_stmt 0 view .LVU158
 689 0082 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 942:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 690              		.loc 1 942 11 view .LVU159
 691 0086 002B     		cmp	r3, #0
 692 0088 D3D0     		beq	.L39
 948:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 693              		.loc 1 948 15 is_stmt 1 view .LVU160
 948:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 694              		.loc 1 948 17 is_stmt 0 view .LVU161
 695 008a 012B     		cmp	r3, #1
 696 008c 16D0     		beq	.L40
 954:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 697              		.loc 1 954 15 is_stmt 1 view .LVU162
 954:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 698              		.loc 1 954 17 is_stmt 0 view .LVU163
 699 008e 022B     		cmp	r3, #2
 700 0090 27D0     		beq	.L41
 960:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
ARM GAS  /tmp/ccNe93V8.s 			page 32


 701              		.loc 1 960 15 is_stmt 1 view .LVU164
 960:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 702              		.loc 1 960 17 is_stmt 0 view .LVU165
 703 0092 032B     		cmp	r3, #3
 704 0094 DFD1     		bne	.L34
 961:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Emergency Stop!");
 705              		.loc 1 961 9 is_stmt 1 view .LVU166
 706 0096 0022     		movs	r2, #0
 707 0098 1146     		mov	r1, r2
 708 009a 1046     		mov	r0, r2
 709 009c FFF7FEFF 		bl	I2C_LCD_SetCursor
 710              	.LVL43:
 962:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 711              		.loc 1 962 9 view .LVU167
 712 00a0 1E49     		ldr	r1, .L42+20
 713 00a2 0020     		movs	r0, #0
 714 00a4 FFF7FEFF 		bl	I2C_LCD_WriteString
 715              	.LVL44:
 963:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Reset Button");
 716              		.loc 1 963 9 view .LVU168
 717 00a8 0122     		movs	r2, #1
 718 00aa 0021     		movs	r1, #0
 719 00ac 0846     		mov	r0, r1
 720 00ae FFF7FEFF 		bl	I2C_LCD_SetCursor
 721              	.LVL45:
 964:Core/Src/main.c **** 
 722              		.loc 1 964 9 view .LVU169
 723 00b2 1B49     		ldr	r1, .L42+24
 724 00b4 0020     		movs	r0, #0
 725 00b6 FFF7FEFF 		bl	I2C_LCD_WriteString
 726              	.LVL46:
 727 00ba CCE7     		b	.L34
 728              	.L40:
 949:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Ready");
 729              		.loc 1 949 9 view .LVU170
 730 00bc 0022     		movs	r2, #0
 731 00be 1146     		mov	r1, r2
 732 00c0 1046     		mov	r0, r2
 733 00c2 FFF7FEFF 		bl	I2C_LCD_SetCursor
 734              	.LVL47:
 950:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 735              		.loc 1 950 9 view .LVU171
 736 00c6 1749     		ldr	r1, .L42+28
 737 00c8 0020     		movs	r0, #0
 738 00ca FFF7FEFF 		bl	I2C_LCD_WriteString
 739              	.LVL48:
 951:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Press Gripper");
 740              		.loc 1 951 9 view .LVU172
 741 00ce 0122     		movs	r2, #1
 742 00d0 0021     		movs	r1, #0
 743 00d2 0846     		mov	r0, r1
 744 00d4 FFF7FEFF 		bl	I2C_LCD_SetCursor
 745              	.LVL49:
 952:Core/Src/main.c **** 
 746              		.loc 1 952 9 view .LVU173
 747 00d8 1349     		ldr	r1, .L42+32
 748 00da 0020     		movs	r0, #0
ARM GAS  /tmp/ccNe93V8.s 			page 33


 749 00dc FFF7FEFF 		bl	I2C_LCD_WriteString
 750              	.LVL50:
 751 00e0 B9E7     		b	.L34
 752              	.L41:
 955:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "Running");
 753              		.loc 1 955 9 view .LVU174
 754 00e2 0022     		movs	r2, #0
 755 00e4 1146     		mov	r1, r2
 756 00e6 1046     		mov	r0, r2
 757 00e8 FFF7FEFF 		bl	I2C_LCD_SetCursor
 758              	.LVL51:
 956:Core/Src/main.c ****         I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 759              		.loc 1 956 9 view .LVU175
 760 00ec 0F49     		ldr	r1, .L42+36
 761 00ee 0020     		movs	r0, #0
 762 00f0 FFF7FEFF 		bl	I2C_LCD_WriteString
 763              	.LVL52:
 957:Core/Src/main.c ****         I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 764              		.loc 1 957 9 view .LVU176
 765 00f4 0122     		movs	r2, #1
 766 00f6 0021     		movs	r1, #0
 767 00f8 0846     		mov	r0, r1
 768 00fa FFF7FEFF 		bl	I2C_LCD_SetCursor
 769              	.LVL53:
 958:Core/Src/main.c **** 
 770              		.loc 1 958 9 view .LVU177
 771 00fe 0349     		ldr	r1, .L42+4
 772 0100 0020     		movs	r0, #0
 773 0102 FFF7FEFF 		bl	I2C_LCD_WriteString
 774              	.LVL54:
 775 0106 A6E7     		b	.L34
 776              	.L43:
 777              		.align	2
 778              	.L42:
 779 0108 00000000 		.word	.LC16
 780 010c 08000000 		.word	.LC17
 781 0110 10000000 		.word	.LC18
 782 0114 20000000 		.word	.LC19
 783 0118 00000000 		.word	.LANCHOR1
 784 011c 4C000000 		.word	.LC23
 785 0120 5C000000 		.word	.LC24
 786 0124 2C000000 		.word	.LC20
 787 0128 34000000 		.word	.LC21
 788 012c 44000000 		.word	.LC22
 789              		.cfi_endproc
 790              	.LFE263:
 792              		.section	.text.MiniBotInit,"ax",%progbits
 793              		.align	1
 794              		.global	MiniBotInit
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 798              		.fpu fpv4-sp-d16
 800              	MiniBotInit:
 801              	.LVL55:
 802              	.LFB251:
 597:Core/Src/main.c **** 	// Configure Each of the joints
ARM GAS  /tmp/ccNe93V8.s 			page 34


 803              		.loc 1 597 44 view -0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 0, uses_anonymous_args = 0
 597:Core/Src/main.c **** 	// Configure Each of the joints
 807              		.loc 1 597 44 is_stmt 0 view .LVU179
 808 0000 00B5     		push	{lr}
 809              		.cfi_def_cfa_offset 4
 810              		.cfi_offset 14, -4
 600:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 811              		.loc 1 600 4 is_stmt 1 view .LVU180
 600:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 812              		.loc 1 600 25 is_stmt 0 view .LVU181
 813 0002 0023     		movs	r3, #0
 814 0004 0370     		strb	r3, [r0]
 601:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 815              		.loc 1 601 4 is_stmt 1 view .LVU182
 601:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 816              		.loc 1 601 25 is_stmt 0 view .LVU183
 817 0006 4FF44872 		mov	r2, #800
 818 000a 4260     		str	r2, [r0, #4]
 602:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 819              		.loc 1 602 4 is_stmt 1 view .LVU184
 602:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 820              		.loc 1 602 25 is_stmt 0 view .LVU185
 821 000c 40F64851 		movw	r1, #3400
 822 0010 8160     		str	r1, [r0, #8]
 603:Core/Src/main.c **** 
 823              		.loc 1 603 4 is_stmt 1 view .LVU186
 603:Core/Src/main.c **** 
 824              		.loc 1 603 33 is_stmt 0 view .LVU187
 825 0012 0373     		strb	r3, [r0, #12]
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 826              		.loc 1 605 4 is_stmt 1 view .LVU188
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 827              		.loc 1 605 29 is_stmt 0 view .LVU189
 828 0014 4FF0010C 		mov	ip, #1
 829 0018 80F810C0 		strb	ip, [r0, #16]
 606:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 830              		.loc 1 606 4 is_stmt 1 view .LVU190
 606:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 831              		.loc 1 606 29 is_stmt 0 view .LVU191
 832 001c 4FF41672 		mov	r2, #600
 833 0020 4261     		str	r2, [r0, #20]
 607:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 834              		.loc 1 607 4 is_stmt 1 view .LVU192
 607:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 835              		.loc 1 607 29 is_stmt 0 view .LVU193
 836 0022 8161     		str	r1, [r0, #24]
 608:Core/Src/main.c **** 
 837              		.loc 1 608 4 is_stmt 1 view .LVU194
 608:Core/Src/main.c **** 
 838              		.loc 1 608 37 is_stmt 0 view .LVU195
 839 0024 0377     		strb	r3, [r0, #28]
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 840              		.loc 1 610 4 is_stmt 1 view .LVU196
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
ARM GAS  /tmp/ccNe93V8.s 			page 35


 841              		.loc 1 610 26 is_stmt 0 view .LVU197
 842 0026 4FF0020E 		mov	lr, #2
 843 002a 80F820E0 		strb	lr, [r0, #32]
 611:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 844              		.loc 1 611 4 is_stmt 1 view .LVU198
 611:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 845              		.loc 1 611 26 is_stmt 0 view .LVU199
 846 002e 4262     		str	r2, [r0, #36]
 612:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 847              		.loc 1 612 4 is_stmt 1 view .LVU200
 612:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 848              		.loc 1 612 26 is_stmt 0 view .LVU201
 849 0030 8162     		str	r1, [r0, #40]
 613:Core/Src/main.c **** 
 850              		.loc 1 613 4 is_stmt 1 view .LVU202
 613:Core/Src/main.c **** 
 851              		.loc 1 613 34 is_stmt 0 view .LVU203
 852 0032 80F82C30 		strb	r3, [r0, #44]
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 853              		.loc 1 615 4 is_stmt 1 view .LVU204
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 854              		.loc 1 615 26 is_stmt 0 view .LVU205
 855 0036 0323     		movs	r3, #3
 856 0038 80F83030 		strb	r3, [r0, #48]
 616:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 857              		.loc 1 616 4 is_stmt 1 view .LVU206
 616:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 858              		.loc 1 616 26 is_stmt 0 view .LVU207
 859 003c 4263     		str	r2, [r0, #52]
 617:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 860              		.loc 1 617 4 is_stmt 1 view .LVU208
 617:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 861              		.loc 1 617 26 is_stmt 0 view .LVU209
 862 003e 4FF44863 		mov	r3, #3200
 863 0042 8363     		str	r3, [r0, #56]
 618:Core/Src/main.c **** 
 864              		.loc 1 618 4 is_stmt 1 view .LVU210
 618:Core/Src/main.c **** 
 865              		.loc 1 618 34 is_stmt 0 view .LVU211
 866 0044 80F83CC0 		strb	ip, [r0, #60]
 620:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 867              		.loc 1 620 4 is_stmt 1 view .LVU212
 620:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 868              		.loc 1 620 27 is_stmt 0 view .LVU213
 869 0048 034B     		ldr	r3, .L46
 870 004a 0364     		str	r3, [r0, #64]
 621:Core/Src/main.c **** }
 871              		.loc 1 621 4 is_stmt 1 view .LVU214
 621:Core/Src/main.c **** }
 872              		.loc 1 621 30 is_stmt 0 view .LVU215
 873 004c 4FF40073 		mov	r3, #512
 874 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 622:Core/Src/main.c **** 
 875              		.loc 1 622 1 view .LVU216
 876 0054 5DF804FB 		ldr	pc, [sp], #4
 877              	.L47:
 878              		.align	2
ARM GAS  /tmp/ccNe93V8.s 			page 36


 879              	.L46:
 880 0058 00000240 		.word	1073872896
 881              		.cfi_endproc
 882              	.LFE251:
 884              		.section	.text.ServoDriverInit,"ax",%progbits
 885              		.align	1
 886              		.global	ServoDriverInit
 887              		.syntax unified
 888              		.thumb
 889              		.thumb_func
 890              		.fpu fpv4-sp-d16
 892              	ServoDriverInit:
 893              	.LVL56:
 894              	.LFB253:
 654:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 895              		.loc 1 654 48 is_stmt 1 view -0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 654:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 899              		.loc 1 654 48 is_stmt 0 view .LVU218
 900 0000 10B5     		push	{r4, lr}
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 4, -8
 903              		.cfi_offset 14, -4
 904 0002 0446     		mov	r4, r0
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 905              		.loc 1 655 3 is_stmt 1 view .LVU219
 906 0004 1648     		ldr	r0, .L50
 907              	.LVL57:
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 908              		.loc 1 655 3 is_stmt 0 view .LVU220
 909 0006 FFF7FEFF 		bl	PCA9685_Init
 910              	.LVL58:
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 911              		.loc 1 656 3 is_stmt 1 view .LVU221
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 912              		.loc 1 656 62 is_stmt 0 view .LVU222
 913 000a E388     		ldrh	r3, [r4, #6]
 914 000c 00EE103A 		vmov	s0, r3	@ int
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 915              		.loc 1 656 3 view .LVU223
 916 0010 B8EE400A 		vcvt.f32.u32	s0, s0
 917 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 918 0016 FFF7FEFF 		bl	PCA9685_SetServoAngle
 919              	.LVL59:
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 920              		.loc 1 657 3 is_stmt 1 view .LVU224
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 921              		.loc 1 657 70 is_stmt 0 view .LVU225
 922 001a E389     		ldrh	r3, [r4, #14]
 923 001c 00EE103A 		vmov	s0, r3	@ int
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 924              		.loc 1 657 3 view .LVU226
 925 0020 B8EE400A 		vcvt.f32.u32	s0, s0
 926 0024 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 927 0026 FFF7FEFF 		bl	PCA9685_SetServoAngle
ARM GAS  /tmp/ccNe93V8.s 			page 37


 928              	.LVL60:
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 929              		.loc 1 658 3 is_stmt 1 view .LVU227
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 930              		.loc 1 658 64 is_stmt 0 view .LVU228
 931 002a E38A     		ldrh	r3, [r4, #22]
 932 002c 00EE103A 		vmov	s0, r3	@ int
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 933              		.loc 1 658 3 view .LVU229
 934 0030 B8EE400A 		vcvt.f32.u32	s0, s0
 935 0034 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 936 0036 FFF7FEFF 		bl	PCA9685_SetServoAngle
 937              	.LVL61:
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 938              		.loc 1 659 3 is_stmt 1 view .LVU230
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 939              		.loc 1 659 64 is_stmt 0 view .LVU231
 940 003a E38B     		ldrh	r3, [r4, #30]
 941 003c 00EE103A 		vmov	s0, r3	@ int
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 942              		.loc 1 659 3 view .LVU232
 943 0040 B8EE400A 		vcvt.f32.u32	s0, s0
 944 0044 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 945 0046 FFF7FEFF 		bl	PCA9685_SetServoAngle
 946              	.LVL62:
 660:Core/Src/main.c **** }
 947              		.loc 1 660 3 is_stmt 1 view .LVU233
 660:Core/Src/main.c **** }
 948              		.loc 1 660 68 is_stmt 0 view .LVU234
 949 004a E38C     		ldrh	r3, [r4, #38]
 950 004c 00EE103A 		vmov	s0, r3	@ int
 660:Core/Src/main.c **** }
 951              		.loc 1 660 3 view .LVU235
 952 0050 B8EE400A 		vcvt.f32.u32	s0, s0
 953 0054 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 954 0058 FFF7FEFF 		bl	PCA9685_SetServoAngle
 955              	.LVL63:
 661:Core/Src/main.c **** 
 956              		.loc 1 661 1 view .LVU236
 957 005c 10BD     		pop	{r4, pc}
 958              	.LVL64:
 959              	.L51:
 661:Core/Src/main.c **** 
 960              		.loc 1 661 1 view .LVU237
 961 005e 00BF     		.align	2
 962              	.L50:
 963 0060 00000000 		.word	.LANCHOR7
 964              		.cfi_endproc
 965              	.LFE253:
 967              		.section	.text.MegaBotInit,"ax",%progbits
 968              		.align	1
 969              		.global	MegaBotInit
 970              		.syntax unified
 971              		.thumb
 972              		.thumb_func
 973              		.fpu fpv4-sp-d16
 975              	MegaBotInit:
ARM GAS  /tmp/ccNe93V8.s 			page 38


 976              	.LVL65:
 977              	.LFB252:
 624:Core/Src/main.c ****   // Configure Each of the joints
 978              		.loc 1 624 44 is_stmt 1 view -0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 624:Core/Src/main.c ****   // Configure Each of the joints
 982              		.loc 1 624 44 is_stmt 0 view .LVU239
 983 0000 08B5     		push	{r3, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 3, -8
 986              		.cfi_offset 14, -4
 626:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 987              		.loc 1 626 3 is_stmt 1 view .LVU240
 626:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 988              		.loc 1 626 26 is_stmt 0 view .LVU241
 989 0002 0022     		movs	r2, #0
 990 0004 0270     		strb	r2, [r0]
 627:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 991              		.loc 1 627 3 is_stmt 1 view .LVU242
 627:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 992              		.loc 1 627 26 is_stmt 0 view .LVU243
 993 0006 4280     		strh	r2, [r0, #2]	@ movhi
 628:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 994              		.loc 1 628 3 is_stmt 1 view .LVU244
 628:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 995              		.loc 1 628 26 is_stmt 0 view .LVU245
 996 0008 B421     		movs	r1, #180
 997 000a 8180     		strh	r1, [r0, #4]	@ movhi
 629:Core/Src/main.c **** 
 998              		.loc 1 629 3 is_stmt 1 view .LVU246
 629:Core/Src/main.c **** 
 999              		.loc 1 629 32 is_stmt 0 view .LVU247
 1000 000c 4FF05A0C 		mov	ip, #90
 1001 0010 A0F806C0 		strh	ip, [r0, #6]	@ movhi
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 1002              		.loc 1 631 3 is_stmt 1 view .LVU248
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 1003              		.loc 1 631 30 is_stmt 0 view .LVU249
 1004 0014 4FF0010E 		mov	lr, #1
 1005 0018 80F808E0 		strb	lr, [r0, #8]
 632:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 1006              		.loc 1 632 3 is_stmt 1 view .LVU250
 632:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 1007              		.loc 1 632 30 is_stmt 0 view .LVU251
 1008 001c 4281     		strh	r2, [r0, #10]	@ movhi
 633:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 1009              		.loc 1 633 3 is_stmt 1 view .LVU252
 633:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 1010              		.loc 1 633 30 is_stmt 0 view .LVU253
 1011 001e 8181     		strh	r1, [r0, #12]	@ movhi
 634:Core/Src/main.c **** 
 1012              		.loc 1 634 3 is_stmt 1 view .LVU254
 634:Core/Src/main.c **** 
 1013              		.loc 1 634 36 is_stmt 0 view .LVU255
 1014 0020 C281     		strh	r2, [r0, #14]	@ movhi
ARM GAS  /tmp/ccNe93V8.s 			page 39


 636:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 1015              		.loc 1 636 3 is_stmt 1 view .LVU256
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 1016              		.loc 1 636 27 is_stmt 0 view .LVU257
 1017 0022 4FF0020E 		mov	lr, #2
 1018 0026 80F810E0 		strb	lr, [r0, #16]
 637:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 1019              		.loc 1 637 3 is_stmt 1 view .LVU258
 637:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 1020              		.loc 1 637 27 is_stmt 0 view .LVU259
 1021 002a 4FF0320E 		mov	lr, #50
 1022 002e A0F812E0 		strh	lr, [r0, #18]	@ movhi
 638:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 1023              		.loc 1 638 3 is_stmt 1 view .LVU260
 638:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 1024              		.loc 1 638 27 is_stmt 0 view .LVU261
 1025 0032 8182     		strh	r1, [r0, #20]	@ movhi
 639:Core/Src/main.c **** 
 1026              		.loc 1 639 3 is_stmt 1 view .LVU262
 639:Core/Src/main.c **** 
 1027              		.loc 1 639 33 is_stmt 0 view .LVU263
 1028 0034 C182     		strh	r1, [r0, #22]	@ movhi
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 1029              		.loc 1 641 3 is_stmt 1 view .LVU264
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 1030              		.loc 1 641 27 is_stmt 0 view .LVU265
 1031 0036 4FF0030E 		mov	lr, #3
 1032 003a 80F818E0 		strb	lr, [r0, #24]
 642:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 1033              		.loc 1 642 3 is_stmt 1 view .LVU266
 642:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 1034              		.loc 1 642 27 is_stmt 0 view .LVU267
 1035 003e 4283     		strh	r2, [r0, #26]	@ movhi
 643:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 1036              		.loc 1 643 3 is_stmt 1 view .LVU268
 643:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 1037              		.loc 1 643 27 is_stmt 0 view .LVU269
 1038 0040 8183     		strh	r1, [r0, #28]	@ movhi
 644:Core/Src/main.c **** 
 1039              		.loc 1 644 3 is_stmt 1 view .LVU270
 644:Core/Src/main.c **** 
 1040              		.loc 1 644 33 is_stmt 0 view .LVU271
 1041 0042 A0F81EC0 		strh	ip, [r0, #30]	@ movhi
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 1042              		.loc 1 646 3 is_stmt 1 view .LVU272
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 1043              		.loc 1 646 29 is_stmt 0 view .LVU273
 1044 0046 0421     		movs	r1, #4
 1045 0048 80F82010 		strb	r1, [r0, #32]
 647:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 1046              		.loc 1 647 3 is_stmt 1 view .LVU274
 647:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 1047              		.loc 1 647 29 is_stmt 0 view .LVU275
 1048 004c 4284     		strh	r2, [r0, #34]	@ movhi
 648:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 1049              		.loc 1 648 3 is_stmt 1 view .LVU276
 648:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
ARM GAS  /tmp/ccNe93V8.s 			page 40


 1050              		.loc 1 648 29 is_stmt 0 view .LVU277
 1051 004e 4621     		movs	r1, #70
 1052 0050 8184     		strh	r1, [r0, #36]	@ movhi
 649:Core/Src/main.c **** 
 1053              		.loc 1 649 3 is_stmt 1 view .LVU278
 649:Core/Src/main.c **** 
 1054              		.loc 1 649 35 is_stmt 0 view .LVU279
 1055 0052 C284     		strh	r2, [r0, #38]	@ movhi
 651:Core/Src/main.c **** }
 1056              		.loc 1 651 3 is_stmt 1 view .LVU280
 1057 0054 FFF7FEFF 		bl	ServoDriverInit
 1058              	.LVL66:
 652:Core/Src/main.c **** 
 1059              		.loc 1 652 1 is_stmt 0 view .LVU281
 1060 0058 08BD     		pop	{r3, pc}
 1061              		.cfi_endproc
 1062              	.LFE252:
 1064              		.section	.text.QPotDataUpdate,"ax",%progbits
 1065              		.align	1
 1066              		.global	QPotDataUpdate
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1070              		.fpu fpv4-sp-d16
 1072              	QPotDataUpdate:
 1073              	.LVL67:
 1074              	.LFB254:
 664:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 1075              		.loc 1 664 111 is_stmt 1 view -0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              		@ link register save eliminated.
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1080              		.loc 1 665 3 view .LVU283
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1081              		.loc 1 665 20 is_stmt 0 view .LVU284
 1082 0000 1368     		ldr	r3, [r2]
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1083              		.loc 1 665 30 view .LVU285
 1084 0002 0A33     		adds	r3, r3, #10
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1085              		.loc 1 665 5 view .LVU286
 1086 0004 8342     		cmp	r3, r0
 1087 0006 03D3     		bcc	.L55
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1088              		.loc 1 665 52 discriminator 1 view .LVU287
 1089 0008 1368     		ldr	r3, [r2]
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1090              		.loc 1 665 62 discriminator 1 view .LVU288
 1091 000a 0A3B     		subs	r3, r3, #10
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 1092              		.loc 1 665 35 discriminator 1 view .LVU289
 1093 000c 8342     		cmp	r3, r0
 1094 000e 0CD9     		bls	.L54
 1095              	.L55:
 666:Core/Src/main.c ****       *QPotData = Joint->PotMax;
ARM GAS  /tmp/ccNe93V8.s 			page 41


 1096              		.loc 1 666 5 is_stmt 1 view .LVU290
 666:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1097              		.loc 1 666 27 is_stmt 0 view .LVU291
 1098 0010 8B68     		ldr	r3, [r1, #8]
 666:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 1099              		.loc 1 666 7 view .LVU292
 1100 0012 8342     		cmp	r3, r0
 1101 0014 0AD2     		bcs	.L57
 667:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1102              		.loc 1 667 7 is_stmt 1 view .LVU293
 667:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1103              		.loc 1 667 24 is_stmt 0 view .LVU294
 1104 0016 8B68     		ldr	r3, [r1, #8]
 667:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 1105              		.loc 1 667 17 view .LVU295
 1106 0018 1360     		str	r3, [r2]
 1107              	.L58:
 673:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1108              		.loc 1 673 5 is_stmt 1 view .LVU296
 673:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1109              		.loc 1 673 13 is_stmt 0 view .LVU297
 1110 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 673:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 1111              		.loc 1 673 7 view .LVU298
 1112 001c 2BB1     		cbz	r3, .L54
 674:Core/Src/main.c ****     }
 1113              		.loc 1 674 7 is_stmt 1 view .LVU299
 674:Core/Src/main.c ****     }
 1114              		.loc 1 674 24 is_stmt 0 view .LVU300
 1115 001e 8B68     		ldr	r3, [r1, #8]
 674:Core/Src/main.c ****     }
 1116              		.loc 1 674 35 view .LVU301
 1117 0020 1068     		ldr	r0, [r2]
 1118              	.LVL68:
 674:Core/Src/main.c ****     }
 1119              		.loc 1 674 33 view .LVU302
 1120 0022 1B1A     		subs	r3, r3, r0
 674:Core/Src/main.c ****     }
 1121              		.loc 1 674 52 view .LVU303
 1122 0024 4968     		ldr	r1, [r1, #4]
 1123              	.LVL69:
 674:Core/Src/main.c ****     }
 1124              		.loc 1 674 45 view .LVU304
 1125 0026 0B44     		add	r3, r3, r1
 674:Core/Src/main.c ****     }
 1126              		.loc 1 674 17 view .LVU305
 1127 0028 1360     		str	r3, [r2]
 1128              	.L54:
 677:Core/Src/main.c **** 
 1129              		.loc 1 677 1 view .LVU306
 1130 002a 7047     		bx	lr
 1131              	.LVL70:
 1132              	.L57:
 668:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1133              		.loc 1 668 11 is_stmt 1 view .LVU307
 668:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1134              		.loc 1 668 33 is_stmt 0 view .LVU308
ARM GAS  /tmp/ccNe93V8.s 			page 42


 1135 002c 4B68     		ldr	r3, [r1, #4]
 668:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 1136              		.loc 1 668 13 view .LVU309
 1137 002e 8342     		cmp	r3, r0
 1138 0030 02D9     		bls	.L59
 669:Core/Src/main.c ****     }else{
 1139              		.loc 1 669 7 is_stmt 1 view .LVU310
 669:Core/Src/main.c ****     }else{
 1140              		.loc 1 669 24 is_stmt 0 view .LVU311
 1141 0032 4B68     		ldr	r3, [r1, #4]
 669:Core/Src/main.c ****     }else{
 1142              		.loc 1 669 17 view .LVU312
 1143 0034 1360     		str	r3, [r2]
 1144 0036 F0E7     		b	.L58
 1145              	.L59:
 671:Core/Src/main.c ****     }
 1146              		.loc 1 671 7 is_stmt 1 view .LVU313
 671:Core/Src/main.c ****     }
 1147              		.loc 1 671 17 is_stmt 0 view .LVU314
 1148 0038 1060     		str	r0, [r2]
 1149 003a EEE7     		b	.L58
 1150              		.cfi_endproc
 1151              	.LFE254:
 1153              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 1154              		.align	1
 1155              		.global	MiniBotInputsEntry
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1159              		.fpu fpv4-sp-d16
 1161              	MiniBotInputsEntry:
 1162              	.LVL71:
 1163              	.LFB259:
 760:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1164              		.loc 1 760 1 is_stmt 1 view -0
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 72
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 760:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 1168              		.loc 1 760 1 is_stmt 0 view .LVU316
 1169 0000 30B5     		push	{r4, r5, lr}
 1170              		.cfi_def_cfa_offset 12
 1171              		.cfi_offset 4, -12
 1172              		.cfi_offset 5, -8
 1173              		.cfi_offset 14, -4
 1174 0002 93B0     		sub	sp, sp, #76
 1175              		.cfi_def_cfa_offset 88
 763:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 1176              		.loc 1 763 2 is_stmt 1 view .LVU317
 764:Core/Src/main.c **** 
 1177              		.loc 1 764 2 view .LVU318
 1178 0004 6846     		mov	r0, sp
 1179              	.LVL72:
 764:Core/Src/main.c **** 
 1180              		.loc 1 764 2 is_stmt 0 view .LVU319
 1181 0006 FFF7FEFF 		bl	MiniBotInit
 1182              	.LVL73:
ARM GAS  /tmp/ccNe93V8.s 			page 43


 766:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 1183              		.loc 1 766 3 is_stmt 1 view .LVU320
 766:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 1184              		.loc 1 766 20 is_stmt 0 view .LVU321
 1185 000a 2D4B     		ldr	r3, .L66
 1186 000c 029A     		ldr	r2, [sp, #8]
 1187 000e 9A60     		str	r2, [r3, #8]
 767:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1188              		.loc 1 767 3 is_stmt 1 view .LVU322
 767:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1189              		.loc 1 767 34 is_stmt 0 view .LVU323
 1190 0010 019A     		ldr	r2, [sp, #4]
 767:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 1191              		.loc 1 767 20 view .LVU324
 1192 0012 5A60     		str	r2, [r3, #4]
 768:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1193              		.loc 1 768 3 is_stmt 1 view .LVU325
 768:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1194              		.loc 1 768 42 is_stmt 0 view .LVU326
 1195 0014 069A     		ldr	r2, [sp, #24]
 768:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1196              		.loc 1 768 24 view .LVU327
 1197 0016 5A61     		str	r2, [r3, #20]
 769:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1198              		.loc 1 769 3 is_stmt 1 view .LVU328
 769:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1199              		.loc 1 769 42 is_stmt 0 view .LVU329
 1200 0018 059A     		ldr	r2, [sp, #20]
 769:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1201              		.loc 1 769 24 view .LVU330
 1202 001a 1A61     		str	r2, [r3, #16]
 770:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1203              		.loc 1 770 3 is_stmt 1 view .LVU331
 770:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1204              		.loc 1 770 36 is_stmt 0 view .LVU332
 1205 001c 0A9A     		ldr	r2, [sp, #40]
 770:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1206              		.loc 1 770 21 view .LVU333
 1207 001e 1A62     		str	r2, [r3, #32]
 771:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1208              		.loc 1 771 3 is_stmt 1 view .LVU334
 771:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1209              		.loc 1 771 36 is_stmt 0 view .LVU335
 1210 0020 099A     		ldr	r2, [sp, #36]
 771:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1211              		.loc 1 771 21 view .LVU336
 1212 0022 DA61     		str	r2, [r3, #28]
 772:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1213              		.loc 1 772 3 is_stmt 1 view .LVU337
 772:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1214              		.loc 1 772 36 is_stmt 0 view .LVU338
 1215 0024 0E9A     		ldr	r2, [sp, #56]
 772:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1216              		.loc 1 772 21 view .LVU339
 1217 0026 DA62     		str	r2, [r3, #44]
 773:Core/Src/main.c ****   
 1218              		.loc 1 773 3 is_stmt 1 view .LVU340
ARM GAS  /tmp/ccNe93V8.s 			page 44


 773:Core/Src/main.c ****   
 1219              		.loc 1 773 36 is_stmt 0 view .LVU341
 1220 0028 0D9A     		ldr	r2, [sp, #52]
 773:Core/Src/main.c ****   
 1221              		.loc 1 773 21 view .LVU342
 1222 002a 9A62     		str	r2, [r3, #40]
 1223 002c 45E0     		b	.L64
 1224              	.LVL74:
 1225              	.L62:
 1226              	.LBB8:
 780:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 1227              		.loc 1 780 7 is_stmt 1 discriminator 3 view .LVU343
 1228 002e 254D     		ldr	r5, .L66+4
 1229 0030 2846     		mov	r0, r5
 1230 0032 FFF7FEFF 		bl	HAL_ADC_Start
 1231              	.LVL75:
 781:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 1232              		.loc 1 781 7 discriminator 3 view .LVU344
 1233 0036 0121     		movs	r1, #1
 1234 0038 2846     		mov	r0, r5
 1235 003a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1236              	.LVL76:
 782:Core/Src/main.c ****     }
 1237              		.loc 1 782 7 discriminator 3 view .LVU345
 782:Core/Src/main.c ****     }
 1238              		.loc 1 782 24 is_stmt 0 discriminator 3 view .LVU346
 1239 003e 2846     		mov	r0, r5
 1240 0040 FFF7FEFF 		bl	HAL_ADC_GetValue
 1241              	.LVL77:
 782:Core/Src/main.c ****     }
 1242              		.loc 1 782 22 discriminator 3 view .LVU347
 1243 0044 204B     		ldr	r3, .L66+8
 1244 0046 43F82400 		str	r0, [r3, r4, lsl #2]
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1245              		.loc 1 779 27 is_stmt 1 discriminator 3 view .LVU348
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1246              		.loc 1 779 28 is_stmt 0 discriminator 3 view .LVU349
 1247 004a 0134     		adds	r4, r4, #1
 1248              	.LVL78:
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1249              		.loc 1 779 28 discriminator 3 view .LVU350
 1250 004c E4B2     		uxtb	r4, r4
 1251              	.LVL79:
 1252              	.L61:
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1253              		.loc 1 779 22 is_stmt 1 discriminator 1 view .LVU351
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1254              		.loc 1 779 5 is_stmt 0 discriminator 1 view .LVU352
 1255 004e 032C     		cmp	r4, #3
 1256 0050 EDD9     		bls	.L62
 1257              	.LBE8:
 784:Core/Src/main.c **** 
 1258              		.loc 1 784 5 is_stmt 1 view .LVU353
 1259 0052 1C48     		ldr	r0, .L66+4
 1260 0054 FFF7FEFF 		bl	HAL_ADC_Stop
 1261              	.LVL80:
 786:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
ARM GAS  /tmp/ccNe93V8.s 			page 45


 1262              		.loc 1 786 5 view .LVU354
 1263 0058 194C     		ldr	r4, .L66
 1264              	.LVL81:
 786:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1265              		.loc 1 786 5 is_stmt 0 view .LVU355
 1266 005a 1B4D     		ldr	r5, .L66+8
 1267 005c 2246     		mov	r2, r4
 1268 005e 6946     		mov	r1, sp
 1269 0060 2868     		ldr	r0, [r5]
 1270 0062 FFF7FEFF 		bl	QPotDataUpdate
 1271              	.LVL82:
 787:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 1272              		.loc 1 787 5 is_stmt 1 view .LVU356
 1273 0066 04F10C02 		add	r2, r4, #12
 1274 006a 04A9     		add	r1, sp, #16
 1275 006c 6868     		ldr	r0, [r5, #4]
 1276 006e FFF7FEFF 		bl	QPotDataUpdate
 1277              	.LVL83:
 788:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 1278              		.loc 1 788 5 view .LVU357
 1279 0072 04F11802 		add	r2, r4, #24
 1280 0076 08A9     		add	r1, sp, #32
 1281 0078 A868     		ldr	r0, [r5, #8]
 1282 007a FFF7FEFF 		bl	QPotDataUpdate
 1283              	.LVL84:
 789:Core/Src/main.c **** 
 1284              		.loc 1 789 5 view .LVU358
 1285 007e 04F12402 		add	r2, r4, #36
 1286 0082 0CA9     		add	r1, sp, #48
 1287 0084 E868     		ldr	r0, [r5, #12]
 1288 0086 FFF7FEFF 		bl	QPotDataUpdate
 1289              	.LVL85:
 791:Core/Src/main.c ****     
 1290              		.loc 1 791 5 view .LVU359
 791:Core/Src/main.c ****     
 1291              		.loc 1 791 35 is_stmt 0 view .LVU360
 1292 008a 4FF40071 		mov	r1, #512
 1293 008e 0F48     		ldr	r0, .L66+12
 1294 0090 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1295              	.LVL86:
 791:Core/Src/main.c ****     
 1296              		.loc 1 791 24 view .LVU361
 1297 0094 84F83000 		strb	r0, [r4, #48]
 793:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1298              		.loc 1 793 5 is_stmt 1 view .LVU362
 793:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1299              		.loc 1 793 32 is_stmt 0 view .LVU363
 1300 0098 0D4B     		ldr	r3, .L66+16
 1301 009a 1868     		ldr	r0, [r3]
 793:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1302              		.loc 1 793 7 view .LVU364
 1303 009c 50B1     		cbz	r0, .L63
 794:Core/Src/main.c ****         // failed to post message
 1304              		.loc 1 794 7 is_stmt 1 view .LVU365
 794:Core/Src/main.c ****         // failed to post message
 1305              		.loc 1 794 10 is_stmt 0 view .LVU366
 1306 009e 0023     		movs	r3, #0
ARM GAS  /tmp/ccNe93V8.s 			page 46


 1307 00a0 4FF0FF32 		mov	r2, #-1
 1308 00a4 2146     		mov	r1, r4
 1309 00a6 FFF7FEFF 		bl	xQueueGenericSend
 1310              	.LVL87:
 794:Core/Src/main.c ****         // failed to post message
 1311              		.loc 1 794 9 view .LVU367
 1312 00aa 0128     		cmp	r0, #1
 1313 00ac 02D0     		beq	.L63
 796:Core/Src/main.c ****       }
 1314              		.loc 1 796 9 is_stmt 1 view .LVU368
 796:Core/Src/main.c ****       }
 1315              		.loc 1 796 33 is_stmt 0 view .LVU369
 1316 00ae 094B     		ldr	r3, .L66+20
 1317 00b0 0122     		movs	r2, #1
 1318 00b2 1A70     		strb	r2, [r3]
 1319              	.L63:
 801:Core/Src/main.c **** 	}
 1320              		.loc 1 801 5 is_stmt 1 view .LVU370
 1321 00b4 0120     		movs	r0, #1
 1322 00b6 FFF7FEFF 		bl	osDelay
 1323              	.LVL88:
 777:Core/Src/main.c **** 	{
 1324              		.loc 1 777 7 view .LVU371
 1325              	.L64:
 777:Core/Src/main.c **** 	{
 1326              		.loc 1 777 2 view .LVU372
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1327              		.loc 1 779 5 view .LVU373
 1328              	.LBB9:
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1329              		.loc 1 779 9 view .LVU374
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1330              		.loc 1 779 17 is_stmt 0 view .LVU375
 1331 00ba 0024     		movs	r4, #0
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1332              		.loc 1 779 5 view .LVU376
 1333 00bc C7E7     		b	.L61
 1334              	.L67:
 1335 00be 00BF     		.align	2
 1336              	.L66:
 1337 00c0 00000000 		.word	.LANCHOR8
 1338 00c4 00000000 		.word	.LANCHOR9
 1339 00c8 00000000 		.word	.LANCHOR10
 1340 00cc 00000240 		.word	1073872896
 1341 00d0 00000000 		.word	.LANCHOR4
 1342 00d4 00000000 		.word	.LANCHOR2
 1343              	.LBE9:
 1344              		.cfi_endproc
 1345              	.LFE259:
 1347              		.section	.text.MAP,"ax",%progbits
 1348              		.align	1
 1349              		.global	MAP
 1350              		.syntax unified
 1351              		.thumb
 1352              		.thumb_func
 1353              		.fpu fpv4-sp-d16
 1355              	MAP:
ARM GAS  /tmp/ccNe93V8.s 			page 47


 1356              	.LVL89:
 1357              	.LFB256:
 705:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 1358              		.loc 1 705 1 is_stmt 1 view -0
 1359              		.cfi_startproc
 1360              		@ args = 4, pretend = 0, frame = 0
 1361              		@ frame_needed = 0, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 706:Core/Src/main.c **** }
 1363              		.loc 1 706 5 view .LVU378
 706:Core/Src/main.c **** }
 1364              		.loc 1 706 24 is_stmt 0 view .LVU379
 1365 0000 A0EB010C 		sub	ip, r0, r1
 706:Core/Src/main.c **** }
 1366              		.loc 1 706 51 view .LVU380
 1367 0004 0098     		ldr	r0, [sp]
 1368              	.LVL90:
 706:Core/Src/main.c **** }
 1369              		.loc 1 706 51 view .LVU381
 1370 0006 C01A     		subs	r0, r0, r3
 706:Core/Src/main.c **** }
 1371              		.loc 1 706 37 view .LVU382
 1372 0008 00FB0CFC 		mul	ip, r0, ip
 706:Core/Src/main.c **** }
 1373              		.loc 1 706 79 view .LVU383
 1374 000c 511A     		subs	r1, r2, r1
 1375              	.LVL91:
 706:Core/Src/main.c **** }
 1376              		.loc 1 706 66 view .LVU384
 1377 000e BCFBF1FC 		udiv	ip, ip, r1
 707:Core/Src/main.c **** 
 1378              		.loc 1 707 1 view .LVU385
 1379 0012 0CEB0300 		add	r0, ip, r3
 1380 0016 7047     		bx	lr
 1381              		.cfi_endproc
 1382              	.LFE256:
 1384              		.section	.text.MoveServo,"ax",%progbits
 1385              		.align	1
 1386              		.global	MoveServo
 1387              		.syntax unified
 1388              		.thumb
 1389              		.thumb_func
 1390              		.fpu fpv4-sp-d16
 1392              	MoveServo:
 1393              	.LVL92:
 1394              	.LFB255:
 679:Core/Src/main.c ****   // MAP each of the angles
 1395              		.loc 1 679 75 is_stmt 1 view -0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 679:Core/Src/main.c ****   // MAP each of the angles
 1399              		.loc 1 679 75 is_stmt 0 view .LVU387
 1400 0000 70B5     		push	{r4, r5, r6, lr}
 1401              		.cfi_def_cfa_offset 16
 1402              		.cfi_offset 4, -16
 1403              		.cfi_offset 5, -12
ARM GAS  /tmp/ccNe93V8.s 			page 48


 1404              		.cfi_offset 6, -8
 1405              		.cfi_offset 14, -4
 1406 0002 82B0     		sub	sp, sp, #8
 1407              		.cfi_def_cfa_offset 24
 1408 0004 0446     		mov	r4, r0
 1409 0006 0D46     		mov	r5, r1
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1410              		.loc 1 684 3 is_stmt 1 view .LVU388
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1411              		.loc 1 684 25 is_stmt 0 view .LVU389
 1412 0008 0868     		ldr	r0, [r1]
 1413              	.LVL93:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1414              		.loc 1 684 25 view .LVU390
 1415 000a 4968     		ldr	r1, [r1, #4]
 1416              	.LVL94:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1417              		.loc 1 684 25 view .LVU391
 1418 000c AA68     		ldr	r2, [r5, #8]
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1419              		.loc 1 684 131 view .LVU392
 1420 000e A388     		ldrh	r3, [r4, #4]
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1421              		.loc 1 684 25 view .LVU393
 1422 0010 0093     		str	r3, [sp]
 1423 0012 6388     		ldrh	r3, [r4, #2]
 1424 0014 FFF7FEFF 		bl	MAP
 1425              	.LVL95:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1426              		.loc 1 684 23 view .LVU394
 1427 0018 80B2     		uxth	r0, r0
 1428 001a 2A4E     		ldr	r6, .L73
 1429 001c 3080     		strh	r0, [r6]	@ movhi
 685:Core/Src/main.c ****   // Shoulder
 1430              		.loc 1 685 3 is_stmt 1 view .LVU395
 1431 001e 07EE900A 		vmov	s15, r0	@ int
 1432 0022 B8EE670A 		vcvt.f32.u32	s0, s15
 1433 0026 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1434 0028 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1435              	.LVL96:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1436              		.loc 1 687 3 view .LVU396
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1437              		.loc 1 687 25 is_stmt 0 view .LVU397
 1438 002c E868     		ldr	r0, [r5, #12]
 1439 002e 2969     		ldr	r1, [r5, #16]
 1440 0030 6A69     		ldr	r2, [r5, #20]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1441              		.loc 1 687 151 view .LVU398
 1442 0032 A389     		ldrh	r3, [r4, #12]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1443              		.loc 1 687 25 view .LVU399
 1444 0034 0093     		str	r3, [sp]
 1445 0036 6389     		ldrh	r3, [r4, #10]
 1446 0038 FFF7FEFF 		bl	MAP
 1447              	.LVL97:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
ARM GAS  /tmp/ccNe93V8.s 			page 49


 1448              		.loc 1 687 23 view .LVU400
 1449 003c 80B2     		uxth	r0, r0
 1450 003e 7080     		strh	r0, [r6, #2]	@ movhi
 688:Core/Src/main.c ****   // Elbow
 1451              		.loc 1 688 3 is_stmt 1 view .LVU401
 1452 0040 07EE900A 		vmov	s15, r0	@ int
 1453 0044 B8EE670A 		vcvt.f32.u32	s0, s15
 1454 0048 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 1455 004a FFF7FEFF 		bl	PCA9685_SetServoAngle
 1456              	.LVL98:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1457              		.loc 1 690 3 view .LVU402
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1458              		.loc 1 690 25 is_stmt 0 view .LVU403
 1459 004e A869     		ldr	r0, [r5, #24]
 1460 0050 E969     		ldr	r1, [r5, #28]
 1461 0052 2A6A     		ldr	r2, [r5, #32]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1462              		.loc 1 690 136 view .LVU404
 1463 0054 A38A     		ldrh	r3, [r4, #20]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1464              		.loc 1 690 25 view .LVU405
 1465 0056 0093     		str	r3, [sp]
 1466 0058 638A     		ldrh	r3, [r4, #18]
 1467 005a FFF7FEFF 		bl	MAP
 1468              	.LVL99:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1469              		.loc 1 690 23 view .LVU406
 1470 005e 80B2     		uxth	r0, r0
 1471 0060 B080     		strh	r0, [r6, #4]	@ movhi
 691:Core/Src/main.c ****   // Wrist
 1472              		.loc 1 691 3 is_stmt 1 view .LVU407
 1473 0062 07EE900A 		vmov	s15, r0	@ int
 1474 0066 B8EE670A 		vcvt.f32.u32	s0, s15
 1475 006a 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 1476 006c FFF7FEFF 		bl	PCA9685_SetServoAngle
 1477              	.LVL100:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1478              		.loc 1 693 3 view .LVU408
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1479              		.loc 1 693 25 is_stmt 0 view .LVU409
 1480 0070 686A     		ldr	r0, [r5, #36]
 1481 0072 A96A     		ldr	r1, [r5, #40]
 1482 0074 EA6A     		ldr	r2, [r5, #44]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1483              		.loc 1 693 136 view .LVU410
 1484 0076 A38B     		ldrh	r3, [r4, #28]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1485              		.loc 1 693 25 view .LVU411
 1486 0078 0093     		str	r3, [sp]
 1487 007a 638B     		ldrh	r3, [r4, #26]
 1488 007c FFF7FEFF 		bl	MAP
 1489              	.LVL101:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1490              		.loc 1 693 23 view .LVU412
 1491 0080 80B2     		uxth	r0, r0
 1492 0082 F080     		strh	r0, [r6, #6]	@ movhi
ARM GAS  /tmp/ccNe93V8.s 			page 50


 694:Core/Src/main.c ****   // Gripper
 1493              		.loc 1 694 3 is_stmt 1 view .LVU413
 1494 0084 07EE900A 		vmov	s15, r0	@ int
 1495 0088 B8EE670A 		vcvt.f32.u32	s0, s15
 1496 008c 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 1497 008e FFF7FEFF 		bl	PCA9685_SetServoAngle
 1498              	.LVL102:
 696:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1499              		.loc 1 696 3 view .LVU414
 696:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1500              		.loc 1 696 13 is_stmt 0 view .LVU415
 1501 0092 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 696:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1502              		.loc 1 696 5 view .LVU416
 1503 0096 53B1     		cbz	r3, .L70
 697:Core/Src/main.c ****   }else{
 1504              		.loc 1 697 5 is_stmt 1 view .LVU417
 697:Core/Src/main.c ****   }else{
 1505              		.loc 1 697 70 is_stmt 0 view .LVU418
 1506 0098 638C     		ldrh	r3, [r4, #34]
 1507 009a 00EE103A 		vmov	s0, r3	@ int
 697:Core/Src/main.c ****   }else{
 1508              		.loc 1 697 5 view .LVU419
 1509 009e B8EE400A 		vcvt.f32.u32	s0, s0
 1510 00a2 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1511 00a6 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1512              	.LVL103:
 1513              	.L69:
 701:Core/Src/main.c **** 
 1514              		.loc 1 701 1 view .LVU420
 1515 00aa 02B0     		add	sp, sp, #8
 1516              		.cfi_remember_state
 1517              		.cfi_def_cfa_offset 16
 1518              		@ sp needed
 1519 00ac 70BD     		pop	{r4, r5, r6, pc}
 1520              	.LVL104:
 1521              	.L70:
 1522              		.cfi_restore_state
 699:Core/Src/main.c ****   }
 1523              		.loc 1 699 5 is_stmt 1 view .LVU421
 699:Core/Src/main.c ****   }
 1524              		.loc 1 699 70 is_stmt 0 view .LVU422
 1525 00ae A38C     		ldrh	r3, [r4, #36]
 1526 00b0 00EE103A 		vmov	s0, r3	@ int
 699:Core/Src/main.c ****   }
 1527              		.loc 1 699 5 view .LVU423
 1528 00b4 B8EE400A 		vcvt.f32.u32	s0, s0
 1529 00b8 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1530 00bc FFF7FEFF 		bl	PCA9685_SetServoAngle
 1531              	.LVL105:
 701:Core/Src/main.c **** 
 1532              		.loc 1 701 1 view .LVU424
 1533 00c0 F3E7     		b	.L69
 1534              	.L74:
 1535 00c2 00BF     		.align	2
 1536              	.L73:
 1537 00c4 00000000 		.word	.LANCHOR11
ARM GAS  /tmp/ccNe93V8.s 			page 51


 1538              		.cfi_endproc
 1539              	.LFE255:
 1541              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 1542              		.align	1
 1543              		.global	MotorControlTaskEntry
 1544              		.syntax unified
 1545              		.thumb
 1546              		.thumb_func
 1547              		.fpu fpv4-sp-d16
 1549              	MotorControlTaskEntry:
 1550              	.LVL106:
 1551              	.LFB262:
 892:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1552              		.loc 1 892 1 is_stmt 1 view -0
 1553              		.cfi_startproc
 1554              		@ Volatile: function does not return.
 1555              		@ args = 0, pretend = 0, frame = 40
 1556              		@ frame_needed = 0, uses_anonymous_args = 0
 892:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1557              		.loc 1 892 1 is_stmt 0 view .LVU426
 1558 0000 00B5     		push	{lr}
 1559              		.cfi_def_cfa_offset 4
 1560              		.cfi_offset 14, -4
 1561 0002 8BB0     		sub	sp, sp, #44
 1562              		.cfi_def_cfa_offset 48
 895:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 1563              		.loc 1 895 3 is_stmt 1 view .LVU427
 896:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1564              		.loc 1 896 3 view .LVU428
 1565 0004 6846     		mov	r0, sp
 1566              	.LVL107:
 896:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1567              		.loc 1 896 3 is_stmt 0 view .LVU429
 1568 0006 FFF7FEFF 		bl	MegaBotInit
 1569              	.LVL108:
 897:Core/Src/main.c **** 
 1570              		.loc 1 897 3 is_stmt 1 view .LVU430
 1571 000a 6846     		mov	r0, sp
 1572 000c FFF7FEFF 		bl	ServoDriverInit
 1573              	.LVL109:
 1574 0010 06E0     		b	.L77
 1575              	.L79:
 905:Core/Src/main.c ****     }
 1576              		.loc 1 905 7 view .LVU431
 1577 0012 0849     		ldr	r1, .L80
 1578 0014 6846     		mov	r0, sp
 1579 0016 FFF7FEFF 		bl	MoveServo
 1580              	.LVL110:
 1581              	.L76:
 910:Core/Src/main.c ****   }
 1582              		.loc 1 910 5 view .LVU432
 1583 001a 0120     		movs	r0, #1
 1584 001c FFF7FEFF 		bl	osDelay
 1585              	.LVL111:
 901:Core/Src/main.c ****   {
 1586              		.loc 1 901 8 view .LVU433
 1587              	.L77:
ARM GAS  /tmp/ccNe93V8.s 			page 52


 901:Core/Src/main.c ****   {
 1588              		.loc 1 901 3 view .LVU434
 904:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1589              		.loc 1 904 5 view .LVU435
 904:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1590              		.loc 1 904 8 is_stmt 0 view .LVU436
 1591 0020 4FF0FF32 		mov	r2, #-1
 1592 0024 0349     		ldr	r1, .L80
 1593 0026 044B     		ldr	r3, .L80+4
 1594 0028 1868     		ldr	r0, [r3]
 1595 002a FFF7FEFF 		bl	xQueueReceive
 1596              	.LVL112:
 904:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1597              		.loc 1 904 7 view .LVU437
 1598 002e 0128     		cmp	r0, #1
 1599 0030 EFD0     		beq	.L79
 1600 0032 F2E7     		b	.L76
 1601              	.L81:
 1602              		.align	2
 1603              	.L80:
 1604 0034 00000000 		.word	.LANCHOR12
 1605 0038 00000000 		.word	.LANCHOR6
 1606              		.cfi_endproc
 1607              	.LFE262:
 1609              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1610              		.align	1
 1611              		.global	HAL_TIM_PeriodElapsedCallback
 1612              		.syntax unified
 1613              		.thumb
 1614              		.thumb_func
 1615              		.fpu fpv4-sp-d16
 1617              	HAL_TIM_PeriodElapsedCallback:
 1618              	.LVL113:
 1619              	.LFB264:
 972:Core/Src/main.c ****   }
 973:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 974:Core/Src/main.c **** }
 975:Core/Src/main.c **** 
 976:Core/Src/main.c **** /**
 977:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 978:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 979:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 980:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 981:Core/Src/main.c ****   * @param  htim : TIM handle
 982:Core/Src/main.c ****   * @retval None
 983:Core/Src/main.c ****   */
 984:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 985:Core/Src/main.c **** {
 1620              		.loc 1 985 1 is_stmt 1 view -0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624              		.loc 1 985 1 is_stmt 0 view .LVU439
 1625 0000 08B5     		push	{r3, lr}
 1626              		.cfi_def_cfa_offset 8
 1627              		.cfi_offset 3, -8
 1628              		.cfi_offset 14, -4
ARM GAS  /tmp/ccNe93V8.s 			page 53


 986:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 987:Core/Src/main.c **** 
 988:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 989:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1629              		.loc 1 989 3 is_stmt 1 view .LVU440
 1630              		.loc 1 989 11 is_stmt 0 view .LVU441
 1631 0002 0268     		ldr	r2, [r0]
 1632              		.loc 1 989 6 view .LVU442
 1633 0004 034B     		ldr	r3, .L86
 1634 0006 9A42     		cmp	r2, r3
 1635 0008 00D0     		beq	.L85
 1636              	.LVL114:
 1637              	.L82:
 990:Core/Src/main.c ****     HAL_IncTick();
 991:Core/Src/main.c ****   }
 992:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 993:Core/Src/main.c **** 
 994:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 995:Core/Src/main.c **** }
 1638              		.loc 1 995 1 view .LVU443
 1639 000a 08BD     		pop	{r3, pc}
 1640              	.LVL115:
 1641              	.L85:
 990:Core/Src/main.c ****     HAL_IncTick();
 1642              		.loc 1 990 5 is_stmt 1 view .LVU444
 1643 000c FFF7FEFF 		bl	HAL_IncTick
 1644              	.LVL116:
 1645              		.loc 1 995 1 is_stmt 0 view .LVU445
 1646 0010 FBE7     		b	.L82
 1647              	.L87:
 1648 0012 00BF     		.align	2
 1649              	.L86:
 1650 0014 00100040 		.word	1073745920
 1651              		.cfi_endproc
 1652              	.LFE264:
 1654              		.section	.text.Error_Handler,"ax",%progbits
 1655              		.align	1
 1656              		.global	Error_Handler
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu fpv4-sp-d16
 1662              	Error_Handler:
 1663              	.LFB265:
 996:Core/Src/main.c **** 
 997:Core/Src/main.c **** /**
 998:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 999:Core/Src/main.c ****   * @retval None
1000:Core/Src/main.c ****   */
1001:Core/Src/main.c **** void Error_Handler(void)
1002:Core/Src/main.c **** {
 1664              		.loc 1 1002 1 is_stmt 1 view -0
 1665              		.cfi_startproc
 1666              		@ Volatile: function does not return.
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              		@ link register save eliminated.
ARM GAS  /tmp/ccNe93V8.s 			page 54


1003:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
1004:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
1005:Core/Src/main.c ****   __disable_irq();
 1670              		.loc 1 1005 3 view .LVU447
 1671              	.LBB10:
 1672              	.LBI10:
 1673              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
ARM GAS  /tmp/ccNe93V8.s 			page 55


  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccNe93V8.s 			page 56


 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccNe93V8.s 			page 57


 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
ARM GAS  /tmp/ccNe93V8.s 			page 58


 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
ARM GAS  /tmp/ccNe93V8.s 			page 59


 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccNe93V8.s 			page 60


 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccNe93V8.s 			page 61


 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
ARM GAS  /tmp/ccNe93V8.s 			page 62


 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccNe93V8.s 			page 63


 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
ARM GAS  /tmp/ccNe93V8.s 			page 64


 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
ARM GAS  /tmp/ccNe93V8.s 			page 65


 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccNe93V8.s 			page 66


 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
ARM GAS  /tmp/ccNe93V8.s 			page 67


 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccNe93V8.s 			page 68


 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
ARM GAS  /tmp/ccNe93V8.s 			page 69


 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
ARM GAS  /tmp/ccNe93V8.s 			page 70


 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1674              		.loc 2 960 27 view .LVU448
 1675              	.LBB11:
ARM GAS  /tmp/ccNe93V8.s 			page 71


 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1676              		.loc 2 962 3 view .LVU449
 1677              		.syntax unified
 1678              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1679 0000 72B6     		cpsid i
 1680              	@ 0 "" 2
 1681              		.thumb
 1682              		.syntax unified
 1683              	.L89:
 1684              	.LBE11:
 1685              	.LBE10:
1006:Core/Src/main.c ****   while (1)
 1686              		.loc 1 1006 3 discriminator 1 view .LVU450
1007:Core/Src/main.c ****   {
1008:Core/Src/main.c ****   }
 1687              		.loc 1 1008 3 discriminator 1 view .LVU451
1006:Core/Src/main.c ****   while (1)
 1688              		.loc 1 1006 9 discriminator 1 view .LVU452
 1689 0002 FEE7     		b	.L89
 1690              		.cfi_endproc
 1691              	.LFE265:
 1693              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1694              		.align	1
 1695              		.syntax unified
 1696              		.thumb
 1697              		.thumb_func
 1698              		.fpu fpv4-sp-d16
 1700              	MX_ADC1_Init:
 1701              	.LFB246:
 364:Core/Src/main.c **** 
 1702              		.loc 1 364 1 view -0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 16
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 1706 0000 00B5     		push	{lr}
 1707              		.cfi_def_cfa_offset 4
 1708              		.cfi_offset 14, -4
 1709 0002 85B0     		sub	sp, sp, #20
 1710              		.cfi_def_cfa_offset 24
 370:Core/Src/main.c **** 
 1711              		.loc 1 370 3 view .LVU454
 370:Core/Src/main.c **** 
 1712              		.loc 1 370 26 is_stmt 0 view .LVU455
 1713 0004 0023     		movs	r3, #0
 1714 0006 0093     		str	r3, [sp]
 1715 0008 0193     		str	r3, [sp, #4]
 1716 000a 0293     		str	r3, [sp, #8]
 1717 000c 0393     		str	r3, [sp, #12]
 378:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1718              		.loc 1 378 3 is_stmt 1 view .LVU456
 378:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1719              		.loc 1 378 18 is_stmt 0 view .LVU457
 1720 000e 2548     		ldr	r0, .L102
 1721 0010 254A     		ldr	r2, .L102+4
 1722 0012 0260     		str	r2, [r0]
 379:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
ARM GAS  /tmp/ccNe93V8.s 			page 72


 1723              		.loc 1 379 3 is_stmt 1 view .LVU458
 379:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1724              		.loc 1 379 29 is_stmt 0 view .LVU459
 1725 0014 4FF48032 		mov	r2, #65536
 1726 0018 4260     		str	r2, [r0, #4]
 380:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1727              		.loc 1 380 3 is_stmt 1 view .LVU460
 380:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1728              		.loc 1 380 25 is_stmt 0 view .LVU461
 1729 001a 8360     		str	r3, [r0, #8]
 381:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1730              		.loc 1 381 3 is_stmt 1 view .LVU462
 381:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1731              		.loc 1 381 27 is_stmt 0 view .LVU463
 1732 001c 0122     		movs	r2, #1
 1733 001e 0261     		str	r2, [r0, #16]
 382:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1734              		.loc 1 382 3 is_stmt 1 view .LVU464
 382:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1735              		.loc 1 382 33 is_stmt 0 view .LVU465
 1736 0020 0376     		strb	r3, [r0, #24]
 383:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1737              		.loc 1 383 3 is_stmt 1 view .LVU466
 383:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1738              		.loc 1 383 36 is_stmt 0 view .LVU467
 1739 0022 80F82020 		strb	r2, [r0, #32]
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1740              		.loc 1 384 3 is_stmt 1 view .LVU468
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1741              		.loc 1 384 34 is_stmt 0 view .LVU469
 1742 0026 4262     		str	r2, [r0, #36]
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1743              		.loc 1 385 3 is_stmt 1 view .LVU470
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1744              		.loc 1 385 35 is_stmt 0 view .LVU471
 1745 0028 C362     		str	r3, [r0, #44]
 386:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1746              		.loc 1 386 3 is_stmt 1 view .LVU472
 386:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1747              		.loc 1 386 31 is_stmt 0 view .LVU473
 1748 002a 2049     		ldr	r1, .L102+8
 1749 002c 8162     		str	r1, [r0, #40]
 387:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1750              		.loc 1 387 3 is_stmt 1 view .LVU474
 387:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1751              		.loc 1 387 24 is_stmt 0 view .LVU475
 1752 002e C360     		str	r3, [r0, #12]
 388:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1753              		.loc 1 388 3 is_stmt 1 view .LVU476
 388:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1754              		.loc 1 388 30 is_stmt 0 view .LVU477
 1755 0030 0421     		movs	r1, #4
 1756 0032 C161     		str	r1, [r0, #28]
 389:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1757              		.loc 1 389 3 is_stmt 1 view .LVU478
 389:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1758              		.loc 1 389 36 is_stmt 0 view .LVU479
ARM GAS  /tmp/ccNe93V8.s 			page 73


 1759 0034 80F83030 		strb	r3, [r0, #48]
 390:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1760              		.loc 1 390 3 is_stmt 1 view .LVU480
 390:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1761              		.loc 1 390 27 is_stmt 0 view .LVU481
 1762 0038 4261     		str	r2, [r0, #20]
 391:Core/Src/main.c ****   {
 1763              		.loc 1 391 3 is_stmt 1 view .LVU482
 391:Core/Src/main.c ****   {
 1764              		.loc 1 391 7 is_stmt 0 view .LVU483
 1765 003a FFF7FEFF 		bl	HAL_ADC_Init
 1766              	.LVL117:
 391:Core/Src/main.c ****   {
 1767              		.loc 1 391 6 view .LVU484
 1768 003e 38BB     		cbnz	r0, .L97
 398:Core/Src/main.c ****   sConfig.Rank = 1;
 1769              		.loc 1 398 3 is_stmt 1 view .LVU485
 398:Core/Src/main.c ****   sConfig.Rank = 1;
 1770              		.loc 1 398 19 is_stmt 0 view .LVU486
 1771 0040 0023     		movs	r3, #0
 1772 0042 0093     		str	r3, [sp]
 399:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1773              		.loc 1 399 3 is_stmt 1 view .LVU487
 399:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1774              		.loc 1 399 16 is_stmt 0 view .LVU488
 1775 0044 0122     		movs	r2, #1
 1776 0046 0192     		str	r2, [sp, #4]
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1777              		.loc 1 400 3 is_stmt 1 view .LVU489
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1778              		.loc 1 400 24 is_stmt 0 view .LVU490
 1779 0048 0293     		str	r3, [sp, #8]
 401:Core/Src/main.c ****   {
 1780              		.loc 1 401 3 is_stmt 1 view .LVU491
 401:Core/Src/main.c ****   {
 1781              		.loc 1 401 7 is_stmt 0 view .LVU492
 1782 004a 6946     		mov	r1, sp
 1783 004c 1548     		ldr	r0, .L102
 1784 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1785              	.LVL118:
 401:Core/Src/main.c ****   {
 1786              		.loc 1 401 6 view .LVU493
 1787 0052 F8B9     		cbnz	r0, .L98
 408:Core/Src/main.c ****   sConfig.Rank = 2;
 1788              		.loc 1 408 3 is_stmt 1 view .LVU494
 408:Core/Src/main.c ****   sConfig.Rank = 2;
 1789              		.loc 1 408 19 is_stmt 0 view .LVU495
 1790 0054 0123     		movs	r3, #1
 1791 0056 0093     		str	r3, [sp]
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1792              		.loc 1 409 3 is_stmt 1 view .LVU496
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1793              		.loc 1 409 16 is_stmt 0 view .LVU497
 1794 0058 0223     		movs	r3, #2
 1795 005a 0193     		str	r3, [sp, #4]
 410:Core/Src/main.c ****   {
 1796              		.loc 1 410 3 is_stmt 1 view .LVU498
ARM GAS  /tmp/ccNe93V8.s 			page 74


 410:Core/Src/main.c ****   {
 1797              		.loc 1 410 7 is_stmt 0 view .LVU499
 1798 005c 6946     		mov	r1, sp
 1799 005e 1148     		ldr	r0, .L102
 1800 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1801              	.LVL119:
 410:Core/Src/main.c ****   {
 1802              		.loc 1 410 6 view .LVU500
 1803 0064 C0B9     		cbnz	r0, .L99
 417:Core/Src/main.c ****   sConfig.Rank = 3;
 1804              		.loc 1 417 3 is_stmt 1 view .LVU501
 417:Core/Src/main.c ****   sConfig.Rank = 3;
 1805              		.loc 1 417 19 is_stmt 0 view .LVU502
 1806 0066 0423     		movs	r3, #4
 1807 0068 0093     		str	r3, [sp]
 418:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1808              		.loc 1 418 3 is_stmt 1 view .LVU503
 418:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1809              		.loc 1 418 16 is_stmt 0 view .LVU504
 1810 006a 0323     		movs	r3, #3
 1811 006c 0193     		str	r3, [sp, #4]
 419:Core/Src/main.c ****   {
 1812              		.loc 1 419 3 is_stmt 1 view .LVU505
 419:Core/Src/main.c ****   {
 1813              		.loc 1 419 7 is_stmt 0 view .LVU506
 1814 006e 6946     		mov	r1, sp
 1815 0070 0C48     		ldr	r0, .L102
 1816 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1817              	.LVL120:
 419:Core/Src/main.c ****   {
 1818              		.loc 1 419 6 view .LVU507
 1819 0076 88B9     		cbnz	r0, .L100
 426:Core/Src/main.c ****   sConfig.Rank = 4;
 1820              		.loc 1 426 3 is_stmt 1 view .LVU508
 426:Core/Src/main.c ****   sConfig.Rank = 4;
 1821              		.loc 1 426 19 is_stmt 0 view .LVU509
 1822 0078 0823     		movs	r3, #8
 1823 007a 0093     		str	r3, [sp]
 427:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1824              		.loc 1 427 3 is_stmt 1 view .LVU510
 427:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1825              		.loc 1 427 16 is_stmt 0 view .LVU511
 1826 007c 0423     		movs	r3, #4
 1827 007e 0193     		str	r3, [sp, #4]
 428:Core/Src/main.c ****   {
 1828              		.loc 1 428 3 is_stmt 1 view .LVU512
 428:Core/Src/main.c ****   {
 1829              		.loc 1 428 7 is_stmt 0 view .LVU513
 1830 0080 6946     		mov	r1, sp
 1831 0082 0848     		ldr	r0, .L102
 1832 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1833              	.LVL121:
 428:Core/Src/main.c ****   {
 1834              		.loc 1 428 6 view .LVU514
 1835 0088 50B9     		cbnz	r0, .L101
 436:Core/Src/main.c **** 
 1836              		.loc 1 436 1 view .LVU515
ARM GAS  /tmp/ccNe93V8.s 			page 75


 1837 008a 05B0     		add	sp, sp, #20
 1838              		.cfi_remember_state
 1839              		.cfi_def_cfa_offset 4
 1840              		@ sp needed
 1841 008c 5DF804FB 		ldr	pc, [sp], #4
 1842              	.L97:
 1843              		.cfi_restore_state
 393:Core/Src/main.c ****   }
 1844              		.loc 1 393 5 is_stmt 1 view .LVU516
 1845 0090 FFF7FEFF 		bl	Error_Handler
 1846              	.LVL122:
 1847              	.L98:
 403:Core/Src/main.c ****   }
 1848              		.loc 1 403 5 view .LVU517
 1849 0094 FFF7FEFF 		bl	Error_Handler
 1850              	.LVL123:
 1851              	.L99:
 412:Core/Src/main.c ****   }
 1852              		.loc 1 412 5 view .LVU518
 1853 0098 FFF7FEFF 		bl	Error_Handler
 1854              	.LVL124:
 1855              	.L100:
 421:Core/Src/main.c ****   }
 1856              		.loc 1 421 5 view .LVU519
 1857 009c FFF7FEFF 		bl	Error_Handler
 1858              	.LVL125:
 1859              	.L101:
 430:Core/Src/main.c ****   }
 1860              		.loc 1 430 5 view .LVU520
 1861 00a0 FFF7FEFF 		bl	Error_Handler
 1862              	.LVL126:
 1863              	.L103:
 1864              		.align	2
 1865              	.L102:
 1866 00a4 00000000 		.word	.LANCHOR9
 1867 00a8 00200140 		.word	1073815552
 1868 00ac 0100000F 		.word	251658241
 1869              		.cfi_endproc
 1870              	.LFE246:
 1872              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1873              		.align	1
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu fpv4-sp-d16
 1879              	MX_I2C1_Init:
 1880              	.LFB247:
 444:Core/Src/main.c **** 
 1881              		.loc 1 444 1 view -0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885 0000 08B5     		push	{r3, lr}
 1886              		.cfi_def_cfa_offset 8
 1887              		.cfi_offset 3, -8
 1888              		.cfi_offset 14, -4
 453:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
ARM GAS  /tmp/ccNe93V8.s 			page 76


 1889              		.loc 1 453 3 view .LVU522
 453:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1890              		.loc 1 453 18 is_stmt 0 view .LVU523
 1891 0002 0A48     		ldr	r0, .L108
 1892 0004 0A4B     		ldr	r3, .L108+4
 1893 0006 0360     		str	r3, [r0]
 454:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1894              		.loc 1 454 3 is_stmt 1 view .LVU524
 454:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1895              		.loc 1 454 25 is_stmt 0 view .LVU525
 1896 0008 0A4B     		ldr	r3, .L108+8
 1897 000a 4360     		str	r3, [r0, #4]
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1898              		.loc 1 455 3 is_stmt 1 view .LVU526
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1899              		.loc 1 455 24 is_stmt 0 view .LVU527
 1900 000c 0023     		movs	r3, #0
 1901 000e 8360     		str	r3, [r0, #8]
 456:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1902              		.loc 1 456 3 is_stmt 1 view .LVU528
 456:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1903              		.loc 1 456 26 is_stmt 0 view .LVU529
 1904 0010 C360     		str	r3, [r0, #12]
 457:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1905              		.loc 1 457 3 is_stmt 1 view .LVU530
 457:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1906              		.loc 1 457 29 is_stmt 0 view .LVU531
 1907 0012 4FF48042 		mov	r2, #16384
 1908 0016 0261     		str	r2, [r0, #16]
 458:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1909              		.loc 1 458 3 is_stmt 1 view .LVU532
 458:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1910              		.loc 1 458 30 is_stmt 0 view .LVU533
 1911 0018 4361     		str	r3, [r0, #20]
 459:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1912              		.loc 1 459 3 is_stmt 1 view .LVU534
 459:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1913              		.loc 1 459 26 is_stmt 0 view .LVU535
 1914 001a 8361     		str	r3, [r0, #24]
 460:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1915              		.loc 1 460 3 is_stmt 1 view .LVU536
 460:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1916              		.loc 1 460 30 is_stmt 0 view .LVU537
 1917 001c C361     		str	r3, [r0, #28]
 461:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1918              		.loc 1 461 3 is_stmt 1 view .LVU538
 461:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1919              		.loc 1 461 28 is_stmt 0 view .LVU539
 1920 001e 0362     		str	r3, [r0, #32]
 462:Core/Src/main.c ****   {
 1921              		.loc 1 462 3 is_stmt 1 view .LVU540
 462:Core/Src/main.c ****   {
 1922              		.loc 1 462 7 is_stmt 0 view .LVU541
 1923 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1924              	.LVL127:
 462:Core/Src/main.c ****   {
 1925              		.loc 1 462 6 view .LVU542
ARM GAS  /tmp/ccNe93V8.s 			page 77


 1926 0024 00B9     		cbnz	r0, .L107
 470:Core/Src/main.c **** 
 1927              		.loc 1 470 1 view .LVU543
 1928 0026 08BD     		pop	{r3, pc}
 1929              	.L107:
 464:Core/Src/main.c ****   }
 1930              		.loc 1 464 5 is_stmt 1 view .LVU544
 1931 0028 FFF7FEFF 		bl	Error_Handler
 1932              	.LVL128:
 1933              	.L109:
 1934              		.align	2
 1935              	.L108:
 1936 002c 00000000 		.word	.LANCHOR7
 1937 0030 00540040 		.word	1073763328
 1938 0034 A0860100 		.word	100000
 1939              		.cfi_endproc
 1940              	.LFE247:
 1942              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1943              		.align	1
 1944              		.syntax unified
 1945              		.thumb
 1946              		.thumb_func
 1947              		.fpu fpv4-sp-d16
 1949              	MX_USART2_UART_Init:
 1950              	.LFB249:
 512:Core/Src/main.c **** 
 1951              		.loc 1 512 1 view -0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 0
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 1955 0000 08B5     		push	{r3, lr}
 1956              		.cfi_def_cfa_offset 8
 1957              		.cfi_offset 3, -8
 1958              		.cfi_offset 14, -4
 521:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1959              		.loc 1 521 3 view .LVU546
 521:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1960              		.loc 1 521 19 is_stmt 0 view .LVU547
 1961 0002 0A48     		ldr	r0, .L114
 1962 0004 0A4B     		ldr	r3, .L114+4
 1963 0006 0360     		str	r3, [r0]
 522:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1964              		.loc 1 522 3 is_stmt 1 view .LVU548
 522:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1965              		.loc 1 522 24 is_stmt 0 view .LVU549
 1966 0008 4FF4E133 		mov	r3, #115200
 1967 000c 4360     		str	r3, [r0, #4]
 523:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1968              		.loc 1 523 3 is_stmt 1 view .LVU550
 523:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1969              		.loc 1 523 26 is_stmt 0 view .LVU551
 1970 000e 0023     		movs	r3, #0
 1971 0010 8360     		str	r3, [r0, #8]
 524:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1972              		.loc 1 524 3 is_stmt 1 view .LVU552
 524:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1973              		.loc 1 524 24 is_stmt 0 view .LVU553
ARM GAS  /tmp/ccNe93V8.s 			page 78


 1974 0012 C360     		str	r3, [r0, #12]
 525:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1975              		.loc 1 525 3 is_stmt 1 view .LVU554
 525:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1976              		.loc 1 525 22 is_stmt 0 view .LVU555
 1977 0014 0361     		str	r3, [r0, #16]
 526:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1978              		.loc 1 526 3 is_stmt 1 view .LVU556
 526:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1979              		.loc 1 526 20 is_stmt 0 view .LVU557
 1980 0016 0C22     		movs	r2, #12
 1981 0018 4261     		str	r2, [r0, #20]
 527:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1982              		.loc 1 527 3 is_stmt 1 view .LVU558
 527:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1983              		.loc 1 527 25 is_stmt 0 view .LVU559
 1984 001a 8361     		str	r3, [r0, #24]
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1985              		.loc 1 528 3 is_stmt 1 view .LVU560
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1986              		.loc 1 528 28 is_stmt 0 view .LVU561
 1987 001c C361     		str	r3, [r0, #28]
 529:Core/Src/main.c ****   {
 1988              		.loc 1 529 3 is_stmt 1 view .LVU562
 529:Core/Src/main.c ****   {
 1989              		.loc 1 529 7 is_stmt 0 view .LVU563
 1990 001e FFF7FEFF 		bl	HAL_UART_Init
 1991              	.LVL129:
 529:Core/Src/main.c ****   {
 1992              		.loc 1 529 6 view .LVU564
 1993 0022 00B9     		cbnz	r0, .L113
 537:Core/Src/main.c **** 
 1994              		.loc 1 537 1 view .LVU565
 1995 0024 08BD     		pop	{r3, pc}
 1996              	.L113:
 531:Core/Src/main.c ****   }
 1997              		.loc 1 531 5 is_stmt 1 view .LVU566
 1998 0026 FFF7FEFF 		bl	Error_Handler
 1999              	.LVL130:
 2000              	.L115:
 2001 002a 00BF     		.align	2
 2002              	.L114:
 2003 002c 00000000 		.word	.LANCHOR13
 2004 0030 00440040 		.word	1073759232
 2005              		.cfi_endproc
 2006              	.LFE249:
 2008              		.section	.text.MX_I2C2_Init,"ax",%progbits
 2009              		.align	1
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu fpv4-sp-d16
 2015              	MX_I2C2_Init:
 2016              	.LFB248:
 478:Core/Src/main.c **** 
 2017              		.loc 1 478 1 view -0
 2018              		.cfi_startproc
ARM GAS  /tmp/ccNe93V8.s 			page 79


 2019              		@ args = 0, pretend = 0, frame = 0
 2020              		@ frame_needed = 0, uses_anonymous_args = 0
 2021 0000 08B5     		push	{r3, lr}
 2022              		.cfi_def_cfa_offset 8
 2023              		.cfi_offset 3, -8
 2024              		.cfi_offset 14, -4
 487:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 2025              		.loc 1 487 3 view .LVU568
 487:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 2026              		.loc 1 487 18 is_stmt 0 view .LVU569
 2027 0002 0A48     		ldr	r0, .L120
 2028 0004 0A4B     		ldr	r3, .L120+4
 2029 0006 0360     		str	r3, [r0]
 488:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 2030              		.loc 1 488 3 is_stmt 1 view .LVU570
 488:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 2031              		.loc 1 488 25 is_stmt 0 view .LVU571
 2032 0008 0A4B     		ldr	r3, .L120+8
 2033 000a 4360     		str	r3, [r0, #4]
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 2034              		.loc 1 489 3 is_stmt 1 view .LVU572
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 2035              		.loc 1 489 24 is_stmt 0 view .LVU573
 2036 000c 0023     		movs	r3, #0
 2037 000e 8360     		str	r3, [r0, #8]
 490:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 2038              		.loc 1 490 3 is_stmt 1 view .LVU574
 490:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 2039              		.loc 1 490 26 is_stmt 0 view .LVU575
 2040 0010 C360     		str	r3, [r0, #12]
 491:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 2041              		.loc 1 491 3 is_stmt 1 view .LVU576
 491:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 2042              		.loc 1 491 29 is_stmt 0 view .LVU577
 2043 0012 4FF48042 		mov	r2, #16384
 2044 0016 0261     		str	r2, [r0, #16]
 492:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 2045              		.loc 1 492 3 is_stmt 1 view .LVU578
 492:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 2046              		.loc 1 492 30 is_stmt 0 view .LVU579
 2047 0018 4361     		str	r3, [r0, #20]
 493:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 2048              		.loc 1 493 3 is_stmt 1 view .LVU580
 493:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 2049              		.loc 1 493 26 is_stmt 0 view .LVU581
 2050 001a 8361     		str	r3, [r0, #24]
 494:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 2051              		.loc 1 494 3 is_stmt 1 view .LVU582
 494:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 2052              		.loc 1 494 30 is_stmt 0 view .LVU583
 2053 001c C361     		str	r3, [r0, #28]
 495:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2054              		.loc 1 495 3 is_stmt 1 view .LVU584
 495:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 2055              		.loc 1 495 28 is_stmt 0 view .LVU585
 2056 001e 0362     		str	r3, [r0, #32]
 496:Core/Src/main.c ****   {
ARM GAS  /tmp/ccNe93V8.s 			page 80


 2057              		.loc 1 496 3 is_stmt 1 view .LVU586
 496:Core/Src/main.c ****   {
 2058              		.loc 1 496 7 is_stmt 0 view .LVU587
 2059 0020 FFF7FEFF 		bl	HAL_I2C_Init
 2060              	.LVL131:
 496:Core/Src/main.c ****   {
 2061              		.loc 1 496 6 view .LVU588
 2062 0024 00B9     		cbnz	r0, .L119
 504:Core/Src/main.c **** 
 2063              		.loc 1 504 1 view .LVU589
 2064 0026 08BD     		pop	{r3, pc}
 2065              	.L119:
 498:Core/Src/main.c ****   }
 2066              		.loc 1 498 5 is_stmt 1 view .LVU590
 2067 0028 FFF7FEFF 		bl	Error_Handler
 2068              	.LVL132:
 2069              	.L121:
 2070              		.align	2
 2071              	.L120:
 2072 002c 00000000 		.word	.LANCHOR14
 2073 0030 00580040 		.word	1073764352
 2074 0034 A0860100 		.word	100000
 2075              		.cfi_endproc
 2076              	.LFE248:
 2078              		.section	.text.SystemClock_Config,"ax",%progbits
 2079              		.align	1
 2080              		.global	SystemClock_Config
 2081              		.syntax unified
 2082              		.thumb
 2083              		.thumb_func
 2084              		.fpu fpv4-sp-d16
 2086              	SystemClock_Config:
 2087              	.LFB245:
 316:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2088              		.loc 1 316 1 view -0
 2089              		.cfi_startproc
 2090              		@ args = 0, pretend = 0, frame = 80
 2091              		@ frame_needed = 0, uses_anonymous_args = 0
 2092 0000 00B5     		push	{lr}
 2093              		.cfi_def_cfa_offset 4
 2094              		.cfi_offset 14, -4
 2095 0002 95B0     		sub	sp, sp, #84
 2096              		.cfi_def_cfa_offset 88
 317:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2097              		.loc 1 317 3 view .LVU592
 317:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2098              		.loc 1 317 22 is_stmt 0 view .LVU593
 2099 0004 3422     		movs	r2, #52
 2100 0006 0021     		movs	r1, #0
 2101 0008 07A8     		add	r0, sp, #28
 2102 000a FFF7FEFF 		bl	memset
 2103              	.LVL133:
 318:Core/Src/main.c **** 
 2104              		.loc 1 318 3 is_stmt 1 view .LVU594
 318:Core/Src/main.c **** 
 2105              		.loc 1 318 22 is_stmt 0 view .LVU595
 2106 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccNe93V8.s 			page 81


 2107 0010 0293     		str	r3, [sp, #8]
 2108 0012 0393     		str	r3, [sp, #12]
 2109 0014 0493     		str	r3, [sp, #16]
 2110 0016 0593     		str	r3, [sp, #20]
 2111 0018 0693     		str	r3, [sp, #24]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2112              		.loc 1 322 3 is_stmt 1 view .LVU596
 2113              	.LBB12:
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2114              		.loc 1 322 3 view .LVU597
 2115 001a 0093     		str	r3, [sp]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2116              		.loc 1 322 3 view .LVU598
 2117 001c 1F4A     		ldr	r2, .L128
 2118 001e 116C     		ldr	r1, [r2, #64]
 2119 0020 41F08051 		orr	r1, r1, #268435456
 2120 0024 1164     		str	r1, [r2, #64]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2121              		.loc 1 322 3 view .LVU599
 2122 0026 126C     		ldr	r2, [r2, #64]
 2123 0028 02F08052 		and	r2, r2, #268435456
 2124 002c 0092     		str	r2, [sp]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2125              		.loc 1 322 3 view .LVU600
 2126 002e 009A     		ldr	r2, [sp]
 2127              	.LBE12:
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 2128              		.loc 1 322 3 view .LVU601
 323:Core/Src/main.c **** 
 2129              		.loc 1 323 3 view .LVU602
 2130              	.LBB13:
 323:Core/Src/main.c **** 
 2131              		.loc 1 323 3 view .LVU603
 2132 0030 0193     		str	r3, [sp, #4]
 323:Core/Src/main.c **** 
 2133              		.loc 1 323 3 view .LVU604
 2134 0032 1B49     		ldr	r1, .L128+4
 2135 0034 0A68     		ldr	r2, [r1]
 2136 0036 22F44042 		bic	r2, r2, #49152
 2137 003a 42F48042 		orr	r2, r2, #16384
 2138 003e 0A60     		str	r2, [r1]
 323:Core/Src/main.c **** 
 2139              		.loc 1 323 3 view .LVU605
 2140 0040 0A68     		ldr	r2, [r1]
 2141 0042 02F44042 		and	r2, r2, #49152
 2142 0046 0192     		str	r2, [sp, #4]
 323:Core/Src/main.c **** 
 2143              		.loc 1 323 3 view .LVU606
 2144 0048 019A     		ldr	r2, [sp, #4]
 2145              	.LBE13:
 323:Core/Src/main.c **** 
 2146              		.loc 1 323 3 view .LVU607
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2147              		.loc 1 328 3 view .LVU608
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 2148              		.loc 1 328 36 is_stmt 0 view .LVU609
 2149 004a 0222     		movs	r2, #2
ARM GAS  /tmp/ccNe93V8.s 			page 82


 2150 004c 0792     		str	r2, [sp, #28]
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2151              		.loc 1 329 3 is_stmt 1 view .LVU610
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 2152              		.loc 1 329 30 is_stmt 0 view .LVU611
 2153 004e 0121     		movs	r1, #1
 2154 0050 0A91     		str	r1, [sp, #40]
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2155              		.loc 1 330 3 is_stmt 1 view .LVU612
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2156              		.loc 1 330 41 is_stmt 0 view .LVU613
 2157 0052 1021     		movs	r1, #16
 2158 0054 0B91     		str	r1, [sp, #44]
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2159              		.loc 1 331 3 is_stmt 1 view .LVU614
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 2160              		.loc 1 331 34 is_stmt 0 view .LVU615
 2161 0056 0D92     		str	r2, [sp, #52]
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 2162              		.loc 1 332 3 is_stmt 1 view .LVU616
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 2163              		.loc 1 332 35 is_stmt 0 view .LVU617
 2164 0058 0E93     		str	r3, [sp, #56]
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 2165              		.loc 1 333 3 is_stmt 1 view .LVU618
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 2166              		.loc 1 333 30 is_stmt 0 view .LVU619
 2167 005a 0F91     		str	r1, [sp, #60]
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 2168              		.loc 1 334 3 is_stmt 1 view .LVU620
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 2169              		.loc 1 334 30 is_stmt 0 view .LVU621
 2170 005c 4FF4A873 		mov	r3, #336
 2171 0060 1093     		str	r3, [sp, #64]
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 2172              		.loc 1 335 3 is_stmt 1 view .LVU622
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 2173              		.loc 1 335 30 is_stmt 0 view .LVU623
 2174 0062 0423     		movs	r3, #4
 2175 0064 1193     		str	r3, [sp, #68]
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 2176              		.loc 1 336 3 is_stmt 1 view .LVU624
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 2177              		.loc 1 336 30 is_stmt 0 view .LVU625
 2178 0066 1292     		str	r2, [sp, #72]
 337:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2179              		.loc 1 337 3 is_stmt 1 view .LVU626
 337:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2180              		.loc 1 337 30 is_stmt 0 view .LVU627
 2181 0068 1392     		str	r2, [sp, #76]
 338:Core/Src/main.c ****   {
 2182              		.loc 1 338 3 is_stmt 1 view .LVU628
 338:Core/Src/main.c ****   {
 2183              		.loc 1 338 7 is_stmt 0 view .LVU629
 2184 006a 07A8     		add	r0, sp, #28
 2185 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2186              	.LVL134:
ARM GAS  /tmp/ccNe93V8.s 			page 83


 338:Core/Src/main.c ****   {
 2187              		.loc 1 338 6 view .LVU630
 2188 0070 80B9     		cbnz	r0, .L126
 345:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2189              		.loc 1 345 3 is_stmt 1 view .LVU631
 345:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 2190              		.loc 1 345 31 is_stmt 0 view .LVU632
 2191 0072 0F23     		movs	r3, #15
 2192 0074 0293     		str	r3, [sp, #8]
 347:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2193              		.loc 1 347 3 is_stmt 1 view .LVU633
 347:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2194              		.loc 1 347 34 is_stmt 0 view .LVU634
 2195 0076 0221     		movs	r1, #2
 2196 0078 0391     		str	r1, [sp, #12]
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2197              		.loc 1 348 3 is_stmt 1 view .LVU635
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2198              		.loc 1 348 35 is_stmt 0 view .LVU636
 2199 007a 0023     		movs	r3, #0
 2200 007c 0493     		str	r3, [sp, #16]
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2201              		.loc 1 349 3 is_stmt 1 view .LVU637
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2202              		.loc 1 349 36 is_stmt 0 view .LVU638
 2203 007e 4FF48052 		mov	r2, #4096
 2204 0082 0592     		str	r2, [sp, #20]
 350:Core/Src/main.c **** 
 2205              		.loc 1 350 3 is_stmt 1 view .LVU639
 350:Core/Src/main.c **** 
 2206              		.loc 1 350 36 is_stmt 0 view .LVU640
 2207 0084 0693     		str	r3, [sp, #24]
 352:Core/Src/main.c ****   {
 2208              		.loc 1 352 3 is_stmt 1 view .LVU641
 352:Core/Src/main.c ****   {
 2209              		.loc 1 352 7 is_stmt 0 view .LVU642
 2210 0086 02A8     		add	r0, sp, #8
 2211 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2212              	.LVL135:
 352:Core/Src/main.c ****   {
 2213              		.loc 1 352 6 view .LVU643
 2214 008c 20B9     		cbnz	r0, .L127
 356:Core/Src/main.c **** 
 2215              		.loc 1 356 1 view .LVU644
 2216 008e 15B0     		add	sp, sp, #84
 2217              		.cfi_remember_state
 2218              		.cfi_def_cfa_offset 4
 2219              		@ sp needed
 2220 0090 5DF804FB 		ldr	pc, [sp], #4
 2221              	.L126:
 2222              		.cfi_restore_state
 340:Core/Src/main.c ****   }
 2223              		.loc 1 340 5 is_stmt 1 view .LVU645
 2224 0094 FFF7FEFF 		bl	Error_Handler
 2225              	.LVL136:
 2226              	.L127:
 354:Core/Src/main.c ****   }
ARM GAS  /tmp/ccNe93V8.s 			page 84


 2227              		.loc 1 354 5 view .LVU646
 2228 0098 FFF7FEFF 		bl	Error_Handler
 2229              	.LVL137:
 2230              	.L129:
 2231              		.align	2
 2232              	.L128:
 2233 009c 00380240 		.word	1073887232
 2234 00a0 00700040 		.word	1073770496
 2235              		.cfi_endproc
 2236              	.LFE245:
 2238              		.section	.text.main,"ax",%progbits
 2239              		.align	1
 2240              		.global	main
 2241              		.syntax unified
 2242              		.thumb
 2243              		.thumb_func
 2244              		.fpu fpv4-sp-d16
 2246              	main:
 2247              	.LFB244:
 196:Core/Src/main.c **** 
 2248              		.loc 1 196 1 view -0
 2249              		.cfi_startproc
 2250              		@ Volatile: function does not return.
 2251              		@ args = 0, pretend = 0, frame = 256
 2252              		@ frame_needed = 0, uses_anonymous_args = 0
 2253 0000 00B5     		push	{lr}
 2254              		.cfi_def_cfa_offset 4
 2255              		.cfi_offset 14, -4
 2256 0002 C1B0     		sub	sp, sp, #260
 2257              		.cfi_def_cfa_offset 264
 205:Core/Src/main.c **** 
 2258              		.loc 1 205 3 view .LVU648
 2259 0004 FFF7FEFF 		bl	HAL_Init
 2260              	.LVL138:
 212:Core/Src/main.c **** 
 2261              		.loc 1 212 3 view .LVU649
 2262 0008 FFF7FEFF 		bl	SystemClock_Config
 2263              	.LVL139:
 219:Core/Src/main.c ****   MX_ADC1_Init();
 2264              		.loc 1 219 3 view .LVU650
 2265 000c FFF7FEFF 		bl	MX_GPIO_Init
 2266              	.LVL140:
 220:Core/Src/main.c ****   MX_I2C1_Init();
 2267              		.loc 1 220 3 view .LVU651
 2268 0010 FFF7FEFF 		bl	MX_ADC1_Init
 2269              	.LVL141:
 221:Core/Src/main.c ****   MX_USART2_UART_Init();
 2270              		.loc 1 221 3 view .LVU652
 2271 0014 FFF7FEFF 		bl	MX_I2C1_Init
 2272              	.LVL142:
 222:Core/Src/main.c ****   MX_I2C2_Init();
 2273              		.loc 1 222 3 view .LVU653
 2274 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 2275              	.LVL143:
 223:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2276              		.loc 1 223 3 view .LVU654
 2277 001c FFF7FEFF 		bl	MX_I2C2_Init
ARM GAS  /tmp/ccNe93V8.s 			page 85


 2278              	.LVL144:
 230:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 2279              		.loc 1 230 3 view .LVU655
 2280 0020 0025     		movs	r5, #0
 2281 0022 3E95     		str	r5, [sp, #248]
 2282 0024 3F95     		str	r5, [sp, #252]
 231:Core/Src/main.c **** 
 2283              		.loc 1 231 3 view .LVU656
 231:Core/Src/main.c **** 
 2284              		.loc 1 231 22 is_stmt 0 view .LVU657
 2285 0026 3EA8     		add	r0, sp, #248
 2286 0028 FFF7FEFF 		bl	osMutexCreate
 2287              	.LVL145:
 231:Core/Src/main.c **** 
 2288              		.loc 1 231 20 view .LVU658
 2289 002c 534B     		ldr	r3, .L133
 2290 002e 1860     		str	r0, [r3]
 247:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 2291              		.loc 1 247 3 is_stmt 1 view .LVU659
 2292 0030 534C     		ldr	r4, .L133+4
 2293 0032 0DF1E80C 		add	ip, sp, #232
 2294 0036 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2295 003a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 248:Core/Src/main.c **** 
 2296              		.loc 1 248 3 view .LVU660
 248:Core/Src/main.c **** 
 2297              		.loc 1 248 29 is_stmt 0 view .LVU661
 2298 003e 2946     		mov	r1, r5
 2299 0040 6046     		mov	r0, ip
 2300 0042 FFF7FEFF 		bl	osMessageCreate
 2301              	.LVL146:
 248:Core/Src/main.c **** 
 2302              		.loc 1 248 27 view .LVU662
 2303 0046 4F4B     		ldr	r3, .L133+8
 2304 0048 1860     		str	r0, [r3]
 251:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 2305              		.loc 1 251 3 is_stmt 1 view .LVU663
 2306 004a 0DF1D80C 		add	ip, sp, #216
 2307 004e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2308 0052 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 252:Core/Src/main.c **** 
 2309              		.loc 1 252 3 view .LVU664
 252:Core/Src/main.c **** 
 2310              		.loc 1 252 29 is_stmt 0 view .LVU665
 2311 0056 2946     		mov	r1, r5
 2312 0058 6046     		mov	r0, ip
 2313 005a FFF7FEFF 		bl	osMessageCreate
 2314              	.LVL147:
 252:Core/Src/main.c **** 
 2315              		.loc 1 252 27 view .LVU666
 2316 005e 4A4B     		ldr	r3, .L133+12
 2317 0060 1860     		str	r0, [r3]
 255:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 2318              		.loc 1 255 3 is_stmt 1 view .LVU667
 2319 0062 0DF1C80C 		add	ip, sp, #200
 2320 0066 04F11003 		add	r3, r4, #16
 2321 006a 0FCB     		ldm	r3, {r0, r1, r2, r3}
ARM GAS  /tmp/ccNe93V8.s 			page 86


 2322 006c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 256:Core/Src/main.c **** 
 2323              		.loc 1 256 3 view .LVU668
 256:Core/Src/main.c **** 
 2324              		.loc 1 256 25 is_stmt 0 view .LVU669
 2325 0070 2946     		mov	r1, r5
 2326 0072 6046     		mov	r0, ip
 2327 0074 FFF7FEFF 		bl	osMessageCreate
 2328              	.LVL148:
 256:Core/Src/main.c **** 
 2329              		.loc 1 256 23 view .LVU670
 2330 0078 444B     		ldr	r3, .L133+16
 2331 007a 1860     		str	r0, [r3]
 264:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 2332              		.loc 1 264 3 is_stmt 1 view .LVU671
 2333 007c 0DF1AC0C 		add	ip, sp, #172
 2334 0080 04F1200E 		add	lr, r4, #32
 2335 0084 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2336 0088 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2337 008c 9EE80700 		ldm	lr, {r0, r1, r2}
 2338 0090 8CE80700 		stm	ip, {r0, r1, r2}
 265:Core/Src/main.c **** 
 2339              		.loc 1 265 3 view .LVU672
 265:Core/Src/main.c **** 
 2340              		.loc 1 265 23 is_stmt 0 view .LVU673
 2341 0094 2946     		mov	r1, r5
 2342 0096 2BA8     		add	r0, sp, #172
 2343 0098 FFF7FEFF 		bl	osThreadCreate
 2344              	.LVL149:
 265:Core/Src/main.c **** 
 2345              		.loc 1 265 21 view .LVU674
 2346 009c 3C4B     		ldr	r3, .L133+20
 2347 009e 1860     		str	r0, [r3]
 268:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 2348              		.loc 1 268 3 is_stmt 1 view .LVU675
 2349 00a0 0DF1900C 		add	ip, sp, #144
 2350 00a4 04F13C0E 		add	lr, r4, #60
 2351 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2352 00ac ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2353 00b0 9EE80700 		ldm	lr, {r0, r1, r2}
 2354 00b4 8CE80700 		stm	ip, {r0, r1, r2}
 269:Core/Src/main.c **** 
 2355              		.loc 1 269 3 view .LVU676
 269:Core/Src/main.c **** 
 2356              		.loc 1 269 24 is_stmt 0 view .LVU677
 2357 00b8 2946     		mov	r1, r5
 2358 00ba 24A8     		add	r0, sp, #144
 2359 00bc FFF7FEFF 		bl	osThreadCreate
 2360              	.LVL150:
 269:Core/Src/main.c **** 
 2361              		.loc 1 269 22 view .LVU678
 2362 00c0 344B     		ldr	r3, .L133+24
 2363 00c2 1860     		str	r0, [r3]
 272:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 2364              		.loc 1 272 3 is_stmt 1 view .LVU679
 2365 00c4 0DF1740C 		add	ip, sp, #116
 2366 00c8 04F1580E 		add	lr, r4, #88
ARM GAS  /tmp/ccNe93V8.s 			page 87


 2367 00cc BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2368 00d0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2369 00d4 9EE80700 		ldm	lr, {r0, r1, r2}
 2370 00d8 8CE80700 		stm	ip, {r0, r1, r2}
 273:Core/Src/main.c **** 
 2371              		.loc 1 273 3 view .LVU680
 273:Core/Src/main.c **** 
 2372              		.loc 1 273 25 is_stmt 0 view .LVU681
 2373 00dc 2946     		mov	r1, r5
 2374 00de 1DA8     		add	r0, sp, #116
 2375 00e0 FFF7FEFF 		bl	osThreadCreate
 2376              	.LVL151:
 273:Core/Src/main.c **** 
 2377              		.loc 1 273 23 view .LVU682
 2378 00e4 2C4B     		ldr	r3, .L133+28
 2379 00e6 1860     		str	r0, [r3]
 276:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 2380              		.loc 1 276 3 is_stmt 1 view .LVU683
 2381 00e8 0DF1580C 		add	ip, sp, #88
 2382 00ec 04F1740E 		add	lr, r4, #116
 2383 00f0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2384 00f4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2385 00f8 9EE80700 		ldm	lr, {r0, r1, r2}
 2386 00fc 8CE80700 		stm	ip, {r0, r1, r2}
 277:Core/Src/main.c **** 
 2387              		.loc 1 277 3 view .LVU684
 277:Core/Src/main.c **** 
 2388              		.loc 1 277 26 is_stmt 0 view .LVU685
 2389 0100 2946     		mov	r1, r5
 2390 0102 16A8     		add	r0, sp, #88
 2391 0104 FFF7FEFF 		bl	osThreadCreate
 2392              	.LVL152:
 277:Core/Src/main.c **** 
 2393              		.loc 1 277 24 view .LVU686
 2394 0108 244B     		ldr	r3, .L133+32
 2395 010a 1860     		str	r0, [r3]
 280:Core/Src/main.c ****   EmergencyStopTaskHandle = osThreadCreate(osThread(EmergencyStopTask), NULL);
 2396              		.loc 1 280 3 is_stmt 1 view .LVU687
 2397 010c 0DF13C0C 		add	ip, sp, #60
 2398 0110 04F1900E 		add	lr, r4, #144
 2399 0114 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2400 0118 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2401 011c 9EE80700 		ldm	lr, {r0, r1, r2}
 2402 0120 8CE80700 		stm	ip, {r0, r1, r2}
 281:Core/Src/main.c **** 
 2403              		.loc 1 281 3 view .LVU688
 281:Core/Src/main.c **** 
 2404              		.loc 1 281 29 is_stmt 0 view .LVU689
 2405 0124 2946     		mov	r1, r5
 2406 0126 0FA8     		add	r0, sp, #60
 2407 0128 FFF7FEFF 		bl	osThreadCreate
 2408              	.LVL153:
 281:Core/Src/main.c **** 
 2409              		.loc 1 281 27 view .LVU690
 2410 012c 1C4B     		ldr	r3, .L133+36
 2411 012e 1860     		str	r0, [r3]
 284:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
ARM GAS  /tmp/ccNe93V8.s 			page 88


 2412              		.loc 1 284 3 is_stmt 1 view .LVU691
 2413 0130 0DF1200C 		add	ip, sp, #32
 2414 0134 04F1AC0E 		add	lr, r4, #172
 2415 0138 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2416 013c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2417 0140 9EE80700 		ldm	lr, {r0, r1, r2}
 2418 0144 8CE80700 		stm	ip, {r0, r1, r2}
 285:Core/Src/main.c **** 
 2419              		.loc 1 285 3 view .LVU692
 285:Core/Src/main.c **** 
 2420              		.loc 1 285 28 is_stmt 0 view .LVU693
 2421 0148 2946     		mov	r1, r5
 2422 014a 08A8     		add	r0, sp, #32
 2423 014c FFF7FEFF 		bl	osThreadCreate
 2424              	.LVL154:
 285:Core/Src/main.c **** 
 2425              		.loc 1 285 26 view .LVU694
 2426 0150 144B     		ldr	r3, .L133+40
 2427 0152 1860     		str	r0, [r3]
 288:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 2428              		.loc 1 288 3 is_stmt 1 view .LVU695
 2429 0154 0DF1040C 		add	ip, sp, #4
 2430 0158 C834     		adds	r4, r4, #200
 2431 015a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2432 015c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2433 0160 94E80700 		ldm	r4, {r0, r1, r2}
 2434 0164 8CE80700 		stm	ip, {r0, r1, r2}
 289:Core/Src/main.c **** 
 2435              		.loc 1 289 3 view .LVU696
 289:Core/Src/main.c **** 
 2436              		.loc 1 289 24 is_stmt 0 view .LVU697
 2437 0168 2946     		mov	r1, r5
 2438 016a 01A8     		add	r0, sp, #4
 2439 016c FFF7FEFF 		bl	osThreadCreate
 2440              	.LVL155:
 289:Core/Src/main.c **** 
 2441              		.loc 1 289 22 view .LVU698
 2442 0170 0D4B     		ldr	r3, .L133+44
 2443 0172 1860     		str	r0, [r3]
 296:Core/Src/main.c **** 
 2444              		.loc 1 296 3 is_stmt 1 view .LVU699
 2445 0174 FFF7FEFF 		bl	osKernelStart
 2446              	.LVL156:
 2447              	.L131:
 302:Core/Src/main.c ****   {
 2448              		.loc 1 302 3 discriminator 1 view .LVU700
 307:Core/Src/main.c ****   /* USER CODE END 3 */
 2449              		.loc 1 307 3 discriminator 1 view .LVU701
 302:Core/Src/main.c ****   {
 2450              		.loc 1 302 9 discriminator 1 view .LVU702
 2451 0178 FEE7     		b	.L131
 2452              	.L134:
 2453 017a 00BF     		.align	2
 2454              	.L133:
 2455 017c 00000000 		.word	.LANCHOR15
 2456 0180 00000000 		.word	.LANCHOR16
 2457 0184 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccNe93V8.s 			page 89


 2458 0188 00000000 		.word	.LANCHOR6
 2459 018c 00000000 		.word	.LANCHOR1
 2460 0190 00000000 		.word	.LANCHOR17
 2461 0194 00000000 		.word	.LANCHOR18
 2462 0198 00000000 		.word	.LANCHOR19
 2463 019c 00000000 		.word	.LANCHOR20
 2464 01a0 00000000 		.word	.LANCHOR21
 2465 01a4 00000000 		.word	.LANCHOR22
 2466 01a8 00000000 		.word	.LANCHOR23
 2467              		.cfi_endproc
 2468              	.LFE244:
 2470              		.global	StateMutexHandle
 2471              		.global	LCDPrintQueueHandle
 2472              		.global	MotorControlQueueHandle
 2473              		.global	MiniBotInputQueueHandle
 2474              		.global	LCDPrintTaskHandle
 2475              		.global	MotorControlTaskHandle
 2476              		.global	EmergencyStopTaskHandle
 2477              		.global	ApplicationFSMHandle
 2478              		.global	MiniBotInputsHandle
 2479              		.global	BlinkLEDTaskHandle
 2480              		.global	defaultTaskHandle
 2481              		.global	huart2
 2482              		.global	hi2c2
 2483              		.global	hi2c1
 2484              		.global	hadc1
 2485              		.global	state
 2486              		.global	MappedServoAngle
 2487              		.global	tempFailedToPostMessage
 2488              		.global	MotorControl_Qdata_Buf
 2489              		.global	Temp_Qdata_Buf
 2490              		.global	MiniBot_Qdata_Buf
 2491              		.global	PotRawValue
 2492              		.global	Qdata
 2493              		.section	.rodata
 2494              		.align	2
 2495              		.set	.LANCHOR16,. + 0
 2496              	.LC0:
 2497 0000 10000000 		.word	16
 2498 0004 34000000 		.word	52
 2499 0008 00000000 		.word	0
 2500 000c 00000000 		.word	0
 2501              	.LC1:
 2502 0010 10000000 		.word	16
 2503 0014 01000000 		.word	1
 2504 0018 00000000 		.word	0
 2505 001c 00000000 		.word	0
 2506              	.LC25:
 2507 0020 00000000 		.word	.LC2
 2508 0024 00000000 		.word	StartDefaultTask
 2509 0028 0000     		.short	0
 2510 002a 0000     		.space	2
 2511 002c 00000000 		.word	0
 2512 0030 80000000 		.word	128
 2513 0034 00000000 		.word	0
 2514 0038 00000000 		.word	0
 2515              	.LC26:
ARM GAS  /tmp/ccNe93V8.s 			page 90


 2516 003c 0C000000 		.word	.LC4
 2517 0040 00000000 		.word	BlinkLEDTaskEntry
 2518 0044 0000     		.short	0
 2519 0046 0000     		.space	2
 2520 0048 00000000 		.word	0
 2521 004c 80000000 		.word	128
 2522 0050 00000000 		.word	0
 2523 0054 00000000 		.word	0
 2524              	.LC27:
 2525 0058 1C000000 		.word	.LC6
 2526 005c 00000000 		.word	MiniBotInputsEntry
 2527 0060 0000     		.short	0
 2528 0062 0000     		.space	2
 2529 0064 00000000 		.word	0
 2530 0068 00020000 		.word	512
 2531 006c 00000000 		.word	0
 2532 0070 00000000 		.word	0
 2533              	.LC28:
 2534 0074 2C000000 		.word	.LC8
 2535 0078 00000000 		.word	ApplicationFSMEntry
 2536 007c 0200     		.short	2
 2537 007e 0000     		.space	2
 2538 0080 00000000 		.word	0
 2539 0084 00020000 		.word	512
 2540 0088 00000000 		.word	0
 2541 008c 00000000 		.word	0
 2542              	.LC29:
 2543 0090 3C000000 		.word	.LC10
 2544 0094 00000000 		.word	EmergencyStopTaskEntry
 2545 0098 0000     		.short	0
 2546 009a 0000     		.space	2
 2547 009c 00000000 		.word	0
 2548 00a0 80000000 		.word	128
 2549 00a4 00000000 		.word	0
 2550 00a8 00000000 		.word	0
 2551              	.LC30:
 2552 00ac 50000000 		.word	.LC12
 2553 00b0 00000000 		.word	MotorControlTaskEntry
 2554 00b4 0000     		.short	0
 2555 00b6 0000     		.space	2
 2556 00b8 00000000 		.word	0
 2557 00bc 00020000 		.word	512
 2558 00c0 00000000 		.word	0
 2559 00c4 00000000 		.word	0
 2560              	.LC31:
 2561 00c8 64000000 		.word	.LC14
 2562 00cc 00000000 		.word	LCDPrintTaskEntry
 2563 00d0 0000     		.short	0
 2564 00d2 0000     		.space	2
 2565 00d4 00000000 		.word	0
 2566 00d8 80000000 		.word	128
 2567 00dc 00000000 		.word	0
 2568 00e0 00000000 		.word	0
 2569              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 2570              		.align	2
 2571              		.set	.LANCHOR20,. + 0
 2574              	ApplicationFSMHandle:
ARM GAS  /tmp/ccNe93V8.s 			page 91


 2575 0000 00000000 		.space	4
 2576              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 2577              		.align	2
 2578              		.set	.LANCHOR18,. + 0
 2581              	BlinkLEDTaskHandle:
 2582 0000 00000000 		.space	4
 2583              		.section	.bss.EmergencyStopTaskHandle,"aw",%nobits
 2584              		.align	2
 2585              		.set	.LANCHOR21,. + 0
 2588              	EmergencyStopTaskHandle:
 2589 0000 00000000 		.space	4
 2590              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 2591              		.align	2
 2592              		.set	.LANCHOR1,. + 0
 2595              	LCDPrintQueueHandle:
 2596 0000 00000000 		.space	4
 2597              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 2598              		.align	2
 2599              		.set	.LANCHOR23,. + 0
 2602              	LCDPrintTaskHandle:
 2603 0000 00000000 		.space	4
 2604              		.section	.bss.MappedServoAngle,"aw",%nobits
 2605              		.align	2
 2606              		.set	.LANCHOR11,. + 0
 2609              	MappedServoAngle:
 2610 0000 00000000 		.space	8
 2610      00000000 
 2611              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 2612              		.align	2
 2613              		.set	.LANCHOR4,. + 0
 2616              	MiniBotInputQueueHandle:
 2617 0000 00000000 		.space	4
 2618              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 2619              		.align	2
 2620              		.set	.LANCHOR19,. + 0
 2623              	MiniBotInputsHandle:
 2624 0000 00000000 		.space	4
 2625              		.section	.bss.MiniBot_Qdata_Buf,"aw",%nobits
 2626              		.align	2
 2627              		.set	.LANCHOR3,. + 0
 2630              	MiniBot_Qdata_Buf:
 2631 0000 00000000 		.space	52
 2631      00000000 
 2631      00000000 
 2631      00000000 
 2631      00000000 
 2632              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
 2633              		.align	2
 2634              		.set	.LANCHOR6,. + 0
 2637              	MotorControlQueueHandle:
 2638 0000 00000000 		.space	4
 2639              		.section	.bss.MotorControlTaskHandle,"aw",%nobits
 2640              		.align	2
 2641              		.set	.LANCHOR22,. + 0
 2644              	MotorControlTaskHandle:
 2645 0000 00000000 		.space	4
 2646              		.section	.bss.MotorControl_Qdata_Buf,"aw",%nobits
ARM GAS  /tmp/ccNe93V8.s 			page 92


 2647              		.align	2
 2648              		.set	.LANCHOR12,. + 0
 2651              	MotorControl_Qdata_Buf:
 2652 0000 00000000 		.space	52
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2652      00000000 
 2653              		.section	.bss.PotRawValue,"aw",%nobits
 2654              		.align	2
 2655              		.set	.LANCHOR10,. + 0
 2658              	PotRawValue:
 2659 0000 00000000 		.space	16
 2659      00000000 
 2659      00000000 
 2659      00000000 
 2660              		.section	.bss.Qdata,"aw",%nobits
 2661              		.align	2
 2662              		.set	.LANCHOR8,. + 0
 2665              	Qdata:
 2666 0000 00000000 		.space	52
 2666      00000000 
 2666      00000000 
 2666      00000000 
 2666      00000000 
 2667              		.section	.bss.StateMutexHandle,"aw",%nobits
 2668              		.align	2
 2669              		.set	.LANCHOR15,. + 0
 2672              	StateMutexHandle:
 2673 0000 00000000 		.space	4
 2674              		.section	.bss.Temp_Qdata_Buf,"aw",%nobits
 2675              		.align	2
 2676              		.set	.LANCHOR5,. + 0
 2679              	Temp_Qdata_Buf:
 2680 0000 00000000 		.space	52
 2680      00000000 
 2680      00000000 
 2680      00000000 
 2680      00000000 
 2681              		.section	.bss.defaultTaskHandle,"aw",%nobits
 2682              		.align	2
 2683              		.set	.LANCHOR17,. + 0
 2686              	defaultTaskHandle:
 2687 0000 00000000 		.space	4
 2688              		.section	.bss.hadc1,"aw",%nobits
 2689              		.align	2
 2690              		.set	.LANCHOR9,. + 0
 2693              	hadc1:
 2694 0000 00000000 		.space	72
 2694      00000000 
 2694      00000000 
 2694      00000000 
 2694      00000000 
 2695              		.section	.bss.hi2c1,"aw",%nobits
 2696              		.align	2
 2697              		.set	.LANCHOR7,. + 0
 2700              	hi2c1:
ARM GAS  /tmp/ccNe93V8.s 			page 93


 2701 0000 00000000 		.space	84
 2701      00000000 
 2701      00000000 
 2701      00000000 
 2701      00000000 
 2702              		.section	.bss.hi2c2,"aw",%nobits
 2703              		.align	2
 2704              		.set	.LANCHOR14,. + 0
 2707              	hi2c2:
 2708 0000 00000000 		.space	84
 2708      00000000 
 2708      00000000 
 2708      00000000 
 2708      00000000 
 2709              		.section	.bss.huart2,"aw",%nobits
 2710              		.align	2
 2711              		.set	.LANCHOR13,. + 0
 2714              	huart2:
 2715 0000 00000000 		.space	72
 2715      00000000 
 2715      00000000 
 2715      00000000 
 2715      00000000 
 2716              		.section	.bss.state,"aw",%nobits
 2717              		.set	.LANCHOR0,. + 0
 2720              	state:
 2721 0000 00       		.space	1
 2722              		.section	.bss.tempFailedToPostMessage,"aw",%nobits
 2723              		.set	.LANCHOR2,. + 0
 2726              	tempFailedToPostMessage:
 2727 0000 00       		.space	1
 2728              		.text
 2729              	.Letext0:
 2730              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2731              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2732              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2733              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2734              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2735              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2736              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2737              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2738              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2739              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2740              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2741              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2742              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2743              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2744              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2745              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2746              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2747              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2748              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2749              		.file 22 "Core/Inc/I2C_LCD.h"
 2750              		.file 23 "Core/Inc/pca9685.h"
 2751              		.file 24 "<built-in>"
ARM GAS  /tmp/ccNe93V8.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNe93V8.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccNe93V8.s:40     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccNe93V8.s:47     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccNe93V8.s:231    .text.MX_GPIO_Init:00000000000000d8 $d
     /tmp/ccNe93V8.s:239    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccNe93V8.s:246    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccNe93V8.s:277    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccNe93V8.s:282    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccNe93V8.s:289    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccNe93V8.s:324    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccNe93V8.s:329    .text.EmergencyStopTaskEntry:0000000000000000 $t
     /tmp/ccNe93V8.s:336    .text.EmergencyStopTaskEntry:0000000000000000 EmergencyStopTaskEntry
     /tmp/ccNe93V8.s:368    .text.EmergencyStopTaskEntry:0000000000000014 $d
     /tmp/ccNe93V8.s:373    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccNe93V8.s:380    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccNe93V8.s:537    .text.ApplicationFSMEntry:00000000000000d4 $d
     /tmp/ccNe93V8.s:548    .rodata.LCDPrintTaskEntry.str1.4:0000000000000000 $d
     /tmp/ccNe93V8.s:576    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/ccNe93V8.s:583    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/ccNe93V8.s:779    .text.LCDPrintTaskEntry:0000000000000108 $d
     /tmp/ccNe93V8.s:793    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccNe93V8.s:800    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccNe93V8.s:880    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccNe93V8.s:885    .text.ServoDriverInit:0000000000000000 $t
     /tmp/ccNe93V8.s:892    .text.ServoDriverInit:0000000000000000 ServoDriverInit
     /tmp/ccNe93V8.s:963    .text.ServoDriverInit:0000000000000060 $d
     /tmp/ccNe93V8.s:968    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccNe93V8.s:975    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccNe93V8.s:1065   .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccNe93V8.s:1072   .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccNe93V8.s:1154   .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccNe93V8.s:1161   .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccNe93V8.s:1337   .text.MiniBotInputsEntry:00000000000000c0 $d
     /tmp/ccNe93V8.s:1348   .text.MAP:0000000000000000 $t
     /tmp/ccNe93V8.s:1355   .text.MAP:0000000000000000 MAP
     /tmp/ccNe93V8.s:1385   .text.MoveServo:0000000000000000 $t
     /tmp/ccNe93V8.s:1392   .text.MoveServo:0000000000000000 MoveServo
     /tmp/ccNe93V8.s:1537   .text.MoveServo:00000000000000c4 $d
     /tmp/ccNe93V8.s:1542   .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/ccNe93V8.s:1549   .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/ccNe93V8.s:1604   .text.MotorControlTaskEntry:0000000000000034 $d
     /tmp/ccNe93V8.s:1610   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccNe93V8.s:1617   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccNe93V8.s:1650   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccNe93V8.s:1655   .text.Error_Handler:0000000000000000 $t
     /tmp/ccNe93V8.s:1662   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccNe93V8.s:1694   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccNe93V8.s:1700   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccNe93V8.s:1866   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccNe93V8.s:1873   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccNe93V8.s:1879   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccNe93V8.s:1936   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccNe93V8.s:1943   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccNe93V8.s:1949   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccNe93V8.s:2003   .text.MX_USART2_UART_Init:000000000000002c $d
ARM GAS  /tmp/ccNe93V8.s 			page 95


     /tmp/ccNe93V8.s:2009   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccNe93V8.s:2015   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccNe93V8.s:2072   .text.MX_I2C2_Init:000000000000002c $d
     /tmp/ccNe93V8.s:2079   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccNe93V8.s:2086   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccNe93V8.s:2233   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccNe93V8.s:2239   .text.main:0000000000000000 $t
     /tmp/ccNe93V8.s:2246   .text.main:0000000000000000 main
     /tmp/ccNe93V8.s:2455   .text.main:000000000000017c $d
     /tmp/ccNe93V8.s:2672   .bss.StateMutexHandle:0000000000000000 StateMutexHandle
     /tmp/ccNe93V8.s:2595   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/ccNe93V8.s:2637   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/ccNe93V8.s:2616   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccNe93V8.s:2602   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/ccNe93V8.s:2644   .bss.MotorControlTaskHandle:0000000000000000 MotorControlTaskHandle
     /tmp/ccNe93V8.s:2588   .bss.EmergencyStopTaskHandle:0000000000000000 EmergencyStopTaskHandle
     /tmp/ccNe93V8.s:2574   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccNe93V8.s:2623   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccNe93V8.s:2581   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccNe93V8.s:2686   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccNe93V8.s:2714   .bss.huart2:0000000000000000 huart2
     /tmp/ccNe93V8.s:2707   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccNe93V8.s:2700   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccNe93V8.s:2693   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccNe93V8.s:2720   .bss.state:0000000000000000 state
     /tmp/ccNe93V8.s:2609   .bss.MappedServoAngle:0000000000000000 MappedServoAngle
     /tmp/ccNe93V8.s:2726   .bss.tempFailedToPostMessage:0000000000000000 tempFailedToPostMessage
     /tmp/ccNe93V8.s:2651   .bss.MotorControl_Qdata_Buf:0000000000000000 MotorControl_Qdata_Buf
     /tmp/ccNe93V8.s:2679   .bss.Temp_Qdata_Buf:0000000000000000 Temp_Qdata_Buf
     /tmp/ccNe93V8.s:2630   .bss.MiniBot_Qdata_Buf:0000000000000000 MiniBot_Qdata_Buf
     /tmp/ccNe93V8.s:2658   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccNe93V8.s:2665   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccNe93V8.s:2494   .rodata:0000000000000000 $d
     /tmp/ccNe93V8.s:2570   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2577   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2584   .bss.EmergencyStopTaskHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2591   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2598   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2605   .bss.MappedServoAngle:0000000000000000 $d
     /tmp/ccNe93V8.s:2612   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2619   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2626   .bss.MiniBot_Qdata_Buf:0000000000000000 $d
     /tmp/ccNe93V8.s:2633   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2640   .bss.MotorControlTaskHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2647   .bss.MotorControl_Qdata_Buf:0000000000000000 $d
     /tmp/ccNe93V8.s:2654   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccNe93V8.s:2661   .bss.Qdata:0000000000000000 $d
     /tmp/ccNe93V8.s:2668   .bss.StateMutexHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2675   .bss.Temp_Qdata_Buf:0000000000000000 $d
     /tmp/ccNe93V8.s:2682   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccNe93V8.s:2689   .bss.hadc1:0000000000000000 $d
     /tmp/ccNe93V8.s:2696   .bss.hi2c1:0000000000000000 $d
     /tmp/ccNe93V8.s:2703   .bss.hi2c2:0000000000000000 $d
     /tmp/ccNe93V8.s:2710   .bss.huart2:0000000000000000 $d
     /tmp/ccNe93V8.s:2721   .bss.state:0000000000000000 $d
     /tmp/ccNe93V8.s:2727   .bss.tempFailedToPostMessage:0000000000000000 $d

ARM GAS  /tmp/ccNe93V8.s 			page 96


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_GPIO_ReadPin
xQueueGenericSend
xQueueReceive
I2C_LCD_Init
I2C_LCD_SetCursor
I2C_LCD_WriteString
I2C_LCD_Clear
PCA9685_Init
PCA9685_SetServoAngle
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
