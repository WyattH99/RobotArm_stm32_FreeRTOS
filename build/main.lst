ARM GAS  /tmp/ccOwdLsn.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	MX_GPIO_Init:
  26              	.LFB249:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccOwdLsn.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /*
  35:Core/Src/main.c ****  * MiniBot Structures
  36:Core/Src/main.c ****  */
  37:Core/Src/main.c **** typedef struct{
  38:Core/Src/main.c **** 	uint8_t  PotNum;
  39:Core/Src/main.c **** 	uint32_t PotMin;
  40:Core/Src/main.c **** 	uint32_t PotMax;
  41:Core/Src/main.c **** 	uint8_t  PotInvertRange;
  42:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct{
  45:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  46:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  47:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** typedef struct{
  50:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  51:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  52:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  54:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  55:Core/Src/main.c **** } MiniBot_Config_t;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c **** 	uint32_t BasePotValue;
  59:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  60:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  61:Core/Src/main.c **** 	uint32_t WristPotValue;
  62:Core/Src/main.c **** 	uint8_t  GripperValue;
  63:Core/Src/main.c **** } MiniBot_Qdata;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  66:Core/Src/main.c **** uint32_t PotRawValue[4];
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /*
  70:Core/Src/main.c ****  * MegaBot Structures
  71:Core/Src/main.c ****  */
  72:Core/Src/main.c **** typedef struct{
  73:Core/Src/main.c **** 	uint8_t  ServoNum;
  74:Core/Src/main.c **** 	uint16_t ServoMin;
  75:Core/Src/main.c **** 	uint16_t ServoMax;
  76:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  77:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** typedef struct{
  80:Core/Src/main.c **** 	uint8_t  ServoNum;
  81:Core/Src/main.c **** 	uint16_t ServoMin;
  82:Core/Src/main.c **** 	uint16_t ServoMax;
  83:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  84:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** typedef struct{
  87:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
  88:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
ARM GAS  /tmp/ccOwdLsn.s 			page 3


  89:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
  90:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
  91:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
  92:Core/Src/main.c **** } MegaBot_Config_t;
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* USER CODE END PTD */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  97:Core/Src/main.c **** /* USER CODE BEGIN PD */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* USER CODE END PD */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 102:Core/Src/main.c **** /* USER CODE BEGIN PM */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** /* USER CODE END PM */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 107:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 108:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** UART_HandleTypeDef huart2;
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /* Definitions for defaultTask */
 115:Core/Src/main.c **** osThreadId_t defaultTaskHandle;
 116:Core/Src/main.c **** const osThreadAttr_t defaultTask_attributes = {
 117:Core/Src/main.c ****   .name = "defaultTask",
 118:Core/Src/main.c ****   .stack_size = 128 * 4,
 119:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 120:Core/Src/main.c **** };
 121:Core/Src/main.c **** /* Definitions for BlinkLEDTask */
 122:Core/Src/main.c **** osThreadId_t BlinkLEDTaskHandle;
 123:Core/Src/main.c **** const osThreadAttr_t BlinkLEDTask_attributes = {
 124:Core/Src/main.c ****   .name = "BlinkLEDTask",
 125:Core/Src/main.c ****   .stack_size = 128 * 4,
 126:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityLow,
 127:Core/Src/main.c **** };
 128:Core/Src/main.c **** /* Definitions for MiniBotInputs */
 129:Core/Src/main.c **** osThreadId_t MiniBotInputsHandle;
 130:Core/Src/main.c **** const osThreadAttr_t MiniBotInputs_attributes = {
 131:Core/Src/main.c ****   .name = "MiniBotInputs",
 132:Core/Src/main.c ****   .stack_size = 128 * 4,
 133:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 134:Core/Src/main.c **** };
 135:Core/Src/main.c **** /* Definitions for ApplicationFSM */
 136:Core/Src/main.c **** osThreadId_t ApplicationFSMHandle;
 137:Core/Src/main.c **** const osThreadAttr_t ApplicationFSM_attributes = {
 138:Core/Src/main.c ****   .name = "ApplicationFSM",
 139:Core/Src/main.c ****   .stack_size = 128 * 4,
 140:Core/Src/main.c ****   .priority = (osPriority_t) osPriorityNormal,
 141:Core/Src/main.c **** };
 142:Core/Src/main.c **** /* Definitions for MiniBotInputQueue */
 143:Core/Src/main.c **** osMessageQueueId_t MiniBotInputQueueHandle;
 144:Core/Src/main.c **** const osMessageQueueAttr_t MiniBotInputQueue_attributes = {
 145:Core/Src/main.c ****   .name = "MiniBotInputQueue"
ARM GAS  /tmp/ccOwdLsn.s 			page 4


 146:Core/Src/main.c **** };
 147:Core/Src/main.c **** /* USER CODE BEGIN PV */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** /* USER CODE END PV */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 152:Core/Src/main.c **** void SystemClock_Config(void);
 153:Core/Src/main.c **** static void MX_GPIO_Init(void);
 154:Core/Src/main.c **** static void MX_DMA_Init(void);
 155:Core/Src/main.c **** static void MX_ADC1_Init(void);
 156:Core/Src/main.c **** static void MX_I2C1_Init(void);
 157:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 158:Core/Src/main.c **** void StartDefaultTask(void *argument);
 159:Core/Src/main.c **** void BlinkLEDTaskEntry(void *argument);
 160:Core/Src/main.c **** void MiniBotInputsEntry(void *argument);
 161:Core/Src/main.c **** void ApplicationFSMEntry(void *argument);
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 166:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot);
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, MiniBot_Joint_Config_t *Joint, uint32_t *QPotData);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /* USER CODE END PFP */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 173:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** /* USER CODE END 0 */
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** /**
 179:Core/Src/main.c ****   * @brief  The application entry point.
 180:Core/Src/main.c ****   * @retval int
 181:Core/Src/main.c ****   */
 182:Core/Src/main.c **** int main(void)
 183:Core/Src/main.c **** {
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   /* USER CODE END 1 */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 192:Core/Src/main.c ****   HAL_Init();
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END Init */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* Configure the system clock */
 199:Core/Src/main.c ****   SystemClock_Config();
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 202:Core/Src/main.c **** 
ARM GAS  /tmp/ccOwdLsn.s 			page 5


 203:Core/Src/main.c ****   /* USER CODE END SysInit */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* Initialize all configured peripherals */
 206:Core/Src/main.c ****   MX_GPIO_Init();
 207:Core/Src/main.c ****   MX_DMA_Init();
 208:Core/Src/main.c ****   MX_ADC1_Init();
 209:Core/Src/main.c ****   MX_I2C1_Init();
 210:Core/Src/main.c ****   MX_USART2_UART_Init();
 211:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE END 2 */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* Init scheduler */
 216:Core/Src/main.c ****   osKernelInitialize();
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 219:Core/Src/main.c ****   /* add mutexes, ... */
 220:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 223:Core/Src/main.c ****   /* add semaphores, ... */
 224:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 227:Core/Src/main.c ****   /* start timers, add new ones, ... */
 228:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* Create the queue(s) */
 231:Core/Src/main.c ****   /* creation of MiniBotInputQueue */
 232:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &MiniBotInputQueue_attributes)
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 235:Core/Src/main.c ****   /* add queues, ... */
 236:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* Create the thread(s) */
 239:Core/Src/main.c ****   /* creation of defaultTask */
 240:Core/Src/main.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* creation of BlinkLEDTask */
 243:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadNew(BlinkLEDTaskEntry, NULL, &BlinkLEDTask_attributes);
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* creation of MiniBotInputs */
 246:Core/Src/main.c ****   MiniBotInputsHandle = osThreadNew(MiniBotInputsEntry, NULL, &MiniBotInputs_attributes);
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /* creation of ApplicationFSM */
 249:Core/Src/main.c ****   ApplicationFSMHandle = osThreadNew(ApplicationFSMEntry, NULL, &ApplicationFSM_attributes);
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 252:Core/Src/main.c ****   /* add threads, ... */
 253:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 256:Core/Src/main.c ****   /* add events, ... */
 257:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* Start scheduler */
ARM GAS  /tmp/ccOwdLsn.s 			page 6


 260:Core/Src/main.c ****   osKernelStart();
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /* Infinite loop */
 265:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 266:Core/Src/main.c ****   while (1)
 267:Core/Src/main.c ****   {
 268:Core/Src/main.c ****     /* USER CODE END WHILE */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 271:Core/Src/main.c ****   }
 272:Core/Src/main.c ****   /* USER CODE END 3 */
 273:Core/Src/main.c **** }
 274:Core/Src/main.c **** 
 275:Core/Src/main.c **** /**
 276:Core/Src/main.c ****   * @brief System Clock Configuration
 277:Core/Src/main.c ****   * @retval None
 278:Core/Src/main.c ****   */
 279:Core/Src/main.c **** void SystemClock_Config(void)
 280:Core/Src/main.c **** {
 281:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 282:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 285:Core/Src/main.c ****   */
 286:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 287:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 290:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 291:Core/Src/main.c ****   */
 292:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 293:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 294:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 295:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 296:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 297:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 298:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 299:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 300:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 301:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 302:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     Error_Handler();
 305:Core/Src/main.c ****   }
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 308:Core/Src/main.c ****   */
 309:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 310:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 311:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 312:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 313:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 314:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
ARM GAS  /tmp/ccOwdLsn.s 			page 7


 317:Core/Src/main.c ****   {
 318:Core/Src/main.c ****     Error_Handler();
 319:Core/Src/main.c ****   }
 320:Core/Src/main.c **** }
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** /**
 323:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 324:Core/Src/main.c ****   * @param None
 325:Core/Src/main.c ****   * @retval None
 326:Core/Src/main.c ****   */
 327:Core/Src/main.c **** static void MX_ADC1_Init(void)
 328:Core/Src/main.c **** {
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 341:Core/Src/main.c ****   */
 342:Core/Src/main.c ****   hadc1.Instance = ADC1;
 343:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 344:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 345:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 346:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 347:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 348:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 349:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 350:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 351:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 352:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 353:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 354:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 355:Core/Src/main.c ****   {
 356:Core/Src/main.c ****     Error_Handler();
 357:Core/Src/main.c ****   }
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 360:Core/Src/main.c ****   */
 361:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 362:Core/Src/main.c ****   sConfig.Rank = 1;
 363:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 364:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 365:Core/Src/main.c ****   {
 366:Core/Src/main.c ****     Error_Handler();
 367:Core/Src/main.c ****   }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 370:Core/Src/main.c ****   */
 371:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 372:Core/Src/main.c ****   sConfig.Rank = 2;
 373:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccOwdLsn.s 			page 8


 374:Core/Src/main.c ****   {
 375:Core/Src/main.c ****     Error_Handler();
 376:Core/Src/main.c ****   }
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 379:Core/Src/main.c ****   */
 380:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 381:Core/Src/main.c ****   sConfig.Rank = 3;
 382:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 383:Core/Src/main.c ****   {
 384:Core/Src/main.c ****     Error_Handler();
 385:Core/Src/main.c ****   }
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 388:Core/Src/main.c ****   */
 389:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 390:Core/Src/main.c ****   sConfig.Rank = 4;
 391:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 396:Core/Src/main.c **** 
 397:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 398:Core/Src/main.c **** 
 399:Core/Src/main.c **** }
 400:Core/Src/main.c **** 
 401:Core/Src/main.c **** /**
 402:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 403:Core/Src/main.c ****   * @param None
 404:Core/Src/main.c ****   * @retval None
 405:Core/Src/main.c ****   */
 406:Core/Src/main.c **** static void MX_I2C1_Init(void)
 407:Core/Src/main.c **** {
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 416:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 417:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 418:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 419:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 420:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 421:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 422:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 423:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 424:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 425:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 426:Core/Src/main.c ****   {
 427:Core/Src/main.c ****     Error_Handler();
 428:Core/Src/main.c ****   }
 429:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 430:Core/Src/main.c **** 
ARM GAS  /tmp/ccOwdLsn.s 			page 9


 431:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** }
 434:Core/Src/main.c **** 
 435:Core/Src/main.c **** /**
 436:Core/Src/main.c ****   * @brief USART2 Initialization Function
 437:Core/Src/main.c ****   * @param None
 438:Core/Src/main.c ****   * @retval None
 439:Core/Src/main.c ****   */
 440:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 441:Core/Src/main.c **** {
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 450:Core/Src/main.c ****   huart2.Instance = USART2;
 451:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 452:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 453:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 454:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 455:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 456:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 457:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 458:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 459:Core/Src/main.c ****   {
 460:Core/Src/main.c ****     Error_Handler();
 461:Core/Src/main.c ****   }
 462:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 465:Core/Src/main.c **** 
 466:Core/Src/main.c **** }
 467:Core/Src/main.c **** 
 468:Core/Src/main.c **** /**
 469:Core/Src/main.c ****   * Enable DMA controller clock
 470:Core/Src/main.c ****   */
 471:Core/Src/main.c **** static void MX_DMA_Init(void)
 472:Core/Src/main.c **** {
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* DMA controller clock enable */
 475:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* DMA interrupt init */
 478:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 479:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 480:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 481:Core/Src/main.c **** 
 482:Core/Src/main.c **** }
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** /**
 485:Core/Src/main.c ****   * @brief GPIO Initialization Function
 486:Core/Src/main.c ****   * @param None
 487:Core/Src/main.c ****   * @retval None
ARM GAS  /tmp/ccOwdLsn.s 			page 10


 488:Core/Src/main.c ****   */
 489:Core/Src/main.c **** static void MX_GPIO_Init(void)
 490:Core/Src/main.c **** {
  28              		.loc 1 490 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 491:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 491 3 view .LVU1
  41              		.loc 1 491 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 492:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 493:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 496:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 496 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 496 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 496 3 view .LVU5
  53 0012 274B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 496 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 496 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 496 3 view .LVU8
 497:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 497 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 497 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 497 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 497 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccOwdLsn.s 			page 11


  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 497 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 497 3 view .LVU14
 498:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 498 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 498 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 498 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 498 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 498 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 498 3 view .LVU20
 499:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 499 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 499 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 499 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 499 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 499 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 499 3 view .LVU26
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 502:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 502 3 view .LVU27
 114 0062 144D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 503:Core/Src/main.c **** 
 504:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 505:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 505 3 view .LVU28
 121              		.loc 1 505 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/ccOwdLsn.s 			page 12


 506:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 506 3 is_stmt 1 view .LVU30
 125              		.loc 1 506 24 is_stmt 0 view .LVU31
 126 0074 4FF40413 		mov	r3, #2162688
 127 0078 0693     		str	r3, [sp, #24]
 507:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 507 3 is_stmt 1 view .LVU32
 129              		.loc 1 507 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 508:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 508 3 is_stmt 1 view .LVU34
 132 007c 05A9     		add	r1, sp, #20
 133 007e 0E48     		ldr	r0, .L3+8
 134 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL1:
 509:Core/Src/main.c **** 
 510:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 511:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 136              		.loc 1 511 3 view .LVU35
 137              		.loc 1 511 23 is_stmt 0 view .LVU36
 138 0084 2023     		movs	r3, #32
 139 0086 0593     		str	r3, [sp, #20]
 512:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 140              		.loc 1 512 3 is_stmt 1 view .LVU37
 141              		.loc 1 512 24 is_stmt 0 view .LVU38
 142 0088 0126     		movs	r6, #1
 143 008a 0696     		str	r6, [sp, #24]
 513:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 144              		.loc 1 513 3 is_stmt 1 view .LVU39
 145              		.loc 1 513 24 is_stmt 0 view .LVU40
 146 008c 0794     		str	r4, [sp, #28]
 514:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 147              		.loc 1 514 3 is_stmt 1 view .LVU41
 148              		.loc 1 514 25 is_stmt 0 view .LVU42
 149 008e 0894     		str	r4, [sp, #32]
 515:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 150              		.loc 1 515 3 is_stmt 1 view .LVU43
 151 0090 05A9     		add	r1, sp, #20
 152 0092 2846     		mov	r0, r5
 153 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 154              	.LVL2:
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 518:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 155              		.loc 1 518 3 view .LVU44
 156              		.loc 1 518 23 is_stmt 0 view .LVU45
 157 0098 4FF40073 		mov	r3, #512
 158 009c 0593     		str	r3, [sp, #20]
 519:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 159              		.loc 1 519 3 is_stmt 1 view .LVU46
 160              		.loc 1 519 24 is_stmt 0 view .LVU47
 161 009e 0694     		str	r4, [sp, #24]
 520:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 162              		.loc 1 520 3 is_stmt 1 view .LVU48
 163              		.loc 1 520 24 is_stmt 0 view .LVU49
 164 00a0 0796     		str	r6, [sp, #28]
 521:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/ccOwdLsn.s 			page 13


 165              		.loc 1 521 3 is_stmt 1 view .LVU50
 166 00a2 05A9     		add	r1, sp, #20
 167 00a4 2846     		mov	r0, r5
 168 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 522:Core/Src/main.c **** 
 523:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 524:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 525:Core/Src/main.c **** }
 170              		.loc 1 525 1 is_stmt 0 view .LVU51
 171 00aa 0AB0     		add	sp, sp, #40
 172              		.cfi_def_cfa_offset 16
 173              		@ sp needed
 174 00ac 70BD     		pop	{r4, r5, r6, pc}
 175              	.L4:
 176 00ae 00BF     		.align	2
 177              	.L3:
 178 00b0 00380240 		.word	1073887232
 179 00b4 00000240 		.word	1073872896
 180 00b8 00080240 		.word	1073874944
 181              		.cfi_endproc
 182              	.LFE249:
 184              		.section	.text.MX_DMA_Init,"ax",%progbits
 185              		.align	1
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	MX_DMA_Init:
 192              	.LFB248:
 472:Core/Src/main.c **** 
 193              		.loc 1 472 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 8
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 00B5     		push	{lr}
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 14, -4
 200 0002 83B0     		sub	sp, sp, #12
 201              		.cfi_def_cfa_offset 16
 475:Core/Src/main.c **** 
 202              		.loc 1 475 3 view .LVU53
 203              	.LBB8:
 475:Core/Src/main.c **** 
 204              		.loc 1 475 3 view .LVU54
 205 0004 0022     		movs	r2, #0
 206 0006 0192     		str	r2, [sp, #4]
 475:Core/Src/main.c **** 
 207              		.loc 1 475 3 view .LVU55
 208 0008 094B     		ldr	r3, .L7
 209 000a 196B     		ldr	r1, [r3, #48]
 210 000c 41F48001 		orr	r1, r1, #4194304
 211 0010 1963     		str	r1, [r3, #48]
 475:Core/Src/main.c **** 
 212              		.loc 1 475 3 view .LVU56
 213 0012 1B6B     		ldr	r3, [r3, #48]
 214 0014 03F48003 		and	r3, r3, #4194304
ARM GAS  /tmp/ccOwdLsn.s 			page 14


 215 0018 0193     		str	r3, [sp, #4]
 475:Core/Src/main.c **** 
 216              		.loc 1 475 3 view .LVU57
 217 001a 019B     		ldr	r3, [sp, #4]
 218              	.LBE8:
 475:Core/Src/main.c **** 
 219              		.loc 1 475 3 view .LVU58
 479:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 220              		.loc 1 479 3 view .LVU59
 221 001c 0521     		movs	r1, #5
 222 001e 3820     		movs	r0, #56
 223 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 224              	.LVL4:
 480:Core/Src/main.c **** 
 225              		.loc 1 480 3 view .LVU60
 226 0024 3820     		movs	r0, #56
 227 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 228              	.LVL5:
 482:Core/Src/main.c **** 
 229              		.loc 1 482 1 is_stmt 0 view .LVU61
 230 002a 03B0     		add	sp, sp, #12
 231              		.cfi_def_cfa_offset 4
 232              		@ sp needed
 233 002c 5DF804FB 		ldr	pc, [sp], #4
 234              	.L8:
 235              		.align	2
 236              	.L7:
 237 0030 00380240 		.word	1073887232
 238              		.cfi_endproc
 239              	.LFE248:
 241              		.section	.text.StartDefaultTask,"ax",%progbits
 242              		.align	1
 243              		.global	StartDefaultTask
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	StartDefaultTask:
 250              	.LFB253:
 526:Core/Src/main.c **** 
 527:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 528:Core/Src/main.c **** 
 529:Core/Src/main.c **** 
 530:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 531:Core/Src/main.c **** 	// Configure Each of the joints
 532:Core/Src/main.c **** 
 533:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 534:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 535:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 536:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 539:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 540:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 541:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 542:Core/Src/main.c **** 
 543:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
ARM GAS  /tmp/ccOwdLsn.s 			page 15


 544:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 545:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 546:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 547:Core/Src/main.c **** 
 548:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 549:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 550:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 551:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 552:Core/Src/main.c **** 
 553:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 554:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 555:Core/Src/main.c **** }
 556:Core/Src/main.c **** 
 557:Core/Src/main.c **** void MegaBotInit(MiniBot_Config_t* MegaBot){
 558:Core/Src/main.c **** 
 559:Core/Src/main.c **** }
 560:Core/Src/main.c **** 
 561:Core/Src/main.c **** 
 562:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, MiniBot_Joint_Config_t *Joint, uint32_t *QPotData){
 563:Core/Src/main.c ****   if(PotRawValue + 10 > *QPotData || PotRawValue - 10 < *QPotData){
 564:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 565:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 566:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 567:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 568:Core/Src/main.c ****     }else{
 569:Core/Src/main.c ****       *QPotData = PotRawValue;
 570:Core/Src/main.c ****     }
 571:Core/Src/main.c ****     if(Joint->PotInvertRange){
 572:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 573:Core/Src/main.c ****     }
 574:Core/Src/main.c ****   }
 575:Core/Src/main.c **** }
 576:Core/Src/main.c **** 
 577:Core/Src/main.c **** 
 578:Core/Src/main.c **** 
 579:Core/Src/main.c **** /* USER CODE END 4 */
 580:Core/Src/main.c **** 
 581:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 582:Core/Src/main.c **** /**
 583:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 584:Core/Src/main.c ****   * @param  argument: Not used
 585:Core/Src/main.c ****   * @retval None
 586:Core/Src/main.c ****   */
 587:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 588:Core/Src/main.c **** void StartDefaultTask(void *argument)
 589:Core/Src/main.c **** {
 251              		.loc 1 589 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ Volatile: function does not return.
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL6:
 257              		.loc 1 589 1 is_stmt 0 view .LVU63
 258 0000 08B5     		push	{r3, lr}
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 3, -8
 261              		.cfi_offset 14, -4
ARM GAS  /tmp/ccOwdLsn.s 			page 16


 262              	.LVL7:
 263              	.L10:
 590:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 591:Core/Src/main.c ****   /* Infinite loop */
 592:Core/Src/main.c ****   for(;;)
 264              		.loc 1 592 3 is_stmt 1 discriminator 1 view .LVU64
 593:Core/Src/main.c ****   {
 594:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 265              		.loc 1 594 5 discriminator 1 view .LVU65
 266 0002 0022     		movs	r2, #0
 267 0004 2021     		movs	r1, #32
 268 0006 0448     		ldr	r0, .L12
 269 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 270              	.LVL8:
 595:Core/Src/main.c ****     osDelay(1000);
 271              		.loc 1 595 5 discriminator 1 view .LVU66
 272 000c 4FF47A70 		mov	r0, #1000
 273 0010 FFF7FEFF 		bl	osDelay
 274              	.LVL9:
 592:Core/Src/main.c ****   {
 275              		.loc 1 592 8 discriminator 1 view .LVU67
 276 0014 F5E7     		b	.L10
 277              	.L13:
 278 0016 00BF     		.align	2
 279              	.L12:
 280 0018 00000240 		.word	1073872896
 281              		.cfi_endproc
 282              	.LFE253:
 284              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
 285              		.align	1
 286              		.global	BlinkLEDTaskEntry
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	BlinkLEDTaskEntry:
 293              	.LFB254:
 596:Core/Src/main.c ****   }
 597:Core/Src/main.c ****   /* USER CODE END 5 */
 598:Core/Src/main.c **** }
 599:Core/Src/main.c **** 
 600:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 601:Core/Src/main.c **** /**
 602:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 603:Core/Src/main.c **** * @param argument: Not used
 604:Core/Src/main.c **** * @retval None
 605:Core/Src/main.c **** */
 606:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 607:Core/Src/main.c **** void BlinkLEDTaskEntry(void *argument)
 608:Core/Src/main.c **** {
 294              		.loc 1 608 1 view -0
 295              		.cfi_startproc
 296              		@ Volatile: function does not return.
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              	.LVL10:
 300              		.loc 1 608 1 is_stmt 0 view .LVU69
ARM GAS  /tmp/ccOwdLsn.s 			page 17


 301 0000 08B5     		push	{r3, lr}
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 3, -8
 304              		.cfi_offset 14, -4
 305              	.LVL11:
 306              	.L15:
 609:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 610:Core/Src/main.c ****   /* Infinite loop */
 611:Core/Src/main.c ****   for(;;)
 307              		.loc 1 611 3 is_stmt 1 discriminator 1 view .LVU70
 612:Core/Src/main.c ****   {
 613:Core/Src/main.c ****     
 614:Core/Src/main.c ****     osDelay(500);
 308              		.loc 1 614 5 discriminator 1 view .LVU71
 309 0002 4FF4FA70 		mov	r0, #500
 310 0006 FFF7FEFF 		bl	osDelay
 311              	.LVL12:
 615:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 312              		.loc 1 615 5 discriminator 1 view .LVU72
 313 000a 0122     		movs	r2, #1
 314 000c 2021     		movs	r1, #32
 315 000e 0448     		ldr	r0, .L17
 316 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL13:
 616:Core/Src/main.c ****     osDelay(500);
 318              		.loc 1 616 5 discriminator 1 view .LVU73
 319 0014 4FF4FA70 		mov	r0, #500
 320 0018 FFF7FEFF 		bl	osDelay
 321              	.LVL14:
 611:Core/Src/main.c ****   {
 322              		.loc 1 611 8 discriminator 1 view .LVU74
 323 001c F1E7     		b	.L15
 324              	.L18:
 325 001e 00BF     		.align	2
 326              	.L17:
 327 0020 00000240 		.word	1073872896
 328              		.cfi_endproc
 329              	.LFE254:
 331              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 332              		.align	1
 333              		.global	ApplicationFSMEntry
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	ApplicationFSMEntry:
 340              	.LFB256:
 617:Core/Src/main.c ****   }
 618:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 619:Core/Src/main.c **** }
 620:Core/Src/main.c **** 
 621:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 622:Core/Src/main.c **** /**
 623:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 624:Core/Src/main.c **** * @param argument: Not used
 625:Core/Src/main.c **** * @retval None
 626:Core/Src/main.c **** */
ARM GAS  /tmp/ccOwdLsn.s 			page 18


 627:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 628:Core/Src/main.c **** void MiniBotInputsEntry(void *argument)
 629:Core/Src/main.c **** {
 630:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 631:Core/Src/main.c **** 
 632:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 633:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 634:Core/Src/main.c ****   
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   
 637:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, PotRawValue, 4);
 638:Core/Src/main.c **** 
 639:Core/Src/main.c **** 	/* Infinite loop */
 640:Core/Src/main.c **** 	for(;;)
 641:Core/Src/main.c **** 	{
 642:Core/Src/main.c ****     // TODO: Turn this into a function
 643:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
 644:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 645:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 646:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 647:Core/Src/main.c ****     
 648:Core/Src/main.c ****     // if(PotRawValue[0] > MiniBot.Base.PotMax){
 649:Core/Src/main.c ****     //   Qdata.BasePotValue = MiniBot.Base.PotMax;
 650:Core/Src/main.c ****     // }else if(PotRawValue[0] < MiniBot.Base.PotMin){
 651:Core/Src/main.c ****     //   Qdata.BasePotValue = MiniBot.Base.PotMin;
 652:Core/Src/main.c ****     // }else{
 653:Core/Src/main.c ****     //   Qdata.BasePotValue = PotRawValue[0];
 654:Core/Src/main.c ****     // }
 655:Core/Src/main.c ****     // if(MiniBot.Base.PotInvertRange){
 656:Core/Src/main.c ****     //   Qdata.BasePotValue = MiniBot.Base.PotMax - Qdata.BasePotValue + MiniBot.Base.PotMin;
 657:Core/Src/main.c ****     // }
 658:Core/Src/main.c **** 
 659:Core/Src/main.c ****     // if(PotRawValue[1] > MiniBot.Shoulder.PotMax){
 660:Core/Src/main.c ****     //   Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax;
 661:Core/Src/main.c ****     // }else if(PotRawValue[1] < MiniBot.Shoulder.PotMin){
 662:Core/Src/main.c ****     //   Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMin;
 663:Core/Src/main.c ****     // }else{
 664:Core/Src/main.c ****     //   Qdata.ShoulderPotValue = PotRawValue[1];
 665:Core/Src/main.c ****     // }
 666:Core/Src/main.c ****     // if(MiniBot.Shoulder.PotInvertRange){
 667:Core/Src/main.c ****     //   Qdata.ShoulderPotValue = MiniBot.Shoulder.PotMax - Qdata.ShoulderPotValue + MiniBot.Should
 668:Core/Src/main.c ****     // }
 669:Core/Src/main.c **** 
 670:Core/Src/main.c ****     // if(PotRawValue[2] > MiniBot.Elbow.PotMax){
 671:Core/Src/main.c ****     //   Qdata.ElbowPotValue = MiniBot.Elbow.PotMax;
 672:Core/Src/main.c ****     // }else if(PotRawValue[2] < MiniBot.Elbow.PotMin){
 673:Core/Src/main.c ****     //   Qdata.ElbowPotValue = MiniBot.Elbow.PotMin;
 674:Core/Src/main.c ****     // }else{
 675:Core/Src/main.c ****     //   Qdata.ElbowPotValue = PotRawValue[2];
 676:Core/Src/main.c ****     // }
 677:Core/Src/main.c ****     // if(MiniBot.Elbow.PotInvertRange){
 678:Core/Src/main.c ****     //   Qdata.ElbowPotValue = MiniBot.Elbow.PotMax - Qdata.ElbowPotValue + MiniBot.Elbow.PotMin;
 679:Core/Src/main.c ****     // }
 680:Core/Src/main.c **** 
 681:Core/Src/main.c ****     // if(PotRawValue[3] > MiniBot.Wrist.PotMax){
 682:Core/Src/main.c ****     //   Qdata.WristPotValue = MiniBot.Wrist.PotMax;
 683:Core/Src/main.c ****     // }else if(PotRawValue[3] < MiniBot.Wrist.PotMin){
ARM GAS  /tmp/ccOwdLsn.s 			page 19


 684:Core/Src/main.c ****     //   Qdata.WristPotValue = MiniBot.Wrist.PotMin;
 685:Core/Src/main.c ****     // }else{
 686:Core/Src/main.c ****     //   Qdata.WristPotValue = PotRawValue[3];
 687:Core/Src/main.c ****     // }
 688:Core/Src/main.c ****     // if(MiniBot.Wrist.PotInvertRange){
 689:Core/Src/main.c ****     //   Qdata.WristPotValue = MiniBot.Wrist.PotMax - Qdata.WristPotValue + MiniBot.Wrist.PotMin;
 690:Core/Src/main.c ****     // }
 691:Core/Src/main.c **** 
 692:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 693:Core/Src/main.c ****     
 694:Core/Src/main.c **** 
 695:Core/Src/main.c **** 		osDelay(1);
 696:Core/Src/main.c **** 	}
 697:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 698:Core/Src/main.c **** }
 699:Core/Src/main.c **** 
 700:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 701:Core/Src/main.c **** /**
 702:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 703:Core/Src/main.c **** * @param argument: Not used
 704:Core/Src/main.c **** * @retval None
 705:Core/Src/main.c **** */
 706:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 707:Core/Src/main.c **** void ApplicationFSMEntry(void *argument)
 708:Core/Src/main.c **** {
 341              		.loc 1 708 1 view -0
 342              		.cfi_startproc
 343              		@ Volatile: function does not return.
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL15:
 347              		.loc 1 708 1 is_stmt 0 view .LVU76
 348 0000 08B5     		push	{r3, lr}
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 3, -8
 351              		.cfi_offset 14, -4
 352              	.LVL16:
 353              	.L20:
 709:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 710:Core/Src/main.c ****   /* Infinite loop */
 711:Core/Src/main.c ****   for(;;)
 354              		.loc 1 711 3 is_stmt 1 discriminator 1 view .LVU77
 712:Core/Src/main.c ****   {
 713:Core/Src/main.c ****     osDelay(1);
 355              		.loc 1 713 5 discriminator 1 view .LVU78
 356 0002 0120     		movs	r0, #1
 357 0004 FFF7FEFF 		bl	osDelay
 358              	.LVL17:
 711:Core/Src/main.c ****   {
 359              		.loc 1 711 8 discriminator 1 view .LVU79
 360 0008 FBE7     		b	.L20
 361              		.cfi_endproc
 362              	.LFE256:
 364              		.section	.text.MiniBotInit,"ax",%progbits
 365              		.align	1
 366              		.global	MiniBotInit
 367              		.syntax unified
ARM GAS  /tmp/ccOwdLsn.s 			page 20


 368              		.thumb
 369              		.thumb_func
 370              		.fpu fpv4-sp-d16
 372              	MiniBotInit:
 373              	.LVL18:
 374              	.LFB250:
 530:Core/Src/main.c **** 	// Configure Each of the joints
 375              		.loc 1 530 44 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 530:Core/Src/main.c **** 	// Configure Each of the joints
 379              		.loc 1 530 44 is_stmt 0 view .LVU81
 380 0000 00B5     		push	{lr}
 381              		.cfi_def_cfa_offset 4
 382              		.cfi_offset 14, -4
 533:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 383              		.loc 1 533 4 is_stmt 1 view .LVU82
 533:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 384              		.loc 1 533 25 is_stmt 0 view .LVU83
 385 0002 0023     		movs	r3, #0
 386 0004 0370     		strb	r3, [r0]
 534:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 387              		.loc 1 534 4 is_stmt 1 view .LVU84
 534:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 388              		.loc 1 534 25 is_stmt 0 view .LVU85
 389 0006 4FF44872 		mov	r2, #800
 390 000a 4260     		str	r2, [r0, #4]
 535:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 391              		.loc 1 535 4 is_stmt 1 view .LVU86
 535:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 392              		.loc 1 535 25 is_stmt 0 view .LVU87
 393 000c 40F64851 		movw	r1, #3400
 394 0010 8160     		str	r1, [r0, #8]
 536:Core/Src/main.c **** 
 395              		.loc 1 536 4 is_stmt 1 view .LVU88
 536:Core/Src/main.c **** 
 396              		.loc 1 536 33 is_stmt 0 view .LVU89
 397 0012 0373     		strb	r3, [r0, #12]
 538:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 398              		.loc 1 538 4 is_stmt 1 view .LVU90
 538:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 399              		.loc 1 538 29 is_stmt 0 view .LVU91
 400 0014 4FF0010C 		mov	ip, #1
 401 0018 80F810C0 		strb	ip, [r0, #16]
 539:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 402              		.loc 1 539 4 is_stmt 1 view .LVU92
 539:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 403              		.loc 1 539 29 is_stmt 0 view .LVU93
 404 001c 4FF41672 		mov	r2, #600
 405 0020 4261     		str	r2, [r0, #20]
 540:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 406              		.loc 1 540 4 is_stmt 1 view .LVU94
 540:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 407              		.loc 1 540 29 is_stmt 0 view .LVU95
 408 0022 8161     		str	r1, [r0, #24]
 541:Core/Src/main.c **** 
ARM GAS  /tmp/ccOwdLsn.s 			page 21


 409              		.loc 1 541 4 is_stmt 1 view .LVU96
 541:Core/Src/main.c **** 
 410              		.loc 1 541 37 is_stmt 0 view .LVU97
 411 0024 0377     		strb	r3, [r0, #28]
 543:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 412              		.loc 1 543 4 is_stmt 1 view .LVU98
 543:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 413              		.loc 1 543 26 is_stmt 0 view .LVU99
 414 0026 4FF0020E 		mov	lr, #2
 415 002a 80F820E0 		strb	lr, [r0, #32]
 544:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 416              		.loc 1 544 4 is_stmt 1 view .LVU100
 544:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 417              		.loc 1 544 26 is_stmt 0 view .LVU101
 418 002e 4262     		str	r2, [r0, #36]
 545:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 419              		.loc 1 545 4 is_stmt 1 view .LVU102
 545:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 420              		.loc 1 545 26 is_stmt 0 view .LVU103
 421 0030 8162     		str	r1, [r0, #40]
 546:Core/Src/main.c **** 
 422              		.loc 1 546 4 is_stmt 1 view .LVU104
 546:Core/Src/main.c **** 
 423              		.loc 1 546 34 is_stmt 0 view .LVU105
 424 0032 80F82C30 		strb	r3, [r0, #44]
 548:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 425              		.loc 1 548 4 is_stmt 1 view .LVU106
 548:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 426              		.loc 1 548 26 is_stmt 0 view .LVU107
 427 0036 0323     		movs	r3, #3
 428 0038 80F83030 		strb	r3, [r0, #48]
 549:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 429              		.loc 1 549 4 is_stmt 1 view .LVU108
 549:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 430              		.loc 1 549 26 is_stmt 0 view .LVU109
 431 003c 4263     		str	r2, [r0, #52]
 550:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 432              		.loc 1 550 4 is_stmt 1 view .LVU110
 550:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 433              		.loc 1 550 26 is_stmt 0 view .LVU111
 434 003e 4FF44863 		mov	r3, #3200
 435 0042 8363     		str	r3, [r0, #56]
 551:Core/Src/main.c **** 
 436              		.loc 1 551 4 is_stmt 1 view .LVU112
 551:Core/Src/main.c **** 
 437              		.loc 1 551 34 is_stmt 0 view .LVU113
 438 0044 80F83CC0 		strb	ip, [r0, #60]
 553:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 439              		.loc 1 553 4 is_stmt 1 view .LVU114
 553:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 440              		.loc 1 553 27 is_stmt 0 view .LVU115
 441 0048 034B     		ldr	r3, .L24
 442 004a 0364     		str	r3, [r0, #64]
 554:Core/Src/main.c **** }
 443              		.loc 1 554 4 is_stmt 1 view .LVU116
 554:Core/Src/main.c **** }
 444              		.loc 1 554 30 is_stmt 0 view .LVU117
ARM GAS  /tmp/ccOwdLsn.s 			page 22


 445 004c 4FF40073 		mov	r3, #512
 446 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 555:Core/Src/main.c **** 
 447              		.loc 1 555 1 view .LVU118
 448 0054 5DF804FB 		ldr	pc, [sp], #4
 449              	.L25:
 450              		.align	2
 451              	.L24:
 452 0058 00000240 		.word	1073872896
 453              		.cfi_endproc
 454              	.LFE250:
 456              		.section	.text.MegaBotInit,"ax",%progbits
 457              		.align	1
 458              		.global	MegaBotInit
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	MegaBotInit:
 465              	.LVL19:
 466              	.LFB251:
 557:Core/Src/main.c **** 
 467              		.loc 1 557 44 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 559:Core/Src/main.c **** 
 472              		.loc 1 559 1 view .LVU120
 473 0000 7047     		bx	lr
 474              		.cfi_endproc
 475              	.LFE251:
 477              		.section	.text.QPotDataUpdate,"ax",%progbits
 478              		.align	1
 479              		.global	QPotDataUpdate
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	QPotDataUpdate:
 486              	.LVL20:
 487              	.LFB252:
 562:Core/Src/main.c ****   if(PotRawValue + 10 > *QPotData || PotRawValue - 10 < *QPotData){
 488              		.loc 1 562 93 view -0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 563:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 493              		.loc 1 563 3 view .LVU122
 563:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 494              		.loc 1 563 18 is_stmt 0 view .LVU123
 495 0000 00F10A0C 		add	ip, r0, #10
 563:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 496              		.loc 1 563 25 view .LVU124
 497 0004 1368     		ldr	r3, [r2]
 563:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
ARM GAS  /tmp/ccOwdLsn.s 			page 23


 498              		.loc 1 563 5 view .LVU125
 499 0006 9C45     		cmp	ip, r3
 500 0008 03D8     		bhi	.L28
 563:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 501              		.loc 1 563 50 discriminator 1 view .LVU126
 502 000a A0F10A0C 		sub	ip, r0, #10
 563:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 503              		.loc 1 563 35 discriminator 1 view .LVU127
 504 000e 6345     		cmp	r3, ip
 505 0010 0BD9     		bls	.L27
 506              	.L28:
 564:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 507              		.loc 1 564 5 is_stmt 1 view .LVU128
 564:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 508              		.loc 1 564 27 is_stmt 0 view .LVU129
 509 0012 8B68     		ldr	r3, [r1, #8]
 564:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 510              		.loc 1 564 7 view .LVU130
 511 0014 8342     		cmp	r3, r0
 512 0016 09D2     		bcs	.L30
 565:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 513              		.loc 1 565 7 is_stmt 1 view .LVU131
 565:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 514              		.loc 1 565 17 is_stmt 0 view .LVU132
 515 0018 1360     		str	r3, [r2]
 516              	.L31:
 571:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 517              		.loc 1 571 5 is_stmt 1 view .LVU133
 571:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 518              		.loc 1 571 13 is_stmt 0 view .LVU134
 519 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 571:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 520              		.loc 1 571 7 view .LVU135
 521 001c 2BB1     		cbz	r3, .L27
 572:Core/Src/main.c ****     }
 522              		.loc 1 572 7 is_stmt 1 view .LVU136
 572:Core/Src/main.c ****     }
 523              		.loc 1 572 24 is_stmt 0 view .LVU137
 524 001e 8B68     		ldr	r3, [r1, #8]
 572:Core/Src/main.c ****     }
 525              		.loc 1 572 35 view .LVU138
 526 0020 1068     		ldr	r0, [r2]
 527              	.LVL21:
 572:Core/Src/main.c ****     }
 528              		.loc 1 572 33 view .LVU139
 529 0022 1B1A     		subs	r3, r3, r0
 572:Core/Src/main.c ****     }
 530              		.loc 1 572 52 view .LVU140
 531 0024 4968     		ldr	r1, [r1, #4]
 532              	.LVL22:
 572:Core/Src/main.c ****     }
 533              		.loc 1 572 45 view .LVU141
 534 0026 0B44     		add	r3, r3, r1
 572:Core/Src/main.c ****     }
 535              		.loc 1 572 17 view .LVU142
 536 0028 1360     		str	r3, [r2]
 537              	.L27:
ARM GAS  /tmp/ccOwdLsn.s 			page 24


 575:Core/Src/main.c **** 
 538              		.loc 1 575 1 view .LVU143
 539 002a 7047     		bx	lr
 540              	.LVL23:
 541              	.L30:
 566:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 542              		.loc 1 566 11 is_stmt 1 view .LVU144
 566:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 543              		.loc 1 566 33 is_stmt 0 view .LVU145
 544 002c 4B68     		ldr	r3, [r1, #4]
 566:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 545              		.loc 1 566 13 view .LVU146
 546 002e 8342     		cmp	r3, r0
 547 0030 01D9     		bls	.L32
 567:Core/Src/main.c ****     }else{
 548              		.loc 1 567 7 is_stmt 1 view .LVU147
 567:Core/Src/main.c ****     }else{
 549              		.loc 1 567 17 is_stmt 0 view .LVU148
 550 0032 1360     		str	r3, [r2]
 551 0034 F1E7     		b	.L31
 552              	.L32:
 569:Core/Src/main.c ****     }
 553              		.loc 1 569 7 is_stmt 1 view .LVU149
 569:Core/Src/main.c ****     }
 554              		.loc 1 569 17 is_stmt 0 view .LVU150
 555 0036 1060     		str	r0, [r2]
 556 0038 EFE7     		b	.L31
 557              		.cfi_endproc
 558              	.LFE252:
 560              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 561              		.align	1
 562              		.global	MiniBotInputsEntry
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	MiniBotInputsEntry:
 569              	.LVL24:
 570              	.LFB255:
 629:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 571              		.loc 1 629 1 is_stmt 1 view -0
 572              		.cfi_startproc
 573              		@ Volatile: function does not return.
 574              		@ args = 0, pretend = 0, frame = 72
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 629:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 576              		.loc 1 629 1 is_stmt 0 view .LVU152
 577 0000 00B5     		push	{lr}
 578              		.cfi_def_cfa_offset 4
 579              		.cfi_offset 14, -4
 580 0002 93B0     		sub	sp, sp, #76
 581              		.cfi_def_cfa_offset 80
 632:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 582              		.loc 1 632 2 is_stmt 1 view .LVU153
 633:Core/Src/main.c ****   
 583              		.loc 1 633 2 view .LVU154
 584 0004 6846     		mov	r0, sp
ARM GAS  /tmp/ccOwdLsn.s 			page 25


 585              	.LVL25:
 633:Core/Src/main.c ****   
 586              		.loc 1 633 2 is_stmt 0 view .LVU155
 587 0006 FFF7FEFF 		bl	MiniBotInit
 588              	.LVL26:
 637:Core/Src/main.c **** 
 589              		.loc 1 637 3 is_stmt 1 view .LVU156
 590 000a 0422     		movs	r2, #4
 591 000c 1249     		ldr	r1, .L36
 592 000e 1348     		ldr	r0, .L36+4
 593 0010 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 594              	.LVL27:
 595              	.L34:
 640:Core/Src/main.c **** 	{
 596              		.loc 1 640 2 discriminator 1 view .LVU157
 643:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 597              		.loc 1 643 5 discriminator 1 view .LVU158
 598 0014 124C     		ldr	r4, .L36+8
 599 0016 104D     		ldr	r5, .L36
 600 0018 2246     		mov	r2, r4
 601 001a 6946     		mov	r1, sp
 602 001c 2868     		ldr	r0, [r5]
 603 001e FFF7FEFF 		bl	QPotDataUpdate
 604              	.LVL28:
 644:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 605              		.loc 1 644 5 discriminator 1 view .LVU159
 606 0022 221D     		adds	r2, r4, #4
 607 0024 04A9     		add	r1, sp, #16
 608 0026 6868     		ldr	r0, [r5, #4]
 609 0028 FFF7FEFF 		bl	QPotDataUpdate
 610              	.LVL29:
 645:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 611              		.loc 1 645 5 discriminator 1 view .LVU160
 612 002c 04F10802 		add	r2, r4, #8
 613 0030 08A9     		add	r1, sp, #32
 614 0032 A868     		ldr	r0, [r5, #8]
 615 0034 FFF7FEFF 		bl	QPotDataUpdate
 616              	.LVL30:
 646:Core/Src/main.c ****     
 617              		.loc 1 646 5 discriminator 1 view .LVU161
 618 0038 04F10C02 		add	r2, r4, #12
 619 003c 0CA9     		add	r1, sp, #48
 620 003e E868     		ldr	r0, [r5, #12]
 621 0040 FFF7FEFF 		bl	QPotDataUpdate
 622              	.LVL31:
 692:Core/Src/main.c ****     
 623              		.loc 1 692 5 discriminator 1 view .LVU162
 692:Core/Src/main.c ****     
 624              		.loc 1 692 35 is_stmt 0 discriminator 1 view .LVU163
 625 0044 4FF40071 		mov	r1, #512
 626 0048 0648     		ldr	r0, .L36+12
 627 004a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 628              	.LVL32:
 692:Core/Src/main.c ****     
 629              		.loc 1 692 24 discriminator 1 view .LVU164
 630 004e 2074     		strb	r0, [r4, #16]
 695:Core/Src/main.c **** 	}
ARM GAS  /tmp/ccOwdLsn.s 			page 26


 631              		.loc 1 695 3 is_stmt 1 discriminator 1 view .LVU165
 632 0050 0120     		movs	r0, #1
 633 0052 FFF7FEFF 		bl	osDelay
 634              	.LVL33:
 640:Core/Src/main.c **** 	{
 635              		.loc 1 640 7 discriminator 1 view .LVU166
 636 0056 DDE7     		b	.L34
 637              	.L37:
 638              		.align	2
 639              	.L36:
 640 0058 00000000 		.word	.LANCHOR0
 641 005c 00000000 		.word	.LANCHOR1
 642 0060 00000000 		.word	.LANCHOR2
 643 0064 00000240 		.word	1073872896
 644              		.cfi_endproc
 645              	.LFE255:
 647              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 648              		.align	1
 649              		.global	HAL_TIM_PeriodElapsedCallback
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 653              		.fpu fpv4-sp-d16
 655              	HAL_TIM_PeriodElapsedCallback:
 656              	.LVL34:
 657              	.LFB257:
 714:Core/Src/main.c ****   }
 715:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 716:Core/Src/main.c **** }
 717:Core/Src/main.c **** 
 718:Core/Src/main.c **** /**
 719:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 720:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 721:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 722:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 723:Core/Src/main.c ****   * @param  htim : TIM handle
 724:Core/Src/main.c ****   * @retval None
 725:Core/Src/main.c ****   */
 726:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 727:Core/Src/main.c **** {
 658              		.loc 1 727 1 view -0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		.loc 1 727 1 is_stmt 0 view .LVU168
 663 0000 08B5     		push	{r3, lr}
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 3, -8
 666              		.cfi_offset 14, -4
 728:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 729:Core/Src/main.c **** 
 730:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 731:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 667              		.loc 1 731 3 is_stmt 1 view .LVU169
 668              		.loc 1 731 11 is_stmt 0 view .LVU170
 669 0002 0268     		ldr	r2, [r0]
 670              		.loc 1 731 6 view .LVU171
ARM GAS  /tmp/ccOwdLsn.s 			page 27


 671 0004 034B     		ldr	r3, .L42
 672 0006 9A42     		cmp	r2, r3
 673 0008 00D0     		beq	.L41
 674              	.LVL35:
 675              	.L38:
 732:Core/Src/main.c ****     HAL_IncTick();
 733:Core/Src/main.c ****   }
 734:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 735:Core/Src/main.c **** 
 736:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 737:Core/Src/main.c **** }
 676              		.loc 1 737 1 view .LVU172
 677 000a 08BD     		pop	{r3, pc}
 678              	.LVL36:
 679              	.L41:
 732:Core/Src/main.c ****     HAL_IncTick();
 680              		.loc 1 732 5 is_stmt 1 view .LVU173
 681 000c FFF7FEFF 		bl	HAL_IncTick
 682              	.LVL37:
 683              		.loc 1 737 1 is_stmt 0 view .LVU174
 684 0010 FBE7     		b	.L38
 685              	.L43:
 686 0012 00BF     		.align	2
 687              	.L42:
 688 0014 00100040 		.word	1073745920
 689              		.cfi_endproc
 690              	.LFE257:
 692              		.section	.text.Error_Handler,"ax",%progbits
 693              		.align	1
 694              		.global	Error_Handler
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu fpv4-sp-d16
 700              	Error_Handler:
 701              	.LFB258:
 738:Core/Src/main.c **** 
 739:Core/Src/main.c **** /**
 740:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 741:Core/Src/main.c ****   * @retval None
 742:Core/Src/main.c ****   */
 743:Core/Src/main.c **** void Error_Handler(void)
 744:Core/Src/main.c **** {
 702              		.loc 1 744 1 is_stmt 1 view -0
 703              		.cfi_startproc
 704              		@ Volatile: function does not return.
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 745:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 746:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 747:Core/Src/main.c ****   __disable_irq();
 708              		.loc 1 747 3 view .LVU176
 709              	.LBB9:
 710              	.LBI9:
 711              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
ARM GAS  /tmp/ccOwdLsn.s 			page 28


   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
ARM GAS  /tmp/ccOwdLsn.s 			page 29


  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccOwdLsn.s 			page 30


 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccOwdLsn.s 			page 31


 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccOwdLsn.s 			page 32


 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccOwdLsn.s 			page 33


 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
ARM GAS  /tmp/ccOwdLsn.s 			page 34


 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
ARM GAS  /tmp/ccOwdLsn.s 			page 35


 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccOwdLsn.s 			page 36


 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
ARM GAS  /tmp/ccOwdLsn.s 			page 37


 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
ARM GAS  /tmp/ccOwdLsn.s 			page 38


 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  /tmp/ccOwdLsn.s 			page 39


 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccOwdLsn.s 			page 40


 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
ARM GAS  /tmp/ccOwdLsn.s 			page 41


 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccOwdLsn.s 			page 42


 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
ARM GAS  /tmp/ccOwdLsn.s 			page 43


 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccOwdLsn.s 			page 44


 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 712              		.loc 2 960 27 view .LVU177
 713              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 714              		.loc 2 962 3 view .LVU178
 715              		.syntax unified
 716              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 717 0000 72B6     		cpsid i
 718              	@ 0 "" 2
 719              		.thumb
ARM GAS  /tmp/ccOwdLsn.s 			page 45


 720              		.syntax unified
 721              	.L45:
 722              	.LBE10:
 723              	.LBE9:
 748:Core/Src/main.c ****   while (1)
 724              		.loc 1 748 3 discriminator 1 view .LVU179
 749:Core/Src/main.c ****   {
 750:Core/Src/main.c ****   }
 725              		.loc 1 750 3 discriminator 1 view .LVU180
 748:Core/Src/main.c ****   while (1)
 726              		.loc 1 748 9 discriminator 1 view .LVU181
 727 0002 FEE7     		b	.L45
 728              		.cfi_endproc
 729              	.LFE258:
 731              		.section	.text.MX_ADC1_Init,"ax",%progbits
 732              		.align	1
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 736              		.fpu fpv4-sp-d16
 738              	MX_ADC1_Init:
 739              	.LFB245:
 328:Core/Src/main.c **** 
 740              		.loc 1 328 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 16
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744 0000 00B5     		push	{lr}
 745              		.cfi_def_cfa_offset 4
 746              		.cfi_offset 14, -4
 747 0002 85B0     		sub	sp, sp, #20
 748              		.cfi_def_cfa_offset 24
 334:Core/Src/main.c **** 
 749              		.loc 1 334 3 view .LVU183
 334:Core/Src/main.c **** 
 750              		.loc 1 334 26 is_stmt 0 view .LVU184
 751 0004 0023     		movs	r3, #0
 752 0006 0093     		str	r3, [sp]
 753 0008 0193     		str	r3, [sp, #4]
 754 000a 0293     		str	r3, [sp, #8]
 755 000c 0393     		str	r3, [sp, #12]
 342:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 756              		.loc 1 342 3 is_stmt 1 view .LVU185
 342:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 757              		.loc 1 342 18 is_stmt 0 view .LVU186
 758 000e 2548     		ldr	r0, .L58
 759 0010 254A     		ldr	r2, .L58+4
 760 0012 0260     		str	r2, [r0]
 343:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 761              		.loc 1 343 3 is_stmt 1 view .LVU187
 343:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 762              		.loc 1 343 29 is_stmt 0 view .LVU188
 763 0014 4FF48032 		mov	r2, #65536
 764 0018 4260     		str	r2, [r0, #4]
 344:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 765              		.loc 1 344 3 is_stmt 1 view .LVU189
 344:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
ARM GAS  /tmp/ccOwdLsn.s 			page 46


 766              		.loc 1 344 25 is_stmt 0 view .LVU190
 767 001a 8360     		str	r3, [r0, #8]
 345:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 768              		.loc 1 345 3 is_stmt 1 view .LVU191
 345:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 769              		.loc 1 345 27 is_stmt 0 view .LVU192
 770 001c 0122     		movs	r2, #1
 771 001e 0261     		str	r2, [r0, #16]
 346:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 772              		.loc 1 346 3 is_stmt 1 view .LVU193
 346:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 773              		.loc 1 346 33 is_stmt 0 view .LVU194
 774 0020 0276     		strb	r2, [r0, #24]
 347:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 775              		.loc 1 347 3 is_stmt 1 view .LVU195
 347:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 776              		.loc 1 347 36 is_stmt 0 view .LVU196
 777 0022 80F82030 		strb	r3, [r0, #32]
 348:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 778              		.loc 1 348 3 is_stmt 1 view .LVU197
 348:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 779              		.loc 1 348 35 is_stmt 0 view .LVU198
 780 0026 C362     		str	r3, [r0, #44]
 349:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 781              		.loc 1 349 3 is_stmt 1 view .LVU199
 349:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 782              		.loc 1 349 31 is_stmt 0 view .LVU200
 783 0028 2049     		ldr	r1, .L58+8
 784 002a 8162     		str	r1, [r0, #40]
 350:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 785              		.loc 1 350 3 is_stmt 1 view .LVU201
 350:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 786              		.loc 1 350 24 is_stmt 0 view .LVU202
 787 002c C360     		str	r3, [r0, #12]
 351:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 788              		.loc 1 351 3 is_stmt 1 view .LVU203
 351:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 789              		.loc 1 351 30 is_stmt 0 view .LVU204
 790 002e 0421     		movs	r1, #4
 791 0030 C161     		str	r1, [r0, #28]
 352:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 792              		.loc 1 352 3 is_stmt 1 view .LVU205
 352:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 793              		.loc 1 352 36 is_stmt 0 view .LVU206
 794 0032 80F83020 		strb	r2, [r0, #48]
 353:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 795              		.loc 1 353 3 is_stmt 1 view .LVU207
 353:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 796              		.loc 1 353 27 is_stmt 0 view .LVU208
 797 0036 4361     		str	r3, [r0, #20]
 354:Core/Src/main.c ****   {
 798              		.loc 1 354 3 is_stmt 1 view .LVU209
 354:Core/Src/main.c ****   {
 799              		.loc 1 354 7 is_stmt 0 view .LVU210
 800 0038 FFF7FEFF 		bl	HAL_ADC_Init
 801              	.LVL38:
 354:Core/Src/main.c ****   {
ARM GAS  /tmp/ccOwdLsn.s 			page 47


 802              		.loc 1 354 6 view .LVU211
 803 003c 38BB     		cbnz	r0, .L53
 361:Core/Src/main.c ****   sConfig.Rank = 1;
 804              		.loc 1 361 3 is_stmt 1 view .LVU212
 361:Core/Src/main.c ****   sConfig.Rank = 1;
 805              		.loc 1 361 19 is_stmt 0 view .LVU213
 806 003e 0023     		movs	r3, #0
 807 0040 0093     		str	r3, [sp]
 362:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 808              		.loc 1 362 3 is_stmt 1 view .LVU214
 362:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 809              		.loc 1 362 16 is_stmt 0 view .LVU215
 810 0042 0122     		movs	r2, #1
 811 0044 0192     		str	r2, [sp, #4]
 363:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 812              		.loc 1 363 3 is_stmt 1 view .LVU216
 363:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 813              		.loc 1 363 24 is_stmt 0 view .LVU217
 814 0046 0293     		str	r3, [sp, #8]
 364:Core/Src/main.c ****   {
 815              		.loc 1 364 3 is_stmt 1 view .LVU218
 364:Core/Src/main.c ****   {
 816              		.loc 1 364 7 is_stmt 0 view .LVU219
 817 0048 6946     		mov	r1, sp
 818 004a 1648     		ldr	r0, .L58
 819 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 820              	.LVL39:
 364:Core/Src/main.c ****   {
 821              		.loc 1 364 6 view .LVU220
 822 0050 F8B9     		cbnz	r0, .L54
 371:Core/Src/main.c ****   sConfig.Rank = 2;
 823              		.loc 1 371 3 is_stmt 1 view .LVU221
 371:Core/Src/main.c ****   sConfig.Rank = 2;
 824              		.loc 1 371 19 is_stmt 0 view .LVU222
 825 0052 0123     		movs	r3, #1
 826 0054 0093     		str	r3, [sp]
 372:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 827              		.loc 1 372 3 is_stmt 1 view .LVU223
 372:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 828              		.loc 1 372 16 is_stmt 0 view .LVU224
 829 0056 0223     		movs	r3, #2
 830 0058 0193     		str	r3, [sp, #4]
 373:Core/Src/main.c ****   {
 831              		.loc 1 373 3 is_stmt 1 view .LVU225
 373:Core/Src/main.c ****   {
 832              		.loc 1 373 7 is_stmt 0 view .LVU226
 833 005a 6946     		mov	r1, sp
 834 005c 1148     		ldr	r0, .L58
 835 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 836              	.LVL40:
 373:Core/Src/main.c ****   {
 837              		.loc 1 373 6 view .LVU227
 838 0062 C0B9     		cbnz	r0, .L55
 380:Core/Src/main.c ****   sConfig.Rank = 3;
 839              		.loc 1 380 3 is_stmt 1 view .LVU228
 380:Core/Src/main.c ****   sConfig.Rank = 3;
 840              		.loc 1 380 19 is_stmt 0 view .LVU229
ARM GAS  /tmp/ccOwdLsn.s 			page 48


 841 0064 0423     		movs	r3, #4
 842 0066 0093     		str	r3, [sp]
 381:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 843              		.loc 1 381 3 is_stmt 1 view .LVU230
 381:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 844              		.loc 1 381 16 is_stmt 0 view .LVU231
 845 0068 0323     		movs	r3, #3
 846 006a 0193     		str	r3, [sp, #4]
 382:Core/Src/main.c ****   {
 847              		.loc 1 382 3 is_stmt 1 view .LVU232
 382:Core/Src/main.c ****   {
 848              		.loc 1 382 7 is_stmt 0 view .LVU233
 849 006c 6946     		mov	r1, sp
 850 006e 0D48     		ldr	r0, .L58
 851 0070 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 852              	.LVL41:
 382:Core/Src/main.c ****   {
 853              		.loc 1 382 6 view .LVU234
 854 0074 88B9     		cbnz	r0, .L56
 389:Core/Src/main.c ****   sConfig.Rank = 4;
 855              		.loc 1 389 3 is_stmt 1 view .LVU235
 389:Core/Src/main.c ****   sConfig.Rank = 4;
 856              		.loc 1 389 19 is_stmt 0 view .LVU236
 857 0076 0823     		movs	r3, #8
 858 0078 0093     		str	r3, [sp]
 390:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 859              		.loc 1 390 3 is_stmt 1 view .LVU237
 390:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 860              		.loc 1 390 16 is_stmt 0 view .LVU238
 861 007a 0423     		movs	r3, #4
 862 007c 0193     		str	r3, [sp, #4]
 391:Core/Src/main.c ****   {
 863              		.loc 1 391 3 is_stmt 1 view .LVU239
 391:Core/Src/main.c ****   {
 864              		.loc 1 391 7 is_stmt 0 view .LVU240
 865 007e 6946     		mov	r1, sp
 866 0080 0848     		ldr	r0, .L58
 867 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 868              	.LVL42:
 391:Core/Src/main.c ****   {
 869              		.loc 1 391 6 view .LVU241
 870 0086 50B9     		cbnz	r0, .L57
 399:Core/Src/main.c **** 
 871              		.loc 1 399 1 view .LVU242
 872 0088 05B0     		add	sp, sp, #20
 873              		.cfi_remember_state
 874              		.cfi_def_cfa_offset 4
 875              		@ sp needed
 876 008a 5DF804FB 		ldr	pc, [sp], #4
 877              	.L53:
 878              		.cfi_restore_state
 356:Core/Src/main.c ****   }
 879              		.loc 1 356 5 is_stmt 1 view .LVU243
 880 008e FFF7FEFF 		bl	Error_Handler
 881              	.LVL43:
 882              	.L54:
 366:Core/Src/main.c ****   }
ARM GAS  /tmp/ccOwdLsn.s 			page 49


 883              		.loc 1 366 5 view .LVU244
 884 0092 FFF7FEFF 		bl	Error_Handler
 885              	.LVL44:
 886              	.L55:
 375:Core/Src/main.c ****   }
 887              		.loc 1 375 5 view .LVU245
 888 0096 FFF7FEFF 		bl	Error_Handler
 889              	.LVL45:
 890              	.L56:
 384:Core/Src/main.c ****   }
 891              		.loc 1 384 5 view .LVU246
 892 009a FFF7FEFF 		bl	Error_Handler
 893              	.LVL46:
 894              	.L57:
 393:Core/Src/main.c ****   }
 895              		.loc 1 393 5 view .LVU247
 896 009e FFF7FEFF 		bl	Error_Handler
 897              	.LVL47:
 898              	.L59:
 899 00a2 00BF     		.align	2
 900              	.L58:
 901 00a4 00000000 		.word	.LANCHOR1
 902 00a8 00200140 		.word	1073815552
 903 00ac 0100000F 		.word	251658241
 904              		.cfi_endproc
 905              	.LFE245:
 907              		.section	.text.MX_I2C1_Init,"ax",%progbits
 908              		.align	1
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 912              		.fpu fpv4-sp-d16
 914              	MX_I2C1_Init:
 915              	.LFB246:
 407:Core/Src/main.c **** 
 916              		.loc 1 407 1 view -0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 0
 919              		@ frame_needed = 0, uses_anonymous_args = 0
 920 0000 08B5     		push	{r3, lr}
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 3, -8
 923              		.cfi_offset 14, -4
 416:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 924              		.loc 1 416 3 view .LVU249
 416:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 925              		.loc 1 416 18 is_stmt 0 view .LVU250
 926 0002 0A48     		ldr	r0, .L64
 927 0004 0A4B     		ldr	r3, .L64+4
 928 0006 0360     		str	r3, [r0]
 417:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 929              		.loc 1 417 3 is_stmt 1 view .LVU251
 417:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 930              		.loc 1 417 25 is_stmt 0 view .LVU252
 931 0008 0A4B     		ldr	r3, .L64+8
 932 000a 4360     		str	r3, [r0, #4]
 418:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
ARM GAS  /tmp/ccOwdLsn.s 			page 50


 933              		.loc 1 418 3 is_stmt 1 view .LVU253
 418:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 934              		.loc 1 418 24 is_stmt 0 view .LVU254
 935 000c 0023     		movs	r3, #0
 936 000e 8360     		str	r3, [r0, #8]
 419:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 937              		.loc 1 419 3 is_stmt 1 view .LVU255
 419:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 938              		.loc 1 419 26 is_stmt 0 view .LVU256
 939 0010 C360     		str	r3, [r0, #12]
 420:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 940              		.loc 1 420 3 is_stmt 1 view .LVU257
 420:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 941              		.loc 1 420 29 is_stmt 0 view .LVU258
 942 0012 4FF48042 		mov	r2, #16384
 943 0016 0261     		str	r2, [r0, #16]
 421:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 944              		.loc 1 421 3 is_stmt 1 view .LVU259
 421:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 945              		.loc 1 421 30 is_stmt 0 view .LVU260
 946 0018 4361     		str	r3, [r0, #20]
 422:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 947              		.loc 1 422 3 is_stmt 1 view .LVU261
 422:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 948              		.loc 1 422 26 is_stmt 0 view .LVU262
 949 001a 8361     		str	r3, [r0, #24]
 423:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 950              		.loc 1 423 3 is_stmt 1 view .LVU263
 423:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 951              		.loc 1 423 30 is_stmt 0 view .LVU264
 952 001c C361     		str	r3, [r0, #28]
 424:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 953              		.loc 1 424 3 is_stmt 1 view .LVU265
 424:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 954              		.loc 1 424 28 is_stmt 0 view .LVU266
 955 001e 0362     		str	r3, [r0, #32]
 425:Core/Src/main.c ****   {
 956              		.loc 1 425 3 is_stmt 1 view .LVU267
 425:Core/Src/main.c ****   {
 957              		.loc 1 425 7 is_stmt 0 view .LVU268
 958 0020 FFF7FEFF 		bl	HAL_I2C_Init
 959              	.LVL48:
 425:Core/Src/main.c ****   {
 960              		.loc 1 425 6 view .LVU269
 961 0024 00B9     		cbnz	r0, .L63
 433:Core/Src/main.c **** 
 962              		.loc 1 433 1 view .LVU270
 963 0026 08BD     		pop	{r3, pc}
 964              	.L63:
 427:Core/Src/main.c ****   }
 965              		.loc 1 427 5 is_stmt 1 view .LVU271
 966 0028 FFF7FEFF 		bl	Error_Handler
 967              	.LVL49:
 968              	.L65:
 969              		.align	2
 970              	.L64:
 971 002c 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccOwdLsn.s 			page 51


 972 0030 00540040 		.word	1073763328
 973 0034 A0860100 		.word	100000
 974              		.cfi_endproc
 975              	.LFE246:
 977              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 978              		.align	1
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 982              		.fpu fpv4-sp-d16
 984              	MX_USART2_UART_Init:
 985              	.LFB247:
 441:Core/Src/main.c **** 
 986              		.loc 1 441 1 view -0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990 0000 08B5     		push	{r3, lr}
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 3, -8
 993              		.cfi_offset 14, -4
 450:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 994              		.loc 1 450 3 view .LVU273
 450:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 995              		.loc 1 450 19 is_stmt 0 view .LVU274
 996 0002 0A48     		ldr	r0, .L70
 997 0004 0A4B     		ldr	r3, .L70+4
 998 0006 0360     		str	r3, [r0]
 451:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 999              		.loc 1 451 3 is_stmt 1 view .LVU275
 451:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1000              		.loc 1 451 24 is_stmt 0 view .LVU276
 1001 0008 4FF4E133 		mov	r3, #115200
 1002 000c 4360     		str	r3, [r0, #4]
 452:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1003              		.loc 1 452 3 is_stmt 1 view .LVU277
 452:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1004              		.loc 1 452 26 is_stmt 0 view .LVU278
 1005 000e 0023     		movs	r3, #0
 1006 0010 8360     		str	r3, [r0, #8]
 453:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1007              		.loc 1 453 3 is_stmt 1 view .LVU279
 453:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1008              		.loc 1 453 24 is_stmt 0 view .LVU280
 1009 0012 C360     		str	r3, [r0, #12]
 454:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1010              		.loc 1 454 3 is_stmt 1 view .LVU281
 454:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1011              		.loc 1 454 22 is_stmt 0 view .LVU282
 1012 0014 0361     		str	r3, [r0, #16]
 455:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1013              		.loc 1 455 3 is_stmt 1 view .LVU283
 455:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1014              		.loc 1 455 20 is_stmt 0 view .LVU284
 1015 0016 0C22     		movs	r2, #12
 1016 0018 4261     		str	r2, [r0, #20]
 456:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/ccOwdLsn.s 			page 52


 1017              		.loc 1 456 3 is_stmt 1 view .LVU285
 456:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1018              		.loc 1 456 25 is_stmt 0 view .LVU286
 1019 001a 8361     		str	r3, [r0, #24]
 457:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1020              		.loc 1 457 3 is_stmt 1 view .LVU287
 457:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1021              		.loc 1 457 28 is_stmt 0 view .LVU288
 1022 001c C361     		str	r3, [r0, #28]
 458:Core/Src/main.c ****   {
 1023              		.loc 1 458 3 is_stmt 1 view .LVU289
 458:Core/Src/main.c ****   {
 1024              		.loc 1 458 7 is_stmt 0 view .LVU290
 1025 001e FFF7FEFF 		bl	HAL_UART_Init
 1026              	.LVL50:
 458:Core/Src/main.c ****   {
 1027              		.loc 1 458 6 view .LVU291
 1028 0022 00B9     		cbnz	r0, .L69
 466:Core/Src/main.c **** 
 1029              		.loc 1 466 1 view .LVU292
 1030 0024 08BD     		pop	{r3, pc}
 1031              	.L69:
 460:Core/Src/main.c ****   }
 1032              		.loc 1 460 5 is_stmt 1 view .LVU293
 1033 0026 FFF7FEFF 		bl	Error_Handler
 1034              	.LVL51:
 1035              	.L71:
 1036 002a 00BF     		.align	2
 1037              	.L70:
 1038 002c 00000000 		.word	.LANCHOR4
 1039 0030 00440040 		.word	1073759232
 1040              		.cfi_endproc
 1041              	.LFE247:
 1043              		.section	.text.SystemClock_Config,"ax",%progbits
 1044              		.align	1
 1045              		.global	SystemClock_Config
 1046              		.syntax unified
 1047              		.thumb
 1048              		.thumb_func
 1049              		.fpu fpv4-sp-d16
 1051              	SystemClock_Config:
 1052              	.LFB244:
 280:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1053              		.loc 1 280 1 view -0
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 80
 1056              		@ frame_needed = 0, uses_anonymous_args = 0
 1057 0000 00B5     		push	{lr}
 1058              		.cfi_def_cfa_offset 4
 1059              		.cfi_offset 14, -4
 1060 0002 95B0     		sub	sp, sp, #84
 1061              		.cfi_def_cfa_offset 88
 281:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1062              		.loc 1 281 3 view .LVU295
 281:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1063              		.loc 1 281 22 is_stmt 0 view .LVU296
 1064 0004 3422     		movs	r2, #52
ARM GAS  /tmp/ccOwdLsn.s 			page 53


 1065 0006 0021     		movs	r1, #0
 1066 0008 07A8     		add	r0, sp, #28
 1067 000a FFF7FEFF 		bl	memset
 1068              	.LVL52:
 282:Core/Src/main.c **** 
 1069              		.loc 1 282 3 is_stmt 1 view .LVU297
 282:Core/Src/main.c **** 
 1070              		.loc 1 282 22 is_stmt 0 view .LVU298
 1071 000e 0023     		movs	r3, #0
 1072 0010 0293     		str	r3, [sp, #8]
 1073 0012 0393     		str	r3, [sp, #12]
 1074 0014 0493     		str	r3, [sp, #16]
 1075 0016 0593     		str	r3, [sp, #20]
 1076 0018 0693     		str	r3, [sp, #24]
 286:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1077              		.loc 1 286 3 is_stmt 1 view .LVU299
 1078              	.LBB11:
 286:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1079              		.loc 1 286 3 view .LVU300
 1080 001a 0093     		str	r3, [sp]
 286:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1081              		.loc 1 286 3 view .LVU301
 1082 001c 1F4A     		ldr	r2, .L78
 1083 001e 116C     		ldr	r1, [r2, #64]
 1084 0020 41F08051 		orr	r1, r1, #268435456
 1085 0024 1164     		str	r1, [r2, #64]
 286:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1086              		.loc 1 286 3 view .LVU302
 1087 0026 126C     		ldr	r2, [r2, #64]
 1088 0028 02F08052 		and	r2, r2, #268435456
 1089 002c 0092     		str	r2, [sp]
 286:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1090              		.loc 1 286 3 view .LVU303
 1091 002e 009A     		ldr	r2, [sp]
 1092              	.LBE11:
 286:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1093              		.loc 1 286 3 view .LVU304
 287:Core/Src/main.c **** 
 1094              		.loc 1 287 3 view .LVU305
 1095              	.LBB12:
 287:Core/Src/main.c **** 
 1096              		.loc 1 287 3 view .LVU306
 1097 0030 0193     		str	r3, [sp, #4]
 287:Core/Src/main.c **** 
 1098              		.loc 1 287 3 view .LVU307
 1099 0032 1B49     		ldr	r1, .L78+4
 1100 0034 0A68     		ldr	r2, [r1]
 1101 0036 22F44042 		bic	r2, r2, #49152
 1102 003a 42F48042 		orr	r2, r2, #16384
 1103 003e 0A60     		str	r2, [r1]
 287:Core/Src/main.c **** 
 1104              		.loc 1 287 3 view .LVU308
 1105 0040 0A68     		ldr	r2, [r1]
 1106 0042 02F44042 		and	r2, r2, #49152
 1107 0046 0192     		str	r2, [sp, #4]
 287:Core/Src/main.c **** 
 1108              		.loc 1 287 3 view .LVU309
ARM GAS  /tmp/ccOwdLsn.s 			page 54


 1109 0048 019A     		ldr	r2, [sp, #4]
 1110              	.LBE12:
 287:Core/Src/main.c **** 
 1111              		.loc 1 287 3 view .LVU310
 292:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1112              		.loc 1 292 3 view .LVU311
 292:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1113              		.loc 1 292 36 is_stmt 0 view .LVU312
 1114 004a 0222     		movs	r2, #2
 1115 004c 0792     		str	r2, [sp, #28]
 293:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1116              		.loc 1 293 3 is_stmt 1 view .LVU313
 293:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1117              		.loc 1 293 30 is_stmt 0 view .LVU314
 1118 004e 0121     		movs	r1, #1
 1119 0050 0A91     		str	r1, [sp, #40]
 294:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1120              		.loc 1 294 3 is_stmt 1 view .LVU315
 294:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1121              		.loc 1 294 41 is_stmt 0 view .LVU316
 1122 0052 1021     		movs	r1, #16
 1123 0054 0B91     		str	r1, [sp, #44]
 295:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1124              		.loc 1 295 3 is_stmt 1 view .LVU317
 295:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1125              		.loc 1 295 34 is_stmt 0 view .LVU318
 1126 0056 0D92     		str	r2, [sp, #52]
 296:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1127              		.loc 1 296 3 is_stmt 1 view .LVU319
 296:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1128              		.loc 1 296 35 is_stmt 0 view .LVU320
 1129 0058 0E93     		str	r3, [sp, #56]
 297:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1130              		.loc 1 297 3 is_stmt 1 view .LVU321
 297:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1131              		.loc 1 297 30 is_stmt 0 view .LVU322
 1132 005a 0F91     		str	r1, [sp, #60]
 298:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1133              		.loc 1 298 3 is_stmt 1 view .LVU323
 298:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1134              		.loc 1 298 30 is_stmt 0 view .LVU324
 1135 005c 4FF4A873 		mov	r3, #336
 1136 0060 1093     		str	r3, [sp, #64]
 299:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1137              		.loc 1 299 3 is_stmt 1 view .LVU325
 299:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1138              		.loc 1 299 30 is_stmt 0 view .LVU326
 1139 0062 0423     		movs	r3, #4
 1140 0064 1193     		str	r3, [sp, #68]
 300:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1141              		.loc 1 300 3 is_stmt 1 view .LVU327
 300:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1142              		.loc 1 300 30 is_stmt 0 view .LVU328
 1143 0066 1292     		str	r2, [sp, #72]
 301:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1144              		.loc 1 301 3 is_stmt 1 view .LVU329
 301:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/ccOwdLsn.s 			page 55


 1145              		.loc 1 301 30 is_stmt 0 view .LVU330
 1146 0068 1392     		str	r2, [sp, #76]
 302:Core/Src/main.c ****   {
 1147              		.loc 1 302 3 is_stmt 1 view .LVU331
 302:Core/Src/main.c ****   {
 1148              		.loc 1 302 7 is_stmt 0 view .LVU332
 1149 006a 07A8     		add	r0, sp, #28
 1150 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1151              	.LVL53:
 302:Core/Src/main.c ****   {
 1152              		.loc 1 302 6 view .LVU333
 1153 0070 80B9     		cbnz	r0, .L76
 309:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1154              		.loc 1 309 3 is_stmt 1 view .LVU334
 309:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1155              		.loc 1 309 31 is_stmt 0 view .LVU335
 1156 0072 0F23     		movs	r3, #15
 1157 0074 0293     		str	r3, [sp, #8]
 311:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1158              		.loc 1 311 3 is_stmt 1 view .LVU336
 311:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1159              		.loc 1 311 34 is_stmt 0 view .LVU337
 1160 0076 0221     		movs	r1, #2
 1161 0078 0391     		str	r1, [sp, #12]
 312:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1162              		.loc 1 312 3 is_stmt 1 view .LVU338
 312:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1163              		.loc 1 312 35 is_stmt 0 view .LVU339
 1164 007a 0023     		movs	r3, #0
 1165 007c 0493     		str	r3, [sp, #16]
 313:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1166              		.loc 1 313 3 is_stmt 1 view .LVU340
 313:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1167              		.loc 1 313 36 is_stmt 0 view .LVU341
 1168 007e 4FF48052 		mov	r2, #4096
 1169 0082 0592     		str	r2, [sp, #20]
 314:Core/Src/main.c **** 
 1170              		.loc 1 314 3 is_stmt 1 view .LVU342
 314:Core/Src/main.c **** 
 1171              		.loc 1 314 36 is_stmt 0 view .LVU343
 1172 0084 0693     		str	r3, [sp, #24]
 316:Core/Src/main.c ****   {
 1173              		.loc 1 316 3 is_stmt 1 view .LVU344
 316:Core/Src/main.c ****   {
 1174              		.loc 1 316 7 is_stmt 0 view .LVU345
 1175 0086 02A8     		add	r0, sp, #8
 1176 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1177              	.LVL54:
 316:Core/Src/main.c ****   {
 1178              		.loc 1 316 6 view .LVU346
 1179 008c 20B9     		cbnz	r0, .L77
 320:Core/Src/main.c **** 
 1180              		.loc 1 320 1 view .LVU347
 1181 008e 15B0     		add	sp, sp, #84
 1182              		.cfi_remember_state
 1183              		.cfi_def_cfa_offset 4
 1184              		@ sp needed
ARM GAS  /tmp/ccOwdLsn.s 			page 56


 1185 0090 5DF804FB 		ldr	pc, [sp], #4
 1186              	.L76:
 1187              		.cfi_restore_state
 304:Core/Src/main.c ****   }
 1188              		.loc 1 304 5 is_stmt 1 view .LVU348
 1189 0094 FFF7FEFF 		bl	Error_Handler
 1190              	.LVL55:
 1191              	.L77:
 318:Core/Src/main.c ****   }
 1192              		.loc 1 318 5 view .LVU349
 1193 0098 FFF7FEFF 		bl	Error_Handler
 1194              	.LVL56:
 1195              	.L79:
 1196              		.align	2
 1197              	.L78:
 1198 009c 00380240 		.word	1073887232
 1199 00a0 00700040 		.word	1073770496
 1200              		.cfi_endproc
 1201              	.LFE244:
 1203              		.section	.text.main,"ax",%progbits
 1204              		.align	1
 1205              		.global	main
 1206              		.syntax unified
 1207              		.thumb
 1208              		.thumb_func
 1209              		.fpu fpv4-sp-d16
 1211              	main:
 1212              	.LFB243:
 183:Core/Src/main.c **** 
 1213              		.loc 1 183 1 view -0
 1214              		.cfi_startproc
 1215              		@ Volatile: function does not return.
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
 1218 0000 08B5     		push	{r3, lr}
 1219              		.cfi_def_cfa_offset 8
 1220              		.cfi_offset 3, -8
 1221              		.cfi_offset 14, -4
 192:Core/Src/main.c **** 
 1222              		.loc 1 192 3 view .LVU351
 1223 0002 FFF7FEFF 		bl	HAL_Init
 1224              	.LVL57:
 199:Core/Src/main.c **** 
 1225              		.loc 1 199 3 view .LVU352
 1226 0006 FFF7FEFF 		bl	SystemClock_Config
 1227              	.LVL58:
 206:Core/Src/main.c ****   MX_DMA_Init();
 1228              		.loc 1 206 3 view .LVU353
 1229 000a FFF7FEFF 		bl	MX_GPIO_Init
 1230              	.LVL59:
 207:Core/Src/main.c ****   MX_ADC1_Init();
 1231              		.loc 1 207 3 view .LVU354
 1232 000e FFF7FEFF 		bl	MX_DMA_Init
 1233              	.LVL60:
 208:Core/Src/main.c ****   MX_I2C1_Init();
 1234              		.loc 1 208 3 view .LVU355
 1235 0012 FFF7FEFF 		bl	MX_ADC1_Init
ARM GAS  /tmp/ccOwdLsn.s 			page 57


 1236              	.LVL61:
 209:Core/Src/main.c ****   MX_USART2_UART_Init();
 1237              		.loc 1 209 3 view .LVU356
 1238 0016 FFF7FEFF 		bl	MX_I2C1_Init
 1239              	.LVL62:
 210:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1240              		.loc 1 210 3 view .LVU357
 1241 001a FFF7FEFF 		bl	MX_USART2_UART_Init
 1242              	.LVL63:
 216:Core/Src/main.c **** 
 1243              		.loc 1 216 3 view .LVU358
 1244 001e FFF7FEFF 		bl	osKernelInitialize
 1245              	.LVL64:
 232:Core/Src/main.c **** 
 1246              		.loc 1 232 3 view .LVU359
 232:Core/Src/main.c **** 
 1247              		.loc 1 232 29 is_stmt 0 view .LVU360
 1248 0022 134A     		ldr	r2, .L83
 1249 0024 0421     		movs	r1, #4
 1250 0026 1020     		movs	r0, #16
 1251 0028 FFF7FEFF 		bl	osMessageQueueNew
 1252              	.LVL65:
 232:Core/Src/main.c **** 
 1253              		.loc 1 232 27 view .LVU361
 1254 002c 114B     		ldr	r3, .L83+4
 1255 002e 1860     		str	r0, [r3]
 240:Core/Src/main.c **** 
 1256              		.loc 1 240 3 is_stmt 1 view .LVU362
 240:Core/Src/main.c **** 
 1257              		.loc 1 240 23 is_stmt 0 view .LVU363
 1258 0030 114A     		ldr	r2, .L83+8
 1259 0032 0021     		movs	r1, #0
 1260 0034 1148     		ldr	r0, .L83+12
 1261 0036 FFF7FEFF 		bl	osThreadNew
 1262              	.LVL66:
 240:Core/Src/main.c **** 
 1263              		.loc 1 240 21 view .LVU364
 1264 003a 114B     		ldr	r3, .L83+16
 1265 003c 1860     		str	r0, [r3]
 243:Core/Src/main.c **** 
 1266              		.loc 1 243 3 is_stmt 1 view .LVU365
 243:Core/Src/main.c **** 
 1267              		.loc 1 243 24 is_stmt 0 view .LVU366
 1268 003e 114A     		ldr	r2, .L83+20
 1269 0040 0021     		movs	r1, #0
 1270 0042 1148     		ldr	r0, .L83+24
 1271 0044 FFF7FEFF 		bl	osThreadNew
 1272              	.LVL67:
 243:Core/Src/main.c **** 
 1273              		.loc 1 243 22 view .LVU367
 1274 0048 104B     		ldr	r3, .L83+28
 1275 004a 1860     		str	r0, [r3]
 246:Core/Src/main.c **** 
 1276              		.loc 1 246 3 is_stmt 1 view .LVU368
 246:Core/Src/main.c **** 
 1277              		.loc 1 246 25 is_stmt 0 view .LVU369
 1278 004c 104A     		ldr	r2, .L83+32
ARM GAS  /tmp/ccOwdLsn.s 			page 58


 1279 004e 0021     		movs	r1, #0
 1280 0050 1048     		ldr	r0, .L83+36
 1281 0052 FFF7FEFF 		bl	osThreadNew
 1282              	.LVL68:
 246:Core/Src/main.c **** 
 1283              		.loc 1 246 23 view .LVU370
 1284 0056 104B     		ldr	r3, .L83+40
 1285 0058 1860     		str	r0, [r3]
 249:Core/Src/main.c **** 
 1286              		.loc 1 249 3 is_stmt 1 view .LVU371
 249:Core/Src/main.c **** 
 1287              		.loc 1 249 26 is_stmt 0 view .LVU372
 1288 005a 104A     		ldr	r2, .L83+44
 1289 005c 0021     		movs	r1, #0
 1290 005e 1048     		ldr	r0, .L83+48
 1291 0060 FFF7FEFF 		bl	osThreadNew
 1292              	.LVL69:
 249:Core/Src/main.c **** 
 1293              		.loc 1 249 24 view .LVU373
 1294 0064 0F4B     		ldr	r3, .L83+52
 1295 0066 1860     		str	r0, [r3]
 260:Core/Src/main.c **** 
 1296              		.loc 1 260 3 is_stmt 1 view .LVU374
 1297 0068 FFF7FEFF 		bl	osKernelStart
 1298              	.LVL70:
 1299              	.L81:
 266:Core/Src/main.c ****   {
 1300              		.loc 1 266 3 discriminator 1 view .LVU375
 271:Core/Src/main.c ****   /* USER CODE END 3 */
 1301              		.loc 1 271 3 discriminator 1 view .LVU376
 266:Core/Src/main.c ****   {
 1302              		.loc 1 266 9 discriminator 1 view .LVU377
 1303 006c FEE7     		b	.L81
 1304              	.L84:
 1305 006e 00BF     		.align	2
 1306              	.L83:
 1307 0070 00000000 		.word	.LANCHOR5
 1308 0074 00000000 		.word	.LANCHOR6
 1309 0078 00000000 		.word	.LANCHOR7
 1310 007c 00000000 		.word	StartDefaultTask
 1311 0080 00000000 		.word	.LANCHOR8
 1312 0084 00000000 		.word	.LANCHOR9
 1313 0088 00000000 		.word	BlinkLEDTaskEntry
 1314 008c 00000000 		.word	.LANCHOR10
 1315 0090 00000000 		.word	.LANCHOR11
 1316 0094 00000000 		.word	MiniBotInputsEntry
 1317 0098 00000000 		.word	.LANCHOR12
 1318 009c 00000000 		.word	.LANCHOR13
 1319 00a0 00000000 		.word	ApplicationFSMEntry
 1320 00a4 00000000 		.word	.LANCHOR14
 1321              		.cfi_endproc
 1322              	.LFE243:
 1324              		.global	MiniBotInputQueue_attributes
 1325              		.section	.rodata.str1.4,"aMS",%progbits,1
 1326              		.align	2
 1327              	.LC0:
 1328 0000 4D696E69 		.ascii	"MiniBotInputQueue\000"
ARM GAS  /tmp/ccOwdLsn.s 			page 59


 1328      426F7449 
 1328      6E707574 
 1328      51756575 
 1328      6500
 1329              		.global	MiniBotInputQueueHandle
 1330              		.global	ApplicationFSM_attributes
 1331 0012 0000     		.align	2
 1332              	.LC1:
 1333 0014 4170706C 		.ascii	"ApplicationFSM\000"
 1333      69636174 
 1333      696F6E46 
 1333      534D00
 1334              		.global	ApplicationFSMHandle
 1335              		.global	MiniBotInputs_attributes
 1336 0023 00       		.align	2
 1337              	.LC2:
 1338 0024 4D696E69 		.ascii	"MiniBotInputs\000"
 1338      426F7449 
 1338      6E707574 
 1338      7300
 1339              		.global	MiniBotInputsHandle
 1340              		.global	BlinkLEDTask_attributes
 1341 0032 0000     		.align	2
 1342              	.LC3:
 1343 0034 426C696E 		.ascii	"BlinkLEDTask\000"
 1343      6B4C4544 
 1343      5461736B 
 1343      00
 1344              		.global	BlinkLEDTaskHandle
 1345              		.global	defaultTask_attributes
 1346 0041 000000   		.align	2
 1347              	.LC4:
 1348 0044 64656661 		.ascii	"defaultTask\000"
 1348      756C7454 
 1348      61736B00 
 1349              		.global	defaultTaskHandle
 1350              		.global	huart2
 1351              		.global	hi2c1
 1352              		.global	hdma_adc1
 1353              		.global	hadc1
 1354              		.global	PotRawValue
 1355              		.global	Qdata
 1356              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 1357              		.align	2
 1358              		.set	.LANCHOR14,. + 0
 1361              	ApplicationFSMHandle:
 1362 0000 00000000 		.space	4
 1363              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 1364              		.align	2
 1365              		.set	.LANCHOR10,. + 0
 1368              	BlinkLEDTaskHandle:
 1369 0000 00000000 		.space	4
 1370              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 1371              		.align	2
 1372              		.set	.LANCHOR6,. + 0
 1375              	MiniBotInputQueueHandle:
 1376 0000 00000000 		.space	4
ARM GAS  /tmp/ccOwdLsn.s 			page 60


 1377              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 1378              		.align	2
 1379              		.set	.LANCHOR12,. + 0
 1382              	MiniBotInputsHandle:
 1383 0000 00000000 		.space	4
 1384              		.section	.bss.PotRawValue,"aw",%nobits
 1385              		.align	2
 1386              		.set	.LANCHOR0,. + 0
 1389              	PotRawValue:
 1390 0000 00000000 		.space	16
 1390      00000000 
 1390      00000000 
 1390      00000000 
 1391              		.section	.bss.Qdata,"aw",%nobits
 1392              		.align	2
 1393              		.set	.LANCHOR2,. + 0
 1396              	Qdata:
 1397 0000 00000000 		.space	20
 1397      00000000 
 1397      00000000 
 1397      00000000 
 1397      00000000 
 1398              		.section	.bss.defaultTaskHandle,"aw",%nobits
 1399              		.align	2
 1400              		.set	.LANCHOR8,. + 0
 1403              	defaultTaskHandle:
 1404 0000 00000000 		.space	4
 1405              		.section	.bss.hadc1,"aw",%nobits
 1406              		.align	2
 1407              		.set	.LANCHOR1,. + 0
 1410              	hadc1:
 1411 0000 00000000 		.space	72
 1411      00000000 
 1411      00000000 
 1411      00000000 
 1411      00000000 
 1412              		.section	.bss.hdma_adc1,"aw",%nobits
 1413              		.align	2
 1416              	hdma_adc1:
 1417 0000 00000000 		.space	96
 1417      00000000 
 1417      00000000 
 1417      00000000 
 1417      00000000 
 1418              		.section	.bss.hi2c1,"aw",%nobits
 1419              		.align	2
 1420              		.set	.LANCHOR3,. + 0
 1423              	hi2c1:
 1424 0000 00000000 		.space	84
 1424      00000000 
 1424      00000000 
 1424      00000000 
 1424      00000000 
 1425              		.section	.bss.huart2,"aw",%nobits
 1426              		.align	2
 1427              		.set	.LANCHOR4,. + 0
 1430              	huart2:
ARM GAS  /tmp/ccOwdLsn.s 			page 61


 1431 0000 00000000 		.space	72
 1431      00000000 
 1431      00000000 
 1431      00000000 
 1431      00000000 
 1432              		.section	.rodata.ApplicationFSM_attributes,"a"
 1433              		.align	2
 1434              		.set	.LANCHOR13,. + 0
 1437              	ApplicationFSM_attributes:
 1438 0000 14000000 		.word	.LC1
 1439 0004 00000000 		.space	16
 1439      00000000 
 1439      00000000 
 1439      00000000 
 1440 0014 00020000 		.word	512
 1441 0018 18000000 		.word	24
 1442 001c 00000000 		.space	8
 1442      00000000 
 1443              		.section	.rodata.BlinkLEDTask_attributes,"a"
 1444              		.align	2
 1445              		.set	.LANCHOR9,. + 0
 1448              	BlinkLEDTask_attributes:
 1449 0000 34000000 		.word	.LC3
 1450 0004 00000000 		.space	16
 1450      00000000 
 1450      00000000 
 1450      00000000 
 1451 0014 00020000 		.word	512
 1452 0018 08000000 		.word	8
 1453 001c 00000000 		.space	8
 1453      00000000 
 1454              		.section	.rodata.MiniBotInputQueue_attributes,"a"
 1455              		.align	2
 1456              		.set	.LANCHOR5,. + 0
 1459              	MiniBotInputQueue_attributes:
 1460 0000 00000000 		.word	.LC0
 1461 0004 00000000 		.space	20
 1461      00000000 
 1461      00000000 
 1461      00000000 
 1461      00000000 
 1462              		.section	.rodata.MiniBotInputs_attributes,"a"
 1463              		.align	2
 1464              		.set	.LANCHOR11,. + 0
 1467              	MiniBotInputs_attributes:
 1468 0000 24000000 		.word	.LC2
 1469 0004 00000000 		.space	16
 1469      00000000 
 1469      00000000 
 1469      00000000 
 1470 0014 00020000 		.word	512
 1471 0018 18000000 		.word	24
 1472 001c 00000000 		.space	8
 1472      00000000 
 1473              		.section	.rodata.defaultTask_attributes,"a"
 1474              		.align	2
 1475              		.set	.LANCHOR7,. + 0
ARM GAS  /tmp/ccOwdLsn.s 			page 62


 1478              	defaultTask_attributes:
 1479 0000 44000000 		.word	.LC4
 1480 0004 00000000 		.space	16
 1480      00000000 
 1480      00000000 
 1480      00000000 
 1481 0014 00020000 		.word	512
 1482 0018 18000000 		.word	24
 1483 001c 00000000 		.space	8
 1483      00000000 
 1484              		.text
 1485              	.Letext0:
 1486              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1487              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1488              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1489              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1490              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1491              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1492              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1493              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1494              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1495              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1496              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1497              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1498              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1499              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1500              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1501              		.file 18 "<built-in>"
ARM GAS  /tmp/ccOwdLsn.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccOwdLsn.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccOwdLsn.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccOwdLsn.s:178    .text.MX_GPIO_Init:00000000000000b0 $d
     /tmp/ccOwdLsn.s:185    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccOwdLsn.s:191    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccOwdLsn.s:237    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccOwdLsn.s:242    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccOwdLsn.s:249    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccOwdLsn.s:280    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccOwdLsn.s:285    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccOwdLsn.s:292    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccOwdLsn.s:327    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccOwdLsn.s:332    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccOwdLsn.s:339    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccOwdLsn.s:365    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccOwdLsn.s:372    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccOwdLsn.s:452    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccOwdLsn.s:457    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccOwdLsn.s:464    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccOwdLsn.s:478    .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccOwdLsn.s:485    .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccOwdLsn.s:561    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccOwdLsn.s:568    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccOwdLsn.s:640    .text.MiniBotInputsEntry:0000000000000058 $d
     /tmp/ccOwdLsn.s:648    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccOwdLsn.s:655    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccOwdLsn.s:688    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccOwdLsn.s:693    .text.Error_Handler:0000000000000000 $t
     /tmp/ccOwdLsn.s:700    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccOwdLsn.s:732    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccOwdLsn.s:738    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccOwdLsn.s:901    .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccOwdLsn.s:908    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccOwdLsn.s:914    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccOwdLsn.s:971    .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccOwdLsn.s:978    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccOwdLsn.s:984    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccOwdLsn.s:1038   .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccOwdLsn.s:1044   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccOwdLsn.s:1051   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccOwdLsn.s:1198   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccOwdLsn.s:1204   .text.main:0000000000000000 $t
     /tmp/ccOwdLsn.s:1211   .text.main:0000000000000000 main
     /tmp/ccOwdLsn.s:1307   .text.main:0000000000000070 $d
     /tmp/ccOwdLsn.s:1459   .rodata.MiniBotInputQueue_attributes:0000000000000000 MiniBotInputQueue_attributes
     /tmp/ccOwdLsn.s:1326   .rodata.str1.4:0000000000000000 $d
     /tmp/ccOwdLsn.s:1375   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccOwdLsn.s:1437   .rodata.ApplicationFSM_attributes:0000000000000000 ApplicationFSM_attributes
     /tmp/ccOwdLsn.s:1361   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccOwdLsn.s:1467   .rodata.MiniBotInputs_attributes:0000000000000000 MiniBotInputs_attributes
     /tmp/ccOwdLsn.s:1382   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccOwdLsn.s:1448   .rodata.BlinkLEDTask_attributes:0000000000000000 BlinkLEDTask_attributes
     /tmp/ccOwdLsn.s:1368   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccOwdLsn.s:1478   .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
     /tmp/ccOwdLsn.s:1403   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
ARM GAS  /tmp/ccOwdLsn.s 			page 64


     /tmp/ccOwdLsn.s:1430   .bss.huart2:0000000000000000 huart2
     /tmp/ccOwdLsn.s:1423   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccOwdLsn.s:1416   .bss.hdma_adc1:0000000000000000 hdma_adc1
     /tmp/ccOwdLsn.s:1410   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccOwdLsn.s:1389   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccOwdLsn.s:1396   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccOwdLsn.s:1357   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccOwdLsn.s:1364   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccOwdLsn.s:1371   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccOwdLsn.s:1378   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccOwdLsn.s:1385   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccOwdLsn.s:1392   .bss.Qdata:0000000000000000 $d
     /tmp/ccOwdLsn.s:1399   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccOwdLsn.s:1406   .bss.hadc1:0000000000000000 $d
     /tmp/ccOwdLsn.s:1413   .bss.hdma_adc1:0000000000000000 $d
     /tmp/ccOwdLsn.s:1419   .bss.hi2c1:0000000000000000 $d
     /tmp/ccOwdLsn.s:1426   .bss.huart2:0000000000000000 $d
     /tmp/ccOwdLsn.s:1433   .rodata.ApplicationFSM_attributes:0000000000000000 $d
     /tmp/ccOwdLsn.s:1444   .rodata.BlinkLEDTask_attributes:0000000000000000 $d
     /tmp/ccOwdLsn.s:1455   .rodata.MiniBotInputQueue_attributes:0000000000000000 $d
     /tmp/ccOwdLsn.s:1463   .rodata.MiniBotInputs_attributes:0000000000000000 $d
     /tmp/ccOwdLsn.s:1474   .rodata.defaultTask_attributes:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
HAL_ADC_Start_DMA
HAL_GPIO_ReadPin
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osKernelInitialize
osMessageQueueNew
osThreadNew
osKernelStart
