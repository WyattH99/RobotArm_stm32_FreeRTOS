ARM GAS  /tmp/ccN6wIPj.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.section	.rodata.str1.4,"aMS",%progbits,1
  15              		.align	2
  16              	.LC2:
  17 0000 64656661 		.ascii	"defaultTask\000"
  17      756C7454 
  17      61736B00 
  18              		.align	2
  19              	.LC4:
  20 000c 426C696E 		.ascii	"BlinkLEDTask\000"
  20      6B4C4544 
  20      5461736B 
  20      00
  21 0019 000000   		.align	2
  22              	.LC6:
  23 001c 4D696E69 		.ascii	"MiniBotInputs\000"
  23      426F7449 
  23      6E707574 
  23      7300
  24 002a 0000     		.align	2
  25              	.LC8:
  26 002c 4170706C 		.ascii	"ApplicationFSM\000"
  26      69636174 
  26      696F6E46 
  26      534D00
  27 003b 00       		.align	2
  28              	.LC10:
  29 003c 456D6572 		.ascii	"EmergencyStopTask\000"
  29      67656E63 
  29      7953746F 
  29      70546173 
  29      6B00
  30 004e 0000     		.align	2
  31              	.LC12:
  32 0050 4D6F746F 		.ascii	"MotorControlTask\000"
  32      72436F6E 
  32      74726F6C 
  32      5461736B 
  32      00
  33 0061 000000   		.align	2
  34              	.LC14:
  35 0064 4C434450 		.ascii	"LCDPrintTask\000"
  35      72696E74 
  35      5461736B 
  35      00
ARM GAS  /tmp/ccN6wIPj.s 			page 2


  36              		.text
  37              	.Ltext0:
  38              		.cfi_sections	.debug_frame
  39              		.section	.text.MX_GPIO_Init,"ax",%progbits
  40              		.align	1
  41              		.arch armv7e-m
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	MX_GPIO_Init:
  48              	.LFB250:
  49              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** #include "pca9685.h"
  27:Core/Src/main.c **** #include <stdint.h>
  28:Core/Src/main.c **** #include "I2C_LCD.h"
  29:Core/Src/main.c **** #include "I2C_LCD_cfg.h"
  30:Core/Src/main.c **** #include "Util.h"
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /*
  38:Core/Src/main.c ****  * MiniBot Structures
  39:Core/Src/main.c ****  */
  40:Core/Src/main.c **** typedef struct{
  41:Core/Src/main.c **** 	uint8_t  PotNum;
  42:Core/Src/main.c **** 	uint32_t PotMin;
  43:Core/Src/main.c **** 	uint32_t PotMax;
  44:Core/Src/main.c **** 	uint8_t  PotInvertRange;
ARM GAS  /tmp/ccN6wIPj.s 			page 3


  45:Core/Src/main.c **** } MiniBot_Joint_Config_t;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** typedef struct{
  48:Core/Src/main.c **** 	GPIO_TypeDef* 	GPIOx;
  49:Core/Src/main.c **** 	uint16_t 		GPIO_Pin;
  50:Core/Src/main.c **** } MiniBot_Gripper_Config_t;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** typedef struct{
  53:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Base;
  54:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Shoulder;
  55:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Elbow;
  56:Core/Src/main.c **** 	MiniBot_Joint_Config_t  	Wrist;
  57:Core/Src/main.c **** 	MiniBot_Gripper_Config_t 	Gripper;
  58:Core/Src/main.c **** } MiniBot_Config_t;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** typedef struct{
  61:Core/Src/main.c **** 	uint32_t BasePotValue;
  62:Core/Src/main.c **** 	uint32_t BasePotMin;
  63:Core/Src/main.c **** 	uint32_t BasePotMax;
  64:Core/Src/main.c **** 	uint32_t ShoulderPotValue;
  65:Core/Src/main.c **** 	uint32_t ShoulderPotMin;
  66:Core/Src/main.c **** 	uint32_t ShoulderPotMax;
  67:Core/Src/main.c **** 	uint32_t ElbowPotValue;
  68:Core/Src/main.c **** 	uint32_t ElbowPotMin;
  69:Core/Src/main.c **** 	uint32_t ElbowPotMax;
  70:Core/Src/main.c **** 	uint32_t WristPotValue;
  71:Core/Src/main.c **** 	uint32_t WristPotMin;
  72:Core/Src/main.c **** 	uint32_t WristPotMax;
  73:Core/Src/main.c **** 	uint8_t  GripperValue;
  74:Core/Src/main.c **** } MiniBot_Qdata;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** volatile MiniBot_Qdata Qdata;
  77:Core/Src/main.c **** uint32_t PotRawValue[4];
  78:Core/Src/main.c **** volatile MiniBot_Qdata MiniBot_Qdata_Buf;
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /*
  82:Core/Src/main.c ****  * MegaBot Structures
  83:Core/Src/main.c ****  */
  84:Core/Src/main.c **** typedef struct{
  85:Core/Src/main.c **** 	uint8_t  ServoNum;
  86:Core/Src/main.c **** 	uint16_t ServoMin;
  87:Core/Src/main.c **** 	uint16_t ServoMax;
  88:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  89:Core/Src/main.c **** } MegaBot_Joint_Config_t;
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** typedef struct{
  92:Core/Src/main.c **** 	uint8_t  ServoNum;
  93:Core/Src/main.c **** 	uint16_t ServoMin;
  94:Core/Src/main.c **** 	uint16_t ServoMax;
  95:Core/Src/main.c **** 	uint16_t ServoHomeAngle;
  96:Core/Src/main.c **** } MegaBot_Gripper_Config_t;
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** typedef struct{
  99:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Base;
 100:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Shoulder;
 101:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Elbow;
ARM GAS  /tmp/ccN6wIPj.s 			page 4


 102:Core/Src/main.c **** 	MegaBot_Joint_Config_t  	Wrist;
 103:Core/Src/main.c **** 	MegaBot_Gripper_Config_t 	Gripper;
 104:Core/Src/main.c **** } MegaBot_Config_t;
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** volatile MiniBot_Qdata Temp_Qdata_Buf;
 107:Core/Src/main.c **** volatile MiniBot_Qdata MotorControl_Qdata_Buf;
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** uint8_t tempFailedToPostMessage = 0;
 110:Core/Src/main.c **** uint16_t MappedServoAngle[4];
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** 
 113:Core/Src/main.c **** enum State{
 114:Core/Src/main.c ****   Init,
 115:Core/Src/main.c ****   Ready,
 116:Core/Src/main.c ****   Running,
 117:Core/Src/main.c ****   EmergencyStop
 118:Core/Src/main.c **** };
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** volatile enum State state = Init;
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /* USER CODE END PTD */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
 125:Core/Src/main.c **** /* USER CODE BEGIN PD */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* USER CODE END PD */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
 130:Core/Src/main.c **** /* USER CODE BEGIN PM */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /* USER CODE END PM */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
 135:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
 138:Core/Src/main.c **** I2C_HandleTypeDef hi2c2;
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** UART_HandleTypeDef huart2;
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** osThreadId defaultTaskHandle;
 143:Core/Src/main.c **** osThreadId BlinkLEDTaskHandle;
 144:Core/Src/main.c **** osThreadId MiniBotInputsHandle;
 145:Core/Src/main.c **** osThreadId ApplicationFSMHandle;
 146:Core/Src/main.c **** osThreadId EmergencyStopTaskHandle;
 147:Core/Src/main.c **** osThreadId MotorControlTaskHandle;
 148:Core/Src/main.c **** osThreadId LCDPrintTaskHandle;
 149:Core/Src/main.c **** osMessageQId MiniBotInputQueueHandle;
 150:Core/Src/main.c **** osMessageQId MotorControlQueueHandle;
 151:Core/Src/main.c **** osMessageQId LCDPrintQueueHandle;
 152:Core/Src/main.c **** osMutexId StateMutexHandle;
 153:Core/Src/main.c **** /* USER CODE BEGIN PV */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /* USER CODE END PV */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 158:Core/Src/main.c **** void SystemClock_Config(void);
ARM GAS  /tmp/ccN6wIPj.s 			page 5


 159:Core/Src/main.c **** static void MX_GPIO_Init(void);
 160:Core/Src/main.c **** static void MX_ADC1_Init(void);
 161:Core/Src/main.c **** static void MX_I2C1_Init(void);
 162:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
 163:Core/Src/main.c **** static void MX_I2C2_Init(void);
 164:Core/Src/main.c **** void StartDefaultTask(void const * argument);
 165:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument);
 166:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument);
 167:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument);
 168:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument);
 169:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument);
 170:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument);
 171:Core/Src/main.c **** 
 172:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot);
 175:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot);
 176:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot);
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot);
 181:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /* USER CODE END PFP */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 186:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** /* USER CODE END 0 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c **** /**
 192:Core/Src/main.c ****   * @brief  The application entry point.
 193:Core/Src/main.c ****   * @retval int
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c **** int main(void)
 196:Core/Src/main.c **** {
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE END 1 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 205:Core/Src/main.c ****   HAL_Init();
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* USER CODE END Init */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* Configure the system clock */
 212:Core/Src/main.c ****   SystemClock_Config();
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 215:Core/Src/main.c **** 
ARM GAS  /tmp/ccN6wIPj.s 			page 6


 216:Core/Src/main.c ****   /* USER CODE END SysInit */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* Initialize all configured peripherals */
 219:Core/Src/main.c ****   MX_GPIO_Init();
 220:Core/Src/main.c ****   MX_ADC1_Init();
 221:Core/Src/main.c ****   MX_I2C1_Init();
 222:Core/Src/main.c ****   MX_USART2_UART_Init();
 223:Core/Src/main.c ****   MX_I2C2_Init();
 224:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE END 2 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   /* Create the mutex(es) */
 229:Core/Src/main.c ****   /* definition and creation of StateMutex */
 230:Core/Src/main.c ****   osMutexDef(StateMutex);
 231:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 234:Core/Src/main.c ****   /* add mutexes, ... */
 235:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 238:Core/Src/main.c ****   /* add semaphores, ... */
 239:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 242:Core/Src/main.c ****   /* start timers, add new ones, ... */
 243:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* Create the queue(s) */
 246:Core/Src/main.c ****   /* definition and creation of MiniBotInputQueue */
 247:Core/Src/main.c ****   osMessageQDef(MiniBotInputQueue, 16, MiniBot_Qdata);
 248:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* definition and creation of MotorControlQueue */
 251:Core/Src/main.c ****   osMessageQDef(MotorControlQueue, 16, MiniBot_Qdata);
 252:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* definition and creation of LCDPrintQueue */
 255:Core/Src/main.c ****   osMessageQDef(LCDPrintQueue, 16, uint16_t);
 256:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 259:Core/Src/main.c ****   /* add queues, ... */
 260:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* Create the thread(s) */
 263:Core/Src/main.c ****   /* definition and creation of defaultTask */
 264:Core/Src/main.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 265:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /* definition and creation of BlinkLEDTask */
 268:Core/Src/main.c ****   osThreadDef(BlinkLEDTask, BlinkLEDTaskEntry, osPriorityNormal, 0, 128);
 269:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* definition and creation of MiniBotInputs */
 272:Core/Src/main.c ****   osThreadDef(MiniBotInputs, MiniBotInputsEntry, osPriorityNormal, 0, 512);
ARM GAS  /tmp/ccN6wIPj.s 			page 7


 273:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* definition and creation of ApplicationFSM */
 276:Core/Src/main.c ****   osThreadDef(ApplicationFSM, ApplicationFSMEntry, osPriorityHigh, 0, 512);
 277:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* definition and creation of EmergencyStopTask */
 280:Core/Src/main.c ****   osThreadDef(EmergencyStopTask, EmergencyStopTaskEntry, osPriorityNormal, 0, 128);
 281:Core/Src/main.c ****   EmergencyStopTaskHandle = osThreadCreate(osThread(EmergencyStopTask), NULL);
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* definition and creation of MotorControlTask */
 284:Core/Src/main.c ****   osThreadDef(MotorControlTask, MotorControlTaskEntry, osPriorityNormal, 0, 512);
 285:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* definition and creation of LCDPrintTask */
 288:Core/Src/main.c ****   osThreadDef(LCDPrintTask, LCDPrintTaskEntry, osPriorityNormal, 0, 128);
 289:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 292:Core/Src/main.c ****   /* add threads, ... */
 293:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* Start scheduler */
 296:Core/Src/main.c ****   osKernelStart();
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /* Infinite loop */
 301:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 302:Core/Src/main.c ****   while (1)
 303:Core/Src/main.c ****   {
 304:Core/Src/main.c ****     /* USER CODE END WHILE */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 307:Core/Src/main.c ****   }
 308:Core/Src/main.c ****   /* USER CODE END 3 */
 309:Core/Src/main.c **** }
 310:Core/Src/main.c **** 
 311:Core/Src/main.c **** /**
 312:Core/Src/main.c ****   * @brief System Clock Configuration
 313:Core/Src/main.c ****   * @retval None
 314:Core/Src/main.c ****   */
 315:Core/Src/main.c **** void SystemClock_Config(void)
 316:Core/Src/main.c **** {
 317:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 318:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 321:Core/Src/main.c ****   */
 322:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 323:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 326:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 327:Core/Src/main.c ****   */
 328:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccN6wIPj.s 			page 8


 330:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 337:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 338:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 339:Core/Src/main.c ****   {
 340:Core/Src/main.c ****     Error_Handler();
 341:Core/Src/main.c ****   }
 342:Core/Src/main.c **** 
 343:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 344:Core/Src/main.c ****   */
 345:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 346:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 347:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 348:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 350:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 353:Core/Src/main.c ****   {
 354:Core/Src/main.c ****     Error_Handler();
 355:Core/Src/main.c ****   }
 356:Core/Src/main.c **** }
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** /**
 359:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 360:Core/Src/main.c ****   * @param None
 361:Core/Src/main.c ****   * @retval None
 362:Core/Src/main.c ****   */
 363:Core/Src/main.c **** static void MX_ADC1_Init(void)
 364:Core/Src/main.c **** {
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 373:Core/Src/main.c **** 
 374:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 377:Core/Src/main.c ****   */
 378:Core/Src/main.c ****   hadc1.Instance = ADC1;
 379:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 380:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 381:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 382:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 383:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 384:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 386:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
ARM GAS  /tmp/ccN6wIPj.s 			page 9


 387:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 388:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 389:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 390:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 391:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 397:Core/Src/main.c ****   */
 398:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 399:Core/Src/main.c ****   sConfig.Rank = 1;
 400:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 401:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****     Error_Handler();
 404:Core/Src/main.c ****   }
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 407:Core/Src/main.c ****   */
 408:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 409:Core/Src/main.c ****   sConfig.Rank = 2;
 410:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c **** 
 415:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 416:Core/Src/main.c ****   */
 417:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_4;
 418:Core/Src/main.c ****   sConfig.Rank = 3;
 419:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 420:Core/Src/main.c ****   {
 421:Core/Src/main.c ****     Error_Handler();
 422:Core/Src/main.c ****   }
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 425:Core/Src/main.c ****   */
 426:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 427:Core/Src/main.c ****   sConfig.Rank = 4;
 428:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 429:Core/Src/main.c ****   {
 430:Core/Src/main.c ****     Error_Handler();
 431:Core/Src/main.c ****   }
 432:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** }
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** /**
 439:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 440:Core/Src/main.c ****   * @param None
 441:Core/Src/main.c ****   * @retval None
 442:Core/Src/main.c ****   */
 443:Core/Src/main.c **** static void MX_I2C1_Init(void)
ARM GAS  /tmp/ccN6wIPj.s 			page 10


 444:Core/Src/main.c **** {
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 453:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 454:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 455:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 456:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 457:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 458:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 459:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 460:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 461:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 462:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 463:Core/Src/main.c ****   {
 464:Core/Src/main.c ****     Error_Handler();
 465:Core/Src/main.c ****   }
 466:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 469:Core/Src/main.c **** 
 470:Core/Src/main.c **** }
 471:Core/Src/main.c **** 
 472:Core/Src/main.c **** /**
 473:Core/Src/main.c ****   * @brief I2C2 Initialization Function
 474:Core/Src/main.c ****   * @param None
 475:Core/Src/main.c ****   * @retval None
 476:Core/Src/main.c ****   */
 477:Core/Src/main.c **** static void MX_I2C2_Init(void)
 478:Core/Src/main.c **** {
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 0 */
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* USER CODE END I2C2_Init 0 */
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 1 */
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****   /* USER CODE END I2C2_Init 1 */
 487:Core/Src/main.c ****   hi2c2.Instance = I2C2;
 488:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 489:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 490:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 491:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 492:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 493:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 494:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 495:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 496:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 497:Core/Src/main.c ****   {
 498:Core/Src/main.c ****     Error_Handler();
 499:Core/Src/main.c ****   }
 500:Core/Src/main.c ****   /* USER CODE BEGIN I2C2_Init 2 */
ARM GAS  /tmp/ccN6wIPj.s 			page 11


 501:Core/Src/main.c **** 
 502:Core/Src/main.c ****   /* USER CODE END I2C2_Init 2 */
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** }
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** /**
 507:Core/Src/main.c ****   * @brief USART2 Initialization Function
 508:Core/Src/main.c ****   * @param None
 509:Core/Src/main.c ****   * @retval None
 510:Core/Src/main.c ****   */
 511:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 512:Core/Src/main.c **** {
 513:Core/Src/main.c **** 
 514:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 519:Core/Src/main.c **** 
 520:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 521:Core/Src/main.c ****   huart2.Instance = USART2;
 522:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 523:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 524:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 525:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 526:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 527:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 528:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 529:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 530:Core/Src/main.c ****   {
 531:Core/Src/main.c ****     Error_Handler();
 532:Core/Src/main.c ****   }
 533:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 536:Core/Src/main.c **** 
 537:Core/Src/main.c **** }
 538:Core/Src/main.c **** 
 539:Core/Src/main.c **** /**
 540:Core/Src/main.c ****   * @brief GPIO Initialization Function
 541:Core/Src/main.c ****   * @param None
 542:Core/Src/main.c ****   * @retval None
 543:Core/Src/main.c ****   */
 544:Core/Src/main.c **** static void MX_GPIO_Init(void)
 545:Core/Src/main.c **** {
  50              		.loc 1 545 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 40
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  55              		.cfi_def_cfa_offset 24
  56              		.cfi_offset 4, -24
  57              		.cfi_offset 5, -20
  58              		.cfi_offset 6, -16
  59              		.cfi_offset 7, -12
  60              		.cfi_offset 8, -8
  61              		.cfi_offset 14, -4
ARM GAS  /tmp/ccN6wIPj.s 			page 12


  62 0004 8AB0     		sub	sp, sp, #40
  63              		.cfi_def_cfa_offset 64
 546:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  64              		.loc 1 546 3 view .LVU1
  65              		.loc 1 546 20 is_stmt 0 view .LVU2
  66 0006 0024     		movs	r4, #0
  67 0008 0594     		str	r4, [sp, #20]
  68 000a 0694     		str	r4, [sp, #24]
  69 000c 0794     		str	r4, [sp, #28]
  70 000e 0894     		str	r4, [sp, #32]
  71 0010 0994     		str	r4, [sp, #36]
 547:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 548:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 549:Core/Src/main.c **** 
 550:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 551:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  72              		.loc 1 551 3 is_stmt 1 view .LVU3
  73              	.LBB4:
  74              		.loc 1 551 3 view .LVU4
  75 0012 0194     		str	r4, [sp, #4]
  76              		.loc 1 551 3 view .LVU5
  77 0014 304B     		ldr	r3, .L3
  78 0016 1A6B     		ldr	r2, [r3, #48]
  79 0018 42F00402 		orr	r2, r2, #4
  80 001c 1A63     		str	r2, [r3, #48]
  81              		.loc 1 551 3 view .LVU6
  82 001e 1A6B     		ldr	r2, [r3, #48]
  83 0020 02F00402 		and	r2, r2, #4
  84 0024 0192     		str	r2, [sp, #4]
  85              		.loc 1 551 3 view .LVU7
  86 0026 019A     		ldr	r2, [sp, #4]
  87              	.LBE4:
  88              		.loc 1 551 3 view .LVU8
 552:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  89              		.loc 1 552 3 view .LVU9
  90              	.LBB5:
  91              		.loc 1 552 3 view .LVU10
  92 0028 0294     		str	r4, [sp, #8]
  93              		.loc 1 552 3 view .LVU11
  94 002a 1A6B     		ldr	r2, [r3, #48]
  95 002c 42F08002 		orr	r2, r2, #128
  96 0030 1A63     		str	r2, [r3, #48]
  97              		.loc 1 552 3 view .LVU12
  98 0032 1A6B     		ldr	r2, [r3, #48]
  99 0034 02F08002 		and	r2, r2, #128
 100 0038 0292     		str	r2, [sp, #8]
 101              		.loc 1 552 3 view .LVU13
 102 003a 029A     		ldr	r2, [sp, #8]
 103              	.LBE5:
 104              		.loc 1 552 3 view .LVU14
 553:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 105              		.loc 1 553 3 view .LVU15
 106              	.LBB6:
 107              		.loc 1 553 3 view .LVU16
 108 003c 0394     		str	r4, [sp, #12]
 109              		.loc 1 553 3 view .LVU17
 110 003e 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccN6wIPj.s 			page 13


 111 0040 42F00102 		orr	r2, r2, #1
 112 0044 1A63     		str	r2, [r3, #48]
 113              		.loc 1 553 3 view .LVU18
 114 0046 1A6B     		ldr	r2, [r3, #48]
 115 0048 02F00102 		and	r2, r2, #1
 116 004c 0392     		str	r2, [sp, #12]
 117              		.loc 1 553 3 view .LVU19
 118 004e 039A     		ldr	r2, [sp, #12]
 119              	.LBE6:
 120              		.loc 1 553 3 view .LVU20
 554:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 121              		.loc 1 554 3 view .LVU21
 122              	.LBB7:
 123              		.loc 1 554 3 view .LVU22
 124 0050 0494     		str	r4, [sp, #16]
 125              		.loc 1 554 3 view .LVU23
 126 0052 1A6B     		ldr	r2, [r3, #48]
 127 0054 42F00202 		orr	r2, r2, #2
 128 0058 1A63     		str	r2, [r3, #48]
 129              		.loc 1 554 3 view .LVU24
 130 005a 1B6B     		ldr	r3, [r3, #48]
 131 005c 03F00203 		and	r3, r3, #2
 132 0060 0493     		str	r3, [sp, #16]
 133              		.loc 1 554 3 view .LVU25
 134 0062 049B     		ldr	r3, [sp, #16]
 135              	.LBE7:
 136              		.loc 1 554 3 view .LVU26
 555:Core/Src/main.c **** 
 556:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 557:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 137              		.loc 1 557 3 view .LVU27
 138 0064 1D4E     		ldr	r6, .L3+4
 139 0066 2246     		mov	r2, r4
 140 0068 2021     		movs	r1, #32
 141 006a 3046     		mov	r0, r6
 142 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 143              	.LVL0:
 558:Core/Src/main.c **** 
 559:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 560:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 144              		.loc 1 560 3 view .LVU28
 145              		.loc 1 560 23 is_stmt 0 view .LVU29
 146 0070 4FF40053 		mov	r3, #8192
 147 0074 0593     		str	r3, [sp, #20]
 561:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 148              		.loc 1 561 3 is_stmt 1 view .LVU30
 149              		.loc 1 561 24 is_stmt 0 view .LVU31
 150 0076 4FF40418 		mov	r8, #2162688
 151 007a CDF81880 		str	r8, [sp, #24]
 562:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 562 3 is_stmt 1 view .LVU32
 153              		.loc 1 562 24 is_stmt 0 view .LVU33
 154 007e 0794     		str	r4, [sp, #28]
 563:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 155              		.loc 1 563 3 is_stmt 1 view .LVU34
 156 0080 05A9     		add	r1, sp, #20
 157 0082 1748     		ldr	r0, .L3+8
ARM GAS  /tmp/ccN6wIPj.s 			page 14


 158 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL1:
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 566:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 160              		.loc 1 566 3 view .LVU35
 161              		.loc 1 566 23 is_stmt 0 view .LVU36
 162 0088 2027     		movs	r7, #32
 163 008a 0597     		str	r7, [sp, #20]
 567:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 164              		.loc 1 567 3 is_stmt 1 view .LVU37
 165              		.loc 1 567 24 is_stmt 0 view .LVU38
 166 008c 0125     		movs	r5, #1
 167 008e 0695     		str	r5, [sp, #24]
 568:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 168              		.loc 1 568 3 is_stmt 1 view .LVU39
 169              		.loc 1 568 24 is_stmt 0 view .LVU40
 170 0090 0794     		str	r4, [sp, #28]
 569:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 171              		.loc 1 569 3 is_stmt 1 view .LVU41
 172              		.loc 1 569 25 is_stmt 0 view .LVU42
 173 0092 0894     		str	r4, [sp, #32]
 570:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 174              		.loc 1 570 3 is_stmt 1 view .LVU43
 175 0094 05A9     		add	r1, sp, #20
 176 0096 3046     		mov	r0, r6
 177 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 178              	.LVL2:
 571:Core/Src/main.c **** 
 572:Core/Src/main.c ****   /*Configure GPIO pin : EmergencyStopBtn_Pin */
 573:Core/Src/main.c ****   GPIO_InitStruct.Pin = EmergencyStopBtn_Pin;
 179              		.loc 1 573 3 view .LVU44
 180              		.loc 1 573 23 is_stmt 0 view .LVU45
 181 009c 4FF48073 		mov	r3, #256
 182 00a0 0593     		str	r3, [sp, #20]
 574:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 183              		.loc 1 574 3 is_stmt 1 view .LVU46
 184              		.loc 1 574 24 is_stmt 0 view .LVU47
 185 00a2 CDF81880 		str	r8, [sp, #24]
 575:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 186              		.loc 1 575 3 is_stmt 1 view .LVU48
 187              		.loc 1 575 24 is_stmt 0 view .LVU49
 188 00a6 0795     		str	r5, [sp, #28]
 576:Core/Src/main.c ****   HAL_GPIO_Init(EmergencyStopBtn_GPIO_Port, &GPIO_InitStruct);
 189              		.loc 1 576 3 is_stmt 1 view .LVU50
 190 00a8 05A9     		add	r1, sp, #20
 191 00aa 3046     		mov	r0, r6
 192 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 193              	.LVL3:
 577:Core/Src/main.c **** 
 578:Core/Src/main.c ****   /*Configure GPIO pin : GripperButton_Pin */
 579:Core/Src/main.c ****   GPIO_InitStruct.Pin = GripperButton_Pin;
 194              		.loc 1 579 3 view .LVU51
 195              		.loc 1 579 23 is_stmt 0 view .LVU52
 196 00b0 4FF40073 		mov	r3, #512
 197 00b4 0593     		str	r3, [sp, #20]
 580:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
ARM GAS  /tmp/ccN6wIPj.s 			page 15


 198              		.loc 1 580 3 is_stmt 1 view .LVU53
 199              		.loc 1 580 24 is_stmt 0 view .LVU54
 200 00b6 0694     		str	r4, [sp, #24]
 581:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 201              		.loc 1 581 3 is_stmt 1 view .LVU55
 202              		.loc 1 581 24 is_stmt 0 view .LVU56
 203 00b8 0795     		str	r5, [sp, #28]
 582:Core/Src/main.c ****   HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);
 204              		.loc 1 582 3 is_stmt 1 view .LVU57
 205 00ba 05A9     		add	r1, sp, #20
 206 00bc 3046     		mov	r0, r6
 207 00be FFF7FEFF 		bl	HAL_GPIO_Init
 208              	.LVL4:
 583:Core/Src/main.c **** 
 584:Core/Src/main.c ****   /*Configure GPIO pin : ResetBtn_Pin */
 585:Core/Src/main.c ****   GPIO_InitStruct.Pin = ResetBtn_Pin;
 209              		.loc 1 585 3 view .LVU58
 210              		.loc 1 585 23 is_stmt 0 view .LVU59
 211 00c2 0597     		str	r7, [sp, #20]
 586:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 212              		.loc 1 586 3 is_stmt 1 view .LVU60
 213              		.loc 1 586 24 is_stmt 0 view .LVU61
 214 00c4 0694     		str	r4, [sp, #24]
 587:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 215              		.loc 1 587 3 is_stmt 1 view .LVU62
 216              		.loc 1 587 24 is_stmt 0 view .LVU63
 217 00c6 0795     		str	r5, [sp, #28]
 588:Core/Src/main.c ****   HAL_GPIO_Init(ResetBtn_GPIO_Port, &GPIO_InitStruct);
 218              		.loc 1 588 3 is_stmt 1 view .LVU64
 219 00c8 05A9     		add	r1, sp, #20
 220 00ca 0648     		ldr	r0, .L3+12
 221 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 222              	.LVL5:
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 591:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 592:Core/Src/main.c **** }
 223              		.loc 1 592 1 is_stmt 0 view .LVU65
 224 00d0 0AB0     		add	sp, sp, #40
 225              		.cfi_def_cfa_offset 24
 226              		@ sp needed
 227 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 228              	.L4:
 229 00d6 00BF     		.align	2
 230              	.L3:
 231 00d8 00380240 		.word	1073887232
 232 00dc 00000240 		.word	1073872896
 233 00e0 00080240 		.word	1073874944
 234 00e4 00040240 		.word	1073873920
 235              		.cfi_endproc
 236              	.LFE250:
 238              		.section	.text.StartDefaultTask,"ax",%progbits
 239              		.align	1
 240              		.global	StartDefaultTask
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
ARM GAS  /tmp/ccN6wIPj.s 			page 16


 244              		.fpu fpv4-sp-d16
 246              	StartDefaultTask:
 247              	.LFB257:
 593:Core/Src/main.c **** 
 594:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 595:Core/Src/main.c **** 
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** void MiniBotInit(MiniBot_Config_t* MiniBot){
 598:Core/Src/main.c **** 	// Configure Each of the joints
 599:Core/Src/main.c **** 
 600:Core/Src/main.c **** 	  MiniBot->Base.PotNum = 0;
 601:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 602:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 603:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 604:Core/Src/main.c **** 
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotNum = 1;
 606:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 607:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 608:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 609:Core/Src/main.c **** 
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotNum = 2;
 611:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 612:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 613:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 614:Core/Src/main.c **** 
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotNum = 3;
 616:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 617:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 618:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 619:Core/Src/main.c **** 
 620:Core/Src/main.c **** 	  MiniBot->Gripper.GPIOx = GPIOA;
 621:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 622:Core/Src/main.c **** }
 623:Core/Src/main.c **** 
 624:Core/Src/main.c **** void MegaBotInit(MegaBot_Config_t* MegaBot){
 625:Core/Src/main.c ****   // Configure Each of the joints
 626:Core/Src/main.c ****   MegaBot->Base.ServoNum = 0;
 627:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 628:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 629:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoNum = 1;
 632:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 633:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 634:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 635:Core/Src/main.c **** 
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoNum = 2;
 637:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 638:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 639:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 640:Core/Src/main.c **** 
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoNum = 3;
 642:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 643:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 644:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 645:Core/Src/main.c **** 
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoNum = 4;
ARM GAS  /tmp/ccN6wIPj.s 			page 17


 647:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 648:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 649:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 650:Core/Src/main.c **** 
 651:Core/Src/main.c ****   ServoDriverInit(MegaBot);
 652:Core/Src/main.c **** }
 653:Core/Src/main.c **** 
 654:Core/Src/main.c **** void ServoDriverInit(MegaBot_Config_t* MegaBot){
 655:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 660:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 661:Core/Src/main.c **** }
 662:Core/Src/main.c **** 
 663:Core/Src/main.c **** 
 664:Core/Src/main.c **** void QPotDataUpdate(uint32_t PotRawValue, volatile MiniBot_Joint_Config_t *Joint, volatile uint32_t
 665:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 666:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 667:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 668:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 669:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 670:Core/Src/main.c ****     }else{
 671:Core/Src/main.c ****       *QPotData = PotRawValue;
 672:Core/Src/main.c ****     }
 673:Core/Src/main.c ****     if(Joint->PotInvertRange){
 674:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 675:Core/Src/main.c ****     }
 676:Core/Src/main.c ****   }
 677:Core/Src/main.c **** }
 678:Core/Src/main.c **** 
 679:Core/Src/main.c **** void MoveServo(MegaBot_Config_t* MegaBot, volatile MiniBot_Qdata* MiniBot){
 680:Core/Src/main.c ****   // MAP each of the angles
 681:Core/Src/main.c ****   // Send each of new Joints angle
 682:Core/Src/main.c ****   // uint16_t MappedServoAngle;
 683:Core/Src/main.c ****   // Base
 684:Core/Src/main.c ****   MappedServoAngle[0] = MAP(MiniBot->BasePotValue, MiniBot->BasePotMin, MiniBot->BasePotMax, MegaBo
 685:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 686:Core/Src/main.c ****   // Shoulder
 687:Core/Src/main.c ****   MappedServoAngle[1] = MAP(MiniBot->ShoulderPotValue, MiniBot->ShoulderPotMin, MiniBot->ShoulderPo
 688:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 689:Core/Src/main.c ****   // Elbow
 690:Core/Src/main.c ****   MappedServoAngle[2] = MAP(MiniBot->ElbowPotValue, MiniBot->ElbowPotMin, MiniBot->ElbowPotMax, Meg
 691:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 692:Core/Src/main.c ****   // Wrist
 693:Core/Src/main.c ****   MappedServoAngle[3] = MAP(MiniBot->WristPotValue, MiniBot->WristPotMin, MiniBot->WristPotMax, Meg
 694:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 695:Core/Src/main.c ****   // Gripper
 696:Core/Src/main.c ****   if(MiniBot->GripperValue){
 697:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 698:Core/Src/main.c ****   }else{
 699:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMax);
 700:Core/Src/main.c ****   }
 701:Core/Src/main.c **** }
 702:Core/Src/main.c **** 
 703:Core/Src/main.c **** // Used to map the Potentiometer Range (0-4096) to the Servo Range (0-180)
ARM GAS  /tmp/ccN6wIPj.s 			page 18


 704:Core/Src/main.c **** uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint
 705:Core/Src/main.c **** {
 706:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 707:Core/Src/main.c **** }
 708:Core/Src/main.c **** 
 709:Core/Src/main.c **** 
 710:Core/Src/main.c **** /* USER CODE END 4 */
 711:Core/Src/main.c **** 
 712:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 713:Core/Src/main.c **** /**
 714:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 715:Core/Src/main.c ****   * @param  argument: Not used
 716:Core/Src/main.c ****   * @retval None
 717:Core/Src/main.c ****   */
 718:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 719:Core/Src/main.c **** void StartDefaultTask(void const * argument)
 720:Core/Src/main.c **** {
 248              		.loc 1 720 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ Volatile: function does not return.
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              	.LVL6:
 254              		.loc 1 720 1 is_stmt 0 view .LVU67
 255 0000 08B5     		push	{r3, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 3, -8
 258              		.cfi_offset 14, -4
 259              	.LVL7:
 260              	.L6:
 721:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 722:Core/Src/main.c ****   /* Infinite loop */
 723:Core/Src/main.c ****   for(;;)
 261              		.loc 1 723 3 is_stmt 1 discriminator 1 view .LVU68
 724:Core/Src/main.c ****   {
 725:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 0);
 262              		.loc 1 725 5 discriminator 1 view .LVU69
 263 0002 0022     		movs	r2, #0
 264 0004 2021     		movs	r1, #32
 265 0006 0448     		ldr	r0, .L8
 266 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 267              	.LVL8:
 726:Core/Src/main.c ****     osDelay(1000);
 268              		.loc 1 726 5 discriminator 1 view .LVU70
 269 000c 4FF47A70 		mov	r0, #1000
 270 0010 FFF7FEFF 		bl	osDelay
 271              	.LVL9:
 723:Core/Src/main.c ****   {
 272              		.loc 1 723 8 discriminator 1 view .LVU71
 273 0014 F5E7     		b	.L6
 274              	.L9:
 275 0016 00BF     		.align	2
 276              	.L8:
 277 0018 00000240 		.word	1073872896
 278              		.cfi_endproc
 279              	.LFE257:
 281              		.section	.text.BlinkLEDTaskEntry,"ax",%progbits
ARM GAS  /tmp/ccN6wIPj.s 			page 19


 282              		.align	1
 283              		.global	BlinkLEDTaskEntry
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu fpv4-sp-d16
 289              	BlinkLEDTaskEntry:
 290              	.LFB258:
 727:Core/Src/main.c ****   }
 728:Core/Src/main.c ****   /* USER CODE END 5 */
 729:Core/Src/main.c **** }
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** /* USER CODE BEGIN Header_BlinkLEDTaskEntry */
 732:Core/Src/main.c **** /**
 733:Core/Src/main.c **** * @brief Function implementing the BlinkLEDTask thread.
 734:Core/Src/main.c **** * @param argument: Not used
 735:Core/Src/main.c **** * @retval None
 736:Core/Src/main.c **** */
 737:Core/Src/main.c **** /* USER CODE END Header_BlinkLEDTaskEntry */
 738:Core/Src/main.c **** void BlinkLEDTaskEntry(void const * argument)
 739:Core/Src/main.c **** {
 291              		.loc 1 739 1 view -0
 292              		.cfi_startproc
 293              		@ Volatile: function does not return.
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL10:
 297              		.loc 1 739 1 is_stmt 0 view .LVU73
 298 0000 08B5     		push	{r3, lr}
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 3, -8
 301              		.cfi_offset 14, -4
 302              	.LVL11:
 303              	.L11:
 740:Core/Src/main.c ****   /* USER CODE BEGIN BlinkLEDTaskEntry */
 741:Core/Src/main.c ****   /* Infinite loop */
 742:Core/Src/main.c ****   for(;;)
 304              		.loc 1 742 3 is_stmt 1 discriminator 1 view .LVU74
 743:Core/Src/main.c ****   {
 744:Core/Src/main.c ****     
 745:Core/Src/main.c ****     osDelay(500);
 305              		.loc 1 745 5 discriminator 1 view .LVU75
 306 0002 4FF4FA70 		mov	r0, #500
 307 0006 FFF7FEFF 		bl	osDelay
 308              	.LVL12:
 746:Core/Src/main.c ****     HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, 1);
 309              		.loc 1 746 5 discriminator 1 view .LVU76
 310 000a 0122     		movs	r2, #1
 311 000c 2021     		movs	r1, #32
 312 000e 0448     		ldr	r0, .L13
 313 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 314              	.LVL13:
 747:Core/Src/main.c ****     osDelay(500);
 315              		.loc 1 747 5 discriminator 1 view .LVU77
 316 0014 4FF4FA70 		mov	r0, #500
 317 0018 FFF7FEFF 		bl	osDelay
 318              	.LVL14:
ARM GAS  /tmp/ccN6wIPj.s 			page 20


 742:Core/Src/main.c ****   {
 319              		.loc 1 742 8 discriminator 1 view .LVU78
 320 001c F1E7     		b	.L11
 321              	.L14:
 322 001e 00BF     		.align	2
 323              	.L13:
 324 0020 00000240 		.word	1073872896
 325              		.cfi_endproc
 326              	.LFE258:
 328              		.section	.text.EmergencyStopTaskEntry,"ax",%progbits
 329              		.align	1
 330              		.global	EmergencyStopTaskEntry
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv4-sp-d16
 336              	EmergencyStopTaskEntry:
 337              	.LFB261:
 748:Core/Src/main.c ****   }
 749:Core/Src/main.c ****   /* USER CODE END BlinkLEDTaskEntry */
 750:Core/Src/main.c **** }
 751:Core/Src/main.c **** 
 752:Core/Src/main.c **** /* USER CODE BEGIN Header_MiniBotInputsEntry */
 753:Core/Src/main.c **** /**
 754:Core/Src/main.c **** * @brief Function implementing the MiniBotInputs thread.
 755:Core/Src/main.c **** * @param argument: Not used
 756:Core/Src/main.c **** * @retval None
 757:Core/Src/main.c **** */
 758:Core/Src/main.c **** /* USER CODE END Header_MiniBotInputsEntry */
 759:Core/Src/main.c **** void MiniBotInputsEntry(void const * argument)
 760:Core/Src/main.c **** {
 761:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 762:Core/Src/main.c **** 
 763:Core/Src/main.c **** 	MiniBot_Config_t MiniBot;
 764:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 765:Core/Src/main.c **** 
 766:Core/Src/main.c ****   Qdata.BasePotMax = MiniBot.Base.PotMax;
 767:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 768:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 769:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 770:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 771:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 772:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 773:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 774:Core/Src/main.c ****   
 775:Core/Src/main.c **** 
 776:Core/Src/main.c **** 	/* Infinite loop */
 777:Core/Src/main.c **** 	for(;;)
 778:Core/Src/main.c **** 	{
 779:Core/Src/main.c ****     for(uint8_t i=0; i<4; i++){
 780:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 781:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 782:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 783:Core/Src/main.c ****     }
 784:Core/Src/main.c ****     HAL_ADC_Stop(&hadc1);
 785:Core/Src/main.c **** 
 786:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[0], &MiniBot.Base, &Qdata.BasePotValue);
ARM GAS  /tmp/ccN6wIPj.s 			page 21


 787:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 788:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 789:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 790:Core/Src/main.c **** 
 791:Core/Src/main.c ****     Qdata.GripperValue = (uint8_t)HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 792:Core/Src/main.c ****     
 793:Core/Src/main.c ****     if(MiniBotInputQueueHandle != 0){
 794:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 795:Core/Src/main.c ****         // failed to post message
 796:Core/Src/main.c ****         tempFailedToPostMessage = 1;
 797:Core/Src/main.c ****       }
 798:Core/Src/main.c ****     }
 799:Core/Src/main.c ****   
 800:Core/Src/main.c **** 
 801:Core/Src/main.c ****     osDelay(1);
 802:Core/Src/main.c **** 	}
 803:Core/Src/main.c ****   /* USER CODE END MiniBotInputsEntry */
 804:Core/Src/main.c **** }
 805:Core/Src/main.c **** 
 806:Core/Src/main.c **** /* USER CODE BEGIN Header_ApplicationFSMEntry */
 807:Core/Src/main.c **** /**
 808:Core/Src/main.c **** * @brief Function implementing the ApplicationFSM thread.
 809:Core/Src/main.c **** * @param argument: Not used
 810:Core/Src/main.c **** * @retval None
 811:Core/Src/main.c **** */
 812:Core/Src/main.c **** /* USER CODE END Header_ApplicationFSMEntry */
 813:Core/Src/main.c **** void ApplicationFSMEntry(void const * argument)
 814:Core/Src/main.c **** {
 815:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 816:Core/Src/main.c **** 
 817:Core/Src/main.c ****   // enum State state = Init;
 818:Core/Src/main.c ****   // MiniBot_Qdata minibot_data;
 819:Core/Src/main.c **** 
 820:Core/Src/main.c ****   /* Infinite loop */
 821:Core/Src/main.c ****   for(;;)
 822:Core/Src/main.c ****   {
 823:Core/Src/main.c ****     if(state == Init){
 824:Core/Src/main.c ****       state = Ready;
 825:Core/Src/main.c **** 
 826:Core/Src/main.c ****     }else if(state == Ready){
 827:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 828:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 829:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 830:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 831:Core/Src/main.c ****               state++;
 832:Core/Src/main.c ****             }
 833:Core/Src/main.c ****           }
 834:Core/Src/main.c ****         }
 835:Core/Src/main.c ****       }
 836:Core/Src/main.c **** 
 837:Core/Src/main.c ****     }else if(state == Running){
 838:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 839:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 840:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 841:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 842:Core/Src/main.c ****       }
 843:Core/Src/main.c ****       
ARM GAS  /tmp/ccN6wIPj.s 			page 22


 844:Core/Src/main.c ****     }
 845:Core/Src/main.c ****     
 846:Core/Src/main.c ****     if(state == EmergencyStop){
 847:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 848:Core/Src/main.c ****     }
 849:Core/Src/main.c **** 
 850:Core/Src/main.c **** 
 851:Core/Src/main.c **** 
 852:Core/Src/main.c ****     osDelay(1);
 853:Core/Src/main.c ****   }
 854:Core/Src/main.c ****   /* USER CODE END ApplicationFSMEntry */
 855:Core/Src/main.c **** }
 856:Core/Src/main.c **** 
 857:Core/Src/main.c **** /* USER CODE BEGIN Header_EmergencyStopTaskEntry */
 858:Core/Src/main.c **** /**
 859:Core/Src/main.c **** * @brief Function implementing the EmergencyStopTa thread.
 860:Core/Src/main.c **** * @param argument: Not used
 861:Core/Src/main.c **** * @retval None
 862:Core/Src/main.c **** */
 863:Core/Src/main.c **** /* USER CODE END Header_EmergencyStopTaskEntry */
 864:Core/Src/main.c **** void EmergencyStopTaskEntry(void const * argument)
 865:Core/Src/main.c **** {
 338              		.loc 1 865 1 view -0
 339              		.cfi_startproc
 340              		@ Volatile: function does not return.
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              	.LVL15:
 344              		.loc 1 865 1 is_stmt 0 view .LVU80
 345 0000 08B5     		push	{r3, lr}
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 3, -8
 348              		.cfi_offset 14, -4
 349              	.LVL16:
 350              	.L16:
 866:Core/Src/main.c ****   /* USER CODE BEGIN EmergencyStopTaskEntry */
 867:Core/Src/main.c ****   /* Infinite loop */
 868:Core/Src/main.c ****   for(;;)
 351              		.loc 1 868 3 is_stmt 1 view .LVU81
 869:Core/Src/main.c ****   {
 870:Core/Src/main.c ****     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)){
 352              		.loc 1 870 5 view .LVU82
 353              		.loc 1 870 8 is_stmt 0 view .LVU83
 354 0002 4FF48071 		mov	r1, #256
 355 0006 0348     		ldr	r0, .L18
 356 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 357              	.LVL17:
 871:Core/Src/main.c ****       
 872:Core/Src/main.c ****     }
 358              		.loc 1 872 5 is_stmt 1 view .LVU84
 873:Core/Src/main.c **** 
 874:Core/Src/main.c **** 
 875:Core/Src/main.c ****     osDelay(1);
 359              		.loc 1 875 5 view .LVU85
 360 000c 0120     		movs	r0, #1
 361 000e FFF7FEFF 		bl	osDelay
 362              	.LVL18:
ARM GAS  /tmp/ccN6wIPj.s 			page 23


 868:Core/Src/main.c ****   {
 363              		.loc 1 868 8 view .LVU86
 364 0012 F6E7     		b	.L16
 365              	.L19:
 366              		.align	2
 367              	.L18:
 368 0014 00000240 		.word	1073872896
 369              		.cfi_endproc
 370              	.LFE261:
 372              		.section	.text.ApplicationFSMEntry,"ax",%progbits
 373              		.align	1
 374              		.global	ApplicationFSMEntry
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu fpv4-sp-d16
 380              	ApplicationFSMEntry:
 381              	.LFB260:
 814:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 382              		.loc 1 814 1 view -0
 383              		.cfi_startproc
 384              		@ Volatile: function does not return.
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              	.LVL19:
 814:Core/Src/main.c ****   /* USER CODE BEGIN ApplicationFSMEntry */
 388              		.loc 1 814 1 is_stmt 0 view .LVU88
 389 0000 08B5     		push	{r3, lr}
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 3, -8
 392              		.cfi_offset 14, -4
 393 0002 07E0     		b	.L24
 394              	.LVL20:
 395              	.L26:
 824:Core/Src/main.c **** 
 396              		.loc 1 824 7 is_stmt 1 view .LVU89
 824:Core/Src/main.c **** 
 397              		.loc 1 824 13 is_stmt 0 view .LVU90
 398 0004 2C4B     		ldr	r3, .L28
 399 0006 0122     		movs	r2, #1
 400 0008 1A70     		strb	r2, [r3]
 401              	.L22:
 846:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 402              		.loc 1 846 5 is_stmt 1 view .LVU91
 846:Core/Src/main.c ****       // If reset btn is pressed change state to Ready1
 403              		.loc 1 846 14 is_stmt 0 view .LVU92
 404 000a 2B4B     		ldr	r3, .L28
 405 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 848:Core/Src/main.c **** 
 406              		.loc 1 848 5 is_stmt 1 view .LVU93
 852:Core/Src/main.c ****   }
 407              		.loc 1 852 5 view .LVU94
 408 000e 0120     		movs	r0, #1
 409 0010 FFF7FEFF 		bl	osDelay
 410              	.LVL21:
 821:Core/Src/main.c ****   {
 411              		.loc 1 821 8 view .LVU95
ARM GAS  /tmp/ccN6wIPj.s 			page 24


 412              	.L24:
 821:Core/Src/main.c ****   {
 413              		.loc 1 821 3 view .LVU96
 823:Core/Src/main.c ****       state = Ready;
 414              		.loc 1 823 5 view .LVU97
 823:Core/Src/main.c ****       state = Ready;
 415              		.loc 1 823 14 is_stmt 0 view .LVU98
 416 0014 284B     		ldr	r3, .L28
 417 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 823:Core/Src/main.c ****       state = Ready;
 418              		.loc 1 823 7 view .LVU99
 419 0018 002B     		cmp	r3, #0
 420 001a F3D0     		beq	.L26
 826:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 421              		.loc 1 826 11 is_stmt 1 view .LVU100
 826:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 422              		.loc 1 826 20 is_stmt 0 view .LVU101
 423 001c 264B     		ldr	r3, .L28
 424 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 425 0020 DBB2     		uxtb	r3, r3
 826:Core/Src/main.c ****       if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pdPASS
 426              		.loc 1 826 13 view .LVU102
 427 0022 012B     		cmp	r3, #1
 428 0024 25D0     		beq	.L27
 837:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 429              		.loc 1 837 11 is_stmt 1 view .LVU103
 837:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 430              		.loc 1 837 20 is_stmt 0 view .LVU104
 431 0026 244B     		ldr	r3, .L28
 432 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 433 002a DBB2     		uxtb	r3, r3
 837:Core/Src/main.c ****       // Send Minibot_data to the Motor Queue for the Motor Task to handle
 434              		.loc 1 837 13 view .LVU105
 435 002c 022B     		cmp	r3, #2
 436 002e ECD1     		bne	.L22
 839:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 437              		.loc 1 839 7 is_stmt 1 view .LVU106
 839:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 438              		.loc 1 839 10 is_stmt 0 view .LVU107
 439 0030 4FF0FF32 		mov	r2, #-1
 440 0034 2149     		ldr	r1, .L28+4
 441 0036 224B     		ldr	r3, .L28+8
 442 0038 1868     		ldr	r0, [r3]
 443 003a FFF7FEFF 		bl	xQueueReceive
 444              	.LVL22:
 839:Core/Src/main.c ****         Temp_Qdata_Buf = MiniBot_Qdata_Buf;
 445              		.loc 1 839 9 view .LVU108
 446 003e 0128     		cmp	r0, #1
 447 0040 E3D1     		bne	.L22
 840:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 448              		.loc 1 840 9 is_stmt 1 view .LVU109
 840:Core/Src/main.c ****         xQueueSend(MotorControlQueueHandle, (void*)&Temp_Qdata_Buf, portMAX_DELAY);
 449              		.loc 1 840 24 is_stmt 0 view .LVU110
 450 0042 204D     		ldr	r5, .L28+12
 451 0044 AC46     		mov	ip, r5
 452 0046 1D4C     		ldr	r4, .L28+4
 453 0048 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccN6wIPj.s 			page 25


 454 004a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 455 004e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 456 0050 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 457 0054 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 458 0056 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 459 005a 2368     		ldr	r3, [r4]
 460 005c CCF80030 		str	r3, [ip]
 841:Core/Src/main.c ****       }
 461              		.loc 1 841 9 is_stmt 1 view .LVU111
 462 0060 0023     		movs	r3, #0
 463 0062 4FF0FF32 		mov	r2, #-1
 464 0066 2946     		mov	r1, r5
 465 0068 1748     		ldr	r0, .L28+16
 466 006a 0068     		ldr	r0, [r0]
 467 006c FFF7FEFF 		bl	xQueueGenericSend
 468              	.LVL23:
 469 0070 CBE7     		b	.L22
 470              	.L27:
 827:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 471              		.loc 1 827 7 view .LVU112
 827:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 472              		.loc 1 827 10 is_stmt 0 view .LVU113
 473 0072 4FF0FF32 		mov	r2, #-1
 474 0076 1149     		ldr	r1, .L28+4
 475 0078 114B     		ldr	r3, .L28+8
 476 007a 1868     		ldr	r0, [r3]
 477 007c FFF7FEFF 		bl	xQueueReceive
 478              	.LVL24:
 827:Core/Src/main.c ****         if(MiniBot_Qdata_Buf.GripperValue == 0){
 479              		.loc 1 827 9 view .LVU114
 480 0080 0128     		cmp	r0, #1
 481 0082 C2D1     		bne	.L22
 828:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 482              		.loc 1 828 9 is_stmt 1 view .LVU115
 828:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 483              		.loc 1 828 29 is_stmt 0 view .LVU116
 484 0084 0D4B     		ldr	r3, .L28+4
 485 0086 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 828:Core/Src/main.c ****           if(xQueueReceive(MiniBotInputQueueHandle, (void*)&MiniBot_Qdata_Buf, portMAX_DELAY) == pd
 486              		.loc 1 828 11 view .LVU117
 487 008a 002B     		cmp	r3, #0
 488 008c BDD1     		bne	.L22
 829:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 489              		.loc 1 829 11 is_stmt 1 view .LVU118
 829:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 490              		.loc 1 829 14 is_stmt 0 view .LVU119
 491 008e 4FF0FF32 		mov	r2, #-1
 492 0092 0A49     		ldr	r1, .L28+4
 493 0094 0A4B     		ldr	r3, .L28+8
 494 0096 1868     		ldr	r0, [r3]
 495 0098 FFF7FEFF 		bl	xQueueReceive
 496              	.LVL25:
 829:Core/Src/main.c ****             if(MiniBot_Qdata_Buf.GripperValue == 1){
 497              		.loc 1 829 13 view .LVU120
 498 009c 0128     		cmp	r0, #1
 499 009e B4D1     		bne	.L22
 830:Core/Src/main.c ****               state++;
ARM GAS  /tmp/ccN6wIPj.s 			page 26


 500              		.loc 1 830 13 is_stmt 1 view .LVU121
 830:Core/Src/main.c ****               state++;
 501              		.loc 1 830 33 is_stmt 0 view .LVU122
 502 00a0 064B     		ldr	r3, .L28+4
 503 00a2 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 504 00a6 DBB2     		uxtb	r3, r3
 830:Core/Src/main.c ****               state++;
 505              		.loc 1 830 15 view .LVU123
 506 00a8 012B     		cmp	r3, #1
 507 00aa AED1     		bne	.L22
 831:Core/Src/main.c ****             }
 508              		.loc 1 831 15 is_stmt 1 view .LVU124
 831:Core/Src/main.c ****             }
 509              		.loc 1 831 20 is_stmt 0 view .LVU125
 510 00ac 024A     		ldr	r2, .L28
 511 00ae 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 512 00b0 0133     		adds	r3, r3, #1
 513 00b2 DBB2     		uxtb	r3, r3
 514 00b4 1370     		strb	r3, [r2]
 515 00b6 A8E7     		b	.L22
 516              	.L29:
 517              		.align	2
 518              	.L28:
 519 00b8 00000000 		.word	.LANCHOR0
 520 00bc 00000000 		.word	.LANCHOR1
 521 00c0 00000000 		.word	.LANCHOR2
 522 00c4 00000000 		.word	.LANCHOR3
 523 00c8 00000000 		.word	.LANCHOR4
 524              		.cfi_endproc
 525              	.LFE260:
 527              		.section	.rodata.LCDPrintTaskEntry.str1.4,"aMS",%progbits,1
 528              		.align	2
 529              	.LC16:
 530 0000 54657374 		.ascii	"Test\000"
 530      00
 531 0005 000000   		.align	2
 532              	.LC17:
 533 0008 49324320 		.ascii	"I2C LCD\000"
 533      4C434400 
 534              		.section	.text.LCDPrintTaskEntry,"ax",%progbits
 535              		.align	1
 536              		.global	LCDPrintTaskEntry
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu fpv4-sp-d16
 542              	LCDPrintTaskEntry:
 543              	.LVL26:
 544              	.LFB263:
 876:Core/Src/main.c ****   }
 877:Core/Src/main.c ****   /* USER CODE END EmergencyStopTaskEntry */
 878:Core/Src/main.c **** }
 879:Core/Src/main.c **** 
 880:Core/Src/main.c **** /* USER CODE BEGIN Header_MotorControlTaskEntry */
 881:Core/Src/main.c **** /**
 882:Core/Src/main.c **** * @brief Function implementing the MotorControlTas thread.
 883:Core/Src/main.c **** * @param argument: Not used
ARM GAS  /tmp/ccN6wIPj.s 			page 27


 884:Core/Src/main.c **** * @retval None
 885:Core/Src/main.c **** */
 886:Core/Src/main.c **** /* USER CODE END Header_MotorControlTaskEntry */
 887:Core/Src/main.c **** void MotorControlTaskEntry(void const * argument)
 888:Core/Src/main.c **** {
 889:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 890:Core/Src/main.c **** 
 891:Core/Src/main.c ****   MegaBot_Config_t MegaBot;
 892:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 893:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 894:Core/Src/main.c **** 
 895:Core/Src/main.c **** 
 896:Core/Src/main.c ****   /* Infinite loop */
 897:Core/Src/main.c ****   for(;;)
 898:Core/Src/main.c ****   {
 899:Core/Src/main.c **** 
 900:Core/Src/main.c ****     if(xQueueReceive(MotorControlQueueHandle, (void*)&MotorControl_Qdata_Buf, portMAX_DELAY) == pdP
 901:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 902:Core/Src/main.c ****     }
 903:Core/Src/main.c **** 
 904:Core/Src/main.c **** 
 905:Core/Src/main.c **** 
 906:Core/Src/main.c ****     osDelay(1);
 907:Core/Src/main.c ****   }
 908:Core/Src/main.c ****   /* USER CODE END MotorControlTaskEntry */
 909:Core/Src/main.c **** }
 910:Core/Src/main.c **** 
 911:Core/Src/main.c **** /* USER CODE BEGIN Header_LCDPrintTaskEntry */
 912:Core/Src/main.c **** /**
 913:Core/Src/main.c **** * @brief Function implementing the LCDPrintTask thread.
 914:Core/Src/main.c **** * @param argument: Not used
 915:Core/Src/main.c **** * @retval None
 916:Core/Src/main.c **** */
 917:Core/Src/main.c **** /* USER CODE END Header_LCDPrintTaskEntry */
 918:Core/Src/main.c **** void LCDPrintTaskEntry(void const * argument)
 919:Core/Src/main.c **** {
 545              		.loc 1 919 1 is_stmt 1 view -0
 546              		.cfi_startproc
 547              		@ Volatile: function does not return.
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              		.loc 1 919 1 is_stmt 0 view .LVU127
 551 0000 08B5     		push	{r3, lr}
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 3, -8
 554              		.cfi_offset 14, -4
 920:Core/Src/main.c ****   /* USER CODE BEGIN LCDPrintTaskEntry */
 921:Core/Src/main.c **** 
 922:Core/Src/main.c ****   I2C_LCD_Init(I2C_LCD_1);
 555              		.loc 1 922 3 is_stmt 1 view .LVU128
 556 0002 0020     		movs	r0, #0
 557              	.LVL27:
 558              		.loc 1 922 3 is_stmt 0 view .LVU129
 559 0004 FFF7FEFF 		bl	I2C_LCD_Init
 560              	.LVL28:
 923:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 0);
 561              		.loc 1 923 3 is_stmt 1 view .LVU130
ARM GAS  /tmp/ccN6wIPj.s 			page 28


 562 0008 0022     		movs	r2, #0
 563 000a 1146     		mov	r1, r2
 564 000c 1046     		mov	r0, r2
 565 000e FFF7FEFF 		bl	I2C_LCD_SetCursor
 566              	.LVL29:
 924:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "Test");
 567              		.loc 1 924 3 view .LVU131
 568 0012 0849     		ldr	r1, .L33
 569 0014 0020     		movs	r0, #0
 570 0016 FFF7FEFF 		bl	I2C_LCD_WriteString
 571              	.LVL30:
 925:Core/Src/main.c ****   I2C_LCD_SetCursor(I2C_LCD_1, 0, 1);
 572              		.loc 1 925 3 view .LVU132
 573 001a 0122     		movs	r2, #1
 574 001c 0021     		movs	r1, #0
 575 001e 0846     		mov	r0, r1
 576 0020 FFF7FEFF 		bl	I2C_LCD_SetCursor
 577              	.LVL31:
 926:Core/Src/main.c ****   I2C_LCD_WriteString(I2C_LCD_1, "I2C LCD");
 578              		.loc 1 926 3 view .LVU133
 579 0024 0449     		ldr	r1, .L33+4
 580 0026 0020     		movs	r0, #0
 581 0028 FFF7FEFF 		bl	I2C_LCD_WriteString
 582              	.LVL32:
 583              	.L31:
 927:Core/Src/main.c **** 
 928:Core/Src/main.c ****   /* Infinite loop */
 929:Core/Src/main.c ****   for(;;)
 584              		.loc 1 929 3 discriminator 1 view .LVU134
 930:Core/Src/main.c ****   {
 931:Core/Src/main.c **** 
 932:Core/Src/main.c **** 
 933:Core/Src/main.c ****     osDelay(1);
 585              		.loc 1 933 5 discriminator 1 view .LVU135
 586 002c 0120     		movs	r0, #1
 587 002e FFF7FEFF 		bl	osDelay
 588              	.LVL33:
 929:Core/Src/main.c ****   {
 589              		.loc 1 929 8 discriminator 1 view .LVU136
 590 0032 FBE7     		b	.L31
 591              	.L34:
 592              		.align	2
 593              	.L33:
 594 0034 00000000 		.word	.LC16
 595 0038 08000000 		.word	.LC17
 596              		.cfi_endproc
 597              	.LFE263:
 599              		.section	.text.MiniBotInit,"ax",%progbits
 600              		.align	1
 601              		.global	MiniBotInit
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu fpv4-sp-d16
 607              	MiniBotInit:
 608              	.LVL34:
 609              	.LFB251:
ARM GAS  /tmp/ccN6wIPj.s 			page 29


 597:Core/Src/main.c **** 	// Configure Each of the joints
 610              		.loc 1 597 44 view -0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 597:Core/Src/main.c **** 	// Configure Each of the joints
 614              		.loc 1 597 44 is_stmt 0 view .LVU138
 615 0000 00B5     		push	{lr}
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 14, -4
 600:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 618              		.loc 1 600 4 is_stmt 1 view .LVU139
 600:Core/Src/main.c **** 	  MiniBot->Base.PotMin = 800;
 619              		.loc 1 600 25 is_stmt 0 view .LVU140
 620 0002 0023     		movs	r3, #0
 621 0004 0370     		strb	r3, [r0]
 601:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 622              		.loc 1 601 4 is_stmt 1 view .LVU141
 601:Core/Src/main.c **** 	  MiniBot->Base.PotMax = 3400;
 623              		.loc 1 601 25 is_stmt 0 view .LVU142
 624 0006 4FF44872 		mov	r2, #800
 625 000a 4260     		str	r2, [r0, #4]
 602:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 626              		.loc 1 602 4 is_stmt 1 view .LVU143
 602:Core/Src/main.c **** 	  MiniBot->Base.PotInvertRange = 0;
 627              		.loc 1 602 25 is_stmt 0 view .LVU144
 628 000c 40F64851 		movw	r1, #3400
 629 0010 8160     		str	r1, [r0, #8]
 603:Core/Src/main.c **** 
 630              		.loc 1 603 4 is_stmt 1 view .LVU145
 603:Core/Src/main.c **** 
 631              		.loc 1 603 33 is_stmt 0 view .LVU146
 632 0012 0373     		strb	r3, [r0, #12]
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 633              		.loc 1 605 4 is_stmt 1 view .LVU147
 605:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMin = 600;
 634              		.loc 1 605 29 is_stmt 0 view .LVU148
 635 0014 4FF0010C 		mov	ip, #1
 636 0018 80F810C0 		strb	ip, [r0, #16]
 606:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 637              		.loc 1 606 4 is_stmt 1 view .LVU149
 606:Core/Src/main.c **** 	  MiniBot->Shoulder.PotMax = 3400;
 638              		.loc 1 606 29 is_stmt 0 view .LVU150
 639 001c 4FF41672 		mov	r2, #600
 640 0020 4261     		str	r2, [r0, #20]
 607:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 641              		.loc 1 607 4 is_stmt 1 view .LVU151
 607:Core/Src/main.c **** 	  MiniBot->Shoulder.PotInvertRange = 0;
 642              		.loc 1 607 29 is_stmt 0 view .LVU152
 643 0022 8161     		str	r1, [r0, #24]
 608:Core/Src/main.c **** 
 644              		.loc 1 608 4 is_stmt 1 view .LVU153
 608:Core/Src/main.c **** 
 645              		.loc 1 608 37 is_stmt 0 view .LVU154
 646 0024 0377     		strb	r3, [r0, #28]
 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 647              		.loc 1 610 4 is_stmt 1 view .LVU155
ARM GAS  /tmp/ccN6wIPj.s 			page 30


 610:Core/Src/main.c **** 	  MiniBot->Elbow.PotMin = 600;
 648              		.loc 1 610 26 is_stmt 0 view .LVU156
 649 0026 4FF0020E 		mov	lr, #2
 650 002a 80F820E0 		strb	lr, [r0, #32]
 611:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 651              		.loc 1 611 4 is_stmt 1 view .LVU157
 611:Core/Src/main.c **** 	  MiniBot->Elbow.PotMax = 3400;
 652              		.loc 1 611 26 is_stmt 0 view .LVU158
 653 002e 4262     		str	r2, [r0, #36]
 612:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 654              		.loc 1 612 4 is_stmt 1 view .LVU159
 612:Core/Src/main.c **** 	  MiniBot->Elbow.PotInvertRange = 0;
 655              		.loc 1 612 26 is_stmt 0 view .LVU160
 656 0030 8162     		str	r1, [r0, #40]
 613:Core/Src/main.c **** 
 657              		.loc 1 613 4 is_stmt 1 view .LVU161
 613:Core/Src/main.c **** 
 658              		.loc 1 613 34 is_stmt 0 view .LVU162
 659 0032 80F82C30 		strb	r3, [r0, #44]
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 660              		.loc 1 615 4 is_stmt 1 view .LVU163
 615:Core/Src/main.c **** 	  MiniBot->Wrist.PotMin = 600;
 661              		.loc 1 615 26 is_stmt 0 view .LVU164
 662 0036 0323     		movs	r3, #3
 663 0038 80F83030 		strb	r3, [r0, #48]
 616:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 664              		.loc 1 616 4 is_stmt 1 view .LVU165
 616:Core/Src/main.c **** 	  MiniBot->Wrist.PotMax = 3200;
 665              		.loc 1 616 26 is_stmt 0 view .LVU166
 666 003c 4263     		str	r2, [r0, #52]
 617:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 667              		.loc 1 617 4 is_stmt 1 view .LVU167
 617:Core/Src/main.c **** 	  MiniBot->Wrist.PotInvertRange = 1;
 668              		.loc 1 617 26 is_stmt 0 view .LVU168
 669 003e 4FF44863 		mov	r3, #3200
 670 0042 8363     		str	r3, [r0, #56]
 618:Core/Src/main.c **** 
 671              		.loc 1 618 4 is_stmt 1 view .LVU169
 618:Core/Src/main.c **** 
 672              		.loc 1 618 34 is_stmt 0 view .LVU170
 673 0044 80F83CC0 		strb	ip, [r0, #60]
 620:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 674              		.loc 1 620 4 is_stmt 1 view .LVU171
 620:Core/Src/main.c **** 	  MiniBot->Gripper.GPIO_Pin = GPIO_PIN_9;
 675              		.loc 1 620 27 is_stmt 0 view .LVU172
 676 0048 034B     		ldr	r3, .L37
 677 004a 0364     		str	r3, [r0, #64]
 621:Core/Src/main.c **** }
 678              		.loc 1 621 4 is_stmt 1 view .LVU173
 621:Core/Src/main.c **** }
 679              		.loc 1 621 30 is_stmt 0 view .LVU174
 680 004c 4FF40073 		mov	r3, #512
 681 0050 A0F84430 		strh	r3, [r0, #68]	@ movhi
 622:Core/Src/main.c **** 
 682              		.loc 1 622 1 view .LVU175
 683 0054 5DF804FB 		ldr	pc, [sp], #4
 684              	.L38:
ARM GAS  /tmp/ccN6wIPj.s 			page 31


 685              		.align	2
 686              	.L37:
 687 0058 00000240 		.word	1073872896
 688              		.cfi_endproc
 689              	.LFE251:
 691              		.section	.text.ServoDriverInit,"ax",%progbits
 692              		.align	1
 693              		.global	ServoDriverInit
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu fpv4-sp-d16
 699              	ServoDriverInit:
 700              	.LVL35:
 701              	.LFB253:
 654:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 702              		.loc 1 654 48 is_stmt 1 view -0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 654:Core/Src/main.c ****   PCA9685_Init(&hi2c1);
 706              		.loc 1 654 48 is_stmt 0 view .LVU177
 707 0000 10B5     		push	{r4, lr}
 708              		.cfi_def_cfa_offset 8
 709              		.cfi_offset 4, -8
 710              		.cfi_offset 14, -4
 711 0002 0446     		mov	r4, r0
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 712              		.loc 1 655 3 is_stmt 1 view .LVU178
 713 0004 1648     		ldr	r0, .L41
 714              	.LVL36:
 655:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MegaBot->Base.ServoHomeAngle);
 715              		.loc 1 655 3 is_stmt 0 view .LVU179
 716 0006 FFF7FEFF 		bl	PCA9685_Init
 717              	.LVL37:
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 718              		.loc 1 656 3 is_stmt 1 view .LVU180
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 719              		.loc 1 656 62 is_stmt 0 view .LVU181
 720 000a E388     		ldrh	r3, [r4, #6]
 721 000c 00EE103A 		vmov	s0, r3	@ int
 656:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MegaBot->Shoulder.ServoHomeAngle);
 722              		.loc 1 656 3 view .LVU182
 723 0010 B8EE400A 		vcvt.f32.u32	s0, s0
 724 0014 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 725 0016 FFF7FEFF 		bl	PCA9685_SetServoAngle
 726              	.LVL38:
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 727              		.loc 1 657 3 is_stmt 1 view .LVU183
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 728              		.loc 1 657 70 is_stmt 0 view .LVU184
 729 001a E389     		ldrh	r3, [r4, #14]
 730 001c 00EE103A 		vmov	s0, r3	@ int
 657:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MegaBot->Elbow.ServoHomeAngle);
 731              		.loc 1 657 3 view .LVU185
 732 0020 B8EE400A 		vcvt.f32.u32	s0, s0
 733 0024 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
ARM GAS  /tmp/ccN6wIPj.s 			page 32


 734 0026 FFF7FEFF 		bl	PCA9685_SetServoAngle
 735              	.LVL39:
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 736              		.loc 1 658 3 is_stmt 1 view .LVU186
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 737              		.loc 1 658 64 is_stmt 0 view .LVU187
 738 002a E38A     		ldrh	r3, [r4, #22]
 739 002c 00EE103A 		vmov	s0, r3	@ int
 658:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MegaBot->Wrist.ServoHomeAngle);
 740              		.loc 1 658 3 view .LVU188
 741 0030 B8EE400A 		vcvt.f32.u32	s0, s0
 742 0034 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 743 0036 FFF7FEFF 		bl	PCA9685_SetServoAngle
 744              	.LVL40:
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 745              		.loc 1 659 3 is_stmt 1 view .LVU189
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 746              		.loc 1 659 64 is_stmt 0 view .LVU190
 747 003a E38B     		ldrh	r3, [r4, #30]
 748 003c 00EE103A 		vmov	s0, r3	@ int
 659:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoHomeAngle);
 749              		.loc 1 659 3 view .LVU191
 750 0040 B8EE400A 		vcvt.f32.u32	s0, s0
 751 0044 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 752 0046 FFF7FEFF 		bl	PCA9685_SetServoAngle
 753              	.LVL41:
 660:Core/Src/main.c **** }
 754              		.loc 1 660 3 is_stmt 1 view .LVU192
 660:Core/Src/main.c **** }
 755              		.loc 1 660 68 is_stmt 0 view .LVU193
 756 004a E38C     		ldrh	r3, [r4, #38]
 757 004c 00EE103A 		vmov	s0, r3	@ int
 660:Core/Src/main.c **** }
 758              		.loc 1 660 3 view .LVU194
 759 0050 B8EE400A 		vcvt.f32.u32	s0, s0
 760 0054 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 761 0058 FFF7FEFF 		bl	PCA9685_SetServoAngle
 762              	.LVL42:
 661:Core/Src/main.c **** 
 763              		.loc 1 661 1 view .LVU195
 764 005c 10BD     		pop	{r4, pc}
 765              	.LVL43:
 766              	.L42:
 661:Core/Src/main.c **** 
 767              		.loc 1 661 1 view .LVU196
 768 005e 00BF     		.align	2
 769              	.L41:
 770 0060 00000000 		.word	.LANCHOR5
 771              		.cfi_endproc
 772              	.LFE253:
 774              		.section	.text.MegaBotInit,"ax",%progbits
 775              		.align	1
 776              		.global	MegaBotInit
 777              		.syntax unified
 778              		.thumb
 779              		.thumb_func
 780              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccN6wIPj.s 			page 33


 782              	MegaBotInit:
 783              	.LVL44:
 784              	.LFB252:
 624:Core/Src/main.c ****   // Configure Each of the joints
 785              		.loc 1 624 44 is_stmt 1 view -0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 0
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 624:Core/Src/main.c ****   // Configure Each of the joints
 789              		.loc 1 624 44 is_stmt 0 view .LVU198
 790 0000 08B5     		push	{r3, lr}
 791              		.cfi_def_cfa_offset 8
 792              		.cfi_offset 3, -8
 793              		.cfi_offset 14, -4
 626:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 794              		.loc 1 626 3 is_stmt 1 view .LVU199
 626:Core/Src/main.c ****   MegaBot->Base.ServoMin = 0;
 795              		.loc 1 626 26 is_stmt 0 view .LVU200
 796 0002 0022     		movs	r2, #0
 797 0004 0270     		strb	r2, [r0]
 627:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 798              		.loc 1 627 3 is_stmt 1 view .LVU201
 627:Core/Src/main.c ****   MegaBot->Base.ServoMax = 180;
 799              		.loc 1 627 26 is_stmt 0 view .LVU202
 800 0006 4280     		strh	r2, [r0, #2]	@ movhi
 628:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 801              		.loc 1 628 3 is_stmt 1 view .LVU203
 628:Core/Src/main.c ****   MegaBot->Base.ServoHomeAngle = 90;
 802              		.loc 1 628 26 is_stmt 0 view .LVU204
 803 0008 B421     		movs	r1, #180
 804 000a 8180     		strh	r1, [r0, #4]	@ movhi
 629:Core/Src/main.c **** 
 805              		.loc 1 629 3 is_stmt 1 view .LVU205
 629:Core/Src/main.c **** 
 806              		.loc 1 629 32 is_stmt 0 view .LVU206
 807 000c 4FF05A0C 		mov	ip, #90
 808 0010 A0F806C0 		strh	ip, [r0, #6]	@ movhi
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 809              		.loc 1 631 3 is_stmt 1 view .LVU207
 631:Core/Src/main.c ****   MegaBot->Shoulder.ServoMin = 0;
 810              		.loc 1 631 30 is_stmt 0 view .LVU208
 811 0014 4FF0010E 		mov	lr, #1
 812 0018 80F808E0 		strb	lr, [r0, #8]
 632:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 813              		.loc 1 632 3 is_stmt 1 view .LVU209
 632:Core/Src/main.c ****   MegaBot->Shoulder.ServoMax = 180;
 814              		.loc 1 632 30 is_stmt 0 view .LVU210
 815 001c 4281     		strh	r2, [r0, #10]	@ movhi
 633:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 816              		.loc 1 633 3 is_stmt 1 view .LVU211
 633:Core/Src/main.c ****   MegaBot->Shoulder.ServoHomeAngle = 0;
 817              		.loc 1 633 30 is_stmt 0 view .LVU212
 818 001e 8181     		strh	r1, [r0, #12]	@ movhi
 634:Core/Src/main.c **** 
 819              		.loc 1 634 3 is_stmt 1 view .LVU213
 634:Core/Src/main.c **** 
 820              		.loc 1 634 36 is_stmt 0 view .LVU214
ARM GAS  /tmp/ccN6wIPj.s 			page 34


 821 0020 C281     		strh	r2, [r0, #14]	@ movhi
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 822              		.loc 1 636 3 is_stmt 1 view .LVU215
 636:Core/Src/main.c ****   MegaBot->Elbow.ServoMin = 50;
 823              		.loc 1 636 27 is_stmt 0 view .LVU216
 824 0022 4FF0020E 		mov	lr, #2
 825 0026 80F810E0 		strb	lr, [r0, #16]
 637:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 826              		.loc 1 637 3 is_stmt 1 view .LVU217
 637:Core/Src/main.c ****   MegaBot->Elbow.ServoMax = 180;
 827              		.loc 1 637 27 is_stmt 0 view .LVU218
 828 002a 4FF0320E 		mov	lr, #50
 829 002e A0F812E0 		strh	lr, [r0, #18]	@ movhi
 638:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 830              		.loc 1 638 3 is_stmt 1 view .LVU219
 638:Core/Src/main.c ****   MegaBot->Elbow.ServoHomeAngle = 180;
 831              		.loc 1 638 27 is_stmt 0 view .LVU220
 832 0032 8182     		strh	r1, [r0, #20]	@ movhi
 639:Core/Src/main.c **** 
 833              		.loc 1 639 3 is_stmt 1 view .LVU221
 639:Core/Src/main.c **** 
 834              		.loc 1 639 33 is_stmt 0 view .LVU222
 835 0034 C182     		strh	r1, [r0, #22]	@ movhi
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 836              		.loc 1 641 3 is_stmt 1 view .LVU223
 641:Core/Src/main.c ****   MegaBot->Wrist.ServoMin = 0;
 837              		.loc 1 641 27 is_stmt 0 view .LVU224
 838 0036 4FF0030E 		mov	lr, #3
 839 003a 80F818E0 		strb	lr, [r0, #24]
 642:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 840              		.loc 1 642 3 is_stmt 1 view .LVU225
 642:Core/Src/main.c ****   MegaBot->Wrist.ServoMax = 180;
 841              		.loc 1 642 27 is_stmt 0 view .LVU226
 842 003e 4283     		strh	r2, [r0, #26]	@ movhi
 643:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 843              		.loc 1 643 3 is_stmt 1 view .LVU227
 643:Core/Src/main.c ****   MegaBot->Wrist.ServoHomeAngle = 90;
 844              		.loc 1 643 27 is_stmt 0 view .LVU228
 845 0040 8183     		strh	r1, [r0, #28]	@ movhi
 644:Core/Src/main.c **** 
 846              		.loc 1 644 3 is_stmt 1 view .LVU229
 644:Core/Src/main.c **** 
 847              		.loc 1 644 33 is_stmt 0 view .LVU230
 848 0042 A0F81EC0 		strh	ip, [r0, #30]	@ movhi
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 849              		.loc 1 646 3 is_stmt 1 view .LVU231
 646:Core/Src/main.c ****   MegaBot->Gripper.ServoMin = 0;
 850              		.loc 1 646 29 is_stmt 0 view .LVU232
 851 0046 0421     		movs	r1, #4
 852 0048 80F82010 		strb	r1, [r0, #32]
 647:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 853              		.loc 1 647 3 is_stmt 1 view .LVU233
 647:Core/Src/main.c ****   MegaBot->Gripper.ServoMax = 70;
 854              		.loc 1 647 29 is_stmt 0 view .LVU234
 855 004c 4284     		strh	r2, [r0, #34]	@ movhi
 648:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 856              		.loc 1 648 3 is_stmt 1 view .LVU235
ARM GAS  /tmp/ccN6wIPj.s 			page 35


 648:Core/Src/main.c ****   MegaBot->Gripper.ServoHomeAngle = MegaBot->Gripper.ServoMin;
 857              		.loc 1 648 29 is_stmt 0 view .LVU236
 858 004e 4621     		movs	r1, #70
 859 0050 8184     		strh	r1, [r0, #36]	@ movhi
 649:Core/Src/main.c **** 
 860              		.loc 1 649 3 is_stmt 1 view .LVU237
 649:Core/Src/main.c **** 
 861              		.loc 1 649 35 is_stmt 0 view .LVU238
 862 0052 C284     		strh	r2, [r0, #38]	@ movhi
 651:Core/Src/main.c **** }
 863              		.loc 1 651 3 is_stmt 1 view .LVU239
 864 0054 FFF7FEFF 		bl	ServoDriverInit
 865              	.LVL45:
 652:Core/Src/main.c **** 
 866              		.loc 1 652 1 is_stmt 0 view .LVU240
 867 0058 08BD     		pop	{r3, pc}
 868              		.cfi_endproc
 869              	.LFE252:
 871              		.section	.text.QPotDataUpdate,"ax",%progbits
 872              		.align	1
 873              		.global	QPotDataUpdate
 874              		.syntax unified
 875              		.thumb
 876              		.thumb_func
 877              		.fpu fpv4-sp-d16
 879              	QPotDataUpdate:
 880              	.LVL46:
 881              	.LFB254:
 664:Core/Src/main.c ****   if(PotRawValue > *QPotData + 10 || PotRawValue < *QPotData - 10){
 882              		.loc 1 664 111 is_stmt 1 view -0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 886              		@ link register save eliminated.
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 887              		.loc 1 665 3 view .LVU242
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 888              		.loc 1 665 20 is_stmt 0 view .LVU243
 889 0000 1368     		ldr	r3, [r2]
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 890              		.loc 1 665 30 view .LVU244
 891 0002 0A33     		adds	r3, r3, #10
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 892              		.loc 1 665 5 view .LVU245
 893 0004 8342     		cmp	r3, r0
 894 0006 03D3     		bcc	.L46
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 895              		.loc 1 665 52 discriminator 1 view .LVU246
 896 0008 1368     		ldr	r3, [r2]
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 897              		.loc 1 665 62 discriminator 1 view .LVU247
 898 000a 0A3B     		subs	r3, r3, #10
 665:Core/Src/main.c ****     if(PotRawValue > Joint->PotMax){
 899              		.loc 1 665 35 discriminator 1 view .LVU248
 900 000c 8342     		cmp	r3, r0
 901 000e 0CD9     		bls	.L45
 902              	.L46:
ARM GAS  /tmp/ccN6wIPj.s 			page 36


 666:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 903              		.loc 1 666 5 is_stmt 1 view .LVU249
 666:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 904              		.loc 1 666 27 is_stmt 0 view .LVU250
 905 0010 8B68     		ldr	r3, [r1, #8]
 666:Core/Src/main.c ****       *QPotData = Joint->PotMax;
 906              		.loc 1 666 7 view .LVU251
 907 0012 8342     		cmp	r3, r0
 908 0014 0AD2     		bcs	.L48
 667:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 909              		.loc 1 667 7 is_stmt 1 view .LVU252
 667:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 910              		.loc 1 667 24 is_stmt 0 view .LVU253
 911 0016 8B68     		ldr	r3, [r1, #8]
 667:Core/Src/main.c ****     }else if(PotRawValue < Joint->PotMin){
 912              		.loc 1 667 17 view .LVU254
 913 0018 1360     		str	r3, [r2]
 914              	.L49:
 673:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 915              		.loc 1 673 5 is_stmt 1 view .LVU255
 673:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 916              		.loc 1 673 13 is_stmt 0 view .LVU256
 917 001a 0B7B     		ldrb	r3, [r1, #12]	@ zero_extendqisi2
 673:Core/Src/main.c ****       *QPotData = Joint->PotMax - *QPotData + Joint->PotMin;
 918              		.loc 1 673 7 view .LVU257
 919 001c 2BB1     		cbz	r3, .L45
 674:Core/Src/main.c ****     }
 920              		.loc 1 674 7 is_stmt 1 view .LVU258
 674:Core/Src/main.c ****     }
 921              		.loc 1 674 24 is_stmt 0 view .LVU259
 922 001e 8B68     		ldr	r3, [r1, #8]
 674:Core/Src/main.c ****     }
 923              		.loc 1 674 35 view .LVU260
 924 0020 1068     		ldr	r0, [r2]
 925              	.LVL47:
 674:Core/Src/main.c ****     }
 926              		.loc 1 674 33 view .LVU261
 927 0022 1B1A     		subs	r3, r3, r0
 674:Core/Src/main.c ****     }
 928              		.loc 1 674 52 view .LVU262
 929 0024 4968     		ldr	r1, [r1, #4]
 930              	.LVL48:
 674:Core/Src/main.c ****     }
 931              		.loc 1 674 45 view .LVU263
 932 0026 0B44     		add	r3, r3, r1
 674:Core/Src/main.c ****     }
 933              		.loc 1 674 17 view .LVU264
 934 0028 1360     		str	r3, [r2]
 935              	.L45:
 677:Core/Src/main.c **** 
 936              		.loc 1 677 1 view .LVU265
 937 002a 7047     		bx	lr
 938              	.LVL49:
 939              	.L48:
 668:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 940              		.loc 1 668 11 is_stmt 1 view .LVU266
 668:Core/Src/main.c ****       *QPotData = Joint->PotMin;
ARM GAS  /tmp/ccN6wIPj.s 			page 37


 941              		.loc 1 668 33 is_stmt 0 view .LVU267
 942 002c 4B68     		ldr	r3, [r1, #4]
 668:Core/Src/main.c ****       *QPotData = Joint->PotMin;
 943              		.loc 1 668 13 view .LVU268
 944 002e 8342     		cmp	r3, r0
 945 0030 02D9     		bls	.L50
 669:Core/Src/main.c ****     }else{
 946              		.loc 1 669 7 is_stmt 1 view .LVU269
 669:Core/Src/main.c ****     }else{
 947              		.loc 1 669 24 is_stmt 0 view .LVU270
 948 0032 4B68     		ldr	r3, [r1, #4]
 669:Core/Src/main.c ****     }else{
 949              		.loc 1 669 17 view .LVU271
 950 0034 1360     		str	r3, [r2]
 951 0036 F0E7     		b	.L49
 952              	.L50:
 671:Core/Src/main.c ****     }
 953              		.loc 1 671 7 is_stmt 1 view .LVU272
 671:Core/Src/main.c ****     }
 954              		.loc 1 671 17 is_stmt 0 view .LVU273
 955 0038 1060     		str	r0, [r2]
 956 003a EEE7     		b	.L49
 957              		.cfi_endproc
 958              	.LFE254:
 960              		.section	.text.MiniBotInputsEntry,"ax",%progbits
 961              		.align	1
 962              		.global	MiniBotInputsEntry
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv4-sp-d16
 968              	MiniBotInputsEntry:
 969              	.LVL50:
 970              	.LFB259:
 760:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 971              		.loc 1 760 1 is_stmt 1 view -0
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 72
 974              		@ frame_needed = 0, uses_anonymous_args = 0
 760:Core/Src/main.c ****   /* USER CODE BEGIN MiniBotInputsEntry */
 975              		.loc 1 760 1 is_stmt 0 view .LVU275
 976 0000 30B5     		push	{r4, r5, lr}
 977              		.cfi_def_cfa_offset 12
 978              		.cfi_offset 4, -12
 979              		.cfi_offset 5, -8
 980              		.cfi_offset 14, -4
 981 0002 93B0     		sub	sp, sp, #76
 982              		.cfi_def_cfa_offset 88
 763:Core/Src/main.c **** 	MiniBotInit(&MiniBot);
 983              		.loc 1 763 2 is_stmt 1 view .LVU276
 764:Core/Src/main.c **** 
 984              		.loc 1 764 2 view .LVU277
 985 0004 6846     		mov	r0, sp
 986              	.LVL51:
 764:Core/Src/main.c **** 
 987              		.loc 1 764 2 is_stmt 0 view .LVU278
 988 0006 FFF7FEFF 		bl	MiniBotInit
ARM GAS  /tmp/ccN6wIPj.s 			page 38


 989              	.LVL52:
 766:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 990              		.loc 1 766 3 is_stmt 1 view .LVU279
 766:Core/Src/main.c ****   Qdata.BasePotMin = MiniBot.Base.PotMin;
 991              		.loc 1 766 20 is_stmt 0 view .LVU280
 992 000a 2D4B     		ldr	r3, .L57
 993 000c 029A     		ldr	r2, [sp, #8]
 994 000e 9A60     		str	r2, [r3, #8]
 767:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 995              		.loc 1 767 3 is_stmt 1 view .LVU281
 767:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 996              		.loc 1 767 34 is_stmt 0 view .LVU282
 997 0010 019A     		ldr	r2, [sp, #4]
 767:Core/Src/main.c ****   Qdata.ShoulderPotMax = MiniBot.Shoulder.PotMax;
 998              		.loc 1 767 20 view .LVU283
 999 0012 5A60     		str	r2, [r3, #4]
 768:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1000              		.loc 1 768 3 is_stmt 1 view .LVU284
 768:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1001              		.loc 1 768 42 is_stmt 0 view .LVU285
 1002 0014 069A     		ldr	r2, [sp, #24]
 768:Core/Src/main.c ****   Qdata.ShoulderPotMin = MiniBot.Shoulder.PotMin;
 1003              		.loc 1 768 24 view .LVU286
 1004 0016 5A61     		str	r2, [r3, #20]
 769:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1005              		.loc 1 769 3 is_stmt 1 view .LVU287
 769:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1006              		.loc 1 769 42 is_stmt 0 view .LVU288
 1007 0018 059A     		ldr	r2, [sp, #20]
 769:Core/Src/main.c ****   Qdata.ElbowPotMax = MiniBot.Elbow.PotMax;
 1008              		.loc 1 769 24 view .LVU289
 1009 001a 1A61     		str	r2, [r3, #16]
 770:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1010              		.loc 1 770 3 is_stmt 1 view .LVU290
 770:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1011              		.loc 1 770 36 is_stmt 0 view .LVU291
 1012 001c 0A9A     		ldr	r2, [sp, #40]
 770:Core/Src/main.c ****   Qdata.ElbowPotMin = MiniBot.Elbow.PotMin;
 1013              		.loc 1 770 21 view .LVU292
 1014 001e 1A62     		str	r2, [r3, #32]
 771:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1015              		.loc 1 771 3 is_stmt 1 view .LVU293
 771:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1016              		.loc 1 771 36 is_stmt 0 view .LVU294
 1017 0020 099A     		ldr	r2, [sp, #36]
 771:Core/Src/main.c ****   Qdata.WristPotMax = MiniBot.Wrist.PotMax;
 1018              		.loc 1 771 21 view .LVU295
 1019 0022 DA61     		str	r2, [r3, #28]
 772:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1020              		.loc 1 772 3 is_stmt 1 view .LVU296
 772:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1021              		.loc 1 772 36 is_stmt 0 view .LVU297
 1022 0024 0E9A     		ldr	r2, [sp, #56]
 772:Core/Src/main.c ****   Qdata.WristPotMin = MiniBot.Wrist.PotMin;
 1023              		.loc 1 772 21 view .LVU298
 1024 0026 DA62     		str	r2, [r3, #44]
 773:Core/Src/main.c ****   
ARM GAS  /tmp/ccN6wIPj.s 			page 39


 1025              		.loc 1 773 3 is_stmt 1 view .LVU299
 773:Core/Src/main.c ****   
 1026              		.loc 1 773 36 is_stmt 0 view .LVU300
 1027 0028 0D9A     		ldr	r2, [sp, #52]
 773:Core/Src/main.c ****   
 1028              		.loc 1 773 21 view .LVU301
 1029 002a 9A62     		str	r2, [r3, #40]
 1030 002c 45E0     		b	.L55
 1031              	.LVL53:
 1032              	.L53:
 1033              	.LBB8:
 780:Core/Src/main.c ****       HAL_ADC_PollForConversion(&hadc1, 1);
 1034              		.loc 1 780 7 is_stmt 1 discriminator 3 view .LVU302
 1035 002e 254D     		ldr	r5, .L57+4
 1036 0030 2846     		mov	r0, r5
 1037 0032 FFF7FEFF 		bl	HAL_ADC_Start
 1038              	.LVL54:
 781:Core/Src/main.c ****       PotRawValue[i] = HAL_ADC_GetValue(&hadc1);
 1039              		.loc 1 781 7 discriminator 3 view .LVU303
 1040 0036 0121     		movs	r1, #1
 1041 0038 2846     		mov	r0, r5
 1042 003a FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1043              	.LVL55:
 782:Core/Src/main.c ****     }
 1044              		.loc 1 782 7 discriminator 3 view .LVU304
 782:Core/Src/main.c ****     }
 1045              		.loc 1 782 24 is_stmt 0 discriminator 3 view .LVU305
 1046 003e 2846     		mov	r0, r5
 1047 0040 FFF7FEFF 		bl	HAL_ADC_GetValue
 1048              	.LVL56:
 782:Core/Src/main.c ****     }
 1049              		.loc 1 782 22 discriminator 3 view .LVU306
 1050 0044 204B     		ldr	r3, .L57+8
 1051 0046 43F82400 		str	r0, [r3, r4, lsl #2]
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1052              		.loc 1 779 27 is_stmt 1 discriminator 3 view .LVU307
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1053              		.loc 1 779 28 is_stmt 0 discriminator 3 view .LVU308
 1054 004a 0134     		adds	r4, r4, #1
 1055              	.LVL57:
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1056              		.loc 1 779 28 discriminator 3 view .LVU309
 1057 004c E4B2     		uxtb	r4, r4
 1058              	.LVL58:
 1059              	.L52:
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1060              		.loc 1 779 22 is_stmt 1 discriminator 1 view .LVU310
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1061              		.loc 1 779 5 is_stmt 0 discriminator 1 view .LVU311
 1062 004e 032C     		cmp	r4, #3
 1063 0050 EDD9     		bls	.L53
 1064              	.LBE8:
 784:Core/Src/main.c **** 
 1065              		.loc 1 784 5 is_stmt 1 view .LVU312
 1066 0052 1C48     		ldr	r0, .L57+4
 1067 0054 FFF7FEFF 		bl	HAL_ADC_Stop
 1068              	.LVL59:
ARM GAS  /tmp/ccN6wIPj.s 			page 40


 786:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1069              		.loc 1 786 5 view .LVU313
 1070 0058 194C     		ldr	r4, .L57
 1071              	.LVL60:
 786:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[1], &MiniBot.Shoulder, &Qdata.ShoulderPotValue);
 1072              		.loc 1 786 5 is_stmt 0 view .LVU314
 1073 005a 1B4D     		ldr	r5, .L57+8
 1074 005c 2246     		mov	r2, r4
 1075 005e 6946     		mov	r1, sp
 1076 0060 2868     		ldr	r0, [r5]
 1077 0062 FFF7FEFF 		bl	QPotDataUpdate
 1078              	.LVL61:
 787:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[2], &MiniBot.Elbow, &Qdata.ElbowPotValue);
 1079              		.loc 1 787 5 is_stmt 1 view .LVU315
 1080 0066 04F10C02 		add	r2, r4, #12
 1081 006a 04A9     		add	r1, sp, #16
 1082 006c 6868     		ldr	r0, [r5, #4]
 1083 006e FFF7FEFF 		bl	QPotDataUpdate
 1084              	.LVL62:
 788:Core/Src/main.c ****     QPotDataUpdate(PotRawValue[3], &MiniBot.Wrist, &Qdata.WristPotValue);
 1085              		.loc 1 788 5 view .LVU316
 1086 0072 04F11802 		add	r2, r4, #24
 1087 0076 08A9     		add	r1, sp, #32
 1088 0078 A868     		ldr	r0, [r5, #8]
 1089 007a FFF7FEFF 		bl	QPotDataUpdate
 1090              	.LVL63:
 789:Core/Src/main.c **** 
 1091              		.loc 1 789 5 view .LVU317
 1092 007e 04F12402 		add	r2, r4, #36
 1093 0082 0CA9     		add	r1, sp, #48
 1094 0084 E868     		ldr	r0, [r5, #12]
 1095 0086 FFF7FEFF 		bl	QPotDataUpdate
 1096              	.LVL64:
 791:Core/Src/main.c ****     
 1097              		.loc 1 791 5 view .LVU318
 791:Core/Src/main.c ****     
 1098              		.loc 1 791 35 is_stmt 0 view .LVU319
 1099 008a 4FF40071 		mov	r1, #512
 1100 008e 0F48     		ldr	r0, .L57+12
 1101 0090 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1102              	.LVL65:
 791:Core/Src/main.c ****     
 1103              		.loc 1 791 24 view .LVU320
 1104 0094 84F83000 		strb	r0, [r4, #48]
 793:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1105              		.loc 1 793 5 is_stmt 1 view .LVU321
 793:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1106              		.loc 1 793 32 is_stmt 0 view .LVU322
 1107 0098 0D4B     		ldr	r3, .L57+16
 1108 009a 1868     		ldr	r0, [r3]
 793:Core/Src/main.c ****       if(xQueueSend(MiniBotInputQueueHandle, (void*)&Qdata, portMAX_DELAY) != pdPASS){
 1109              		.loc 1 793 7 view .LVU323
 1110 009c 50B1     		cbz	r0, .L54
 794:Core/Src/main.c ****         // failed to post message
 1111              		.loc 1 794 7 is_stmt 1 view .LVU324
 794:Core/Src/main.c ****         // failed to post message
 1112              		.loc 1 794 10 is_stmt 0 view .LVU325
ARM GAS  /tmp/ccN6wIPj.s 			page 41


 1113 009e 0023     		movs	r3, #0
 1114 00a0 4FF0FF32 		mov	r2, #-1
 1115 00a4 2146     		mov	r1, r4
 1116 00a6 FFF7FEFF 		bl	xQueueGenericSend
 1117              	.LVL66:
 794:Core/Src/main.c ****         // failed to post message
 1118              		.loc 1 794 9 view .LVU326
 1119 00aa 0128     		cmp	r0, #1
 1120 00ac 02D0     		beq	.L54
 796:Core/Src/main.c ****       }
 1121              		.loc 1 796 9 is_stmt 1 view .LVU327
 796:Core/Src/main.c ****       }
 1122              		.loc 1 796 33 is_stmt 0 view .LVU328
 1123 00ae 094B     		ldr	r3, .L57+20
 1124 00b0 0122     		movs	r2, #1
 1125 00b2 1A70     		strb	r2, [r3]
 1126              	.L54:
 801:Core/Src/main.c **** 	}
 1127              		.loc 1 801 5 is_stmt 1 view .LVU329
 1128 00b4 0120     		movs	r0, #1
 1129 00b6 FFF7FEFF 		bl	osDelay
 1130              	.LVL67:
 777:Core/Src/main.c **** 	{
 1131              		.loc 1 777 7 view .LVU330
 1132              	.L55:
 777:Core/Src/main.c **** 	{
 1133              		.loc 1 777 2 view .LVU331
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1134              		.loc 1 779 5 view .LVU332
 1135              	.LBB9:
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1136              		.loc 1 779 9 view .LVU333
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1137              		.loc 1 779 17 is_stmt 0 view .LVU334
 1138 00ba 0024     		movs	r4, #0
 779:Core/Src/main.c ****       HAL_ADC_Start(&hadc1);
 1139              		.loc 1 779 5 view .LVU335
 1140 00bc C7E7     		b	.L52
 1141              	.L58:
 1142 00be 00BF     		.align	2
 1143              	.L57:
 1144 00c0 00000000 		.word	.LANCHOR6
 1145 00c4 00000000 		.word	.LANCHOR7
 1146 00c8 00000000 		.word	.LANCHOR8
 1147 00cc 00000240 		.word	1073872896
 1148 00d0 00000000 		.word	.LANCHOR2
 1149 00d4 00000000 		.word	.LANCHOR9
 1150              	.LBE9:
 1151              		.cfi_endproc
 1152              	.LFE259:
 1154              		.section	.text.MAP,"ax",%progbits
 1155              		.align	1
 1156              		.global	MAP
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccN6wIPj.s 			page 42


 1162              	MAP:
 1163              	.LVL68:
 1164              	.LFB256:
 705:Core/Src/main.c ****     return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32
 1165              		.loc 1 705 1 is_stmt 1 view -0
 1166              		.cfi_startproc
 1167              		@ args = 4, pretend = 0, frame = 0
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 706:Core/Src/main.c **** }
 1170              		.loc 1 706 5 view .LVU337
 706:Core/Src/main.c **** }
 1171              		.loc 1 706 24 is_stmt 0 view .LVU338
 1172 0000 A0EB010C 		sub	ip, r0, r1
 706:Core/Src/main.c **** }
 1173              		.loc 1 706 51 view .LVU339
 1174 0004 0098     		ldr	r0, [sp]
 1175              	.LVL69:
 706:Core/Src/main.c **** }
 1176              		.loc 1 706 51 view .LVU340
 1177 0006 C01A     		subs	r0, r0, r3
 706:Core/Src/main.c **** }
 1178              		.loc 1 706 37 view .LVU341
 1179 0008 00FB0CFC 		mul	ip, r0, ip
 706:Core/Src/main.c **** }
 1180              		.loc 1 706 79 view .LVU342
 1181 000c 511A     		subs	r1, r2, r1
 1182              	.LVL70:
 706:Core/Src/main.c **** }
 1183              		.loc 1 706 66 view .LVU343
 1184 000e BCFBF1FC 		udiv	ip, ip, r1
 707:Core/Src/main.c **** 
 1185              		.loc 1 707 1 view .LVU344
 1186 0012 0CEB0300 		add	r0, ip, r3
 1187 0016 7047     		bx	lr
 1188              		.cfi_endproc
 1189              	.LFE256:
 1191              		.section	.text.MoveServo,"ax",%progbits
 1192              		.align	1
 1193              		.global	MoveServo
 1194              		.syntax unified
 1195              		.thumb
 1196              		.thumb_func
 1197              		.fpu fpv4-sp-d16
 1199              	MoveServo:
 1200              	.LVL71:
 1201              	.LFB255:
 679:Core/Src/main.c ****   // MAP each of the angles
 1202              		.loc 1 679 75 is_stmt 1 view -0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 0
 1205              		@ frame_needed = 0, uses_anonymous_args = 0
 679:Core/Src/main.c ****   // MAP each of the angles
 1206              		.loc 1 679 75 is_stmt 0 view .LVU346
 1207 0000 70B5     		push	{r4, r5, r6, lr}
 1208              		.cfi_def_cfa_offset 16
 1209              		.cfi_offset 4, -16
ARM GAS  /tmp/ccN6wIPj.s 			page 43


 1210              		.cfi_offset 5, -12
 1211              		.cfi_offset 6, -8
 1212              		.cfi_offset 14, -4
 1213 0002 82B0     		sub	sp, sp, #8
 1214              		.cfi_def_cfa_offset 24
 1215 0004 0446     		mov	r4, r0
 1216 0006 0D46     		mov	r5, r1
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1217              		.loc 1 684 3 is_stmt 1 view .LVU347
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1218              		.loc 1 684 25 is_stmt 0 view .LVU348
 1219 0008 0868     		ldr	r0, [r1]
 1220              	.LVL72:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1221              		.loc 1 684 25 view .LVU349
 1222 000a 4968     		ldr	r1, [r1, #4]
 1223              	.LVL73:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1224              		.loc 1 684 25 view .LVU350
 1225 000c AA68     		ldr	r2, [r5, #8]
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1226              		.loc 1 684 131 view .LVU351
 1227 000e A388     		ldrh	r3, [r4, #4]
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1228              		.loc 1 684 25 view .LVU352
 1229 0010 0093     		str	r3, [sp]
 1230 0012 6388     		ldrh	r3, [r4, #2]
 1231 0014 FFF7FEFF 		bl	MAP
 1232              	.LVL74:
 684:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Base.ServoNum, MappedServoAngle[0]);
 1233              		.loc 1 684 23 view .LVU353
 1234 0018 80B2     		uxth	r0, r0
 1235 001a 2A4E     		ldr	r6, .L64
 1236 001c 3080     		strh	r0, [r6]	@ movhi
 685:Core/Src/main.c ****   // Shoulder
 1237              		.loc 1 685 3 is_stmt 1 view .LVU354
 1238 001e 07EE900A 		vmov	s15, r0	@ int
 1239 0022 B8EE670A 		vcvt.f32.u32	s0, s15
 1240 0026 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1241 0028 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1242              	.LVL75:
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1243              		.loc 1 687 3 view .LVU355
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1244              		.loc 1 687 25 is_stmt 0 view .LVU356
 1245 002c E868     		ldr	r0, [r5, #12]
 1246 002e 2969     		ldr	r1, [r5, #16]
 1247 0030 6A69     		ldr	r2, [r5, #20]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1248              		.loc 1 687 151 view .LVU357
 1249 0032 A389     		ldrh	r3, [r4, #12]
 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1250              		.loc 1 687 25 view .LVU358
 1251 0034 0093     		str	r3, [sp]
 1252 0036 6389     		ldrh	r3, [r4, #10]
 1253 0038 FFF7FEFF 		bl	MAP
 1254              	.LVL76:
ARM GAS  /tmp/ccN6wIPj.s 			page 44


 687:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Shoulder.ServoNum, MappedServoAngle[1]);
 1255              		.loc 1 687 23 view .LVU359
 1256 003c 80B2     		uxth	r0, r0
 1257 003e 7080     		strh	r0, [r6, #2]	@ movhi
 688:Core/Src/main.c ****   // Elbow
 1258              		.loc 1 688 3 is_stmt 1 view .LVU360
 1259 0040 07EE900A 		vmov	s15, r0	@ int
 1260 0044 B8EE670A 		vcvt.f32.u32	s0, s15
 1261 0048 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 1262 004a FFF7FEFF 		bl	PCA9685_SetServoAngle
 1263              	.LVL77:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1264              		.loc 1 690 3 view .LVU361
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1265              		.loc 1 690 25 is_stmt 0 view .LVU362
 1266 004e A869     		ldr	r0, [r5, #24]
 1267 0050 E969     		ldr	r1, [r5, #28]
 1268 0052 2A6A     		ldr	r2, [r5, #32]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1269              		.loc 1 690 136 view .LVU363
 1270 0054 A38A     		ldrh	r3, [r4, #20]
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1271              		.loc 1 690 25 view .LVU364
 1272 0056 0093     		str	r3, [sp]
 1273 0058 638A     		ldrh	r3, [r4, #18]
 1274 005a FFF7FEFF 		bl	MAP
 1275              	.LVL78:
 690:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Elbow.ServoNum, MappedServoAngle[2]);
 1276              		.loc 1 690 23 view .LVU365
 1277 005e 80B2     		uxth	r0, r0
 1278 0060 B080     		strh	r0, [r6, #4]	@ movhi
 691:Core/Src/main.c ****   // Wrist
 1279              		.loc 1 691 3 is_stmt 1 view .LVU366
 1280 0062 07EE900A 		vmov	s15, r0	@ int
 1281 0066 B8EE670A 		vcvt.f32.u32	s0, s15
 1282 006a 207C     		ldrb	r0, [r4, #16]	@ zero_extendqisi2
 1283 006c FFF7FEFF 		bl	PCA9685_SetServoAngle
 1284              	.LVL79:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1285              		.loc 1 693 3 view .LVU367
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1286              		.loc 1 693 25 is_stmt 0 view .LVU368
 1287 0070 686A     		ldr	r0, [r5, #36]
 1288 0072 A96A     		ldr	r1, [r5, #40]
 1289 0074 EA6A     		ldr	r2, [r5, #44]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1290              		.loc 1 693 136 view .LVU369
 1291 0076 A38B     		ldrh	r3, [r4, #28]
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1292              		.loc 1 693 25 view .LVU370
 1293 0078 0093     		str	r3, [sp]
 1294 007a 638B     		ldrh	r3, [r4, #26]
 1295 007c FFF7FEFF 		bl	MAP
 1296              	.LVL80:
 693:Core/Src/main.c ****   PCA9685_SetServoAngle(MegaBot->Wrist.ServoNum, MappedServoAngle[3]);
 1297              		.loc 1 693 23 view .LVU371
 1298 0080 80B2     		uxth	r0, r0
ARM GAS  /tmp/ccN6wIPj.s 			page 45


 1299 0082 F080     		strh	r0, [r6, #6]	@ movhi
 694:Core/Src/main.c ****   // Gripper
 1300              		.loc 1 694 3 is_stmt 1 view .LVU372
 1301 0084 07EE900A 		vmov	s15, r0	@ int
 1302 0088 B8EE670A 		vcvt.f32.u32	s0, s15
 1303 008c 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 1304 008e FFF7FEFF 		bl	PCA9685_SetServoAngle
 1305              	.LVL81:
 696:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1306              		.loc 1 696 3 view .LVU373
 696:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1307              		.loc 1 696 13 is_stmt 0 view .LVU374
 1308 0092 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 696:Core/Src/main.c ****     PCA9685_SetServoAngle(MegaBot->Gripper.ServoNum, MegaBot->Gripper.ServoMin);
 1309              		.loc 1 696 5 view .LVU375
 1310 0096 53B1     		cbz	r3, .L61
 697:Core/Src/main.c ****   }else{
 1311              		.loc 1 697 5 is_stmt 1 view .LVU376
 697:Core/Src/main.c ****   }else{
 1312              		.loc 1 697 70 is_stmt 0 view .LVU377
 1313 0098 638C     		ldrh	r3, [r4, #34]
 1314 009a 00EE103A 		vmov	s0, r3	@ int
 697:Core/Src/main.c ****   }else{
 1315              		.loc 1 697 5 view .LVU378
 1316 009e B8EE400A 		vcvt.f32.u32	s0, s0
 1317 00a2 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1318 00a6 FFF7FEFF 		bl	PCA9685_SetServoAngle
 1319              	.LVL82:
 1320              	.L60:
 701:Core/Src/main.c **** 
 1321              		.loc 1 701 1 view .LVU379
 1322 00aa 02B0     		add	sp, sp, #8
 1323              		.cfi_remember_state
 1324              		.cfi_def_cfa_offset 16
 1325              		@ sp needed
 1326 00ac 70BD     		pop	{r4, r5, r6, pc}
 1327              	.LVL83:
 1328              	.L61:
 1329              		.cfi_restore_state
 699:Core/Src/main.c ****   }
 1330              		.loc 1 699 5 is_stmt 1 view .LVU380
 699:Core/Src/main.c ****   }
 1331              		.loc 1 699 70 is_stmt 0 view .LVU381
 1332 00ae A38C     		ldrh	r3, [r4, #36]
 1333 00b0 00EE103A 		vmov	s0, r3	@ int
 699:Core/Src/main.c ****   }
 1334              		.loc 1 699 5 view .LVU382
 1335 00b4 B8EE400A 		vcvt.f32.u32	s0, s0
 1336 00b8 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 1337 00bc FFF7FEFF 		bl	PCA9685_SetServoAngle
 1338              	.LVL84:
 701:Core/Src/main.c **** 
 1339              		.loc 1 701 1 view .LVU383
 1340 00c0 F3E7     		b	.L60
 1341              	.L65:
 1342 00c2 00BF     		.align	2
 1343              	.L64:
ARM GAS  /tmp/ccN6wIPj.s 			page 46


 1344 00c4 00000000 		.word	.LANCHOR10
 1345              		.cfi_endproc
 1346              	.LFE255:
 1348              		.section	.text.MotorControlTaskEntry,"ax",%progbits
 1349              		.align	1
 1350              		.global	MotorControlTaskEntry
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1354              		.fpu fpv4-sp-d16
 1356              	MotorControlTaskEntry:
 1357              	.LVL85:
 1358              	.LFB262:
 888:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1359              		.loc 1 888 1 is_stmt 1 view -0
 1360              		.cfi_startproc
 1361              		@ Volatile: function does not return.
 1362              		@ args = 0, pretend = 0, frame = 40
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 888:Core/Src/main.c ****   /* USER CODE BEGIN MotorControlTaskEntry */
 1364              		.loc 1 888 1 is_stmt 0 view .LVU385
 1365 0000 00B5     		push	{lr}
 1366              		.cfi_def_cfa_offset 4
 1367              		.cfi_offset 14, -4
 1368 0002 8BB0     		sub	sp, sp, #44
 1369              		.cfi_def_cfa_offset 48
 891:Core/Src/main.c ****   MegaBotInit(&MegaBot);
 1370              		.loc 1 891 3 is_stmt 1 view .LVU386
 892:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1371              		.loc 1 892 3 view .LVU387
 1372 0004 6846     		mov	r0, sp
 1373              	.LVL86:
 892:Core/Src/main.c ****   ServoDriverInit(&MegaBot);
 1374              		.loc 1 892 3 is_stmt 0 view .LVU388
 1375 0006 FFF7FEFF 		bl	MegaBotInit
 1376              	.LVL87:
 893:Core/Src/main.c **** 
 1377              		.loc 1 893 3 is_stmt 1 view .LVU389
 1378 000a 6846     		mov	r0, sp
 1379 000c FFF7FEFF 		bl	ServoDriverInit
 1380              	.LVL88:
 1381 0010 06E0     		b	.L68
 1382              	.L70:
 901:Core/Src/main.c ****     }
 1383              		.loc 1 901 7 view .LVU390
 1384 0012 0849     		ldr	r1, .L71
 1385 0014 6846     		mov	r0, sp
 1386 0016 FFF7FEFF 		bl	MoveServo
 1387              	.LVL89:
 1388              	.L67:
 906:Core/Src/main.c ****   }
 1389              		.loc 1 906 5 view .LVU391
 1390 001a 0120     		movs	r0, #1
 1391 001c FFF7FEFF 		bl	osDelay
 1392              	.LVL90:
 897:Core/Src/main.c ****   {
 1393              		.loc 1 897 8 view .LVU392
ARM GAS  /tmp/ccN6wIPj.s 			page 47


 1394              	.L68:
 897:Core/Src/main.c ****   {
 1395              		.loc 1 897 3 view .LVU393
 900:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1396              		.loc 1 900 5 view .LVU394
 900:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1397              		.loc 1 900 8 is_stmt 0 view .LVU395
 1398 0020 4FF0FF32 		mov	r2, #-1
 1399 0024 0349     		ldr	r1, .L71
 1400 0026 044B     		ldr	r3, .L71+4
 1401 0028 1868     		ldr	r0, [r3]
 1402 002a FFF7FEFF 		bl	xQueueReceive
 1403              	.LVL91:
 900:Core/Src/main.c ****       MoveServo(&MegaBot, &MotorControl_Qdata_Buf);
 1404              		.loc 1 900 7 view .LVU396
 1405 002e 0128     		cmp	r0, #1
 1406 0030 EFD0     		beq	.L70
 1407 0032 F2E7     		b	.L67
 1408              	.L72:
 1409              		.align	2
 1410              	.L71:
 1411 0034 00000000 		.word	.LANCHOR11
 1412 0038 00000000 		.word	.LANCHOR4
 1413              		.cfi_endproc
 1414              	.LFE262:
 1416              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1417              		.align	1
 1418              		.global	HAL_TIM_PeriodElapsedCallback
 1419              		.syntax unified
 1420              		.thumb
 1421              		.thumb_func
 1422              		.fpu fpv4-sp-d16
 1424              	HAL_TIM_PeriodElapsedCallback:
 1425              	.LVL92:
 1426              	.LFB264:
 934:Core/Src/main.c ****   }
 935:Core/Src/main.c ****   /* USER CODE END LCDPrintTaskEntry */
 936:Core/Src/main.c **** }
 937:Core/Src/main.c **** 
 938:Core/Src/main.c **** /**
 939:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 940:Core/Src/main.c ****   * @note   This function is called  when TIM6 interrupt took place, inside
 941:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 942:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 943:Core/Src/main.c ****   * @param  htim : TIM handle
 944:Core/Src/main.c ****   * @retval None
 945:Core/Src/main.c ****   */
 946:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 947:Core/Src/main.c **** {
 1427              		.loc 1 947 1 is_stmt 1 view -0
 1428              		.cfi_startproc
 1429              		@ args = 0, pretend = 0, frame = 0
 1430              		@ frame_needed = 0, uses_anonymous_args = 0
 1431              		.loc 1 947 1 is_stmt 0 view .LVU398
 1432 0000 08B5     		push	{r3, lr}
 1433              		.cfi_def_cfa_offset 8
 1434              		.cfi_offset 3, -8
ARM GAS  /tmp/ccN6wIPj.s 			page 48


 1435              		.cfi_offset 14, -4
 948:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 949:Core/Src/main.c **** 
 950:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 951:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 1436              		.loc 1 951 3 is_stmt 1 view .LVU399
 1437              		.loc 1 951 11 is_stmt 0 view .LVU400
 1438 0002 0268     		ldr	r2, [r0]
 1439              		.loc 1 951 6 view .LVU401
 1440 0004 034B     		ldr	r3, .L77
 1441 0006 9A42     		cmp	r2, r3
 1442 0008 00D0     		beq	.L76
 1443              	.LVL93:
 1444              	.L73:
 952:Core/Src/main.c ****     HAL_IncTick();
 953:Core/Src/main.c ****   }
 954:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 955:Core/Src/main.c **** 
 956:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 957:Core/Src/main.c **** }
 1445              		.loc 1 957 1 view .LVU402
 1446 000a 08BD     		pop	{r3, pc}
 1447              	.LVL94:
 1448              	.L76:
 952:Core/Src/main.c ****     HAL_IncTick();
 1449              		.loc 1 952 5 is_stmt 1 view .LVU403
 1450 000c FFF7FEFF 		bl	HAL_IncTick
 1451              	.LVL95:
 1452              		.loc 1 957 1 is_stmt 0 view .LVU404
 1453 0010 FBE7     		b	.L73
 1454              	.L78:
 1455 0012 00BF     		.align	2
 1456              	.L77:
 1457 0014 00100040 		.word	1073745920
 1458              		.cfi_endproc
 1459              	.LFE264:
 1461              		.section	.text.Error_Handler,"ax",%progbits
 1462              		.align	1
 1463              		.global	Error_Handler
 1464              		.syntax unified
 1465              		.thumb
 1466              		.thumb_func
 1467              		.fpu fpv4-sp-d16
 1469              	Error_Handler:
 1470              	.LFB265:
 958:Core/Src/main.c **** 
 959:Core/Src/main.c **** /**
 960:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 961:Core/Src/main.c ****   * @retval None
 962:Core/Src/main.c ****   */
 963:Core/Src/main.c **** void Error_Handler(void)
 964:Core/Src/main.c **** {
 1471              		.loc 1 964 1 is_stmt 1 view -0
 1472              		.cfi_startproc
 1473              		@ Volatile: function does not return.
 1474              		@ args = 0, pretend = 0, frame = 0
 1475              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccN6wIPj.s 			page 49


 1476              		@ link register save eliminated.
 965:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 966:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 967:Core/Src/main.c ****   __disable_irq();
 1477              		.loc 1 967 3 view .LVU406
 1478              	.LBB10:
 1479              	.LBI10:
 1480              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
ARM GAS  /tmp/ccN6wIPj.s 			page 50


  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
ARM GAS  /tmp/ccN6wIPj.s 			page 51


 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
ARM GAS  /tmp/ccN6wIPj.s 			page 52


 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
ARM GAS  /tmp/ccN6wIPj.s 			page 53


 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
ARM GAS  /tmp/ccN6wIPj.s 			page 54


 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccN6wIPj.s 			page 55


 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
ARM GAS  /tmp/ccN6wIPj.s 			page 56


 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccN6wIPj.s 			page 57


 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccN6wIPj.s 			page 58


 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
ARM GAS  /tmp/ccN6wIPj.s 			page 59


 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccN6wIPj.s 			page 60


 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccN6wIPj.s 			page 61


 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccN6wIPj.s 			page 62


 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
ARM GAS  /tmp/ccN6wIPj.s 			page 63


 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  /tmp/ccN6wIPj.s 			page 64


 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  /tmp/ccN6wIPj.s 			page 65


 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1481              		.loc 2 960 27 view .LVU407
ARM GAS  /tmp/ccN6wIPj.s 			page 66


 1482              	.LBB11:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1483              		.loc 2 962 3 view .LVU408
 1484              		.syntax unified
 1485              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1486 0000 72B6     		cpsid i
 1487              	@ 0 "" 2
 1488              		.thumb
 1489              		.syntax unified
 1490              	.L80:
 1491              	.LBE11:
 1492              	.LBE10:
 968:Core/Src/main.c ****   while (1)
 1493              		.loc 1 968 3 discriminator 1 view .LVU409
 969:Core/Src/main.c ****   {
 970:Core/Src/main.c ****   }
 1494              		.loc 1 970 3 discriminator 1 view .LVU410
 968:Core/Src/main.c ****   while (1)
 1495              		.loc 1 968 9 discriminator 1 view .LVU411
 1496 0002 FEE7     		b	.L80
 1497              		.cfi_endproc
 1498              	.LFE265:
 1500              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1501              		.align	1
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1505              		.fpu fpv4-sp-d16
 1507              	MX_ADC1_Init:
 1508              	.LFB246:
 364:Core/Src/main.c **** 
 1509              		.loc 1 364 1 view -0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 16
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513 0000 00B5     		push	{lr}
 1514              		.cfi_def_cfa_offset 4
 1515              		.cfi_offset 14, -4
 1516 0002 85B0     		sub	sp, sp, #20
 1517              		.cfi_def_cfa_offset 24
 370:Core/Src/main.c **** 
 1518              		.loc 1 370 3 view .LVU413
 370:Core/Src/main.c **** 
 1519              		.loc 1 370 26 is_stmt 0 view .LVU414
 1520 0004 0023     		movs	r3, #0
 1521 0006 0093     		str	r3, [sp]
 1522 0008 0193     		str	r3, [sp, #4]
 1523 000a 0293     		str	r3, [sp, #8]
 1524 000c 0393     		str	r3, [sp, #12]
 378:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1525              		.loc 1 378 3 is_stmt 1 view .LVU415
 378:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1526              		.loc 1 378 18 is_stmt 0 view .LVU416
 1527 000e 2548     		ldr	r0, .L93
 1528 0010 254A     		ldr	r2, .L93+4
 1529 0012 0260     		str	r2, [r0]
ARM GAS  /tmp/ccN6wIPj.s 			page 67


 379:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1530              		.loc 1 379 3 is_stmt 1 view .LVU417
 379:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1531              		.loc 1 379 29 is_stmt 0 view .LVU418
 1532 0014 4FF48032 		mov	r2, #65536
 1533 0018 4260     		str	r2, [r0, #4]
 380:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1534              		.loc 1 380 3 is_stmt 1 view .LVU419
 380:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ENABLE;
 1535              		.loc 1 380 25 is_stmt 0 view .LVU420
 1536 001a 8360     		str	r3, [r0, #8]
 381:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1537              		.loc 1 381 3 is_stmt 1 view .LVU421
 381:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 1538              		.loc 1 381 27 is_stmt 0 view .LVU422
 1539 001c 0122     		movs	r2, #1
 1540 001e 0261     		str	r2, [r0, #16]
 382:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1541              		.loc 1 382 3 is_stmt 1 view .LVU423
 382:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = ENABLE;
 1542              		.loc 1 382 33 is_stmt 0 view .LVU424
 1543 0020 0376     		strb	r3, [r0, #24]
 383:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1544              		.loc 1 383 3 is_stmt 1 view .LVU425
 383:Core/Src/main.c ****   hadc1.Init.NbrOfDiscConversion = 1;
 1545              		.loc 1 383 36 is_stmt 0 view .LVU426
 1546 0022 80F82020 		strb	r2, [r0, #32]
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1547              		.loc 1 384 3 is_stmt 1 view .LVU427
 384:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1548              		.loc 1 384 34 is_stmt 0 view .LVU428
 1549 0026 4262     		str	r2, [r0, #36]
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1550              		.loc 1 385 3 is_stmt 1 view .LVU429
 385:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1551              		.loc 1 385 35 is_stmt 0 view .LVU430
 1552 0028 C362     		str	r3, [r0, #44]
 386:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1553              		.loc 1 386 3 is_stmt 1 view .LVU431
 386:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1554              		.loc 1 386 31 is_stmt 0 view .LVU432
 1555 002a 2049     		ldr	r1, .L93+8
 1556 002c 8162     		str	r1, [r0, #40]
 387:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1557              		.loc 1 387 3 is_stmt 1 view .LVU433
 387:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 4;
 1558              		.loc 1 387 24 is_stmt 0 view .LVU434
 1559 002e C360     		str	r3, [r0, #12]
 388:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1560              		.loc 1 388 3 is_stmt 1 view .LVU435
 388:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 1561              		.loc 1 388 30 is_stmt 0 view .LVU436
 1562 0030 0421     		movs	r1, #4
 1563 0032 C161     		str	r1, [r0, #28]
 389:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1564              		.loc 1 389 3 is_stmt 1 view .LVU437
 389:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
ARM GAS  /tmp/ccN6wIPj.s 			page 68


 1565              		.loc 1 389 36 is_stmt 0 view .LVU438
 1566 0034 80F83030 		strb	r3, [r0, #48]
 390:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1567              		.loc 1 390 3 is_stmt 1 view .LVU439
 390:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1568              		.loc 1 390 27 is_stmt 0 view .LVU440
 1569 0038 4261     		str	r2, [r0, #20]
 391:Core/Src/main.c ****   {
 1570              		.loc 1 391 3 is_stmt 1 view .LVU441
 391:Core/Src/main.c ****   {
 1571              		.loc 1 391 7 is_stmt 0 view .LVU442
 1572 003a FFF7FEFF 		bl	HAL_ADC_Init
 1573              	.LVL96:
 391:Core/Src/main.c ****   {
 1574              		.loc 1 391 6 view .LVU443
 1575 003e 38BB     		cbnz	r0, .L88
 398:Core/Src/main.c ****   sConfig.Rank = 1;
 1576              		.loc 1 398 3 is_stmt 1 view .LVU444
 398:Core/Src/main.c ****   sConfig.Rank = 1;
 1577              		.loc 1 398 19 is_stmt 0 view .LVU445
 1578 0040 0023     		movs	r3, #0
 1579 0042 0093     		str	r3, [sp]
 399:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1580              		.loc 1 399 3 is_stmt 1 view .LVU446
 399:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1581              		.loc 1 399 16 is_stmt 0 view .LVU447
 1582 0044 0122     		movs	r2, #1
 1583 0046 0192     		str	r2, [sp, #4]
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1584              		.loc 1 400 3 is_stmt 1 view .LVU448
 400:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1585              		.loc 1 400 24 is_stmt 0 view .LVU449
 1586 0048 0293     		str	r3, [sp, #8]
 401:Core/Src/main.c ****   {
 1587              		.loc 1 401 3 is_stmt 1 view .LVU450
 401:Core/Src/main.c ****   {
 1588              		.loc 1 401 7 is_stmt 0 view .LVU451
 1589 004a 6946     		mov	r1, sp
 1590 004c 1548     		ldr	r0, .L93
 1591 004e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1592              	.LVL97:
 401:Core/Src/main.c ****   {
 1593              		.loc 1 401 6 view .LVU452
 1594 0052 F8B9     		cbnz	r0, .L89
 408:Core/Src/main.c ****   sConfig.Rank = 2;
 1595              		.loc 1 408 3 is_stmt 1 view .LVU453
 408:Core/Src/main.c ****   sConfig.Rank = 2;
 1596              		.loc 1 408 19 is_stmt 0 view .LVU454
 1597 0054 0123     		movs	r3, #1
 1598 0056 0093     		str	r3, [sp]
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1599              		.loc 1 409 3 is_stmt 1 view .LVU455
 409:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1600              		.loc 1 409 16 is_stmt 0 view .LVU456
 1601 0058 0223     		movs	r3, #2
 1602 005a 0193     		str	r3, [sp, #4]
 410:Core/Src/main.c ****   {
ARM GAS  /tmp/ccN6wIPj.s 			page 69


 1603              		.loc 1 410 3 is_stmt 1 view .LVU457
 410:Core/Src/main.c ****   {
 1604              		.loc 1 410 7 is_stmt 0 view .LVU458
 1605 005c 6946     		mov	r1, sp
 1606 005e 1148     		ldr	r0, .L93
 1607 0060 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1608              	.LVL98:
 410:Core/Src/main.c ****   {
 1609              		.loc 1 410 6 view .LVU459
 1610 0064 C0B9     		cbnz	r0, .L90
 417:Core/Src/main.c ****   sConfig.Rank = 3;
 1611              		.loc 1 417 3 is_stmt 1 view .LVU460
 417:Core/Src/main.c ****   sConfig.Rank = 3;
 1612              		.loc 1 417 19 is_stmt 0 view .LVU461
 1613 0066 0423     		movs	r3, #4
 1614 0068 0093     		str	r3, [sp]
 418:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1615              		.loc 1 418 3 is_stmt 1 view .LVU462
 418:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1616              		.loc 1 418 16 is_stmt 0 view .LVU463
 1617 006a 0323     		movs	r3, #3
 1618 006c 0193     		str	r3, [sp, #4]
 419:Core/Src/main.c ****   {
 1619              		.loc 1 419 3 is_stmt 1 view .LVU464
 419:Core/Src/main.c ****   {
 1620              		.loc 1 419 7 is_stmt 0 view .LVU465
 1621 006e 6946     		mov	r1, sp
 1622 0070 0C48     		ldr	r0, .L93
 1623 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1624              	.LVL99:
 419:Core/Src/main.c ****   {
 1625              		.loc 1 419 6 view .LVU466
 1626 0076 88B9     		cbnz	r0, .L91
 426:Core/Src/main.c ****   sConfig.Rank = 4;
 1627              		.loc 1 426 3 is_stmt 1 view .LVU467
 426:Core/Src/main.c ****   sConfig.Rank = 4;
 1628              		.loc 1 426 19 is_stmt 0 view .LVU468
 1629 0078 0823     		movs	r3, #8
 1630 007a 0093     		str	r3, [sp]
 427:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1631              		.loc 1 427 3 is_stmt 1 view .LVU469
 427:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1632              		.loc 1 427 16 is_stmt 0 view .LVU470
 1633 007c 0423     		movs	r3, #4
 1634 007e 0193     		str	r3, [sp, #4]
 428:Core/Src/main.c ****   {
 1635              		.loc 1 428 3 is_stmt 1 view .LVU471
 428:Core/Src/main.c ****   {
 1636              		.loc 1 428 7 is_stmt 0 view .LVU472
 1637 0080 6946     		mov	r1, sp
 1638 0082 0848     		ldr	r0, .L93
 1639 0084 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1640              	.LVL100:
 428:Core/Src/main.c ****   {
 1641              		.loc 1 428 6 view .LVU473
 1642 0088 50B9     		cbnz	r0, .L92
 436:Core/Src/main.c **** 
ARM GAS  /tmp/ccN6wIPj.s 			page 70


 1643              		.loc 1 436 1 view .LVU474
 1644 008a 05B0     		add	sp, sp, #20
 1645              		.cfi_remember_state
 1646              		.cfi_def_cfa_offset 4
 1647              		@ sp needed
 1648 008c 5DF804FB 		ldr	pc, [sp], #4
 1649              	.L88:
 1650              		.cfi_restore_state
 393:Core/Src/main.c ****   }
 1651              		.loc 1 393 5 is_stmt 1 view .LVU475
 1652 0090 FFF7FEFF 		bl	Error_Handler
 1653              	.LVL101:
 1654              	.L89:
 403:Core/Src/main.c ****   }
 1655              		.loc 1 403 5 view .LVU476
 1656 0094 FFF7FEFF 		bl	Error_Handler
 1657              	.LVL102:
 1658              	.L90:
 412:Core/Src/main.c ****   }
 1659              		.loc 1 412 5 view .LVU477
 1660 0098 FFF7FEFF 		bl	Error_Handler
 1661              	.LVL103:
 1662              	.L91:
 421:Core/Src/main.c ****   }
 1663              		.loc 1 421 5 view .LVU478
 1664 009c FFF7FEFF 		bl	Error_Handler
 1665              	.LVL104:
 1666              	.L92:
 430:Core/Src/main.c ****   }
 1667              		.loc 1 430 5 view .LVU479
 1668 00a0 FFF7FEFF 		bl	Error_Handler
 1669              	.LVL105:
 1670              	.L94:
 1671              		.align	2
 1672              	.L93:
 1673 00a4 00000000 		.word	.LANCHOR7
 1674 00a8 00200140 		.word	1073815552
 1675 00ac 0100000F 		.word	251658241
 1676              		.cfi_endproc
 1677              	.LFE246:
 1679              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1680              		.align	1
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1684              		.fpu fpv4-sp-d16
 1686              	MX_I2C1_Init:
 1687              	.LFB247:
 444:Core/Src/main.c **** 
 1688              		.loc 1 444 1 view -0
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 0
 1691              		@ frame_needed = 0, uses_anonymous_args = 0
 1692 0000 08B5     		push	{r3, lr}
 1693              		.cfi_def_cfa_offset 8
 1694              		.cfi_offset 3, -8
 1695              		.cfi_offset 14, -4
ARM GAS  /tmp/ccN6wIPj.s 			page 71


 453:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1696              		.loc 1 453 3 view .LVU481
 453:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 1697              		.loc 1 453 18 is_stmt 0 view .LVU482
 1698 0002 0A48     		ldr	r0, .L99
 1699 0004 0A4B     		ldr	r3, .L99+4
 1700 0006 0360     		str	r3, [r0]
 454:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1701              		.loc 1 454 3 is_stmt 1 view .LVU483
 454:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1702              		.loc 1 454 25 is_stmt 0 view .LVU484
 1703 0008 0A4B     		ldr	r3, .L99+8
 1704 000a 4360     		str	r3, [r0, #4]
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1705              		.loc 1 455 3 is_stmt 1 view .LVU485
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1706              		.loc 1 455 24 is_stmt 0 view .LVU486
 1707 000c 0023     		movs	r3, #0
 1708 000e 8360     		str	r3, [r0, #8]
 456:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1709              		.loc 1 456 3 is_stmt 1 view .LVU487
 456:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1710              		.loc 1 456 26 is_stmt 0 view .LVU488
 1711 0010 C360     		str	r3, [r0, #12]
 457:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1712              		.loc 1 457 3 is_stmt 1 view .LVU489
 457:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1713              		.loc 1 457 29 is_stmt 0 view .LVU490
 1714 0012 4FF48042 		mov	r2, #16384
 1715 0016 0261     		str	r2, [r0, #16]
 458:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1716              		.loc 1 458 3 is_stmt 1 view .LVU491
 458:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1717              		.loc 1 458 30 is_stmt 0 view .LVU492
 1718 0018 4361     		str	r3, [r0, #20]
 459:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1719              		.loc 1 459 3 is_stmt 1 view .LVU493
 459:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1720              		.loc 1 459 26 is_stmt 0 view .LVU494
 1721 001a 8361     		str	r3, [r0, #24]
 460:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1722              		.loc 1 460 3 is_stmt 1 view .LVU495
 460:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1723              		.loc 1 460 30 is_stmt 0 view .LVU496
 1724 001c C361     		str	r3, [r0, #28]
 461:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1725              		.loc 1 461 3 is_stmt 1 view .LVU497
 461:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1726              		.loc 1 461 28 is_stmt 0 view .LVU498
 1727 001e 0362     		str	r3, [r0, #32]
 462:Core/Src/main.c ****   {
 1728              		.loc 1 462 3 is_stmt 1 view .LVU499
 462:Core/Src/main.c ****   {
 1729              		.loc 1 462 7 is_stmt 0 view .LVU500
 1730 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1731              	.LVL106:
 462:Core/Src/main.c ****   {
ARM GAS  /tmp/ccN6wIPj.s 			page 72


 1732              		.loc 1 462 6 view .LVU501
 1733 0024 00B9     		cbnz	r0, .L98
 470:Core/Src/main.c **** 
 1734              		.loc 1 470 1 view .LVU502
 1735 0026 08BD     		pop	{r3, pc}
 1736              	.L98:
 464:Core/Src/main.c ****   }
 1737              		.loc 1 464 5 is_stmt 1 view .LVU503
 1738 0028 FFF7FEFF 		bl	Error_Handler
 1739              	.LVL107:
 1740              	.L100:
 1741              		.align	2
 1742              	.L99:
 1743 002c 00000000 		.word	.LANCHOR5
 1744 0030 00540040 		.word	1073763328
 1745 0034 A0860100 		.word	100000
 1746              		.cfi_endproc
 1747              	.LFE247:
 1749              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1750              		.align	1
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1754              		.fpu fpv4-sp-d16
 1756              	MX_USART2_UART_Init:
 1757              	.LFB249:
 512:Core/Src/main.c **** 
 1758              		.loc 1 512 1 view -0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 1762 0000 08B5     		push	{r3, lr}
 1763              		.cfi_def_cfa_offset 8
 1764              		.cfi_offset 3, -8
 1765              		.cfi_offset 14, -4
 521:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1766              		.loc 1 521 3 view .LVU505
 521:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1767              		.loc 1 521 19 is_stmt 0 view .LVU506
 1768 0002 0A48     		ldr	r0, .L105
 1769 0004 0A4B     		ldr	r3, .L105+4
 1770 0006 0360     		str	r3, [r0]
 522:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1771              		.loc 1 522 3 is_stmt 1 view .LVU507
 522:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1772              		.loc 1 522 24 is_stmt 0 view .LVU508
 1773 0008 4FF4E133 		mov	r3, #115200
 1774 000c 4360     		str	r3, [r0, #4]
 523:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1775              		.loc 1 523 3 is_stmt 1 view .LVU509
 523:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1776              		.loc 1 523 26 is_stmt 0 view .LVU510
 1777 000e 0023     		movs	r3, #0
 1778 0010 8360     		str	r3, [r0, #8]
 524:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1779              		.loc 1 524 3 is_stmt 1 view .LVU511
 524:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccN6wIPj.s 			page 73


 1780              		.loc 1 524 24 is_stmt 0 view .LVU512
 1781 0012 C360     		str	r3, [r0, #12]
 525:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1782              		.loc 1 525 3 is_stmt 1 view .LVU513
 525:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1783              		.loc 1 525 22 is_stmt 0 view .LVU514
 1784 0014 0361     		str	r3, [r0, #16]
 526:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1785              		.loc 1 526 3 is_stmt 1 view .LVU515
 526:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1786              		.loc 1 526 20 is_stmt 0 view .LVU516
 1787 0016 0C22     		movs	r2, #12
 1788 0018 4261     		str	r2, [r0, #20]
 527:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1789              		.loc 1 527 3 is_stmt 1 view .LVU517
 527:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1790              		.loc 1 527 25 is_stmt 0 view .LVU518
 1791 001a 8361     		str	r3, [r0, #24]
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1792              		.loc 1 528 3 is_stmt 1 view .LVU519
 528:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1793              		.loc 1 528 28 is_stmt 0 view .LVU520
 1794 001c C361     		str	r3, [r0, #28]
 529:Core/Src/main.c ****   {
 1795              		.loc 1 529 3 is_stmt 1 view .LVU521
 529:Core/Src/main.c ****   {
 1796              		.loc 1 529 7 is_stmt 0 view .LVU522
 1797 001e FFF7FEFF 		bl	HAL_UART_Init
 1798              	.LVL108:
 529:Core/Src/main.c ****   {
 1799              		.loc 1 529 6 view .LVU523
 1800 0022 00B9     		cbnz	r0, .L104
 537:Core/Src/main.c **** 
 1801              		.loc 1 537 1 view .LVU524
 1802 0024 08BD     		pop	{r3, pc}
 1803              	.L104:
 531:Core/Src/main.c ****   }
 1804              		.loc 1 531 5 is_stmt 1 view .LVU525
 1805 0026 FFF7FEFF 		bl	Error_Handler
 1806              	.LVL109:
 1807              	.L106:
 1808 002a 00BF     		.align	2
 1809              	.L105:
 1810 002c 00000000 		.word	.LANCHOR12
 1811 0030 00440040 		.word	1073759232
 1812              		.cfi_endproc
 1813              	.LFE249:
 1815              		.section	.text.MX_I2C2_Init,"ax",%progbits
 1816              		.align	1
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu fpv4-sp-d16
 1822              	MX_I2C2_Init:
 1823              	.LFB248:
 478:Core/Src/main.c **** 
 1824              		.loc 1 478 1 view -0
ARM GAS  /tmp/ccN6wIPj.s 			page 74


 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828 0000 08B5     		push	{r3, lr}
 1829              		.cfi_def_cfa_offset 8
 1830              		.cfi_offset 3, -8
 1831              		.cfi_offset 14, -4
 487:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1832              		.loc 1 487 3 view .LVU527
 487:Core/Src/main.c ****   hi2c2.Init.ClockSpeed = 100000;
 1833              		.loc 1 487 18 is_stmt 0 view .LVU528
 1834 0002 0A48     		ldr	r0, .L111
 1835 0004 0A4B     		ldr	r3, .L111+4
 1836 0006 0360     		str	r3, [r0]
 488:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1837              		.loc 1 488 3 is_stmt 1 view .LVU529
 488:Core/Src/main.c ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 1838              		.loc 1 488 25 is_stmt 0 view .LVU530
 1839 0008 0A4B     		ldr	r3, .L111+8
 1840 000a 4360     		str	r3, [r0, #4]
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1841              		.loc 1 489 3 is_stmt 1 view .LVU531
 489:Core/Src/main.c ****   hi2c2.Init.OwnAddress1 = 0;
 1842              		.loc 1 489 24 is_stmt 0 view .LVU532
 1843 000c 0023     		movs	r3, #0
 1844 000e 8360     		str	r3, [r0, #8]
 490:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1845              		.loc 1 490 3 is_stmt 1 view .LVU533
 490:Core/Src/main.c ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1846              		.loc 1 490 26 is_stmt 0 view .LVU534
 1847 0010 C360     		str	r3, [r0, #12]
 491:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1848              		.loc 1 491 3 is_stmt 1 view .LVU535
 491:Core/Src/main.c ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1849              		.loc 1 491 29 is_stmt 0 view .LVU536
 1850 0012 4FF48042 		mov	r2, #16384
 1851 0016 0261     		str	r2, [r0, #16]
 492:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1852              		.loc 1 492 3 is_stmt 1 view .LVU537
 492:Core/Src/main.c ****   hi2c2.Init.OwnAddress2 = 0;
 1853              		.loc 1 492 30 is_stmt 0 view .LVU538
 1854 0018 4361     		str	r3, [r0, #20]
 493:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1855              		.loc 1 493 3 is_stmt 1 view .LVU539
 493:Core/Src/main.c ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1856              		.loc 1 493 26 is_stmt 0 view .LVU540
 1857 001a 8361     		str	r3, [r0, #24]
 494:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1858              		.loc 1 494 3 is_stmt 1 view .LVU541
 494:Core/Src/main.c ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1859              		.loc 1 494 30 is_stmt 0 view .LVU542
 1860 001c C361     		str	r3, [r0, #28]
 495:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1861              		.loc 1 495 3 is_stmt 1 view .LVU543
 495:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 1862              		.loc 1 495 28 is_stmt 0 view .LVU544
 1863 001e 0362     		str	r3, [r0, #32]
ARM GAS  /tmp/ccN6wIPj.s 			page 75


 496:Core/Src/main.c ****   {
 1864              		.loc 1 496 3 is_stmt 1 view .LVU545
 496:Core/Src/main.c ****   {
 1865              		.loc 1 496 7 is_stmt 0 view .LVU546
 1866 0020 FFF7FEFF 		bl	HAL_I2C_Init
 1867              	.LVL110:
 496:Core/Src/main.c ****   {
 1868              		.loc 1 496 6 view .LVU547
 1869 0024 00B9     		cbnz	r0, .L110
 504:Core/Src/main.c **** 
 1870              		.loc 1 504 1 view .LVU548
 1871 0026 08BD     		pop	{r3, pc}
 1872              	.L110:
 498:Core/Src/main.c ****   }
 1873              		.loc 1 498 5 is_stmt 1 view .LVU549
 1874 0028 FFF7FEFF 		bl	Error_Handler
 1875              	.LVL111:
 1876              	.L112:
 1877              		.align	2
 1878              	.L111:
 1879 002c 00000000 		.word	.LANCHOR13
 1880 0030 00580040 		.word	1073764352
 1881 0034 A0860100 		.word	100000
 1882              		.cfi_endproc
 1883              	.LFE248:
 1885              		.section	.text.SystemClock_Config,"ax",%progbits
 1886              		.align	1
 1887              		.global	SystemClock_Config
 1888              		.syntax unified
 1889              		.thumb
 1890              		.thumb_func
 1891              		.fpu fpv4-sp-d16
 1893              	SystemClock_Config:
 1894              	.LFB245:
 316:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1895              		.loc 1 316 1 view -0
 1896              		.cfi_startproc
 1897              		@ args = 0, pretend = 0, frame = 80
 1898              		@ frame_needed = 0, uses_anonymous_args = 0
 1899 0000 00B5     		push	{lr}
 1900              		.cfi_def_cfa_offset 4
 1901              		.cfi_offset 14, -4
 1902 0002 95B0     		sub	sp, sp, #84
 1903              		.cfi_def_cfa_offset 88
 317:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1904              		.loc 1 317 3 view .LVU551
 317:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1905              		.loc 1 317 22 is_stmt 0 view .LVU552
 1906 0004 3422     		movs	r2, #52
 1907 0006 0021     		movs	r1, #0
 1908 0008 07A8     		add	r0, sp, #28
 1909 000a FFF7FEFF 		bl	memset
 1910              	.LVL112:
 318:Core/Src/main.c **** 
 1911              		.loc 1 318 3 is_stmt 1 view .LVU553
 318:Core/Src/main.c **** 
 1912              		.loc 1 318 22 is_stmt 0 view .LVU554
ARM GAS  /tmp/ccN6wIPj.s 			page 76


 1913 000e 0023     		movs	r3, #0
 1914 0010 0293     		str	r3, [sp, #8]
 1915 0012 0393     		str	r3, [sp, #12]
 1916 0014 0493     		str	r3, [sp, #16]
 1917 0016 0593     		str	r3, [sp, #20]
 1918 0018 0693     		str	r3, [sp, #24]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1919              		.loc 1 322 3 is_stmt 1 view .LVU555
 1920              	.LBB12:
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1921              		.loc 1 322 3 view .LVU556
 1922 001a 0093     		str	r3, [sp]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1923              		.loc 1 322 3 view .LVU557
 1924 001c 1F4A     		ldr	r2, .L119
 1925 001e 116C     		ldr	r1, [r2, #64]
 1926 0020 41F08051 		orr	r1, r1, #268435456
 1927 0024 1164     		str	r1, [r2, #64]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1928              		.loc 1 322 3 view .LVU558
 1929 0026 126C     		ldr	r2, [r2, #64]
 1930 0028 02F08052 		and	r2, r2, #268435456
 1931 002c 0092     		str	r2, [sp]
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1932              		.loc 1 322 3 view .LVU559
 1933 002e 009A     		ldr	r2, [sp]
 1934              	.LBE12:
 322:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1935              		.loc 1 322 3 view .LVU560
 323:Core/Src/main.c **** 
 1936              		.loc 1 323 3 view .LVU561
 1937              	.LBB13:
 323:Core/Src/main.c **** 
 1938              		.loc 1 323 3 view .LVU562
 1939 0030 0193     		str	r3, [sp, #4]
 323:Core/Src/main.c **** 
 1940              		.loc 1 323 3 view .LVU563
 1941 0032 1B49     		ldr	r1, .L119+4
 1942 0034 0A68     		ldr	r2, [r1]
 1943 0036 22F44042 		bic	r2, r2, #49152
 1944 003a 42F48042 		orr	r2, r2, #16384
 1945 003e 0A60     		str	r2, [r1]
 323:Core/Src/main.c **** 
 1946              		.loc 1 323 3 view .LVU564
 1947 0040 0A68     		ldr	r2, [r1]
 1948 0042 02F44042 		and	r2, r2, #49152
 1949 0046 0192     		str	r2, [sp, #4]
 323:Core/Src/main.c **** 
 1950              		.loc 1 323 3 view .LVU565
 1951 0048 019A     		ldr	r2, [sp, #4]
 1952              	.LBE13:
 323:Core/Src/main.c **** 
 1953              		.loc 1 323 3 view .LVU566
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1954              		.loc 1 328 3 view .LVU567
 328:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1955              		.loc 1 328 36 is_stmt 0 view .LVU568
ARM GAS  /tmp/ccN6wIPj.s 			page 77


 1956 004a 0222     		movs	r2, #2
 1957 004c 0792     		str	r2, [sp, #28]
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1958              		.loc 1 329 3 is_stmt 1 view .LVU569
 329:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1959              		.loc 1 329 30 is_stmt 0 view .LVU570
 1960 004e 0121     		movs	r1, #1
 1961 0050 0A91     		str	r1, [sp, #40]
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1962              		.loc 1 330 3 is_stmt 1 view .LVU571
 330:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1963              		.loc 1 330 41 is_stmt 0 view .LVU572
 1964 0052 1021     		movs	r1, #16
 1965 0054 0B91     		str	r1, [sp, #44]
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1966              		.loc 1 331 3 is_stmt 1 view .LVU573
 331:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1967              		.loc 1 331 34 is_stmt 0 view .LVU574
 1968 0056 0D92     		str	r2, [sp, #52]
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1969              		.loc 1 332 3 is_stmt 1 view .LVU575
 332:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 1970              		.loc 1 332 35 is_stmt 0 view .LVU576
 1971 0058 0E93     		str	r3, [sp, #56]
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1972              		.loc 1 333 3 is_stmt 1 view .LVU577
 333:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 1973              		.loc 1 333 30 is_stmt 0 view .LVU578
 1974 005a 0F91     		str	r1, [sp, #60]
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1975              		.loc 1 334 3 is_stmt 1 view .LVU579
 334:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1976              		.loc 1 334 30 is_stmt 0 view .LVU580
 1977 005c 4FF4A873 		mov	r3, #336
 1978 0060 1093     		str	r3, [sp, #64]
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1979              		.loc 1 335 3 is_stmt 1 view .LVU581
 335:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1980              		.loc 1 335 30 is_stmt 0 view .LVU582
 1981 0062 0423     		movs	r3, #4
 1982 0064 1193     		str	r3, [sp, #68]
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1983              		.loc 1 336 3 is_stmt 1 view .LVU583
 336:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1984              		.loc 1 336 30 is_stmt 0 view .LVU584
 1985 0066 1292     		str	r2, [sp, #72]
 337:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1986              		.loc 1 337 3 is_stmt 1 view .LVU585
 337:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1987              		.loc 1 337 30 is_stmt 0 view .LVU586
 1988 0068 1392     		str	r2, [sp, #76]
 338:Core/Src/main.c ****   {
 1989              		.loc 1 338 3 is_stmt 1 view .LVU587
 338:Core/Src/main.c ****   {
 1990              		.loc 1 338 7 is_stmt 0 view .LVU588
 1991 006a 07A8     		add	r0, sp, #28
 1992 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccN6wIPj.s 			page 78


 1993              	.LVL113:
 338:Core/Src/main.c ****   {
 1994              		.loc 1 338 6 view .LVU589
 1995 0070 80B9     		cbnz	r0, .L117
 345:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1996              		.loc 1 345 3 is_stmt 1 view .LVU590
 345:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1997              		.loc 1 345 31 is_stmt 0 view .LVU591
 1998 0072 0F23     		movs	r3, #15
 1999 0074 0293     		str	r3, [sp, #8]
 347:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2000              		.loc 1 347 3 is_stmt 1 view .LVU592
 347:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2001              		.loc 1 347 34 is_stmt 0 view .LVU593
 2002 0076 0221     		movs	r1, #2
 2003 0078 0391     		str	r1, [sp, #12]
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2004              		.loc 1 348 3 is_stmt 1 view .LVU594
 348:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 2005              		.loc 1 348 35 is_stmt 0 view .LVU595
 2006 007a 0023     		movs	r3, #0
 2007 007c 0493     		str	r3, [sp, #16]
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2008              		.loc 1 349 3 is_stmt 1 view .LVU596
 349:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 2009              		.loc 1 349 36 is_stmt 0 view .LVU597
 2010 007e 4FF48052 		mov	r2, #4096
 2011 0082 0592     		str	r2, [sp, #20]
 350:Core/Src/main.c **** 
 2012              		.loc 1 350 3 is_stmt 1 view .LVU598
 350:Core/Src/main.c **** 
 2013              		.loc 1 350 36 is_stmt 0 view .LVU599
 2014 0084 0693     		str	r3, [sp, #24]
 352:Core/Src/main.c ****   {
 2015              		.loc 1 352 3 is_stmt 1 view .LVU600
 352:Core/Src/main.c ****   {
 2016              		.loc 1 352 7 is_stmt 0 view .LVU601
 2017 0086 02A8     		add	r0, sp, #8
 2018 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2019              	.LVL114:
 352:Core/Src/main.c ****   {
 2020              		.loc 1 352 6 view .LVU602
 2021 008c 20B9     		cbnz	r0, .L118
 356:Core/Src/main.c **** 
 2022              		.loc 1 356 1 view .LVU603
 2023 008e 15B0     		add	sp, sp, #84
 2024              		.cfi_remember_state
 2025              		.cfi_def_cfa_offset 4
 2026              		@ sp needed
 2027 0090 5DF804FB 		ldr	pc, [sp], #4
 2028              	.L117:
 2029              		.cfi_restore_state
 340:Core/Src/main.c ****   }
 2030              		.loc 1 340 5 is_stmt 1 view .LVU604
 2031 0094 FFF7FEFF 		bl	Error_Handler
 2032              	.LVL115:
 2033              	.L118:
ARM GAS  /tmp/ccN6wIPj.s 			page 79


 354:Core/Src/main.c ****   }
 2034              		.loc 1 354 5 view .LVU605
 2035 0098 FFF7FEFF 		bl	Error_Handler
 2036              	.LVL116:
 2037              	.L120:
 2038              		.align	2
 2039              	.L119:
 2040 009c 00380240 		.word	1073887232
 2041 00a0 00700040 		.word	1073770496
 2042              		.cfi_endproc
 2043              	.LFE245:
 2045              		.section	.text.main,"ax",%progbits
 2046              		.align	1
 2047              		.global	main
 2048              		.syntax unified
 2049              		.thumb
 2050              		.thumb_func
 2051              		.fpu fpv4-sp-d16
 2053              	main:
 2054              	.LFB244:
 196:Core/Src/main.c **** 
 2055              		.loc 1 196 1 view -0
 2056              		.cfi_startproc
 2057              		@ Volatile: function does not return.
 2058              		@ args = 0, pretend = 0, frame = 256
 2059              		@ frame_needed = 0, uses_anonymous_args = 0
 2060 0000 00B5     		push	{lr}
 2061              		.cfi_def_cfa_offset 4
 2062              		.cfi_offset 14, -4
 2063 0002 C1B0     		sub	sp, sp, #260
 2064              		.cfi_def_cfa_offset 264
 205:Core/Src/main.c **** 
 2065              		.loc 1 205 3 view .LVU607
 2066 0004 FFF7FEFF 		bl	HAL_Init
 2067              	.LVL117:
 212:Core/Src/main.c **** 
 2068              		.loc 1 212 3 view .LVU608
 2069 0008 FFF7FEFF 		bl	SystemClock_Config
 2070              	.LVL118:
 219:Core/Src/main.c ****   MX_ADC1_Init();
 2071              		.loc 1 219 3 view .LVU609
 2072 000c FFF7FEFF 		bl	MX_GPIO_Init
 2073              	.LVL119:
 220:Core/Src/main.c ****   MX_I2C1_Init();
 2074              		.loc 1 220 3 view .LVU610
 2075 0010 FFF7FEFF 		bl	MX_ADC1_Init
 2076              	.LVL120:
 221:Core/Src/main.c ****   MX_USART2_UART_Init();
 2077              		.loc 1 221 3 view .LVU611
 2078 0014 FFF7FEFF 		bl	MX_I2C1_Init
 2079              	.LVL121:
 222:Core/Src/main.c ****   MX_I2C2_Init();
 2080              		.loc 1 222 3 view .LVU612
 2081 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 2082              	.LVL122:
 223:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 2083              		.loc 1 223 3 view .LVU613
ARM GAS  /tmp/ccN6wIPj.s 			page 80


 2084 001c FFF7FEFF 		bl	MX_I2C2_Init
 2085              	.LVL123:
 230:Core/Src/main.c ****   StateMutexHandle = osMutexCreate(osMutex(StateMutex));
 2086              		.loc 1 230 3 view .LVU614
 2087 0020 0025     		movs	r5, #0
 2088 0022 3E95     		str	r5, [sp, #248]
 2089 0024 3F95     		str	r5, [sp, #252]
 231:Core/Src/main.c **** 
 2090              		.loc 1 231 3 view .LVU615
 231:Core/Src/main.c **** 
 2091              		.loc 1 231 22 is_stmt 0 view .LVU616
 2092 0026 3EA8     		add	r0, sp, #248
 2093 0028 FFF7FEFF 		bl	osMutexCreate
 2094              	.LVL124:
 231:Core/Src/main.c **** 
 2095              		.loc 1 231 20 view .LVU617
 2096 002c 534B     		ldr	r3, .L124
 2097 002e 1860     		str	r0, [r3]
 247:Core/Src/main.c ****   MiniBotInputQueueHandle = osMessageCreate(osMessageQ(MiniBotInputQueue), NULL);
 2098              		.loc 1 247 3 is_stmt 1 view .LVU618
 2099 0030 534C     		ldr	r4, .L124+4
 2100 0032 0DF1E80C 		add	ip, sp, #232
 2101 0036 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2102 003a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 248:Core/Src/main.c **** 
 2103              		.loc 1 248 3 view .LVU619
 248:Core/Src/main.c **** 
 2104              		.loc 1 248 29 is_stmt 0 view .LVU620
 2105 003e 2946     		mov	r1, r5
 2106 0040 6046     		mov	r0, ip
 2107 0042 FFF7FEFF 		bl	osMessageCreate
 2108              	.LVL125:
 248:Core/Src/main.c **** 
 2109              		.loc 1 248 27 view .LVU621
 2110 0046 4F4B     		ldr	r3, .L124+8
 2111 0048 1860     		str	r0, [r3]
 251:Core/Src/main.c ****   MotorControlQueueHandle = osMessageCreate(osMessageQ(MotorControlQueue), NULL);
 2112              		.loc 1 251 3 is_stmt 1 view .LVU622
 2113 004a 0DF1D80C 		add	ip, sp, #216
 2114 004e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2115 0052 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 252:Core/Src/main.c **** 
 2116              		.loc 1 252 3 view .LVU623
 252:Core/Src/main.c **** 
 2117              		.loc 1 252 29 is_stmt 0 view .LVU624
 2118 0056 2946     		mov	r1, r5
 2119 0058 6046     		mov	r0, ip
 2120 005a FFF7FEFF 		bl	osMessageCreate
 2121              	.LVL126:
 252:Core/Src/main.c **** 
 2122              		.loc 1 252 27 view .LVU625
 2123 005e 4A4B     		ldr	r3, .L124+12
 2124 0060 1860     		str	r0, [r3]
 255:Core/Src/main.c ****   LCDPrintQueueHandle = osMessageCreate(osMessageQ(LCDPrintQueue), NULL);
 2125              		.loc 1 255 3 is_stmt 1 view .LVU626
 2126 0062 0DF1C80C 		add	ip, sp, #200
 2127 0066 04F11003 		add	r3, r4, #16
ARM GAS  /tmp/ccN6wIPj.s 			page 81


 2128 006a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 2129 006c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 256:Core/Src/main.c **** 
 2130              		.loc 1 256 3 view .LVU627
 256:Core/Src/main.c **** 
 2131              		.loc 1 256 25 is_stmt 0 view .LVU628
 2132 0070 2946     		mov	r1, r5
 2133 0072 6046     		mov	r0, ip
 2134 0074 FFF7FEFF 		bl	osMessageCreate
 2135              	.LVL127:
 256:Core/Src/main.c **** 
 2136              		.loc 1 256 23 view .LVU629
 2137 0078 444B     		ldr	r3, .L124+16
 2138 007a 1860     		str	r0, [r3]
 264:Core/Src/main.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 2139              		.loc 1 264 3 is_stmt 1 view .LVU630
 2140 007c 0DF1AC0C 		add	ip, sp, #172
 2141 0080 04F1200E 		add	lr, r4, #32
 2142 0084 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2143 0088 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2144 008c 9EE80700 		ldm	lr, {r0, r1, r2}
 2145 0090 8CE80700 		stm	ip, {r0, r1, r2}
 265:Core/Src/main.c **** 
 2146              		.loc 1 265 3 view .LVU631
 265:Core/Src/main.c **** 
 2147              		.loc 1 265 23 is_stmt 0 view .LVU632
 2148 0094 2946     		mov	r1, r5
 2149 0096 2BA8     		add	r0, sp, #172
 2150 0098 FFF7FEFF 		bl	osThreadCreate
 2151              	.LVL128:
 265:Core/Src/main.c **** 
 2152              		.loc 1 265 21 view .LVU633
 2153 009c 3C4B     		ldr	r3, .L124+20
 2154 009e 1860     		str	r0, [r3]
 268:Core/Src/main.c ****   BlinkLEDTaskHandle = osThreadCreate(osThread(BlinkLEDTask), NULL);
 2155              		.loc 1 268 3 is_stmt 1 view .LVU634
 2156 00a0 0DF1900C 		add	ip, sp, #144
 2157 00a4 04F13C0E 		add	lr, r4, #60
 2158 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2159 00ac ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2160 00b0 9EE80700 		ldm	lr, {r0, r1, r2}
 2161 00b4 8CE80700 		stm	ip, {r0, r1, r2}
 269:Core/Src/main.c **** 
 2162              		.loc 1 269 3 view .LVU635
 269:Core/Src/main.c **** 
 2163              		.loc 1 269 24 is_stmt 0 view .LVU636
 2164 00b8 2946     		mov	r1, r5
 2165 00ba 24A8     		add	r0, sp, #144
 2166 00bc FFF7FEFF 		bl	osThreadCreate
 2167              	.LVL129:
 269:Core/Src/main.c **** 
 2168              		.loc 1 269 22 view .LVU637
 2169 00c0 344B     		ldr	r3, .L124+24
 2170 00c2 1860     		str	r0, [r3]
 272:Core/Src/main.c ****   MiniBotInputsHandle = osThreadCreate(osThread(MiniBotInputs), NULL);
 2171              		.loc 1 272 3 is_stmt 1 view .LVU638
 2172 00c4 0DF1740C 		add	ip, sp, #116
ARM GAS  /tmp/ccN6wIPj.s 			page 82


 2173 00c8 04F1580E 		add	lr, r4, #88
 2174 00cc BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2175 00d0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2176 00d4 9EE80700 		ldm	lr, {r0, r1, r2}
 2177 00d8 8CE80700 		stm	ip, {r0, r1, r2}
 273:Core/Src/main.c **** 
 2178              		.loc 1 273 3 view .LVU639
 273:Core/Src/main.c **** 
 2179              		.loc 1 273 25 is_stmt 0 view .LVU640
 2180 00dc 2946     		mov	r1, r5
 2181 00de 1DA8     		add	r0, sp, #116
 2182 00e0 FFF7FEFF 		bl	osThreadCreate
 2183              	.LVL130:
 273:Core/Src/main.c **** 
 2184              		.loc 1 273 23 view .LVU641
 2185 00e4 2C4B     		ldr	r3, .L124+28
 2186 00e6 1860     		str	r0, [r3]
 276:Core/Src/main.c ****   ApplicationFSMHandle = osThreadCreate(osThread(ApplicationFSM), NULL);
 2187              		.loc 1 276 3 is_stmt 1 view .LVU642
 2188 00e8 0DF1580C 		add	ip, sp, #88
 2189 00ec 04F1740E 		add	lr, r4, #116
 2190 00f0 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2191 00f4 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2192 00f8 9EE80700 		ldm	lr, {r0, r1, r2}
 2193 00fc 8CE80700 		stm	ip, {r0, r1, r2}
 277:Core/Src/main.c **** 
 2194              		.loc 1 277 3 view .LVU643
 277:Core/Src/main.c **** 
 2195              		.loc 1 277 26 is_stmt 0 view .LVU644
 2196 0100 2946     		mov	r1, r5
 2197 0102 16A8     		add	r0, sp, #88
 2198 0104 FFF7FEFF 		bl	osThreadCreate
 2199              	.LVL131:
 277:Core/Src/main.c **** 
 2200              		.loc 1 277 24 view .LVU645
 2201 0108 244B     		ldr	r3, .L124+32
 2202 010a 1860     		str	r0, [r3]
 280:Core/Src/main.c ****   EmergencyStopTaskHandle = osThreadCreate(osThread(EmergencyStopTask), NULL);
 2203              		.loc 1 280 3 is_stmt 1 view .LVU646
 2204 010c 0DF13C0C 		add	ip, sp, #60
 2205 0110 04F1900E 		add	lr, r4, #144
 2206 0114 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2207 0118 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2208 011c 9EE80700 		ldm	lr, {r0, r1, r2}
 2209 0120 8CE80700 		stm	ip, {r0, r1, r2}
 281:Core/Src/main.c **** 
 2210              		.loc 1 281 3 view .LVU647
 281:Core/Src/main.c **** 
 2211              		.loc 1 281 29 is_stmt 0 view .LVU648
 2212 0124 2946     		mov	r1, r5
 2213 0126 0FA8     		add	r0, sp, #60
 2214 0128 FFF7FEFF 		bl	osThreadCreate
 2215              	.LVL132:
 281:Core/Src/main.c **** 
 2216              		.loc 1 281 27 view .LVU649
 2217 012c 1C4B     		ldr	r3, .L124+36
 2218 012e 1860     		str	r0, [r3]
ARM GAS  /tmp/ccN6wIPj.s 			page 83


 284:Core/Src/main.c ****   MotorControlTaskHandle = osThreadCreate(osThread(MotorControlTask), NULL);
 2219              		.loc 1 284 3 is_stmt 1 view .LVU650
 2220 0130 0DF1200C 		add	ip, sp, #32
 2221 0134 04F1AC0E 		add	lr, r4, #172
 2222 0138 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2223 013c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2224 0140 9EE80700 		ldm	lr, {r0, r1, r2}
 2225 0144 8CE80700 		stm	ip, {r0, r1, r2}
 285:Core/Src/main.c **** 
 2226              		.loc 1 285 3 view .LVU651
 285:Core/Src/main.c **** 
 2227              		.loc 1 285 28 is_stmt 0 view .LVU652
 2228 0148 2946     		mov	r1, r5
 2229 014a 08A8     		add	r0, sp, #32
 2230 014c FFF7FEFF 		bl	osThreadCreate
 2231              	.LVL133:
 285:Core/Src/main.c **** 
 2232              		.loc 1 285 26 view .LVU653
 2233 0150 144B     		ldr	r3, .L124+40
 2234 0152 1860     		str	r0, [r3]
 288:Core/Src/main.c ****   LCDPrintTaskHandle = osThreadCreate(osThread(LCDPrintTask), NULL);
 2235              		.loc 1 288 3 is_stmt 1 view .LVU654
 2236 0154 0DF1040C 		add	ip, sp, #4
 2237 0158 C834     		adds	r4, r4, #200
 2238 015a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2239 015c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2240 0160 94E80700 		ldm	r4, {r0, r1, r2}
 2241 0164 8CE80700 		stm	ip, {r0, r1, r2}
 289:Core/Src/main.c **** 
 2242              		.loc 1 289 3 view .LVU655
 289:Core/Src/main.c **** 
 2243              		.loc 1 289 24 is_stmt 0 view .LVU656
 2244 0168 2946     		mov	r1, r5
 2245 016a 01A8     		add	r0, sp, #4
 2246 016c FFF7FEFF 		bl	osThreadCreate
 2247              	.LVL134:
 289:Core/Src/main.c **** 
 2248              		.loc 1 289 22 view .LVU657
 2249 0170 0D4B     		ldr	r3, .L124+44
 2250 0172 1860     		str	r0, [r3]
 296:Core/Src/main.c **** 
 2251              		.loc 1 296 3 is_stmt 1 view .LVU658
 2252 0174 FFF7FEFF 		bl	osKernelStart
 2253              	.LVL135:
 2254              	.L122:
 302:Core/Src/main.c ****   {
 2255              		.loc 1 302 3 discriminator 1 view .LVU659
 307:Core/Src/main.c ****   /* USER CODE END 3 */
 2256              		.loc 1 307 3 discriminator 1 view .LVU660
 302:Core/Src/main.c ****   {
 2257              		.loc 1 302 9 discriminator 1 view .LVU661
 2258 0178 FEE7     		b	.L122
 2259              	.L125:
 2260 017a 00BF     		.align	2
 2261              	.L124:
 2262 017c 00000000 		.word	.LANCHOR14
 2263 0180 00000000 		.word	.LANCHOR15
ARM GAS  /tmp/ccN6wIPj.s 			page 84


 2264 0184 00000000 		.word	.LANCHOR2
 2265 0188 00000000 		.word	.LANCHOR4
 2266 018c 00000000 		.word	.LANCHOR16
 2267 0190 00000000 		.word	.LANCHOR17
 2268 0194 00000000 		.word	.LANCHOR18
 2269 0198 00000000 		.word	.LANCHOR19
 2270 019c 00000000 		.word	.LANCHOR20
 2271 01a0 00000000 		.word	.LANCHOR21
 2272 01a4 00000000 		.word	.LANCHOR22
 2273 01a8 00000000 		.word	.LANCHOR23
 2274              		.cfi_endproc
 2275              	.LFE244:
 2277              		.global	StateMutexHandle
 2278              		.global	LCDPrintQueueHandle
 2279              		.global	MotorControlQueueHandle
 2280              		.global	MiniBotInputQueueHandle
 2281              		.global	LCDPrintTaskHandle
 2282              		.global	MotorControlTaskHandle
 2283              		.global	EmergencyStopTaskHandle
 2284              		.global	ApplicationFSMHandle
 2285              		.global	MiniBotInputsHandle
 2286              		.global	BlinkLEDTaskHandle
 2287              		.global	defaultTaskHandle
 2288              		.global	huart2
 2289              		.global	hi2c2
 2290              		.global	hi2c1
 2291              		.global	hadc1
 2292              		.global	state
 2293              		.global	MappedServoAngle
 2294              		.global	tempFailedToPostMessage
 2295              		.global	MotorControl_Qdata_Buf
 2296              		.global	Temp_Qdata_Buf
 2297              		.global	MiniBot_Qdata_Buf
 2298              		.global	PotRawValue
 2299              		.global	Qdata
 2300              		.section	.rodata
 2301              		.align	2
 2302              		.set	.LANCHOR15,. + 0
 2303              	.LC0:
 2304 0000 10000000 		.word	16
 2305 0004 34000000 		.word	52
 2306 0008 00000000 		.word	0
 2307 000c 00000000 		.word	0
 2308              	.LC1:
 2309 0010 10000000 		.word	16
 2310 0014 02000000 		.word	2
 2311 0018 00000000 		.word	0
 2312 001c 00000000 		.word	0
 2313              	.LC18:
 2314 0020 00000000 		.word	.LC2
 2315 0024 00000000 		.word	StartDefaultTask
 2316 0028 0000     		.short	0
 2317 002a 0000     		.space	2
 2318 002c 00000000 		.word	0
 2319 0030 80000000 		.word	128
 2320 0034 00000000 		.word	0
 2321 0038 00000000 		.word	0
ARM GAS  /tmp/ccN6wIPj.s 			page 85


 2322              	.LC19:
 2323 003c 0C000000 		.word	.LC4
 2324 0040 00000000 		.word	BlinkLEDTaskEntry
 2325 0044 0000     		.short	0
 2326 0046 0000     		.space	2
 2327 0048 00000000 		.word	0
 2328 004c 80000000 		.word	128
 2329 0050 00000000 		.word	0
 2330 0054 00000000 		.word	0
 2331              	.LC20:
 2332 0058 1C000000 		.word	.LC6
 2333 005c 00000000 		.word	MiniBotInputsEntry
 2334 0060 0000     		.short	0
 2335 0062 0000     		.space	2
 2336 0064 00000000 		.word	0
 2337 0068 00020000 		.word	512
 2338 006c 00000000 		.word	0
 2339 0070 00000000 		.word	0
 2340              	.LC21:
 2341 0074 2C000000 		.word	.LC8
 2342 0078 00000000 		.word	ApplicationFSMEntry
 2343 007c 0200     		.short	2
 2344 007e 0000     		.space	2
 2345 0080 00000000 		.word	0
 2346 0084 00020000 		.word	512
 2347 0088 00000000 		.word	0
 2348 008c 00000000 		.word	0
 2349              	.LC22:
 2350 0090 3C000000 		.word	.LC10
 2351 0094 00000000 		.word	EmergencyStopTaskEntry
 2352 0098 0000     		.short	0
 2353 009a 0000     		.space	2
 2354 009c 00000000 		.word	0
 2355 00a0 80000000 		.word	128
 2356 00a4 00000000 		.word	0
 2357 00a8 00000000 		.word	0
 2358              	.LC23:
 2359 00ac 50000000 		.word	.LC12
 2360 00b0 00000000 		.word	MotorControlTaskEntry
 2361 00b4 0000     		.short	0
 2362 00b6 0000     		.space	2
 2363 00b8 00000000 		.word	0
 2364 00bc 00020000 		.word	512
 2365 00c0 00000000 		.word	0
 2366 00c4 00000000 		.word	0
 2367              	.LC24:
 2368 00c8 64000000 		.word	.LC14
 2369 00cc 00000000 		.word	LCDPrintTaskEntry
 2370 00d0 0000     		.short	0
 2371 00d2 0000     		.space	2
 2372 00d4 00000000 		.word	0
 2373 00d8 80000000 		.word	128
 2374 00dc 00000000 		.word	0
 2375 00e0 00000000 		.word	0
 2376              		.section	.bss.ApplicationFSMHandle,"aw",%nobits
 2377              		.align	2
 2378              		.set	.LANCHOR20,. + 0
ARM GAS  /tmp/ccN6wIPj.s 			page 86


 2381              	ApplicationFSMHandle:
 2382 0000 00000000 		.space	4
 2383              		.section	.bss.BlinkLEDTaskHandle,"aw",%nobits
 2384              		.align	2
 2385              		.set	.LANCHOR18,. + 0
 2388              	BlinkLEDTaskHandle:
 2389 0000 00000000 		.space	4
 2390              		.section	.bss.EmergencyStopTaskHandle,"aw",%nobits
 2391              		.align	2
 2392              		.set	.LANCHOR21,. + 0
 2395              	EmergencyStopTaskHandle:
 2396 0000 00000000 		.space	4
 2397              		.section	.bss.LCDPrintQueueHandle,"aw",%nobits
 2398              		.align	2
 2399              		.set	.LANCHOR16,. + 0
 2402              	LCDPrintQueueHandle:
 2403 0000 00000000 		.space	4
 2404              		.section	.bss.LCDPrintTaskHandle,"aw",%nobits
 2405              		.align	2
 2406              		.set	.LANCHOR23,. + 0
 2409              	LCDPrintTaskHandle:
 2410 0000 00000000 		.space	4
 2411              		.section	.bss.MappedServoAngle,"aw",%nobits
 2412              		.align	2
 2413              		.set	.LANCHOR10,. + 0
 2416              	MappedServoAngle:
 2417 0000 00000000 		.space	8
 2417      00000000 
 2418              		.section	.bss.MiniBotInputQueueHandle,"aw",%nobits
 2419              		.align	2
 2420              		.set	.LANCHOR2,. + 0
 2423              	MiniBotInputQueueHandle:
 2424 0000 00000000 		.space	4
 2425              		.section	.bss.MiniBotInputsHandle,"aw",%nobits
 2426              		.align	2
 2427              		.set	.LANCHOR19,. + 0
 2430              	MiniBotInputsHandle:
 2431 0000 00000000 		.space	4
 2432              		.section	.bss.MiniBot_Qdata_Buf,"aw",%nobits
 2433              		.align	2
 2434              		.set	.LANCHOR1,. + 0
 2437              	MiniBot_Qdata_Buf:
 2438 0000 00000000 		.space	52
 2438      00000000 
 2438      00000000 
 2438      00000000 
 2438      00000000 
 2439              		.section	.bss.MotorControlQueueHandle,"aw",%nobits
 2440              		.align	2
 2441              		.set	.LANCHOR4,. + 0
 2444              	MotorControlQueueHandle:
 2445 0000 00000000 		.space	4
 2446              		.section	.bss.MotorControlTaskHandle,"aw",%nobits
 2447              		.align	2
 2448              		.set	.LANCHOR22,. + 0
 2451              	MotorControlTaskHandle:
 2452 0000 00000000 		.space	4
ARM GAS  /tmp/ccN6wIPj.s 			page 87


 2453              		.section	.bss.MotorControl_Qdata_Buf,"aw",%nobits
 2454              		.align	2
 2455              		.set	.LANCHOR11,. + 0
 2458              	MotorControl_Qdata_Buf:
 2459 0000 00000000 		.space	52
 2459      00000000 
 2459      00000000 
 2459      00000000 
 2459      00000000 
 2460              		.section	.bss.PotRawValue,"aw",%nobits
 2461              		.align	2
 2462              		.set	.LANCHOR8,. + 0
 2465              	PotRawValue:
 2466 0000 00000000 		.space	16
 2466      00000000 
 2466      00000000 
 2466      00000000 
 2467              		.section	.bss.Qdata,"aw",%nobits
 2468              		.align	2
 2469              		.set	.LANCHOR6,. + 0
 2472              	Qdata:
 2473 0000 00000000 		.space	52
 2473      00000000 
 2473      00000000 
 2473      00000000 
 2473      00000000 
 2474              		.section	.bss.StateMutexHandle,"aw",%nobits
 2475              		.align	2
 2476              		.set	.LANCHOR14,. + 0
 2479              	StateMutexHandle:
 2480 0000 00000000 		.space	4
 2481              		.section	.bss.Temp_Qdata_Buf,"aw",%nobits
 2482              		.align	2
 2483              		.set	.LANCHOR3,. + 0
 2486              	Temp_Qdata_Buf:
 2487 0000 00000000 		.space	52
 2487      00000000 
 2487      00000000 
 2487      00000000 
 2487      00000000 
 2488              		.section	.bss.defaultTaskHandle,"aw",%nobits
 2489              		.align	2
 2490              		.set	.LANCHOR17,. + 0
 2493              	defaultTaskHandle:
 2494 0000 00000000 		.space	4
 2495              		.section	.bss.hadc1,"aw",%nobits
 2496              		.align	2
 2497              		.set	.LANCHOR7,. + 0
 2500              	hadc1:
 2501 0000 00000000 		.space	72
 2501      00000000 
 2501      00000000 
 2501      00000000 
 2501      00000000 
 2502              		.section	.bss.hi2c1,"aw",%nobits
 2503              		.align	2
 2504              		.set	.LANCHOR5,. + 0
ARM GAS  /tmp/ccN6wIPj.s 			page 88


 2507              	hi2c1:
 2508 0000 00000000 		.space	84
 2508      00000000 
 2508      00000000 
 2508      00000000 
 2508      00000000 
 2509              		.section	.bss.hi2c2,"aw",%nobits
 2510              		.align	2
 2511              		.set	.LANCHOR13,. + 0
 2514              	hi2c2:
 2515 0000 00000000 		.space	84
 2515      00000000 
 2515      00000000 
 2515      00000000 
 2515      00000000 
 2516              		.section	.bss.huart2,"aw",%nobits
 2517              		.align	2
 2518              		.set	.LANCHOR12,. + 0
 2521              	huart2:
 2522 0000 00000000 		.space	72
 2522      00000000 
 2522      00000000 
 2522      00000000 
 2522      00000000 
 2523              		.section	.bss.state,"aw",%nobits
 2524              		.set	.LANCHOR0,. + 0
 2527              	state:
 2528 0000 00       		.space	1
 2529              		.section	.bss.tempFailedToPostMessage,"aw",%nobits
 2530              		.set	.LANCHOR9,. + 0
 2533              	tempFailedToPostMessage:
 2534 0000 00       		.space	1
 2535              		.text
 2536              	.Letext0:
 2537              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2538              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 2539              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2540              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2541              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2542              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2543              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2544              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2545              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 2546              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 2547              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 2548              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2549              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2550              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2551              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2552              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2553              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 2554              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 2555              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2556              		.file 22 "Core/Inc/I2C_LCD.h"
 2557              		.file 23 "Core/Inc/pca9685.h"
 2558              		.file 24 "<built-in>"
ARM GAS  /tmp/ccN6wIPj.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccN6wIPj.s:15     .rodata.str1.4:0000000000000000 $d
     /tmp/ccN6wIPj.s:40     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccN6wIPj.s:47     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccN6wIPj.s:231    .text.MX_GPIO_Init:00000000000000d8 $d
     /tmp/ccN6wIPj.s:239    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccN6wIPj.s:246    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccN6wIPj.s:277    .text.StartDefaultTask:0000000000000018 $d
     /tmp/ccN6wIPj.s:282    .text.BlinkLEDTaskEntry:0000000000000000 $t
     /tmp/ccN6wIPj.s:289    .text.BlinkLEDTaskEntry:0000000000000000 BlinkLEDTaskEntry
     /tmp/ccN6wIPj.s:324    .text.BlinkLEDTaskEntry:0000000000000020 $d
     /tmp/ccN6wIPj.s:329    .text.EmergencyStopTaskEntry:0000000000000000 $t
     /tmp/ccN6wIPj.s:336    .text.EmergencyStopTaskEntry:0000000000000000 EmergencyStopTaskEntry
     /tmp/ccN6wIPj.s:368    .text.EmergencyStopTaskEntry:0000000000000014 $d
     /tmp/ccN6wIPj.s:373    .text.ApplicationFSMEntry:0000000000000000 $t
     /tmp/ccN6wIPj.s:380    .text.ApplicationFSMEntry:0000000000000000 ApplicationFSMEntry
     /tmp/ccN6wIPj.s:519    .text.ApplicationFSMEntry:00000000000000b8 $d
     /tmp/ccN6wIPj.s:528    .rodata.LCDPrintTaskEntry.str1.4:0000000000000000 $d
     /tmp/ccN6wIPj.s:535    .text.LCDPrintTaskEntry:0000000000000000 $t
     /tmp/ccN6wIPj.s:542    .text.LCDPrintTaskEntry:0000000000000000 LCDPrintTaskEntry
     /tmp/ccN6wIPj.s:594    .text.LCDPrintTaskEntry:0000000000000034 $d
     /tmp/ccN6wIPj.s:600    .text.MiniBotInit:0000000000000000 $t
     /tmp/ccN6wIPj.s:607    .text.MiniBotInit:0000000000000000 MiniBotInit
     /tmp/ccN6wIPj.s:687    .text.MiniBotInit:0000000000000058 $d
     /tmp/ccN6wIPj.s:692    .text.ServoDriverInit:0000000000000000 $t
     /tmp/ccN6wIPj.s:699    .text.ServoDriverInit:0000000000000000 ServoDriverInit
     /tmp/ccN6wIPj.s:770    .text.ServoDriverInit:0000000000000060 $d
     /tmp/ccN6wIPj.s:775    .text.MegaBotInit:0000000000000000 $t
     /tmp/ccN6wIPj.s:782    .text.MegaBotInit:0000000000000000 MegaBotInit
     /tmp/ccN6wIPj.s:872    .text.QPotDataUpdate:0000000000000000 $t
     /tmp/ccN6wIPj.s:879    .text.QPotDataUpdate:0000000000000000 QPotDataUpdate
     /tmp/ccN6wIPj.s:961    .text.MiniBotInputsEntry:0000000000000000 $t
     /tmp/ccN6wIPj.s:968    .text.MiniBotInputsEntry:0000000000000000 MiniBotInputsEntry
     /tmp/ccN6wIPj.s:1144   .text.MiniBotInputsEntry:00000000000000c0 $d
     /tmp/ccN6wIPj.s:1155   .text.MAP:0000000000000000 $t
     /tmp/ccN6wIPj.s:1162   .text.MAP:0000000000000000 MAP
     /tmp/ccN6wIPj.s:1192   .text.MoveServo:0000000000000000 $t
     /tmp/ccN6wIPj.s:1199   .text.MoveServo:0000000000000000 MoveServo
     /tmp/ccN6wIPj.s:1344   .text.MoveServo:00000000000000c4 $d
     /tmp/ccN6wIPj.s:1349   .text.MotorControlTaskEntry:0000000000000000 $t
     /tmp/ccN6wIPj.s:1356   .text.MotorControlTaskEntry:0000000000000000 MotorControlTaskEntry
     /tmp/ccN6wIPj.s:1411   .text.MotorControlTaskEntry:0000000000000034 $d
     /tmp/ccN6wIPj.s:1417   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccN6wIPj.s:1424   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccN6wIPj.s:1457   .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccN6wIPj.s:1462   .text.Error_Handler:0000000000000000 $t
     /tmp/ccN6wIPj.s:1469   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccN6wIPj.s:1501   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccN6wIPj.s:1507   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccN6wIPj.s:1673   .text.MX_ADC1_Init:00000000000000a4 $d
     /tmp/ccN6wIPj.s:1680   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccN6wIPj.s:1686   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccN6wIPj.s:1743   .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccN6wIPj.s:1750   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccN6wIPj.s:1756   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccN6wIPj.s:1810   .text.MX_USART2_UART_Init:000000000000002c $d
ARM GAS  /tmp/ccN6wIPj.s 			page 90


     /tmp/ccN6wIPj.s:1816   .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccN6wIPj.s:1822   .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccN6wIPj.s:1879   .text.MX_I2C2_Init:000000000000002c $d
     /tmp/ccN6wIPj.s:1886   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccN6wIPj.s:1893   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccN6wIPj.s:2040   .text.SystemClock_Config:000000000000009c $d
     /tmp/ccN6wIPj.s:2046   .text.main:0000000000000000 $t
     /tmp/ccN6wIPj.s:2053   .text.main:0000000000000000 main
     /tmp/ccN6wIPj.s:2262   .text.main:000000000000017c $d
     /tmp/ccN6wIPj.s:2479   .bss.StateMutexHandle:0000000000000000 StateMutexHandle
     /tmp/ccN6wIPj.s:2402   .bss.LCDPrintQueueHandle:0000000000000000 LCDPrintQueueHandle
     /tmp/ccN6wIPj.s:2444   .bss.MotorControlQueueHandle:0000000000000000 MotorControlQueueHandle
     /tmp/ccN6wIPj.s:2423   .bss.MiniBotInputQueueHandle:0000000000000000 MiniBotInputQueueHandle
     /tmp/ccN6wIPj.s:2409   .bss.LCDPrintTaskHandle:0000000000000000 LCDPrintTaskHandle
     /tmp/ccN6wIPj.s:2451   .bss.MotorControlTaskHandle:0000000000000000 MotorControlTaskHandle
     /tmp/ccN6wIPj.s:2395   .bss.EmergencyStopTaskHandle:0000000000000000 EmergencyStopTaskHandle
     /tmp/ccN6wIPj.s:2381   .bss.ApplicationFSMHandle:0000000000000000 ApplicationFSMHandle
     /tmp/ccN6wIPj.s:2430   .bss.MiniBotInputsHandle:0000000000000000 MiniBotInputsHandle
     /tmp/ccN6wIPj.s:2388   .bss.BlinkLEDTaskHandle:0000000000000000 BlinkLEDTaskHandle
     /tmp/ccN6wIPj.s:2493   .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccN6wIPj.s:2521   .bss.huart2:0000000000000000 huart2
     /tmp/ccN6wIPj.s:2514   .bss.hi2c2:0000000000000000 hi2c2
     /tmp/ccN6wIPj.s:2507   .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccN6wIPj.s:2500   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccN6wIPj.s:2527   .bss.state:0000000000000000 state
     /tmp/ccN6wIPj.s:2416   .bss.MappedServoAngle:0000000000000000 MappedServoAngle
     /tmp/ccN6wIPj.s:2533   .bss.tempFailedToPostMessage:0000000000000000 tempFailedToPostMessage
     /tmp/ccN6wIPj.s:2458   .bss.MotorControl_Qdata_Buf:0000000000000000 MotorControl_Qdata_Buf
     /tmp/ccN6wIPj.s:2486   .bss.Temp_Qdata_Buf:0000000000000000 Temp_Qdata_Buf
     /tmp/ccN6wIPj.s:2437   .bss.MiniBot_Qdata_Buf:0000000000000000 MiniBot_Qdata_Buf
     /tmp/ccN6wIPj.s:2465   .bss.PotRawValue:0000000000000000 PotRawValue
     /tmp/ccN6wIPj.s:2472   .bss.Qdata:0000000000000000 Qdata
     /tmp/ccN6wIPj.s:2301   .rodata:0000000000000000 $d
     /tmp/ccN6wIPj.s:2377   .bss.ApplicationFSMHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2384   .bss.BlinkLEDTaskHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2391   .bss.EmergencyStopTaskHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2398   .bss.LCDPrintQueueHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2405   .bss.LCDPrintTaskHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2412   .bss.MappedServoAngle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2419   .bss.MiniBotInputQueueHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2426   .bss.MiniBotInputsHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2433   .bss.MiniBot_Qdata_Buf:0000000000000000 $d
     /tmp/ccN6wIPj.s:2440   .bss.MotorControlQueueHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2447   .bss.MotorControlTaskHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2454   .bss.MotorControl_Qdata_Buf:0000000000000000 $d
     /tmp/ccN6wIPj.s:2461   .bss.PotRawValue:0000000000000000 $d
     /tmp/ccN6wIPj.s:2468   .bss.Qdata:0000000000000000 $d
     /tmp/ccN6wIPj.s:2475   .bss.StateMutexHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2482   .bss.Temp_Qdata_Buf:0000000000000000 $d
     /tmp/ccN6wIPj.s:2489   .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccN6wIPj.s:2496   .bss.hadc1:0000000000000000 $d
     /tmp/ccN6wIPj.s:2503   .bss.hi2c1:0000000000000000 $d
     /tmp/ccN6wIPj.s:2510   .bss.hi2c2:0000000000000000 $d
     /tmp/ccN6wIPj.s:2517   .bss.huart2:0000000000000000 $d
     /tmp/ccN6wIPj.s:2528   .bss.state:0000000000000000 $d
     /tmp/ccN6wIPj.s:2534   .bss.tempFailedToPostMessage:0000000000000000 $d

ARM GAS  /tmp/ccN6wIPj.s 			page 91


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
osDelay
HAL_GPIO_ReadPin
xQueueReceive
xQueueGenericSend
I2C_LCD_Init
I2C_LCD_SetCursor
I2C_LCD_WriteString
PCA9685_Init
PCA9685_SetServoAngle
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_IncTick
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osMessageCreate
osThreadCreate
osKernelStart
